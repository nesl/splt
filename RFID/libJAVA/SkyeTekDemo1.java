/*
 * deuce.java
 *
 * Created on January 21, 2004, 4:05 PM
 */

package com.skyetek.demo;

import com.skyetek.comm.SkyeTekComm;
import com.skyetek.comm.SkyeTekCommImpl;
import com.skyetek.comm.SkyeTekSerialComm;
import com.skyetek.messaging.SkyeTekMessaging;
import com.skyetek.reader.SkyeTekTag;
import com.skyetek.reader.SkyeTekReader;
import com.skyetek.utility.Debug;
import com.skyetek.utility.SkyeTekException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Collection;
import java.util.Properties;
import com.skyetek.utility.Format;
import java.util.Vector;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.event.*;
import java.lang.Math;

/**
 *
 * @author  Chris Chan
 */
public class SkyeTekDemo1 extends javax.swing.JFrame {
    
    private int field0;
    public SkyeTekReader reader = null;
    private boolean _debug = false;

    public static String bytestoString(byte [] bytes) {
	StringBuffer buffer = new StringBuffer();
	for ( int i = 0 ; i < bytes.length; i ++ ) {
	    int value = (0xff & bytes[i]);
	    if ( value < 0x0f ) {
		buffer.append("0");
		buffer.append(Integer.toHexString(value));
	    } else {
		buffer.append(Integer.toHexString(value));

	    }
	}
	return buffer.toString().toUpperCase();
    } 
   
    /** Creates new form deuce */
    public SkyeTekDemo1() {
        if ( System.getProperty("com.skyetek.debug") != null ) {
	    _debug = true;
	}
	Properties props = new Properties();
        byte [] empty = new byte[0];
	props.setProperty("SkyeTekImpl","com.skyetek.comm.SkyeTekSerialComm");
	System.setProperty("com.skyetek.debug","true");
       // SkyeTekTag temp = new SkyeTekTag();
       
        try {
            reader = new SkyeTekReader(props);  
            Thread.sleep(20);
	   jOptionPane1.showMessageDialog(this,
            "Reader Detected",
            "Information",
            jOptionPane1.INFORMATION_MESSAGE);
        
        } catch (Exception ex) {
             jOptionPane1.showMessageDialog(this,
            "Reader Not Detected: " + ex,
            "Stop",
            jOptionPane1.ERROR_MESSAGE);
            return;
        }
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jTextArea3 = new javax.swing.JTextArea();
        jTextArea5 = new javax.swing.JTextArea();
        jTextArea6 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea4 = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jOptionPane1 = new javax.swing.JOptionPane();

        getContentPane().setLayout(null);

        setTitle("SkyeTek Java Utility");
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                none(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        jButton1.setText("Select Tag");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        getContentPane().add(jButton1);
        jButton1.setBounds(30, 210, 180, 20);

        jButton2.setText("Refresh Tag Data");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        getContentPane().add(jButton2);
        jButton2.setBounds(40, 480, 180, 20);

        jButton3.setText("Write Tag");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        getContentPane().add(jButton3);
        jButton3.setBounds(310, 210, 180, 20);

        jCheckBox1.setText("Anticollision");
        getContentPane().add(jCheckBox1);
        jCheckBox1.setBounds(30, 260, 100, 24);

        jCheckBox2.setText("Loop");
        getContentPane().add(jCheckBox2);
        jCheckBox2.setBounds(30, 280, 53, 24);

        jTextArea3.setEditable(false);
        jTextArea3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        getContentPane().add(jTextArea3);
        jTextArea3.setBounds(120, 410, 140, 20);

        jTextArea5.setEditable(false);
        jTextArea5.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        getContentPane().add(jTextArea5);
        jTextArea5.setBounds(120, 350, 140, 20);

        jTextArea6.setEditable(false);
        jTextArea6.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        getContentPane().add(jTextArea6);
        jTextArea6.setBounds(120, 380, 140, 20);

        jLabel1.setText("TID");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(90, 350, 20, 16);

        jLabel2.setText("Tag Type");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(60, 380, 51, 16);

        jLabel3.setText("Bytes / Block");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(40, 410, 80, 16);

        jLabel4.setText("Tag Data");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(280, 350, 50, 16);

        jButton4.setText("Clear Tags");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        getContentPane().add(jButton4);
        jButton4.setBounds(30, 240, 180, 20);

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        jTextArea2.setLineWrap(true);
        jTextArea2.setText("Type text and data here that you want to write to the memory of a RFID tag or smart label");
        jTextArea2.setWrapStyleWord(true);
        jTextArea2.setBorder(null);
        jTextArea2.setMaximumSize(new java.awt.Dimension(64, 64));
        jTextArea2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextArea2KeyTyped(evt);
            }
        });

        jScrollPane1.setViewportView(jTextArea2);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(310, 60, 180, 140);

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        jTextArea4.setEditable(false);
        jTextArea4.setLineWrap(true);
        jTextArea4.setBorder(null);
        jScrollPane2.setViewportView(jTextArea4);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(340, 350, 160, 110);

        jPanel1.setBorder(new javax.swing.border.TitledBorder(""));
        getContentPane().add(jPanel1);
        jPanel1.setBounds(30, 330, 490, 140);

        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane3.setVerticalScrollBarPolicy(javax.swing.JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        });
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });

        jScrollPane3.setViewportView(jList1);

        getContentPane().add(jScrollPane3);
        jScrollPane3.setBounds(30, 60, 180, 140);

        getContentPane().add(jOptionPane1);
        jOptionPane1.setBounds(240, 200, 0, 10);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-541)/2, (screenSize.height-556)/2, 541, 556);
    }//GEN-END:initComponents

    private void jTextArea2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextArea2KeyTyped
   
    }//GEN-LAST:event_jTextArea2KeyTyped

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
       // Code when write tag is pressed
            
      String temp2 = jTextArea2.getText();
      String tagID = jTextArea5.getText().toUpperCase();
      
      //Perform error checking, right bytes per block for tag
      if(temp2.length() == 0)
      {
         jOptionPane1.showMessageDialog(this,
            "Please enter some data to write to the tag.",
            "Stop",
            jOptionPane1.ERROR_MESSAGE);
          return;
      }
      if(tagID.length() == 0)
      {
           jOptionPane1.showMessageDialog(this,
            "Please select a tag to write to.",
            "Stop",
            jOptionPane1.ERROR_MESSAGE);
          return;
      }
      
      byte[] tmp = {(byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF};
           
      try {
            System.setProperty("com.skyetek.debug","true");            
            //Select the tag          
            Iterator tagIterator = reader.tags.values().iterator();
	    SkyeTekTag tag = (SkyeTekTag)tagIterator.next();
            String temp1;     
            temp1 = tag.getTagID().toUpperCase();
          
            byte response;
            //temp2.length contains the length of Data to write to tag
            // divide this by bytes per block to determine num blocks field
            byte x = (byte)(temp2.length() / tag.bytesBlock); 
           
            // write tag handles 64 bytes of data at once...divide total data by 
            // 64 to see how many writes to perform to write entire data
            double numberWrites = ((double)temp2.length() / 64.0);
            numberWrites = Math.floor(numberWrites); // this is number of writes - 1, write the final number of bytes
  
            // this value contains data left to write after all full 64 byte fiels are written
            int remainingDataLen = temp2.length() - ((int)numberWrites * 64);
            
            byte pass;
            do
            {                   
                //Take care of all tag specific byte and block information here
                //Call Function To return The right Data
                pass = errorCheck(tag.tagID, temp2, tag.tagType);
                if(pass == (byte)0xFF)
                    return;
                
                if(temp1.equals(tagID))
                {       
                        // parse the whole string into 64 byte blocks
                        // increment through and write 64 bytes at a time
                        byte[] byteStr = new byte[64];
                        char[] charStr = new char[64];
                                                
                        for(int i = 0; i < numberWrites; i++)
                        {  
                            
                            // copy 64 characters to character buffer
                            temp2.getChars(i*64, i*64 + 64, charStr, 0);
                            // copy from character buffer to byte buffer
                            for(int n = 0; n < 64; n++)
                            {
                                byteStr[n] = (byte)charStr[n];   

                            }
                            response = tag.writeTag((byte)(((i*64)/tag.bytesBlock) + pass), (byte)(64/tag.bytesBlock), byteStr);
                            
                        }
                         
                        //write the remaining data here
                        // copy 64 characters to character buffer
                        temp2.getChars((64*(int)numberWrites), 64*(int)numberWrites + remainingDataLen, charStr, 0);
                       
                        //copy remaining data into char buffer to send
                        for(int n = 0; n < remainingDataLen; n++)
                        {
                            byteStr[n] = (byte)charStr[n];
                        }
                        
                         // Number of Nulls to write to complete the block
                         int addNulls = remainingDataLen % tag.bytesBlock;
                         if(addNulls > 0)
                            addNulls = tag.bytesBlock - addNulls;
                         else
                             addNulls = 4;
                         
                         for(int n = remainingDataLen; n < remainingDataLen + addNulls; n++)
                         {
                             byteStr[n] = (byte)0x00;
                         }
                         
                         if(remainingDataLen > 0)
                         {
                            if(numberWrites > 0) 
                            {
                                
                                 response = tag.writeTag((byte)( (((numberWrites) * 64) / tag.bytesBlock) + pass), (byte)((remainingDataLen + addNulls)/tag.bytesBlock),  byteStr );
                            }
                            else
                            {   
                                
                                response = tag.writeTag((byte)pass, (byte)(((remainingDataLen + addNulls)/tag.bytesBlock)),  byteStr );
                            }
                         }
                         
                    jTextArea2.setText(""); 
                    break;  
                }      
                tag = (SkyeTekTag)tagIterator.next(); 
                temp1 = tag.getTagID().toUpperCase();
            }while(true);
            
	} catch (SkyeTekException ex) {
	   jOptionPane1.showMessageDialog(this,
            "Error: " + ex,
            "Stop",
            jOptionPane1.ERROR_MESSAGE);
           return;
	}      
        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // Add your handling code here:
        // Clears tag list
        if(jList1.getModel().getSize() < 1)
        {
            jOptionPane1.showMessageDialog(this,
            "The tag table is empty.",
            "Stop",
            jOptionPane1.ERROR_MESSAGE);
            return;
        }
        else
        {

            Object[] options = {"Yes",
                        "No"};
            int n = JOptionPane.showOptionDialog(this,
                "Are you sure you want to remove all tag Objects from the table?",  // message
                "Warning",                    // title
                JOptionPane.YES_NO_OPTION,             // how many buttons
                JOptionPane.WARNING_MESSAGE,          // icon
                null,                                  // used for custom Icon
                options,                               // array of button lables
                options[0]);                           // lable of the default button
            
            if(n == JOptionPane.YES_OPTION)
            {
                DefaultListModel model = new DefaultListModel();
                model = (DefaultListModel)jList1.getModel();
                model.clear();
                reader.tags.clear();
                jTextArea3.setText("");
                jTextArea5.setText("");
                jTextArea6.setText("");
            }
        }
    }//GEN-LAST:event_jButton4ActionPerformed
    
    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked

        // Click a button within the listbox and populate data in tag field
        // Find object and display data on the bottom
        // Search table for correct object
        if(jList1.getModel().getSize() == 0)
        {
            return;
        }
        
        String temp2 = (String)jList1.getSelectedValue();
        
        //temp2 = temp2.toUpperCase();
    
        Iterator tagIterator = reader.tags.values().iterator();
        SkyeTekTag tag = (SkyeTekTag)tagIterator.next();
         String temp1 = tag.getTagID().toUpperCase();
            byte response;
            //change for tag type 
            StringBuffer tmpData = new StringBuffer();
        do 
        {
            //if tag matches then read tag and update   
            /* read whole tag and parse for NULL */           
            if(temp1.equals(temp2))
            {
                String tempID = tag.tagIdAsString();

                jTextArea5.setText(tempID.toUpperCase());
                jTextArea6.setText(tag.TAG_TYPE[tag.tagType]);
                
                StringBuffer result = new StringBuffer();
                int value = (0xff & tag.bytesBlock);
                
                if ( value < 0x0f ) {
                    result.append("0");
                    result.append(Integer.toHexString(value));
                } else {
                    result.append(Integer.toHexString(value));
                }   
                
                jTextArea3.setText(result.toString());
                break;
            }
            tag = (SkyeTekTag)tagIterator.next();
            temp1 = tag.getTagID().toUpperCase();
        }while(true);
        
    }//GEN-LAST:event_jList1MouseClicked

    private void none(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_none

    }//GEN-LAST:event_none

    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList1ValueChanged
    
    }//GEN-LAST:event_jList1ValueChanged

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // Add your handling code here:
        // Refresh button - Perform a Read Tag
      String temp2 = jTextArea5.getText().toUpperCase();
      byte response;
      if(temp2.length() == 0)
      {
           jOptionPane1.showMessageDialog(this,
            "No Tag Selected.",
            "Stop",
            jOptionPane1.ERROR_MESSAGE);
          return;
      }
      try {
            System.setProperty("com.skyetek.debug","true");
       
            //Select the tag          
            Iterator tagIterator = reader.tags.values().iterator();
	    SkyeTekTag tag = (SkyeTekTag)tagIterator.next();
            String temp1;
            //send anyways
          
            temp1 = tag.getTagID().toUpperCase();
            StringBuffer tmpData = new StringBuffer();
             
            byte nReads;
            do
            { 
                if(temp1.equals(temp2))
                {
                    //determine start blocks and # of blocks
                    
                    //check if max blocks is greater than 64, if it is, do this multiple times
                    if(maxBlock(tag.tagID, tag.tagType) > 64)
                        nReads = (byte)(maxBlock(tag.tagID, tag.tagType) / 64);
                    else
                        nReads = 1;
                    
                    // want to read up to 64 bytes of data, the # of blocks is 64 / bytesBlock
                    // Read nRead 64 Byte blocks
                    for(int i = 0; i < nReads; i++)
                    {
                        
                        response = tag.readTag( (byte)(startBlock(tag.tagID, tag.tagType) + (i * 64 / tag.bytesBlock)), (byte)(64 / tag.bytesBlock));
                        char x[] = new char[tag.data.length];

                        for(int n = 0; n < tag.data.length; n++)
                        {
                            if(tag.data[n] == 0x00)
                            {
                                jTextArea4.setText(tmpData.toString()); 
                                return;
                            }
                            x[n] = (char)tag.data[n];
                            tmpData.append(x[n]);
                          
                        }
                        
                         
                    }
                    jTextArea4.setText(tmpData.toString()); 
                    break; 
              }
               
              tag = (SkyeTekTag)tagIterator.next();    
              temp1 = tag.getTagID().toUpperCase(); 
            }while(true);
  
            } catch (SkyeTekException ex) {
                            jOptionPane1.showMessageDialog(this,
                            "Error reading tag." + ex,
                            "Stop",
                            jOptionPane1.ERROR_MESSAGE);
	    }      
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Add your handling code here:
        // code when Select Tag   
     
        if(jCheckBox1.isSelected())
        {
            //anticollision only
            inventoryTags();
                     
            if(jCheckBox2.isSelected())
            {
                //loop mode
                
            }
            
            return;
        }
        else if(jCheckBox2.isSelected())
        {
            //loop mode only
            System.out.println("two");
            return;
        }
        
        //select only
        byte [] empty = new byte[0];
	System.setProperty("com.skyetek.debug","true");
        // if select one tag
        // {
        // select the tag and put the tag in a hash table
        //reader.tags.clear();

        try {
            //try { Thread.sleep(100);  } catch (InterruptedException ex) {}
	   reader.selectTag(SkyeTekMessaging.AUTO_DETECT,
	    			     SkyeTekMessaging.SEL_TAG,
	    			     (byte)0x00,
	    			     new byte[0],
	    			     (byte)0xFF);
           
        } catch (Exception ex) {
           
          jOptionPane1.showMessageDialog(this,
            "Error: " + ex,
            "Stop",
            jOptionPane1.ERROR_MESSAGE);
            return;    
        }
      
      Iterator tagIterator = reader.tags.values().iterator();
    
      String tempID = new String();
      SkyeTekTag tempTag = (SkyeTekTag)tagIterator.next();
      tempID = tempTag.tagIdAsString();
      
      // Search tag table for tag that matches the most recent tag read
      do
      {
         // System.out.println("tags " + reader.tags.values());
          //System.out.println("temp ID " + tempID);
          //System.out.println("recent tag " + reader.recentTag);
          if(tempID.equals(reader.recentTag))
          {
                //put tag in the listbox
                DefaultListModel listModel = new DefaultListModel();
                
                //add back previous elements
                for(int i = 0; i < jList1.getModel().getSize(); i++)
                {
                    jList1.setSelectedIndex(i);
                    listModel.addElement(jList1.getSelectedValue());
                }
                
                listModel.addElement(tempID.toUpperCase());
                jList1.setModel(listModel);
                break;
          }
          tempTag = (SkyeTekTag)tagIterator.next();
          tempID = tempTag.tagIdAsString();
      }while(true);
      
      jTextArea5.setText(tempID.toUpperCase());
     
      // Set Tag ID in Tag Information
      // Set Tag Type in Tag information
        jTextArea6.setText(tempTag.TAG_TYPE[tempTag.tagType]);
      
        StringBuffer result = new StringBuffer();
        int value = (0xff & tempTag.bytesBlock);
        if ( value < 0x0f ) {
            result.append("0");
            result.append(Integer.toHexString(value));
        } else {
            result.append(Integer.toHexString(value));
        }
        // Set bytes per block in Tag Information
	jTextArea3.setText(result.toString());
        
    }//GEN-LAST:event_jButton1ActionPerformed
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm
    
    //Takes a tag type and given TID byte array and checks for 
    private byte errorCheck(byte[] tagID, String temp2, byte tagType){
         
         switch (tagType) {
                    case 1:  
                        //ISO15693
                        //second byte for manufacturer 2nd byte
                        switch(tagID[1]){
                            case 2:
                                if(temp2.length() > 63)
                                {
                                    jOptionPane1.showMessageDialog(this,
                                    "Data to be written exceeds tag data length.",
                                    "Stop",
                                    jOptionPane1.ERROR_MESSAGE);
                                    return (byte)0xFF;
                                  
                                }
                                else
                                    return 0x00;
                            
                            case 7:
                                if(temp2.length() > 255)
                                {
                                    jOptionPane1.showMessageDialog(this,
                                    "Data to be written exceeds tag data length.",
                                    "Stop",
                                    jOptionPane1.ERROR_MESSAGE);
                                    return (byte)0xFF;
                                }   
                                else
                                    return 0x00;
                            
                            case 5:
                                
                                if(tagID[2] == 2)
                                {
                                    if(temp2.length() > 231)
                                    {
                                        jOptionPane1.showMessageDialog(this,
                                        "Data to be written exceeds tag data length.",
                                        "Stop",
                                        jOptionPane1.ERROR_MESSAGE);
                                        return (byte)0xFF;
                                    }
                                    else
                                        return 0x03;
                                }
                                else
                                {
                                    if(temp2.length() > 999)
                                    {
                                        jOptionPane1.showMessageDialog(this,
                                        "Data to be written exceeds tag data length.",
                                        "Stop",
                                        jOptionPane1.ERROR_MESSAGE);
                                        return (byte)0xFF;
                                    }   
                                    return 0x03;
                                }
                                    
                        }
                     
                    case 2:  
                        //I_CODE1
                        // 64 bytes
                       if(temp2.length() > 47)
                        {
                            jOptionPane1.showMessageDialog(this,
                            "Data to be written exceeds tag data length.",
                            "Stop",
                            jOptionPane1.ERROR_MESSAGE);
                            return (byte)0xFF;
                        }   
                        else
                            return 0x04;
                     
                    case 3:  
                        //TAG_IT_HF
                        // 32 Bytes
                       if(temp2.length() > 31)
                        {
                            jOptionPane1.showMessageDialog(this,
                            "Data to be written exceeds tag data length.",
                            "Stop",
                            jOptionPane1.ERROR_MESSAGE);
                            return (byte)0xFF;
                        }   
                        else
                            return 0x00;                        
                   
                    case 4:  
                        //14443A, no reads and writes supported
                        //No reads and writes supported
                        break;
                        
                    case 5:  
                        //14443B, no reads or writes
                        //No reads and writes supported
                        break;
                    case 6:
                        //Picotag
                        if(temp2.length() > 231)
                        {
                            jOptionPane1.showMessageDialog(this,
                            "Data to be written exceeds tag data length.",
                            "Stop",
                            jOptionPane1.ERROR_MESSAGE);
                            return (byte)0xFF;
                        }   
                        else
                            return 0x03;
                       
                    case 7:
                        //Gemwave
                        //No reads and writes supported
                        break;
             
                }
                return 0;
    }
    
    
        //Takes a tag type and given TID byte array and checks for 
    private byte startBlock(byte[] tagID, byte tagType){
         
         switch (tagType) {
                    case 1:  
                        //ISO15693
                        //second byte for manufacturer 2nd byte
                        switch(tagID[1]){
                            case 2:
                                    return 0x00;
                            
                            case 7:
          
                                    return 0x00;
                            
                            case 5:
            
                                    return 0x03;
                      
                        }
                     
                    case 2:  
                        //I_CODE1
                        // 64 bytes

                        return 0x04;
                     
                    case 3:  
                        //TAG_IT_HF
                        // 32 Bytes

                        return 0x00;                        
                   
                    case 4:  
                        //14443A, no reads and writes supported
                        //No reads and writes supported
                        break;
                        
                    case 5:  
                        //14443B, no reads or writes
                        //No reads and writes supported
                        break;
                    case 6:
                            return 0x03;
                       
                    case 7:
                        //Gemwave
                        //No reads and writes supported
                        break;
             
                }
                return 0;
    }
    
      private int maxBlock(byte[] tagID, byte tagType)
      {         switch (tagType) {
                    case 1:  
                        //ISO15693
                        //second byte for manufacturer 2nd byte
                        switch(tagID[1]){
                            case 2:
                                return 64;
                            
                            case 7:
                                return 256;
                            
                            case 5:
                                
                                if(tagID[2] == 2)
                                {
                                    return 232;
                                }
                                else
                                {
                                    return 1000;
                                }
                                    
                        }
                     
                    case 2:  
                        //I_CODE1
                        // 64 bytes
                      return 64;
                     
                    case 3:  
                        //TAG_IT_HF
                        // 32 Bytes
                       return 32;              
                   
                    case 4:  
                        //14443A, no reads and writes supported
                        //No reads and writes supported
                        break;
                        
                    case 5:  
                        //14443B, no reads or writes
                        //No reads and writes supported
                        break;
                    case 6:
                        //Picotag
                        return 232;
                       
                    case 7:
                        //Gemwave
                        //No reads and writes supported
                        break;
             
                }
                return 0;
      }
      
      private void inventoryTags()
      {
          
             try{
                 //make sure it doesn't output anything
                 reader.inventoryTag(SkyeTekMessaging.ISO15693,
                 new byte[0],
                 new byte[0],
                    false); 
                 //add data to the listbox
                 
                 
             } catch (Exception ex) {
            ex.printStackTrace();
            System.out.println(ex);
            }
          
      Iterator tagIterator = reader.tags.values().iterator();
    
      String tempID = new String();       
      SkyeTekTag tempTag = (SkyeTekTag)reader.tags.values().iterator();

      DefaultListModel listModel = new DefaultListModel();
      // Search tag table for tag that matches the most recent tag read
     
      
      while(tagIterator.hasNext())
      {
          //put tag in the listbox
          tempID = tempTag.tagIdAsString();     
          listModel.addElement(tempID.toUpperCase());           
          tempTag = (SkyeTekTag)tagIterator.next();
      }
      
     jList1.setModel(listModel);
      
    }
      
      
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        new SkyeTekDemo1().show();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JList jList1;
    private javax.swing.JOptionPane jOptionPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextArea jTextArea4;
    private javax.swing.JTextArea jTextArea5;
    private javax.swing.JTextArea jTextArea6;
    // End of variables declaration//GEN-END:variables
    
}
