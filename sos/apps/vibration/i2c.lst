   1               		.file	"i2c.c"
   2               		.arch atmega128
   3               	__SREG__ = 0x3f
   4               	__SP_H__ = 0x3e
   5               	__SP_L__ = 0x3d
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  12               		.text
  13               	.Ltext0:
 300               		.lcomm priorState,1
 301               		.lcomm i2c_initialized,1
 303               	.global	i2c_hardware_init
 305               	i2c_hardware_init:
   1:/Users/Administrator/sos-2x/processor/avr/i2c.c **** /* -*- Mode: C; tab-width:2 -*- */
   2:/Users/Administrator/sos-2x/processor/avr/i2c.c **** /* ex: set ts=2 shiftwidth=2 softtabstop=2 cindent: */
   3:/Users/Administrator/sos-2x/processor/avr/i2c.c **** /**
   4:/Users/Administrator/sos-2x/processor/avr/i2c.c ****  * @file i2c.c
   5:/Users/Administrator/sos-2x/processor/avr/i2c.c ****  * @brief AVR specific I2C driver
   6:/Users/Administrator/sos-2x/processor/avr/i2c.c ****  * @author AVR App Note 311 and 315
   7:/Users/Administrator/sos-2x/processor/avr/i2c.c ****  * @author Modified by Roy Shea
   8:/Users/Administrator/sos-2x/processor/avr/i2c.c ****  *
   9:/Users/Administrator/sos-2x/processor/avr/i2c.c ****  * This work is directly from the Atmel AVR application notes AVR311
  10:/Users/Administrator/sos-2x/processor/avr/i2c.c ****  * and AVR315.
  11:/Users/Administrator/sos-2x/processor/avr/i2c.c ****  **/
  12:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
  13:/Users/Administrator/sos-2x/processor/avr/i2c.c **** #include <hardware.h>
  14:/Users/Administrator/sos-2x/processor/avr/i2c.c **** #include <net_stack.h>
  15:/Users/Administrator/sos-2x/processor/avr/i2c.c **** #include <sos_info.h>
  16:/Users/Administrator/sos-2x/processor/avr/i2c.c **** #include <crc.h>
  17:/Users/Administrator/sos-2x/processor/avr/i2c.c **** #include <measurement.h>
  18:/Users/Administrator/sos-2x/processor/avr/i2c.c **** #include <malloc.h>
  19:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
  20:/Users/Administrator/sos-2x/processor/avr/i2c.c **** #include <hdlc.h>
  21:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
  22:/Users/Administrator/sos-2x/processor/avr/i2c.c **** #include <i2c_const.h>
  23:/Users/Administrator/sos-2x/processor/avr/i2c.c **** #include <i2c.h>
  24:/Users/Administrator/sos-2x/processor/avr/i2c.c **** #include <i2c_system.h>
  25:/Users/Administrator/sos-2x/processor/avr/i2c.c **** #ifdef SOS_USE_PREEMPTION
  26:/Users/Administrator/sos-2x/processor/avr/i2c.c **** #include <priority.h>
  27:/Users/Administrator/sos-2x/processor/avr/i2c.c **** #endif
  28:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
  29:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
  30:/Users/Administrator/sos-2x/processor/avr/i2c.c **** #ifndef I2C_ADDRESS
  31:/Users/Administrator/sos-2x/processor/avr/i2c.c **** #error I2C_ADDRESS must be defined
  32:/Users/Administrator/sos-2x/processor/avr/i2c.c **** #endif
  33:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
  34:/Users/Administrator/sos-2x/processor/avr/i2c.c **** /**
  35:/Users/Administrator/sos-2x/processor/avr/i2c.c ****  * most flags may need additional context to be used correctly:
  36:/Users/Administrator/sos-2x/processor/avr/i2c.c ****  * 
  37:/Users/Administrator/sos-2x/processor/avr/i2c.c ****  * I2C_SOS_MSG_FLAG && i2c.msgBuf != NULL means we are in sos_msg mode
  38:/Users/Administrator/sos-2x/processor/avr/i2c.c ****  *   sos_msg mode is permited ONLY for Master Tx operation.  it is assumed
  39:/Users/Administrator/sos-2x/processor/avr/i2c.c ****  *   that a device sending a sos_msg will have the ability to operate as a
  40:/Users/Administrator/sos-2x/processor/avr/i2c.c ****  *   peer master on a multi master bus.  if this turns out not to be acceptable
  41:/Users/Administrator/sos-2x/processor/avr/i2c.c ****  *   the driver will have to be rewritten in the future.
  42:/Users/Administrator/sos-2x/processor/avr/i2c.c ****  * 
  43:/Users/Administrator/sos-2x/processor/avr/i2c.c ****  * I2C_SOS_MSG_FLAG && i2c.msgBuf == NULL is the same as
  44:/Users/Administrator/sos-2x/processor/avr/i2c.c ****  * I2C_SOS_CRC_FLAG && i2c.msgBuf == NULL and means we have a crc'ed raw packet
  45:/Users/Administrator/sos-2x/processor/avr/i2c.c ****  *
  46:/Users/Administrator/sos-2x/processor/avr/i2c.c ****  * I2C_RX_PEND_FLAG is used when the bus has been reserved for a write/read operation
  47:/Users/Administrator/sos-2x/processor/avr/i2c.c ****  *   this allows the driver to maintain necessary state over the two operations and will
  48:/Users/Administrator/sos-2x/processor/avr/i2c.c ****  *   be extended to perform this as a single operation.  for now the application will
  49:/Users/Administrator/sos-2x/processor/avr/i2c.c ****  *   recieve a call back and WITHOUT releasing the bus will be able to initate the read.
  50:/Users/Administrator/sos-2x/processor/avr/i2c.c ****  * 
  51:/Users/Administrator/sos-2x/processor/avr/i2c.c ****  * I2C_BUFF_DIRTY_FLAG is interpereted in the context of the call back
  52:/Users/Administrator/sos-2x/processor/avr/i2c.c ****  *   in a read done callback this can be interperated as data ready
  53:/Users/Administrator/sos-2x/processor/avr/i2c.c ****  *   in a send done callback this means that a partial send occured and unsent
  54:/Users/Administrator/sos-2x/processor/avr/i2c.c ****  *   data remains in the buffer.  for now the only thing the calling app can do
  55:/Users/Administrator/sos-2x/processor/avr/i2c.c ****  *   is ker_free the buff.  in the future a compleate sending may be implimented.
  56:/Users/Administrator/sos-2x/processor/avr/i2c.c ****  *   this is used to differentate from compleate send fails indicated by the
  57:/Users/Administrator/sos-2x/processor/avr/i2c.c ****  *   I2C_ERROR_FLAG
  58:/Users/Administrator/sos-2x/processor/avr/i2c.c ****  *
  59:/Users/Administrator/sos-2x/processor/avr/i2c.c ****  * some of the flags are only set in the interrupt and can not be set by the user
  60:/Users/Administrator/sos-2x/processor/avr/i2c.c ****  */
  61:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
  62:/Users/Administrator/sos-2x/processor/avr/i2c.c **** #define I2C_SOS_MSG_FLAG     I2C_SYS_SOS_MSG_FLAG  // sos_msg type or if msgBuf == NULL crc enabled
  63:/Users/Administrator/sos-2x/processor/avr/i2c.c **** #define I2C_CRC_FLAG         I2C_SOS_MSG_FLAG      // overloaded flag
  64:/Users/Administrator/sos-2x/processor/avr/i2c.c **** #define I2C_TX_FLAG          I2C_SYS_TX_FLAG       // msg tx
  65:/Users/Administrator/sos-2x/processor/avr/i2c.c **** #define I2C_RX_PEND_FLAG     I2C_SYS_RX_PEND_FLAG  // tx with rx pending (no send done sent)
  66:/Users/Administrator/sos-2x/processor/avr/i2c.c **** #define I2C_MASTER_FLAG      I2C_SYS_MASTER_FLAG   // bus used as master
  67:/Users/Administrator/sos-2x/processor/avr/i2c.c **** #define I2C_BUFF_DIRTY_FLAG  0x08                  // data buff dirty 
  68:/Users/Administrator/sos-2x/processor/avr/i2c.c **** #define I2C_GEN_ADDR_FLAG    0x04
  69:/Users/Administrator/sos-2x/processor/avr/i2c.c **** #define I2C_BUFF_ERR_FLAG    0x02
  70:/Users/Administrator/sos-2x/processor/avr/i2c.c **** #define I2C_ERROR_FLAG       I2C_SYS_ERROR_FLAG
  71:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
  72:/Users/Administrator/sos-2x/processor/avr/i2c.c **** #define I2C_NULL_FLAG        0x00
  73:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
  74:/Users/Administrator/sos-2x/processor/avr/i2c.c **** #define TW_STATUS_MASK  0xF8
  75:/Users/Administrator/sos-2x/processor/avr/i2c.c **** // Unused since TWPS0=TWPS1=0
  76:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
  77:/Users/Administrator/sos-2x/processor/avr/i2c.c **** enum {
  78:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	I2C_IDLE=0,
  79:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	I2C_MASTER_IDLE,
  80:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	I2C_SLAVE_IDLE,
  81:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	I2C_MASTER_ARB,
  82:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	I2C_MASTER_TX,
  83:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	I2C_MASTER_RX,
  84:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	I2C_SLAVE_WAIT,
  85:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	I2C_SLAVE_TX,
  86:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	I2C_SLAVE_RX,
  87:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	I2C_SLAVE_BLOCKED,
  88:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	I2C_DATA_READY,
  89:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	I2C_TX_ERROR,
  90:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	I2C_RX_ERROR,
  91:/Users/Administrator/sos-2x/processor/avr/i2c.c **** };
  92:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
  93:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
  94:/Users/Administrator/sos-2x/processor/avr/i2c.c **** typedef struct i2c_state {
  95:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	uint8_t state;
  96:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	uint8_t msg_state;
  97:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
  98:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	uint8_t ownAddr;
  99:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	uint8_t addr;
 100:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 101:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	uint16_t crc;        // shared msg values
 102:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	uint8_t msgLen;
 103:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	uint8_t idx;
 104:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	
 105:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	Message *msgBuf;  // used for master planed (tx/rx)
 106:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	uint8_t *dataBuf;
 107:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	uint8_t *rxDataBuf;
 108:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	uint8_t txPending;
 109:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	
 110:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	uint8_t rxStatus;    // status of last rx
 111:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	
 112:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	uint8_t flags;
 113:/Users/Administrator/sos-2x/processor/avr/i2c.c **** } i2c_state_t;
 114:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 115:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 116:/Users/Administrator/sos-2x/processor/avr/i2c.c **** static i2c_state_t i2c;
 117:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 118:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 119:/Users/Administrator/sos-2x/processor/avr/i2c.c **** /**
 120:/Users/Administrator/sos-2x/processor/avr/i2c.c ****  * helper functions to save and restore system state
 121:/Users/Administrator/sos-2x/processor/avr/i2c.c ****  */
 122:/Users/Administrator/sos-2x/processor/avr/i2c.c **** static uint8_t priorState = I2C_IDLE;
 123:/Users/Administrator/sos-2x/processor/avr/i2c.c **** static inline void saveState(uint8_t currentState) {
 124:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	priorState = currentState;
 125:/Users/Administrator/sos-2x/processor/avr/i2c.c **** }
 126:/Users/Administrator/sos-2x/processor/avr/i2c.c **** static inline uint8_t restoreState(void) {
 127:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	switch (priorState) {
 128:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		case I2C_MASTER_ARB:
 129:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		case I2C_SLAVE_WAIT:
 130:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		default:
 131:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 			return priorState;
 132:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	}
 133:/Users/Administrator/sos-2x/processor/avr/i2c.c **** }
 134:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 135:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 136:/Users/Administrator/sos-2x/processor/avr/i2c.c **** /*****************************************
 137:/Users/Administrator/sos-2x/processor/avr/i2c.c ****  Initialize the I2C hardware on an AVR
 138:/Users/Administrator/sos-2x/processor/avr/i2c.c ****  *****************************************/
 139:/Users/Administrator/sos-2x/processor/avr/i2c.c **** static bool i2c_initialized = false;
 140:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 141:/Users/Administrator/sos-2x/processor/avr/i2c.c **** int8_t i2c_hardware_init() {
 307               	.LM1:
 308               	/* prologue: frame size=0 */
 309               	/* prologue end (size=0) */
 142:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	HAS_CRITICAL_SECTION;
 143:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 144:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	if (i2c_initialized == false) {
 311               	.LM2:
 312 0000 2091 0000 		lds r18,i2c_initialized
 313 0004 2223      		tst r18
 314 0006 71F4      		brne .L2
 145:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		ENTER_CRITICAL_SECTION();
 316               	.LM3:
 317               	/* #APP */
 318 0008 9FB7      		in r25, __SREG__
 319 000a F894      		cli
 320               		
 146:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 147:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		PORTD |= 0x03; // Enable the internal TWI pull up registers
 322               	.LM4:
 323               	/* #NOAPP */
 324 000c 82B3      		in r24,50-0x20
 325 000e 8360      		ori r24,lo8(3)
 326 0010 82BB      		out 50-0x20,r24
 148:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		i2c_setCtrlReg(0); // TWI Interface disabled
 328               	.LM5:
 329 0012 2093 7400 		sts 116,r18
 149:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 150:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		// need to fix this to be dynamic
 151:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		TWBR = TWI_TWBR; // Set bit rate register (Baudrate). Defined in header file.
 331               	.LM6:
 332 0016 8AE0      		ldi r24,lo8(10)
 333 0018 8093 7000 		sts 112,r24
 152:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		//TWSR = TWI_TWPS; // Not used. Driver presumes prescaler to be 00.
 153:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		LEAVE_CRITICAL_SECTION();
 335               	.LM7:
 336               	/* #APP */
 337 001c 9FBF      		out __SREG__, r25
 338               		
 154:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 155:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		i2c_initialized = true;
 340               	.LM8:
 341               	/* #NOAPP */
 342 001e 81E0      		ldi r24,lo8(1)
 343 0020 8093 0000 		sts i2c_initialized,r24
 344               	.L2:
 156:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	}
 157:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 158:/Users/Administrator/sos-2x/processor/avr/i2c.c ****     return SOS_OK;
 159:/Users/Administrator/sos-2x/processor/avr/i2c.c **** }
 346               	.LM9:
 347 0024 80E0      		ldi r24,lo8(0)
 348 0026 90E0      		ldi r25,hi8(0)
 349               	/* epilogue: frame size=0 */
 350 0028 0895      		ret
 351               	/* epilogue end (size=1) */
 352               	/* function i2c_hardware_init size 28 (27) */
 357               	.Lscope0:
 362               	.global	i2c_initTransceiver
 364               	i2c_initTransceiver:
 160:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 161:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 162:/Users/Administrator/sos-2x/processor/avr/i2c.c **** int8_t i2c_initTransceiver(uint8_t ownAddress, uint8_t flags) {
 366               	.LM10:
 367               	/* prologue: frame size=0 */
 368               	/* prologue end (size=0) */
 163:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	HAS_CRITICAL_SECTION;
 164:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 165:/Users/Administrator/sos-2x/processor/avr/i2c.c ****     // Set own TWI slave address. Accept TWI General Calls.
 166:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	i2c.ownAddr = ((ownAddress<<1)&0xFE);
 370               	.LM11:
 371 002a 982F      		mov r25,r24
 372 002c 990F      		lsl r25
 373 002e 9093 0000 		sts i2c+2,r25
 167:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 168:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	if (ownAddress != 0x7f) {
 375               	.LM12:
 376 0032 8F37      		cpi r24,lo8(127)
 377 0034 21F0      		breq .L4
 169:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		// 1111xxx is reserved addres space so 0x7f is an
 170:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		// invalid address and it is safe to use it as a flag
 171:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		// we will also enable the general call recognition bit
 172:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		TWAR = i2c.ownAddr|(1<<TWGCE);
 379               	.LM13:
 380 0036 9160      		ori r25,lo8(1)
 381 0038 9093 7200 		sts 114,r25
 382 003c 05C0      		rjmp .L5
 383               	.L4:
 173:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	} else {
 174:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		if (!(flags&I2C_MASTER_FLAG)){
 385               	.LM14:
 386 003e 64FD      		sbrc r22,4
 387 0040 03C0      		rjmp .L5
 175:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 			// can not give a slave an invalid address
 176:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 			return -EINVAL;
 389               	.LM15:
 390 0042 8AEE      		ldi r24,lo8(-22)
 391 0044 9FEF      		ldi r25,hi8(-22)
 392 0046 0895      		ret
 393               	.L5:
 177:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		}
 178:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	}
 179:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 180:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	// get flag settings from the upper layer
 181:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	i2c.flags = I2C_SYS_SHARED_FLAGS_MSK & flags;
 395               	.LM16:
 396 0048 617F      		andi r22,lo8(-15)
 397 004a 6093 0000 		sts i2c+16,r22
 182:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 183:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	// do some clean up
 184:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	i2c.msgLen = 0;
 399               	.LM17:
 400 004e 1092 0000 		sts i2c+6,__zero_reg__
 185:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	i2c.txPending = 0;
 402               	.LM18:
 403 0052 1092 0000 		sts i2c+14,__zero_reg__
 186:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	i2c.idx = 0;
 405               	.LM19:
 406 0056 1092 0000 		sts i2c+7,__zero_reg__
 187:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 188:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	// free all allocated buffers
 189:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	if (i2c.msgBuf != NULL) {
 408               	.LM20:
 409 005a 8091 0000 		lds r24,i2c+8
 410 005e 9091 0000 		lds r25,(i2c+8)+1
 411 0062 892B      		or r24,r25
 412 0064 41F0      		breq .L7
 190:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		i2c.dataBuf = NULL;
 414               	.LM21:
 415 0066 1092 0000 		sts (i2c+10)+1,__zero_reg__
 416 006a 1092 0000 		sts i2c+10,__zero_reg__
 191:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		i2c.msgBuf = NULL;
 418               	.LM22:
 419 006e 1092 0000 		sts (i2c+8)+1,__zero_reg__
 420 0072 1092 0000 		sts i2c+8,__zero_reg__
 421               	.L7:
 192:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	}
 193:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	i2c.msg_state = SOS_MSG_NO_STATE;
 423               	.LM23:
 424 0076 1092 0000 		sts i2c+1,__zero_reg__
 194:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	
 195:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 196:/Users/Administrator/sos-2x/processor/avr/i2c.c ****   /**
 197:/Users/Administrator/sos-2x/processor/avr/i2c.c ****    * \bug I2C system may want to NULL the i2c.dataBuf after i2c_send_done,
 198:/Users/Administrator/sos-2x/processor/avr/i2c.c ****    * i2c_read_done, and any error.  We could then verify that i2c.dataBuf is
 199:/Users/Administrator/sos-2x/processor/avr/i2c.c ****    * null in i2c_initTranceiver and call ker_panic if it is not null.  Same
 200:/Users/Administrator/sos-2x/processor/avr/i2c.c ****    * goes for the rxDataBuf
 201:/Users/Administrator/sos-2x/processor/avr/i2c.c ****    */
 202:/Users/Administrator/sos-2x/processor/avr/i2c.c ****   // Roy: This results in a hard to track bug.  If the user frees I2C data
 203:/Users/Administrator/sos-2x/processor/avr/i2c.c ****   // after the I2C sends a MSG_I2C_SEND_DONE, this will free it a second time.
 204:/Users/Administrator/sos-2x/processor/avr/i2c.c ****   // Kernel messaging avoids this by explitily setting i2c.dataBuff to null.
 205:/Users/Administrator/sos-2x/processor/avr/i2c.c ****   // Well, maybe.  Maybe not...  Regardless, this is bad!  
 206:/Users/Administrator/sos-2x/processor/avr/i2c.c ****   //
 207:/Users/Administrator/sos-2x/processor/avr/i2c.c ****   // if (i2c.dataBuf != NULL) {
 208:/Users/Administrator/sos-2x/processor/avr/i2c.c ****   //  ker_free(i2c.dataBuf);
 209:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	//}
 210:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 211:/Users/Administrator/sos-2x/processor/avr/i2c.c ****   // The problem described abave is NOT a problem with the i2c.rxDataBuf.  A
 212:/Users/Administrator/sos-2x/processor/avr/i2c.c ****   // call to i2c_read_done creates a deep copy of the rxDataBuf that is
 213:/Users/Administrator/sos-2x/processor/avr/i2c.c ****   // SOS_MSG_RELEASE'ed.  Thus, the rxDataBuff can hang around.  A down side
 214:/Users/Administrator/sos-2x/processor/avr/i2c.c ****   // to the current implementation is that the rxDataBuf is not released with
 215:/Users/Administrator/sos-2x/processor/avr/i2c.c ****   // when the buffer is released.  We do not leak this data, but it is not
 216:/Users/Administrator/sos-2x/processor/avr/i2c.c ****   // made availible to the system. 
 217:/Users/Administrator/sos-2x/processor/avr/i2c.c ****   //
 218:/Users/Administrator/sos-2x/processor/avr/i2c.c ****   // pre allocate recieve buffer
 219:/Users/Administrator/sos-2x/processor/avr/i2c.c ****   if (i2c.rxDataBuf != NULL) {
 426               	.LM24:
 427 007a 8091 0000 		lds r24,i2c+12
 428 007e 9091 0000 		lds r25,(i2c+12)+1
 429 0082 0097      		sbiw r24,0
 430 0084 21F0      		breq .L8
 431               	.LBB2:
 432               	.LBB3:
 434               	.Ltext1:
   1:/Users/Administrator/sos-2x/kernel/include/malloc.h **** /* -*- Mode: C; tab-width:4 -*- */
   2:/Users/Administrator/sos-2x/kernel/include/malloc.h **** /* ex: set ts=4: */
   3:/Users/Administrator/sos-2x/kernel/include/malloc.h **** /*
   4:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * Copyright (c) 2003 The Regents of the University of California.
   5:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * All rights reserved.
   6:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  *
   7:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * Redistribution and use in source and binary forms, with or without
   8:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * modification, are permitted provided that the following conditions
   9:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * are met:
  10:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * 1. Redistributions of source code must retain the above copyright
  11:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  *    notice, this list of conditions and the following disclaimer.
  12:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * 2. Redistributions in binary form must reproduce the above
  13:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  *    copyright notice, this list of conditions and the following
  14:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  *    disclaimer in the documentation and/or other materials provided
  15:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  *    with the distribution.
  16:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * 3. All advertising materials mentioning features or use of this
  17:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  *    software must display the following acknowledgement:
  18:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  *       This product includes software developed by Networked &
  19:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  *       Embedded Systems Lab at UCLA
  20:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * 4. Neither the name of the University nor that of the Laboratory
  21:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  *    may be used to endorse or promote products derived from this
  22:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  *    software without specific prior written permission.
  23:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  *
  24:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS''
  25:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
  26:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
  27:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS
  28:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  29:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  30:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
  31:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  32:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  33:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
  34:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
  35:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * SUCH DAMAGE.
  36:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  *
  37:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @brief    Allocte and free dynamic memory 
  38:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @author   Roy Shea (roy@cs.ucla.edu) 
  39:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  */
  40:/Users/Administrator/sos-2x/kernel/include/malloc.h **** #ifndef _MALLOC_H_
  41:/Users/Administrator/sos-2x/kernel/include/malloc.h **** #define _MALLOC_H_
  42:/Users/Administrator/sos-2x/kernel/include/malloc.h **** 
  43:/Users/Administrator/sos-2x/kernel/include/malloc.h **** #include <sos_types.h>
  44:/Users/Administrator/sos-2x/kernel/include/malloc.h **** #include <pid.h>
  45:/Users/Administrator/sos-2x/kernel/include/malloc.h **** #include <malloc_conf.h>
  46:/Users/Administrator/sos-2x/kernel/include/malloc.h **** #include <sos_module_types.h>
  47:/Users/Administrator/sos-2x/kernel/include/malloc.h **** #ifdef FAULT_TOLERANT_SOS
  48:/Users/Administrator/sos-2x/kernel/include/malloc.h **** #include <malloc_domains.h>
  49:/Users/Administrator/sos-2x/kernel/include/malloc.h **** #endif
  50:/Users/Administrator/sos-2x/kernel/include/malloc.h **** 
  51:/Users/Administrator/sos-2x/kernel/include/malloc.h **** /**
  52:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @brief Init function for memory manager
  53:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  */
  54:/Users/Administrator/sos-2x/kernel/include/malloc.h **** extern void mem_init(void);
  55:/Users/Administrator/sos-2x/kernel/include/malloc.h **** 
  56:/Users/Administrator/sos-2x/kernel/include/malloc.h **** /**
  57:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @brief Starting memory module interface
  58:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  */
  59:/Users/Administrator/sos-2x/kernel/include/malloc.h **** extern void mem_start(void);
  60:/Users/Administrator/sos-2x/kernel/include/malloc.h **** 
  61:/Users/Administrator/sos-2x/kernel/include/malloc.h **** /**
  62:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @brief Allocate a chunk of blocks from the heap
  63:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  */
  64:/Users/Administrator/sos-2x/kernel/include/malloc.h **** extern void *sos_blk_mem_alloc(uint16_t size, sos_pid_t id, bool bCallFromModule);
  65:/Users/Administrator/sos-2x/kernel/include/malloc.h **** 
  66:/Users/Administrator/sos-2x/kernel/include/malloc.h **** /**
  67:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @brief Free a block back into the heap
  68:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  */
  69:/Users/Administrator/sos-2x/kernel/include/malloc.h **** extern void sos_blk_mem_free(void* ptr, bool bCallFromModule);
  70:/Users/Administrator/sos-2x/kernel/include/malloc.h **** 
  71:/Users/Administrator/sos-2x/kernel/include/malloc.h **** /**
  72:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @brief Re-allocate a block of memory from the heap
  73:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  */
  74:/Users/Administrator/sos-2x/kernel/include/malloc.h **** extern void *sos_blk_mem_realloc(void* pntr, uint16_t newSize, bool bCallFromModule);
  75:/Users/Administrator/sos-2x/kernel/include/malloc.h **** 
  76:/Users/Administrator/sos-2x/kernel/include/malloc.h **** /**
  77:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @brief Change memory ownership of a segment of memory
  78:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  */
  79:/Users/Administrator/sos-2x/kernel/include/malloc.h **** extern int8_t sos_blk_mem_change_own(void* ptr, sos_pid_t id, bool bCallFromModule);
  80:/Users/Administrator/sos-2x/kernel/include/malloc.h **** 
  81:/Users/Administrator/sos-2x/kernel/include/malloc.h **** /**
  82:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @brief Allocate a block of memory for long term usage
  83:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  */
  84:/Users/Administrator/sos-2x/kernel/include/malloc.h **** extern void *sos_blk_mem_longterm_alloc(uint16_t size, sos_pid_t id, bool bCallFromModule);
  85:/Users/Administrator/sos-2x/kernel/include/malloc.h **** 
  86:/Users/Administrator/sos-2x/kernel/include/malloc.h **** 
  87:/Users/Administrator/sos-2x/kernel/include/malloc.h **** /**
  88:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @brief Allocate dynamic memory
  89:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @param size Number of bytes to allocate
  90:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @param id Node responsible for the memory
  91:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @return Returns a pointer to the allocated memory.
  92:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * Will return a NULL pointer if the call to sys_malloc fails.
  93:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  */
  94:/Users/Administrator/sos-2x/kernel/include/malloc.h **** static inline void *ker_malloc(uint16_t size, sos_pid_t id)
  95:/Users/Administrator/sos-2x/kernel/include/malloc.h **** {
  96:/Users/Administrator/sos-2x/kernel/include/malloc.h ****   return sos_blk_mem_alloc(size, id, false);
  97:/Users/Administrator/sos-2x/kernel/include/malloc.h **** }
  98:/Users/Administrator/sos-2x/kernel/include/malloc.h **** 
  99:/Users/Administrator/sos-2x/kernel/include/malloc.h **** /**
 100:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @brief Reallocate dynamic memory
 101:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @param pntr Pointer to the currently held block of memory
 102:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @param newSize Number of bytes to be allocated
 103:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @return Returns the pointer to the reallocated memory.
 104:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * Returns a NULL if unable to reallocate but the original pointer is still valid.
 105:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  */
 106:/Users/Administrator/sos-2x/kernel/include/malloc.h **** static inline void* ker_realloc(void* pntr, uint16_t newSize)
 107:/Users/Administrator/sos-2x/kernel/include/malloc.h **** {
 108:/Users/Administrator/sos-2x/kernel/include/malloc.h ****   return sos_blk_mem_realloc(pntr, newSize, false);
 109:/Users/Administrator/sos-2x/kernel/include/malloc.h **** }
 110:/Users/Administrator/sos-2x/kernel/include/malloc.h **** 
 111:/Users/Administrator/sos-2x/kernel/include/malloc.h **** /**
 112:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @brief Free memory pointed to by ptr
 113:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @param ptr Pointer to the memory that should be released
 114:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @return void
 115:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  */
 116:/Users/Administrator/sos-2x/kernel/include/malloc.h **** static inline void ker_free(void* ptr)
 117:/Users/Administrator/sos-2x/kernel/include/malloc.h **** {
 118:/Users/Administrator/sos-2x/kernel/include/malloc.h ****   sos_blk_mem_free(ptr, false);
 436               	.LM25:
 437 0086 6091 0000 		lds r22,i2c+1
 438 008a 0E94 0000 		call sos_blk_mem_free
 439               	.L8:
 440               	.LBE3:
 441               	.LBE2:
 442               	.LBB4:
 443               	.LBB5:
 445               	.LM26:
 446 008e 40E0      		ldi r20,lo8(0)
 447 0090 61E4      		ldi r22,lo8(65)
 448 0092 80E8      		ldi r24,lo8(128)
 449 0094 90E0      		ldi r25,hi8(128)
 450 0096 0E94 0000 		call sos_blk_mem_alloc
 451               	.LBE5:
 452               	.LBE4:
 454               	.LM27:
 455 009a 9093 0000 		sts (i2c+12)+1,r25
 456 009e 8093 0000 		sts i2c+12,r24
 458               	.Ltext2:
 220:/Users/Administrator/sos-2x/processor/avr/i2c.c ****     ker_free(i2c.rxDataBuf);
 221:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	}
 222:/Users/Administrator/sos-2x/processor/avr/i2c.c ****   
 223:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	i2c.rxDataBuf = ker_malloc(I2C_MAX_MSG_LEN, I2C_PID);
 224:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	if (i2c.rxDataBuf == NULL) {
 460               	.LM28:
 461 00a2 892B      		or r24,r25
 462 00a4 19F4      		brne .L11
 225:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		return -ENOMEM;
 464               	.LM29:
 465 00a6 84EF      		ldi r24,lo8(-12)
 466 00a8 9FEF      		ldi r25,hi8(-12)
 467 00aa 0895      		ret
 468               	.L11:
 226:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	}
 227:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 228:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	ENTER_CRITICAL_SECTION();
 470               	.LM30:
 471               	/* #APP */
 472 00ac 9FB7      		in r25, __SREG__
 473 00ae F894      		cli
 474               		
 229:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	if (i2c.flags & I2C_MASTER_FLAG) {
 476               	.LM31:
 477               	/* #NOAPP */
 478 00b0 8091 0000 		lds r24,i2c+16
 479 00b4 84FF      		sbrs r24,4
 480 00b6 02C0      		rjmp .L12
 230:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		i2c.state = I2C_MASTER_IDLE;
 482               	.LM32:
 483 00b8 81E0      		ldi r24,lo8(1)
 484 00ba 01C0      		rjmp .L14
 485               	.L12:
 231:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	} else {
 232:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		i2c.state = I2C_SLAVE_IDLE;
 487               	.LM33:
 488 00bc 82E0      		ldi r24,lo8(2)
 489               	.L14:
 490 00be 8093 0000 		sts i2c,r24
 233:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	}
 234:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	// enable TWI interrupt and ack
 235:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	i2c_setCtrlReg((1<<TWINT)|(1<<TWEA)|(1<<TWEN)|(1<<TWIE));
 492               	.LM34:
 493 00c2 85EC      		ldi r24,lo8(-59)
 494 00c4 8093 7400 		sts 116,r24
 236:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	LEAVE_CRITICAL_SECTION();
 496               	.LM35:
 497               	/* #APP */
 498 00c8 9FBF      		out __SREG__, r25
 499               		
 237:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 238:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	return SOS_OK;
 501               	.LM36:
 502               	/* #NOAPP */
 503 00ca 80E0      		ldi r24,lo8(0)
 504 00cc 90E0      		ldi r25,hi8(0)
 239:/Users/Administrator/sos-2x/processor/avr/i2c.c **** }
 506               	.LM37:
 507 00ce 0895      		ret
 508               	/* epilogue: frame size=0 */
 509 00d0 0895      		ret
 510               	/* epilogue end (size=1) */
 511               	/* function i2c_initTransceiver size 91 (90) */
 516               	.Lscope1:
 523               	.global	i2c_startTransceiverTx
 525               	i2c_startTransceiverTx:
 240:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 241:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 242:/Users/Administrator/sos-2x/processor/avr/i2c.c **** int8_t i2c_startTransceiverTx(
 243:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		uint8_t addr,
 244:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		uint8_t *msg,
 245:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		uint8_t msg_len,
 246:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		uint8_t flags) {
 527               	.LM38:
 528               	/* prologue: frame size=0 */
 529               	/* prologue end (size=0) */
 530 00d2 982F      		mov r25,r24
 531 00d4 FB01      		movw r30,r22
 247:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 248:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	HAS_CRITICAL_SECTION;
 249:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 250:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	uint8_t alt_state = (i2c.flags & I2C_MASTER_FLAG)?I2C_MASTER_IDLE:I2C_SLAVE_IDLE;
 533               	.LM39:
 534 00d6 8091 0000 		lds r24,i2c+16
 535 00da 84FF      		sbrs r24,4
 536 00dc 02C0      		rjmp .L16
 538               	.LM40:
 539 00de 81E0      		ldi r24,lo8(1)
 540 00e0 01C0      		rjmp .L17
 541               	.L16:
 542 00e2 82E0      		ldi r24,lo8(2)
 543               	.L17:
 251:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 252:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	if (!((i2c.state == I2C_IDLE) || (i2c.state == alt_state))) {
 545               	.LM41:
 546 00e4 3091 0000 		lds r19,i2c
 547 00e8 3323      		tst r19
 548 00ea 29F0      		breq .L18
 549 00ec 3817      		cp r19,r24
 550 00ee 19F0      		breq .L18
 253:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		return -EBUSY;
 552               	.LM42:
 553 00f0 80EF      		ldi r24,lo8(-16)
 554 00f2 9FEF      		ldi r25,hi8(-16)
 555 00f4 0895      		ret
 556               	.L18:
 254:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	}
 255:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	ENTER_CRITICAL_SECTION();
 558               	.LM43:
 559               	/* #APP */
 560 00f6 5FB7      		in r21, __SREG__
 561 00f8 F894      		cli
 562               		
 256:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	i2c.flags = (I2C_SYS_SHARED_FLAGS_MSK & flags)|I2C_BUFF_DIRTY_FLAG;
 564               	.LM44:
 565               	/* #NOAPP */
 566 00fa 822F      		mov r24,r18
 567 00fc 817F      		andi r24,lo8(-15)
 568 00fe 8860      		ori r24,lo8(8)
 569 0100 8093 0000 		sts i2c+16,r24
 257:/Users/Administrator/sos-2x/processor/avr/i2c.c ****     i2c.addr = (addr<<1);  // shift destination address once (and only once!)
 571               	.LM45:
 572 0104 990F      		lsl r25
 573 0106 9093 0000 		sts i2c+3,r25
 258:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 259:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	if (i2c.flags & I2C_SOS_MSG_FLAG) {
 575               	.LM46:
 576 010a 87FF      		sbrs r24,7
 577 010c 11C0      		rjmp .L19
 260:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		i2c.msgBuf = (Message*)msg;
 579               	.LM47:
 580 010e F093 0000 		sts (i2c+8)+1,r31
 581 0112 E093 0000 		sts i2c+8,r30
 261:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		i2c.msgLen = i2c.msgBuf->len;  // expected msg len
 583               	.LM48:
 584 0116 8781      		ldd r24,Z+7
 585 0118 8093 0000 		sts i2c+6,r24
 262:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		i2c.txPending = SOS_MSG_HEADER_SIZE + i2c.msgLen + SOS_MSG_CRC_SIZE;
 587               	.LM49:
 588 011c 865F      		subi r24,lo8(-(10))
 589 011e 8093 0000 		sts i2c+14,r24
 263:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		i2c.dataBuf = i2c.msgBuf->data;
 591               	.LM50:
 592 0122 8085      		ldd r24,Z+8
 593 0124 9185      		ldd r25,Z+9
 594 0126 9093 0000 		sts (i2c+10)+1,r25
 595 012a 8093 0000 		sts i2c+10,r24
 596 012e 08C0      		rjmp .L20
 597               	.L19:
 264:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	} else {
 265:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		i2c.dataBuf = msg;
 599               	.LM51:
 600 0130 F093 0000 		sts (i2c+10)+1,r31
 601 0134 E093 0000 		sts i2c+10,r30
 266:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		i2c.msgLen = msg_len;
 603               	.LM52:
 604 0138 4093 0000 		sts i2c+6,r20
 267:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		i2c.txPending = i2c.msgLen;
 606               	.LM53:
 607 013c 4093 0000 		sts i2c+14,r20
 608               	.L20:
 268:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	}
 269:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	i2c.msg_state = SOS_MSG_WAIT;
 610               	.LM54:
 611 0140 81E0      		ldi r24,lo8(1)
 612 0142 8093 0000 		sts i2c+1,r24
 270:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	i2c.idx = 0;
 614               	.LM55:
 615 0146 1092 0000 		sts i2c+7,__zero_reg__
 616               	.LBB6:
 617               	.LBB7:
 619               	.LM56:
 620 014a 3093 0000 		sts priorState,r19
 621               	.LBE7:
 622               	.LBE6:
 271:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 272:/Users/Administrator/sos-2x/processor/avr/i2c.c ****     // TWI Interface enabled.
 273:/Users/Administrator/sos-2x/processor/avr/i2c.c ****     // Enable TWI Interupt and clear the flag.
 274:/Users/Administrator/sos-2x/processor/avr/i2c.c ****     // Initiate a START condition.
 275:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	saveState(i2c.state);
 276:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	if (i2c.flags & I2C_MASTER_FLAG) {
 624               	.LM57:
 625 014e 8091 0000 		lds r24,i2c+16
 626 0152 84FF      		sbrs r24,4
 627 0154 05C0      		rjmp .L22
 277:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		i2c.state = I2C_MASTER_ARB;
 629               	.LM58:
 630 0156 83E0      		ldi r24,lo8(3)
 631 0158 8093 0000 		sts i2c,r24
 278:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		i2c_setCtrlReg((1<<TWINT)|(1<<TWSTA)|(1<<TWEN)|(1<<TWIE));
 633               	.LM59:
 634 015c 85EA      		ldi r24,lo8(-91)
 635 015e 04C0      		rjmp .L24
 636               	.L22:
 279:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	} else { // else sit and wait
 280:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		i2c.state = I2C_SLAVE_WAIT;
 638               	.LM60:
 639 0160 86E0      		ldi r24,lo8(6)
 640 0162 8093 0000 		sts i2c,r24
 281:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		i2c_setCtrlReg((1<<TWEA)|(1<<TWEN)|(1<<TWIE));
 642               	.LM61:
 643 0166 85E4      		ldi r24,lo8(69)
 644               	.L24:
 645 0168 8093 7400 		sts 116,r24
 282:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	}
 283:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	LEAVE_CRITICAL_SECTION();
 647               	.LM62:
 648               	/* #APP */
 649 016c 5FBF      		out __SREG__, r21
 650               		
 284:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 285:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	return SOS_OK;
 652               	.LM63:
 653               	/* #NOAPP */
 654 016e 80E0      		ldi r24,lo8(0)
 655 0170 90E0      		ldi r25,hi8(0)
 286:/Users/Administrator/sos-2x/processor/avr/i2c.c **** }
 657               	.LM64:
 658 0172 0895      		ret
 659               	/* epilogue: frame size=0 */
 660 0174 0895      		ret
 661               	/* epilogue end (size=1) */
 662               	/* function i2c_startTransceiverTx size 89 (88) */
 668               	.Lscope2:
 674               	.global	i2c_startTransceiverRx
 676               	i2c_startTransceiverRx:
 287:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 288:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 289:/Users/Administrator/sos-2x/processor/avr/i2c.c **** int8_t i2c_startTransceiverRx(uint8_t addr,
 290:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		uint8_t rx_msg_len,
 291:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		uint8_t flags) {
 678               	.LM65:
 679               	/* prologue: frame size=0 */
 680 0176 1F93      		push r17
 681 0178 CF93      		push r28
 682               	/* prologue end (size=2) */
 683 017a 182F      		mov r17,r24
 684 017c C62F      		mov r28,r22
 292:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 293:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	HAS_CRITICAL_SECTION;
 294:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 295:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	uint8_t alt_state = (i2c.flags & I2C_MASTER_FLAG)?I2C_MASTER_IDLE:I2C_SLAVE_IDLE;
 686               	.LM66:
 687 017e 8091 0000 		lds r24,i2c+16
 688 0182 84FF      		sbrs r24,4
 689 0184 02C0      		rjmp .L26
 691               	.LM67:
 692 0186 91E0      		ldi r25,lo8(1)
 693 0188 01C0      		rjmp .L27
 694               	.L26:
 695 018a 92E0      		ldi r25,lo8(2)
 696               	.L27:
 296:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 297:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	while (!((i2c.state == I2C_IDLE) || (i2c.state == alt_state))) {
 298:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		return -EBUSY;
 698               	.LM68:
 699 018c 8091 0000 		lds r24,i2c
 700 0190 8823      		tst r24
 701 0192 29F0      		breq .L29
 702 0194 8917      		cp r24,r25
 703 0196 19F0      		breq .L29
 704 0198 80EF      		ldi r24,lo8(-16)
 705 019a 9FEF      		ldi r25,hi8(-16)
 706 019c 3EC0      		rjmp .L25
 707               	.L29:
 299:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	}
 300:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	if (flags & I2C_SOS_MSG_FLAG) {
 709               	.LM69:
 710 019e 47FF      		sbrs r20,7
 711 01a0 03C0      		rjmp .L31
 301:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		return -EINVAL;
 713               	.LM70:
 714 01a2 8AEE      		ldi r24,lo8(-22)
 715 01a4 9FEF      		ldi r25,hi8(-22)
 716 01a6 39C0      		rjmp .L25
 717               	.L31:
 302:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	}
 303:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	i2c.flags = I2C_SYS_SHARED_FLAGS_MSK & flags;
 719               	.LM71:
 720 01a8 417F      		andi r20,lo8(-15)
 721 01aa 4093 0000 		sts i2c+16,r20
 304:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 305:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	if (rx_msg_len >= I2C_MAX_MSG_LEN) {
 723               	.LM72:
 724 01ae C7FD      		sbrc r28,7
 725 01b0 0CC0      		rjmp .L40
 726               	.LBB8:
 727               	.LBB9:
 729               	.Ltext3:
 731               	.LM73:
 732 01b2 40E0      		ldi r20,lo8(0)
 733 01b4 61E4      		ldi r22,lo8(65)
 734 01b6 8C2F      		mov r24,r28
 735 01b8 9927      		clr r25
 736 01ba 0E94 0000 		call sos_blk_mem_alloc
 737               	.LBE9:
 738               	.LBE8:
 740               	.LM74:
 741 01be 9093 0000 		sts (i2c+10)+1,r25
 742 01c2 8093 0000 		sts i2c+10,r24
 743 01c6 892B      		or r24,r25
 744 01c8 19F4      		brne .L33
 745               	.L40:
 747               	.Ltext4:
 306:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		return -ENOMEM;
 307:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	}
 308:/Users/Administrator/sos-2x/processor/avr/i2c.c ****  
 309:/Users/Administrator/sos-2x/processor/avr/i2c.c ****   /** 
 310:/Users/Administrator/sos-2x/processor/avr/i2c.c ****    * \bug Um, maybe this check is not such a good idea.  i2c.dataBuf needs to
 311:/Users/Administrator/sos-2x/processor/avr/i2c.c ****    * be null.  This should be stronger and take the form of an assert such as:
 312:/Users/Administrator/sos-2x/processor/avr/i2c.c ****    *
 313:/Users/Administrator/sos-2x/processor/avr/i2c.c ****    * assert(i2c.dataBuf == NULL);
 314:/Users/Administrator/sos-2x/processor/avr/i2c.c ****    *
 315:/Users/Administrator/sos-2x/processor/avr/i2c.c ****    * But no asserts for us :-(
 316:/Users/Administrator/sos-2x/processor/avr/i2c.c ****    */
 317:/Users/Administrator/sos-2x/processor/avr/i2c.c ****   //if (i2c.dataBuf == NULL) {
 318:/Users/Administrator/sos-2x/processor/avr/i2c.c ****     if ((i2c.dataBuf = ker_malloc(rx_msg_len, I2C_PID)) == NULL) { 
 319:/Users/Administrator/sos-2x/processor/avr/i2c.c ****       return -ENOMEM; 
 749               	.LM75:
 750 01ca 84EF      		ldi r24,lo8(-12)
 751 01cc 9FEF      		ldi r25,hi8(-12)
 752 01ce 25C0      		rjmp .L25
 753               	.L33:
 320:/Users/Administrator/sos-2x/processor/avr/i2c.c ****     }
 321:/Users/Administrator/sos-2x/processor/avr/i2c.c ****   //}
 322:/Users/Administrator/sos-2x/processor/avr/i2c.c ****   i2c.msgLen = rx_msg_len; i2c.idx = 0;
 755               	.LM76:
 756 01d0 C093 0000 		sts i2c+6,r28
 757 01d4 1092 0000 		sts i2c+7,__zero_reg__
 323:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 324:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	ENTER_CRITICAL_SECTION();
 759               	.LM77:
 760               	/* #APP */
 761 01d8 9FB7      		in r25, __SREG__
 762 01da F894      		cli
 763               		
 325:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	i2c.addr = (addr<<1);  // shift destination address once (and only once!)
 765               	.LM78:
 766               	/* #NOAPP */
 767 01dc 110F      		lsl r17
 768 01de 1093 0000 		sts i2c+3,r17
 326:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 327:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	i2c.msg_state = SOS_MSG_WAIT;
 770               	.LM79:
 771 01e2 81E0      		ldi r24,lo8(1)
 772 01e4 8093 0000 		sts i2c+1,r24
 773               	.LBB10:
 775               	.LM80:
 776 01e8 8091 0000 		lds r24,i2c
 777               	.LBB11:
 779               	.LM81:
 780 01ec 8093 0000 		sts priorState,r24
 781               	.LBE11:
 782               	.LBE10:
 328:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 329:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	saveState(i2c.state);
 330:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	if (i2c.flags & I2C_MASTER_FLAG) {
 784               	.LM82:
 785 01f0 8091 0000 		lds r24,i2c+16
 786 01f4 84FF      		sbrs r24,4
 787 01f6 05C0      		rjmp .L36
 331:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		i2c.state = I2C_MASTER_ARB;
 789               	.LM83:
 790 01f8 83E0      		ldi r24,lo8(3)
 791 01fa 8093 0000 		sts i2c,r24
 332:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		i2c_setCtrlReg((1<<TWINT)|(1<<TWSTA)|(1<<TWEN)|(1<<TWIE));
 793               	.LM84:
 794 01fe 85EA      		ldi r24,lo8(-91)
 795 0200 04C0      		rjmp .L39
 796               	.L36:
 333:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	} else { // else sit and wait
 334:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		i2c.state = I2C_SLAVE_WAIT;
 798               	.LM85:
 799 0202 86E0      		ldi r24,lo8(6)
 800 0204 8093 0000 		sts i2c,r24
 335:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		i2c_setCtrlReg((1<<TWEA)|(1<<TWEN)|(1<<TWIE));
 802               	.LM86:
 803 0208 85E4      		ldi r24,lo8(69)
 804               	.L39:
 805 020a 8093 7400 		sts 116,r24
 336:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	}
 337:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	i2c.msg_state = SOS_MSG_RX_START;
 807               	.LM87:
 808 020e 8CE0      		ldi r24,lo8(12)
 809 0210 8093 0000 		sts i2c+1,r24
 338:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	LEAVE_CRITICAL_SECTION();
 811               	.LM88:
 812               	/* #APP */
 813 0214 9FBF      		out __SREG__, r25
 814               		
 339:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 340:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	return SOS_OK;
 816               	.LM89:
 817               	/* #NOAPP */
 818 0216 80E0      		ldi r24,lo8(0)
 819 0218 90E0      		ldi r25,hi8(0)
 820               	.L25:
 821               	/* epilogue: frame size=0 */
 822 021a CF91      		pop r28
 823 021c 1F91      		pop r17
 824 021e 0895      		ret
 825               	/* epilogue end (size=3) */
 826               	/* function i2c_startTransceiverRx size 92 (87) */
 835               	.Lscope3:
 837               		.lcomm addrFailCnt.0,1
 839               	.global	__vector_33
 841               	__vector_33:
 341:/Users/Administrator/sos-2x/processor/avr/i2c.c **** }
 342:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 343:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 344:/Users/Administrator/sos-2x/processor/avr/i2c.c **** // ********* Interrupt Handlers ********** //
 345:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 346:/Users/Administrator/sos-2x/processor/avr/i2c.c **** /**
 347:/Users/Administrator/sos-2x/processor/avr/i2c.c ****  * This function is the Interrupt Service Routine (ISR), and called when the
 348:/Users/Administrator/sos-2x/processor/avr/i2c.c ****  * TWI interrupt is triggered; that is whenever a TWI event has occurred. This
 349:/Users/Administrator/sos-2x/processor/avr/i2c.c ****  * function should not be called directly from the main application.
 350:/Users/Administrator/sos-2x/processor/avr/i2c.c ****  */
 351:/Users/Administrator/sos-2x/processor/avr/i2c.c **** #define MAX_ADDR_FAIL 3
 352:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 353:/Users/Administrator/sos-2x/processor/avr/i2c.c **** i2c_interrupt() 
 354:/Users/Administrator/sos-2x/processor/avr/i2c.c **** {
 843               	.LM90:
 844               	/* prologue: frame size=0 */
 845 0220 1F92      		push __zero_reg__
 846 0222 0F92      		push __tmp_reg__
 847 0224 0FB6      		in __tmp_reg__,__SREG__
 848 0226 0F92      		push __tmp_reg__
 849 0228 1124      		clr __zero_reg__
 850 022a 2F93      		push r18
 851 022c 3F93      		push r19
 852 022e 4F93      		push r20
 853 0230 5F93      		push r21
 854 0232 6F93      		push r22
 855 0234 7F93      		push r23
 856 0236 8F93      		push r24
 857 0238 9F93      		push r25
 858 023a AF93      		push r26
 859 023c BF93      		push r27
 860 023e EF93      		push r30
 861 0240 FF93      		push r31
 862               	/* prologue end (size=17) */
 355:/Users/Administrator/sos-2x/processor/avr/i2c.c **** #ifdef SOS_USE_PREEMPTION
 356:/Users/Administrator/sos-2x/processor/avr/i2c.c ****   HAS_PREEMPTION_SECTION;
 357:/Users/Administrator/sos-2x/processor/avr/i2c.c ****   DISABLE_PREEMPTION();
 358:/Users/Administrator/sos-2x/processor/avr/i2c.c **** #endif
 359:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	static uint8_t addrFailCnt;
 360:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	
 361:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	SOS_MEASUREMENT_IDLE_END();
 362:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	
 363:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	// TWSR & TW_STATUS_MASK
 364:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	switch (TWSR) {
 864               	.LM91:
 865 0242 8091 7100 		lds r24,113
 866 0246 9927      		clr r25
 867 0248 8836      		cpi r24,104
 868 024a 9105      		cpc r25,__zero_reg__
 869 024c 09F4      		brne .+2
 870 024e 4FC2      		rjmp .L124
 872               	.LM92:
 873 0250 8936      		cpi r24,105
 874 0252 9105      		cpc r25,__zero_reg__
 875 0254 0CF0      		brlt .+2
 876 0256 3FC0      		rjmp .L142
 877 0258 8033      		cpi r24,48
 878 025a 9105      		cpc r25,__zero_reg__
 879 025c 09F4      		brne .+2
 880 025e 75C1      		rjmp .L81
 881 0260 8133      		cpi r24,49
 882 0262 9105      		cpc r25,__zero_reg__
 883 0264 BCF4      		brge .L143
 884 0266 8831      		cpi r24,24
 885 0268 9105      		cpc r25,__zero_reg__
 886 026a 09F4      		brne .+2
 887 026c 84C0      		rjmp .L47
 888 026e 8931      		cpi r24,25
 889 0270 9105      		cpc r25,__zero_reg__
 890 0272 44F4      		brge .L144
 891 0274 8830      		cpi r24,8
 892 0276 9105      		cpc r25,__zero_reg__
 893 0278 09F4      		brne .+2
 894 027a 6EC0      		rjmp .L43
 895 027c 4097      		sbiw r24,16
 896 027e 09F4      		brne .+2
 897 0280 6FC0      		rjmp .L44
 898 0282 A5C2      		rjmp .L141
 899               	.L144:
 900 0284 8032      		cpi r24,32
 901 0286 9105      		cpc r25,__zero_reg__
 902 0288 09F4      		brne .+2
 903 028a 4DC1      		rjmp .L73
 904 028c 8897      		sbiw r24,40
 905 028e 09F4      		brne .+2
 906 0290 94C0      		rjmp .L51
 907 0292 9DC2      		rjmp .L141
 908               	.L143:
 909 0294 8834      		cpi r24,72
 910 0296 9105      		cpc r25,__zero_reg__
 911 0298 09F4      		brne .+2
 912 029a 8FC1      		rjmp .L93
 913 029c 8934      		cpi r24,73
 914 029e 9105      		cpc r25,__zero_reg__
 915 02a0 4CF4      		brge .L145
 916 02a2 8833      		cpi r24,56
 917 02a4 9105      		cpc r25,__zero_reg__
 918 02a6 09F4      		brne .+2
 919 02a8 90C1      		rjmp .L158
 920 02aa 8034      		cpi r24,64
 921 02ac 9105      		cpc r25,__zero_reg__
 922 02ae 09F4      		brne .+2
 923 02b0 5BC1      		rjmp .L87
 924 02b2 8DC2      		rjmp .L141
 925               	.L145:
 926 02b4 8835      		cpi r24,88
 927 02b6 9105      		cpc r25,__zero_reg__
 928 02b8 09F4      		brne .+2
 929 02ba 8FC1      		rjmp .L100
 930 02bc 8935      		cpi r24,89
 931 02be 9105      		cpc r25,__zero_reg__
 932 02c0 2CF4      		brge .L146
 933 02c2 8035      		cpi r24,80
 934 02c4 9105      		cpc r25,__zero_reg__
 935 02c6 09F4      		brne .+2
 936 02c8 5EC1      		rjmp .L90
 937 02ca 81C2      		rjmp .L141
 938               	.L146:
 939 02cc 8036      		cpi r24,96
 940 02ce 9105      		cpc r25,__zero_reg__
 941 02d0 09F4      		brne .+2
 942 02d2 0DC2      		rjmp .L124
 943 02d4 7CC2      		rjmp .L141
 944               	.L142:
 945 02d6 8839      		cpi r24,152
 946 02d8 9105      		cpc r25,__zero_reg__
 947 02da 09F4      		brne .+2
 948 02dc 3DC2      		rjmp .L131
 949 02de 8939      		cpi r24,153
 950 02e0 9105      		cpc r25,__zero_reg__
 951 02e2 CCF4      		brge .L147
 952 02e4 8038      		cpi r24,128
 953 02e6 9105      		cpc r25,__zero_reg__
 954 02e8 09F4      		brne .+2
 955 02ea 0EC2      		rjmp .L127
 956 02ec 8138      		cpi r24,129
 957 02ee 9105      		cpc r25,__zero_reg__
 958 02f0 4CF4      		brge .L148
 959 02f2 8037      		cpi r24,112
 960 02f4 9105      		cpc r25,__zero_reg__
 961 02f6 09F4      		brne .+2
 962 02f8 F7C1      		rjmp .L122
 963 02fa 8837      		cpi r24,120
 964 02fc 9105      		cpc r25,__zero_reg__
 965 02fe 09F4      		brne .+2
 966 0300 F3C1      		rjmp .L122
 967 0302 65C2      		rjmp .L141
 968               	.L148:
 969 0304 8838      		cpi r24,136
 970 0306 9105      		cpc r25,__zero_reg__
 971 0308 09F4      		brne .+2
 972 030a 26C2      		rjmp .L131
 973 030c 8039      		cpi r24,144
 974 030e 9105      		cpc r25,__zero_reg__
 975 0310 09F4      		brne .+2
 976 0312 FAC1      		rjmp .L127
 977 0314 5CC2      		rjmp .L141
 978               	.L147:
 979 0316 803B      		cpi r24,176
 980 0318 9105      		cpc r25,__zero_reg__
 981 031a 09F4      		brne .+2
 982 031c 8BC1      		rjmp .L108
 983 031e 813B      		cpi r24,177
 984 0320 9105      		cpc r25,__zero_reg__
 985 0322 4CF4      		brge .L149
 986 0324 803A      		cpi r24,160
 987 0326 9105      		cpc r25,__zero_reg__
 988 0328 09F4      		brne .+2
 989 032a 33C2      		rjmp .L133
 990 032c 883A      		cpi r24,168
 991 032e 9105      		cpc r25,__zero_reg__
 992 0330 09F4      		brne .+2
 993 0332 80C1      		rjmp .L108
 994 0334 4CC2      		rjmp .L141
 995               	.L149:
 996 0336 803C      		cpi r24,192
 997 0338 9105      		cpc r25,__zero_reg__
 998 033a 09F4      		brne .+2
 999 033c ADC1      		rjmp .L116
 1000 033e 813C      		cpi r24,193
 1001 0340 9105      		cpc r25,__zero_reg__
 1002 0342 2CF4      		brge .L150
 1003 0344 883B      		cpi r24,184
 1004 0346 9105      		cpc r25,__zero_reg__
 1005 0348 09F4      		brne .+2
 1006 034a 84C1      		rjmp .L112
 1007 034c 40C2      		rjmp .L141
 1008               	.L150:
 1009 034e 883C      		cpi r24,200
 1010 0350 9105      		cpc r25,__zero_reg__
 1011 0352 09F4      		brne .+2
 1012 0354 C0C1      		rjmp .L120
 1013 0356 3BC2      		rjmp .L141
 1014               	.L43:
 365:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		/*************************
 366:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		 * Master General States *
 367:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		 *************************/
 368:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	case TWI_START: /* 0x08 */
 369:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		addrFailCnt = 0;
 1016               	.LM93:
 1017 0358 1092 0000 		sts addrFailCnt.0,__zero_reg__
 370:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		i2c.idx = 0;
 1019               	.LM94:
 1020 035c 1092 0000 		sts i2c+7,__zero_reg__
 1021               	.L44:
 371:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		// Fall through!
 372:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		
 373:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	case TWI_REP_START: /* 0x10 */
 374:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		i2c_setByte(i2c.addr|((i2c.flags & I2C_TX_FLAG)?0:1));  // only set R/W bit if reading
 1023               	.LM95:
 1024 0360 8091 0000 		lds r24,i2c+3
 1025 0364 282F      		mov r18,r24
 1026 0366 3327      		clr r19
 1027 0368 8091 0000 		lds r24,i2c+16
 1028 036c 86FF      		sbrs r24,6
 1029 036e 2160      		ori r18,lo8(1)
 1030               	.L45:
 1031 0370 2093 7300 		sts 115,r18
 1032 0374 1DC0      		rjmp .L156
 1033               	.L47:
 375:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		i2c_setCtrlReg((1<<TWINT)|(1<<TWEN)|(1<<TWIE));
 376:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		break;
 377:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		
 378:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	case TWI_ARB_LOST: /* 0x38 */
 379:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		i2c_setCtrlReg((1<<TWINT)|(1<<TWSTA)|(1<<TWEN)|(1<<TWIE)); // Initate a (RE)START condition
 380:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		// TWI hardware will resend start when bus is free and signal TWI_RESTART
 381:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		break;
 382:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		
 383:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		
 384:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		
 385:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		/*****************************
 386:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		 * Master Transmitter States *
 387:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		 *****************************/
 388:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	case TWI_MTX_ADR_ACK: /* 0x18 */
 389:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		i2c.state = I2C_MASTER_TX;
 1035               	.LM96:
 1036 0376 84E0      		ldi r24,lo8(4)
 1037 0378 8093 0000 		sts i2c,r24
 390:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		if (i2c.flags & I2C_SOS_MSG_FLAG) {
 1039               	.LM97:
 1040 037c 8091 0000 		lds r24,i2c+16
 1041 0380 87FF      		sbrs r24,7
 1042 0382 18C0      		rjmp .L48
 391:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 			// this is a difference between the i2c and uart
 392:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 			// uart uses a protocol byte for BOTH raw and sos_msgs
 393:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 			// i2c ONLY sends a protocol byte in the case of a sos_msg
 394:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 			i2c_setByte(HDLC_SOS_MSG);
 1044               	.LM98:
 1045 0384 81E0      		ldi r24,lo8(1)
 1046 0386 8093 7300 		sts 115,r24
 395:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 			i2c.msg_state = SOS_MSG_TX_HDR;
 1048               	.LM99:
 1049 038a 87E0      		ldi r24,lo8(7)
 1050 038c 8093 0000 		sts i2c+1,r24
 1051               	.LBB12:
 1052               	.LBB13:
 1054               	.Ltext5:
   1:/Users/Administrator/sos-2x/processor/avr/include/crc.h **** /* -*- Mode: C; tab-width:4 -*- */
   2:/Users/Administrator/sos-2x/processor/avr/include/crc.h **** /* ex: set ts=4: */
   3:/Users/Administrator/sos-2x/processor/avr/include/crc.h **** /*									tab:4
   4:/Users/Administrator/sos-2x/processor/avr/include/crc.h ****  * "Copyright (c) 2000-2003 The Regents of the University  of California.  
   5:/Users/Administrator/sos-2x/processor/avr/include/crc.h ****  * All rights reserved.
   6:/Users/Administrator/sos-2x/processor/avr/include/crc.h ****  *
   7:/Users/Administrator/sos-2x/processor/avr/include/crc.h ****  * Permission to use, copy, modify, and distribute this software and its
   8:/Users/Administrator/sos-2x/processor/avr/include/crc.h ****  * documentation for any purpose, without fee, and without written agreement is
   9:/Users/Administrator/sos-2x/processor/avr/include/crc.h ****  * hereby granted, provided that the above copyright notice, the following
  10:/Users/Administrator/sos-2x/processor/avr/include/crc.h ****  * two paragraphs and the author appear in all copies of this software.
  11:/Users/Administrator/sos-2x/processor/avr/include/crc.h ****  * 
  12:/Users/Administrator/sos-2x/processor/avr/include/crc.h ****  * IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR
  13:/Users/Administrator/sos-2x/processor/avr/include/crc.h ****  * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT
  14:/Users/Administrator/sos-2x/processor/avr/include/crc.h ****  * OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF THE UNIVERSITY OF
  15:/Users/Administrator/sos-2x/processor/avr/include/crc.h ****  * CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  16:/Users/Administrator/sos-2x/processor/avr/include/crc.h ****  * 
  17:/Users/Administrator/sos-2x/processor/avr/include/crc.h ****  * THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
  18:/Users/Administrator/sos-2x/processor/avr/include/crc.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
  19:/Users/Administrator/sos-2x/processor/avr/include/crc.h ****  * AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
  20:/Users/Administrator/sos-2x/processor/avr/include/crc.h ****  * ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATION TO
  21:/Users/Administrator/sos-2x/processor/avr/include/crc.h ****  * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS."
  22:/Users/Administrator/sos-2x/processor/avr/include/crc.h ****  *
  23:/Users/Administrator/sos-2x/processor/avr/include/crc.h ****  * Copyright (c) 2002-2003 Intel Corporation
  24:/Users/Administrator/sos-2x/processor/avr/include/crc.h ****  * All rights reserved.
  25:/Users/Administrator/sos-2x/processor/avr/include/crc.h ****  *
  26:/Users/Administrator/sos-2x/processor/avr/include/crc.h ****  * This file is distributed under the terms in the attached INTEL-LICENSE     
  27:/Users/Administrator/sos-2x/processor/avr/include/crc.h ****  * file. If you do not find these files, copies can be found by writing to
  28:/Users/Administrator/sos-2x/processor/avr/include/crc.h ****  * Intel Research Berkeley, 2150 Shattuck Avenue, Suite 1300, Berkeley, CA, 
  29:/Users/Administrator/sos-2x/processor/avr/include/crc.h ****  * 94704.  Attention:  Intel License Inquiry.
  30:/Users/Administrator/sos-2x/processor/avr/include/crc.h ****  */
  31:/Users/Administrator/sos-2x/processor/avr/include/crc.h **** #ifndef _CRC_H
  32:/Users/Administrator/sos-2x/processor/avr/include/crc.h **** #define _CRC_H
  33:/Users/Administrator/sos-2x/processor/avr/include/crc.h **** 
  34:/Users/Administrator/sos-2x/processor/avr/include/crc.h **** extern uint16_t crcTable[256] PROGMEM;  //!< this is defined in crc.c
  35:/Users/Administrator/sos-2x/processor/avr/include/crc.h **** 
  36:/Users/Administrator/sos-2x/processor/avr/include/crc.h **** static inline uint16_t crcByte(uint16_t oldCrc, uint8_t byte)
  37:/Users/Administrator/sos-2x/processor/avr/include/crc.h **** {
  38:/Users/Administrator/sos-2x/processor/avr/include/crc.h ****   uint8_t *magic = (uint8_t *)&crcTable[oldCrc >> 8 ^ byte];
 1056               	.LM100:
 1057 0390 E0E0      		ldi r30,lo8(crcTable+2)
 1058 0392 F0E0      		ldi r31,hi8(crcTable+2)
 1059               	.LBB14:
  39:/Users/Administrator/sos-2x/processor/avr/include/crc.h **** 
  40:/Users/Administrator/sos-2x/processor/avr/include/crc.h ****   return pgm_read_byte(magic) | ((uint8_t)oldCrc ^ pgm_read_byte(magic + 1)) << 8;
 1061               	.LM101:
 1062               	/* #APP */
 1063 0394 8491      		lpm r24, Z
 1064               		
 1065               	/* #NOAPP */
 1066               	.LBE14:
 1067 0396 282F      		mov r18,r24
 1068 0398 3327      		clr r19
 1069               	.LBB15:
 1070 039a 3196      		adiw r30,1
 1071               	/* #APP */
 1072 039c 8491      		lpm r24, Z
 1073               		
 1074               	/* #NOAPP */
 1075               	.LBE15:
 1076 039e 9927      		clr r25
 1077 03a0 982F      		mov r25,r24
 1078 03a2 8827      		clr r24
 1079 03a4 282B      		or r18,r24
 1080 03a6 392B      		or r19,r25
 1081               	.LBE13:
 1082               	.LBE12:
 1084               	.LM102:
 1085 03a8 3093 0000 		sts (i2c+4)+1,r19
 1086 03ac 2093 0000 		sts i2c+4,r18
 1087               	.L156:
 1089               	.Ltext6:
 396:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 			// this is a sos_msg so a crc is required
 397:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 			i2c.crc = crcByte(0, HDLC_SOS_MSG);
 398:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 			i2c_setCtrlReg((1<<TWINT)|(1<<TWEN)|(1<<TWIE));
 1091               	.LM103:
 1092 03b0 85E8      		ldi r24,lo8(-123)
 1093 03b2 ECC1      		rjmp .L154
 1094               	.L48:
 399:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 			break;
 400:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		} else {
 401:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 			i2c.msg_state = SOS_MSG_TX_RAW;
 1096               	.LM104:
 1097 03b4 82E0      		ldi r24,lo8(2)
 1098 03b6 8093 0000 		sts i2c+1,r24
 1099               	.L51:
 402:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		} // fall through
 403:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		
 404:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 	case TWI_MTX_DATA_ACK: /* 0x28 */
 405:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		switch (i2c.msg_state) {
 1101               	.LM105:
 1102 03ba 8091 0000 		lds r24,i2c+1
 1103 03be 9927      		clr r25
 1104 03c0 8830      		cpi r24,8
 1105 03c2 9105      		cpc r25,__zero_reg__
 1106 03c4 09F4      		brne .+2
 1107 03c6 4EC0      		rjmp .L57
 1108 03c8 8930      		cpi r24,9
 1109 03ca 9105      		cpc r25,__zero_reg__
 1110 03cc 3CF4      		brge .L72
 1111 03ce 8230      		cpi r24,2
 1112 03d0 9105      		cpc r25,__zero_reg__
 1113 03d2 09F4      		brne .+2
 1114 03d4 47C0      		rjmp .L57
 1115 03d6 0797      		sbiw r24,7
 1116 03d8 69F0      		breq .L53
 1117 03da EACF      		rjmp .L156
 1118               	.L72:
 1119 03dc 8A30      		cpi r24,10
 1120 03de 9105      		cpc r25,__zero_reg__
 1121 03e0 09F4      		brne .+2
 1122 03e2 8AC0      		rjmp .L64
 1123 03e4 8A30      		cpi r24,10
 1124 03e6 9105      		cpc r25,__zero_reg__
 1125 03e8 0CF4      		brge .+2
 1126 03ea 7BC0      		rjmp .L63
 1127 03ec 0B97      		sbiw r24,11
 1128 03ee 09F4      		brne .+2
 1129 03f0 94C0      		rjmp .L65
 1130 03f2 DECF      		rjmp .L156
 1131               	.L53:
 406:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		case SOS_MSG_TX_HDR:
 407:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 			i2c_setByte(((uint8_t*)(i2c.msgBuf))[i2c.idx]);
 1133               	.LM106:
 1134 03f4 6091 0000 		lds r22,i2c+7
 1135 03f8 E091 0000 		lds r30,i2c+8
 1136 03fc F091 0000 		lds r31,(i2c+8)+1
 1137 0400 E60F      		add r30,r22
 1138 0402 F11D      		adc r31,__zero_reg__
 1139 0404 8081      		ld r24,Z
 1140 0406 8093 7300 		sts 115,r24
 1141               	.LBB16:
 1143               	.Ltext7:
 1145               	.LM107:
 1146 040a 4091 0000 		lds r20,i2c+4
 1147 040e 5091 0000 		lds r21,(i2c+4)+1
 1148 0412 8081      		ld r24,Z
 1149               	.LBB17:
 1151               	.LM108:
 1152 0414 E52F      		mov r30,r21
 1153 0416 FF27      		clr r31
 1154 0418 9927      		clr r25
 1155 041a E827      		eor r30,r24
 1156 041c F927      		eor r31,r25
 1157 041e EE0F      		add r30,r30
 1158 0420 FF1F      		adc r31,r31
 1159 0422 E050      		subi r30,lo8(-(crcTable))
 1160 0424 F040      		sbci r31,hi8(-(crcTable))
 1161               	.LBB18:
 1163               	.LM109:
 1164               	/* #APP */
 1165 0426 8491      		lpm r24, Z
 1166               		
 1167               	/* #NOAPP */
 1168               	.LBE18:
 1169 0428 282F      		mov r18,r24
 1170 042a 3327      		clr r19
 1171               	.LBB19:
 1172 042c 3196      		adiw r30,1
 1173               	/* #APP */
 1174 042e 8491      		lpm r24, Z
 1175               		
 1176               	/* #NOAPP */
 1177               	.LBE19:
 1178 0430 8427      		eor r24,r20
 1179 0432 9927      		clr r25
 1180 0434 982F      		mov r25,r24
 1181 0436 8827      		clr r24
 1182 0438 282B      		or r18,r24
 1183 043a 392B      		or r19,r25
 1184               	.LBE17:
 1185               	.LBE16:
 1187               	.LM110:
 1188 043c 3093 0000 		sts (i2c+4)+1,r19
 1189 0440 2093 0000 		sts i2c+4,r18
 1191               	.Ltext8:
 408:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 			// this is a sos_msg so a crc is required
 409:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 			i2c.crc = crcByte(i2c.crc, ((uint8_t*)(i2c.msgBuf))[i2c.idx]);
 410:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 			i2c.idx++;
 1193               	.LM111:
 1194 0444 6F5F      		subi r22,lo8(-(1))
 1195 0446 6093 0000 		sts i2c+7,r22
 411:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 			if (i2c.idx == SOS_MSG_HEADER_SIZE) {
 1197               	.LM112:
 1198 044a 6830      		cpi r22,lo8(8)
 1199 044c 09F0      		breq .+2
 1200 044e B0CF      		rjmp .L156
 412:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				i2c.idx = 0;
 1202               	.LM113:
 1203 0450 1092 0000 		sts i2c+7,__zero_reg__
 413:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				i2c.txPending = i2c.msgLen + SOS_MSG_CRC_SIZE;
 1205               	.LM114:
 1206 0454 8091 0000 		lds r24,i2c+6
 1207 0458 8E5F      		subi r24,lo8(-(2))
 1208 045a 8093 0000 		sts i2c+14,r24
 414:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				i2c.msg_state = SOS_MSG_TX_DATA;
 1210               	.LM115:
 1211 045e 6093 0000 		sts i2c+1,r22
 415:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 			}
 416:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 			break;
 1213               	.LM116:
 1214 0462 A6CF      		rjmp .L156
 1215               	.L57:
 417:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 			
 418:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		case SOS_MSG_TX_RAW:
 419:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		case SOS_MSG_TX_DATA:
 420:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 			i2c_setByte(i2c.dataBuf[i2c.idx]);
 1217               	.LM117:
 1218 0464 6091 0000 		lds r22,i2c+7
 1219 0468 E091 0000 		lds r30,i2c+10
 1220 046c F091 0000 		lds r31,(i2c+10)+1
 1221 0470 E60F      		add r30,r22
 1222 0472 F11D      		adc r31,__zero_reg__
 1223 0474 8081      		ld r24,Z
 1224 0476 8093 7300 		sts 115,r24
 421:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 			if (i2c.flags & I2C_CRC_FLAG) {
 1226               	.LM118:
 1227 047a 7091 0000 		lds r23,i2c+16
 1228 047e 77FF      		sbrs r23,7
 1229 0480 1DC0      		rjmp .L58
 1230               	.LBB20:
 1232               	.Ltext9:
 1234               	.LM119:
 1235 0482 4091 0000 		lds r20,i2c+4
 1236 0486 5091 0000 		lds r21,(i2c+4)+1
 1237 048a 8081      		ld r24,Z
 1238               	.LBB21:
 1240               	.LM120:
 1241 048c E52F      		mov r30,r21
 1242 048e FF27      		clr r31
 1243 0490 9927      		clr r25
 1244 0492 E827      		eor r30,r24
 1245 0494 F927      		eor r31,r25
 1246 0496 EE0F      		add r30,r30
 1247 0498 FF1F      		adc r31,r31
 1248 049a E050      		subi r30,lo8(-(crcTable))
 1249 049c F040      		sbci r31,hi8(-(crcTable))
 1250               	.LBB22:
 1252               	.LM121:
 1253               	/* #APP */
 1254 049e 8491      		lpm r24, Z
 1255               		
 1256               	/* #NOAPP */
 1257               	.LBE22:
 1258 04a0 282F      		mov r18,r24
 1259 04a2 3327      		clr r19
 1260               	.LBB23:
 1261 04a4 3196      		adiw r30,1
 1262               	/* #APP */
 1263 04a6 8491      		lpm r24, Z
 1264               		
 1265               	/* #NOAPP */
 1266               	.LBE23:
 1267 04a8 8427      		eor r24,r20
 1268 04aa 9927      		clr r25
 1269 04ac 982F      		mov r25,r24
 1270 04ae 8827      		clr r24
 1271 04b0 282B      		or r18,r24
 1272 04b2 392B      		or r19,r25
 1273               	.LBE21:
 1274               	.LBE20:
 1276               	.LM122:
 1277 04b4 3093 0000 		sts (i2c+4)+1,r19
 1278 04b8 2093 0000 		sts i2c+4,r18
 1279               	.L58:
 1281               	.Ltext10:
 422:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				i2c.crc = crcByte(i2c.crc, i2c.dataBuf[i2c.idx]);
 423:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 			}
 424:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 			i2c.idx++;
 1283               	.LM123:
 1284 04bc 962F      		mov r25,r22
 1285 04be 9F5F      		subi r25,lo8(-(1))
 1286 04c0 9093 0000 		sts i2c+7,r25
 425:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 			if (i2c.idx == i2c.msgLen) {
 1288               	.LM124:
 1289 04c4 8091 0000 		lds r24,i2c+6
 1290 04c8 9817      		cp r25,r24
 1291 04ca 09F0      		breq .+2
 1292 04cc 71CF      		rjmp .L156
 426:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				if (!(i2c.flags & I2C_CRC_FLAG)) {
 1294               	.LM125:
 1295 04ce 77FD      		sbrc r23,7
 1296 04d0 03C0      		rjmp .L61
 427:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 					// send stop bit and reset interface to ready state
 428:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 					i2c.txPending = 0;
 1298               	.LM126:
 1299 04d2 1092 0000 		sts i2c+14,__zero_reg__
 1300 04d6 1DC0      		rjmp .L155
 1301               	.L61:
 429:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 					i2c.msg_state = SOS_MSG_TX_END;
 430:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				} else {
 431:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 					i2c.txPending = SOS_MSG_CRC_SIZE;  // no unsent bytes
 1303               	.LM127:
 1304 04d8 82E0      		ldi r24,lo8(2)
 1305 04da 8093 0000 		sts i2c+14,r24
 432:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 					i2c.msg_state = SOS_MSG_TX_CRC_LOW;
 1307               	.LM128:
 1308 04de 89E0      		ldi r24,lo8(9)
 1309 04e0 19C0      		rjmp .L151
 1310               	.L63:
 433:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				}
 434:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 			}
 435:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 			break;
 436:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 			
 437:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		case SOS_MSG_TX_CRC_LOW:
 438:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 			i2c_setByte((uint8_t)(i2c.crc));
 1312               	.LM129:
 1313 04e2 8091 0000 		lds r24,i2c+4
 1314 04e6 8093 7300 		sts 115,r24
 439:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 			i2c.txPending--;
 1316               	.LM130:
 1317 04ea 8091 0000 		lds r24,i2c+14
 1318 04ee 8150      		subi r24,lo8(-(-1))
 1319 04f0 8093 0000 		sts i2c+14,r24
 440:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 			i2c.msg_state = SOS_MSG_TX_CRC_HIGH;
 1321               	.LM131:
 1322 04f4 8AE0      		ldi r24,lo8(10)
 1323 04f6 0EC0      		rjmp .L151
 1324               	.L64:
 441:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 			break;
 442:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 			
 443:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 		case SOS_MSG_TX_CRC_HIGH:
 444:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 			i2c_setByte((uint8_t)(i2c.crc>>8));
 1326               	.LM132:
 1327 04f8 8091 0000 		lds r24,i2c+4
 1328 04fc 9091 0000 		lds r25,(i2c+4)+1
 1329 0500 892F      		mov r24,r25
 1330 0502 9927      		clr r25
 1331 0504 8093 7300 		sts 115,r24
 445:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 						i2c.txPending--;
 1333               	.LM133:
 1334 0508 8091 0000 		lds r24,i2c+14
 1335 050c 8150      		subi r24,lo8(-(-1))
 1336 050e 8093 0000 		sts i2c+14,r24
 1337               	.L155:
 446:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 						i2c.msg_state = SOS_MSG_TX_END;
 1339               	.LM134:
 1340 0512 8BE0      		ldi r24,lo8(11)
 1341               	.L151:
 1342 0514 8093 0000 		sts i2c+1,r24
 447:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 						break;
 1344               	.LM135:
 1345 0518 4BCF      		rjmp .L156
 1346               	.L65:
 448:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 449:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 					case SOS_MSG_TX_END:
 450:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 						// send stop bit and reset interface to ready state
 451:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 						i2c_setCtrlReg((1<<TWINT)|(1<<TWEA)|(1<<TWSTO)|(1<<TWEN)|(1<<TWIE));
 1348               	.LM136:
 1349 051a 85ED      		ldi r24,lo8(-43)
 1350 051c 8093 7400 		sts 116,r24
 452:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 						i2c_send_done(i2c.flags);
 1352               	.LM137:
 1353 0520 8091 0000 		lds r24,i2c+16
 1354 0524 0FC0      		rjmp .L159
 1355               	.L73:
 453:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 						i2c.state = restoreState();
 454:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 						return;
 455:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 					default:
 456:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 						break;
 457:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				}
 458:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				// normal send byte all stop conditions must return and not get here
 459:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				i2c_setCtrlReg((1<<TWINT)|(1<<TWEN)|(1<<TWIE));
 460:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				break;
 461:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 462:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 			case TWI_MTX_ADR_NACK: /* 0x20 */
 463:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				if (addrFailCnt++ < MAX_ADDR_FAIL) {
 1357               	.LM138:
 1358 0526 8091 0000 		lds r24,addrFailCnt.0
 1359 052a 982F      		mov r25,r24
 1360 052c 8F5F      		subi r24,lo8(-(1))
 1361 052e 8093 0000 		sts addrFailCnt.0,r24
 1362 0532 9330      		cpi r25,lo8(3)
 1363 0534 08F4      		brsh .+2
 1364 0536 49C0      		rjmp .L158
 464:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 					// try restarting MAX_ADDR_FAIL times then fail
 465:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 					i2c_setCtrlReg((1<<TWINT)|(1<<TWSTA)|(1<<TWEN)|(1<<TWIE));
 466:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				} else {
 467:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 					// reset i2c and send msg fail to process
 468:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 					i2c_setCtrlReg((1<<TWINT)|(1<<TWEA)|(1<<TWSTO)|(1<<TWEN)|(1<<TWIE));
 1366               	.LM139:
 1367 0538 85ED      		ldi r24,lo8(-43)
 1368 053a 8093 7400 		sts 116,r24
 469:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 					i2c_send_done(i2c.flags|I2C_ERROR_FLAG);
 1370               	.LM140:
 1371 053e 8091 0000 		lds r24,i2c+16
 1372 0542 8160      		ori r24,lo8(1)
 1373               	.L159:
 1374 0544 0E94 0000 		call i2c_send_done
 1375 0548 3DC1      		rjmp .L153
 1376               	.L81:
 470:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 					i2c.state = restoreState();
 471:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				}
 472:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				break;
 473:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 474:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 			case TWI_MTX_DATA_NACK: /* 0x30 */
 475:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				// reset i2c and send msg fail to process
 476:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				i2c_setCtrlReg((1<<TWINT)|(1<<TWEA)|(1<<TWSTO)|(1<<TWEN)|(1<<TWIE));
 1378               	.LM141:
 1379 054a 85ED      		ldi r24,lo8(-43)
 1380 054c 8093 7400 		sts 116,r24
 477:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				i2c.txPending = i2c.txPending - i2c.idx + 1; // last byte failed
 1382               	.LM142:
 1383 0550 8091 0000 		lds r24,i2c+14
 1384 0554 9091 0000 		lds r25,i2c+7
 1385 0558 891B      		sub r24,r25
 1386 055a 8F5F      		subi r24,lo8(-(1))
 1387 055c 8093 0000 		sts i2c+14,r24
 478:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				i2c_send_done(i2c.flags|I2C_BUFF_ERR_FLAG);
 1389               	.LM143:
 1390 0560 8091 0000 		lds r24,i2c+16
 1391 0564 8260      		ori r24,lo8(2)
 1392 0566 EECF      		rjmp .L159
 1393               	.L87:
 479:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				i2c.state = restoreState();
 480:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				break;
 481:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 482:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 483:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 			
 484:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				/***************************
 485:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				 * Master Receiver  States *
 486:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				 ***************************/
 487:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 			case TWI_MRX_ADR_ACK: /* 0x40 */
 488:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				i2c.state = I2C_MASTER_RX;
 1395               	.LM144:
 1396 0568 85E0      		ldi r24,lo8(5)
 1397 056a 8093 0000 		sts i2c,r24
 489:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				i2c.rxStatus = i2c.flags;
 1399               	.LM145:
 1400 056e 8091 0000 		lds r24,i2c+16
 1401 0572 8093 0000 		sts i2c+15,r24
 490:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				// all master rx are done in raw mode with NO protocol byte
 491:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				i2c.msg_state = SOS_MSG_RX_RAW;
 1403               	.LM146:
 1404 0576 83E0      		ldi r24,lo8(3)
 1405 0578 8093 0000 		sts i2c+1,r24
 492:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				// a sos message will never be recieved as a manster
 493:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				if (i2c.msgLen == 1) {
 1407               	.LM147:
 1408 057c 8091 0000 		lds r24,i2c+6
 1409 0580 8130      		cpi r24,lo8(1)
 1410 0582 C9F0      		breq .L91
 1411 0584 02C1      		rjmp .L132
 1412               	.L90:
 494:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 					i2c.msg_state = SOS_MSG_RX_END;
 495:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 					i2c_setCtrlReg((1<<TWINT)|(1<<TWEN)|(1<<TWIE));
 496:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				} else {
 497:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 					i2c_setCtrlReg((1<<TWINT)|(1<<TWEA)|(1<<TWEN)|(1<<TWIE));
 498:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				}
 499:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				break;
 500:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 501:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 			case TWI_MRX_DATA_ACK: /* 0x50 */
 502:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				i2c.dataBuf[i2c.idx++] = i2c_getByte();
 1414               	.LM148:
 1415 0586 9091 0000 		lds r25,i2c+7
 1416 058a E091 0000 		lds r30,i2c+10
 1417 058e F091 0000 		lds r31,(i2c+10)+1
 1418 0592 E90F      		add r30,r25
 1419 0594 F11D      		adc r31,__zero_reg__
 1420 0596 8091 7300 		lds r24,115
 1421 059a 8083      		st Z,r24
 1422 059c 9F5F      		subi r25,lo8(-(1))
 1423 059e 9093 0000 		sts i2c+7,r25
 503:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 504:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				if (i2c.idx < (i2c.msgLen-1)) {
 1425               	.LM149:
 1426 05a2 292F      		mov r18,r25
 1427 05a4 3327      		clr r19
 1428 05a6 8091 0000 		lds r24,i2c+6
 1429 05aa 9927      		clr r25
 1430 05ac 0197      		sbiw r24,1
 1431 05ae 2817      		cp r18,r24
 1432 05b0 3907      		cpc r19,r25
 1433 05b2 0CF4      		brge .+2
 1434 05b4 EAC0      		rjmp .L132
 1435               	.L91:
 505:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 					i2c_setCtrlReg((1<<TWINT)|(1<<TWEA)|(1<<TWEN)|(1<<TWIE));
 506:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				} else { // unset TWEA (Send NACK after next/last byte)
 507:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 					i2c.msg_state = SOS_MSG_RX_END;
 1437               	.LM150:
 1438 05b6 81E1      		ldi r24,lo8(17)
 1439 05b8 ADCF      		rjmp .L151
 1440               	.L93:
 508:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 					i2c_setCtrlReg((1<<TWINT)|(1<<TWEN)|(1<<TWIE));
 509:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				}
 510:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				break;
 511:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 512:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 			case TWI_MRX_ADR_NACK: /* 0x48 */
 513:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				if (addrFailCnt++ < MAX_ADDR_FAIL) {
 1442               	.LM151:
 1443 05ba 8091 0000 		lds r24,addrFailCnt.0
 1444 05be 982F      		mov r25,r24
 1445 05c0 8F5F      		subi r24,lo8(-(1))
 1446 05c2 8093 0000 		sts addrFailCnt.0,r24
 1447 05c6 9330      		cpi r25,lo8(3)
 1448 05c8 10F4      		brsh .L94
 1449               	.L158:
 514:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 					// tryrestarting MAX_ADDR_FAIL times then fail
 515:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 					i2c_setCtrlReg((1<<TWINT)|(1<<TWSTA)|(1<<TWEN)|(1<<TWIE));
 1451               	.LM152:
 1452 05ca 85EA      		ldi r24,lo8(-91)
 1453 05cc DFC0      		rjmp .L154
 1454               	.L94:
 516:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 					break;
 517:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				}
 518:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				i2c_setCtrlReg((1<<TWINT)|(1<<TWEA)|(1<<TWSTO)|(1<<TWEN)|(1<<TWIE));
 1456               	.LM153:
 1457 05ce 85ED      		ldi r24,lo8(-43)
 1458 05d0 8093 7400 		sts 116,r24
 519:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 520:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				// return data
 521:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				i2c_read_done(i2c.dataBuf, i2c.idx, i2c.rxStatus);
 1460               	.LM154:
 1461 05d4 4091 0000 		lds r20,i2c+15
 1462 05d8 20C0      		rjmp .L160
 1463               	.L100:
 522:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				i2c.idx = 0;
 523:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				i2c.rxStatus = 0;
 524:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 525:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				i2c.state = restoreState();
 526:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				break;
 527:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 528:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 			case TWI_MRX_DATA_NACK: /* 0x58 */
 529:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				i2c.dataBuf[i2c.idx++] = i2c_getByte();
 1465               	.LM155:
 1466 05da 9091 0000 		lds r25,i2c+7
 1467 05de E091 0000 		lds r30,i2c+10
 1468 05e2 F091 0000 		lds r31,(i2c+10)+1
 1469 05e6 E90F      		add r30,r25
 1470 05e8 F11D      		adc r31,__zero_reg__
 1471 05ea 8091 7300 		lds r24,115
 1472 05ee 8083      		st Z,r24
 1473 05f0 9F5F      		subi r25,lo8(-(1))
 1474 05f2 9093 0000 		sts i2c+7,r25
 530:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 531:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				if (i2c.idx < i2c.msgLen) {
 1476               	.LM156:
 1477 05f6 8091 0000 		lds r24,i2c+6
 1478 05fa 9817      		cp r25,r24
 1479 05fc 28F4      		brsh .L101
 532:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 					// nack from master indication rx done
 533:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 					// send stop bit, clear interrupt and reset interface to ready state
 534:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 					i2c.rxStatus |= I2C_BUFF_ERR_FLAG;
 1481               	.LM157:
 1482 05fe 8091 0000 		lds r24,i2c+15
 1483 0602 8260      		ori r24,lo8(2)
 1484 0604 8093 0000 		sts i2c+15,r24
 1485               	.L101:
 535:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				}
 536:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 537:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				// set flags and return data
 538:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				i2c.rxStatus |= I2C_BUFF_DIRTY_FLAG;
 1487               	.LM158:
 1488 0608 8091 0000 		lds r24,i2c+15
 1489 060c 8860      		ori r24,lo8(8)
 1490 060e 8093 0000 		sts i2c+15,r24
 539:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				
 540:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				i2c_setCtrlReg((1<<TWINT)|(1<<TWEA)|(1<<TWSTO)|(1<<TWEN)|(1<<TWIE));
 1492               	.LM159:
 1493 0612 95ED      		ldi r25,lo8(-43)
 1494 0614 9093 7400 		sts 116,r25
 541:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				
 542:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				i2c_read_done(i2c.dataBuf, i2c.idx, i2c.rxStatus);
 1496               	.LM160:
 1497 0618 482F      		mov r20,r24
 1498               	.L160:
 1499 061a 6091 0000 		lds r22,i2c+7
 1500 061e 8091 0000 		lds r24,i2c+10
 1501 0622 9091 0000 		lds r25,(i2c+10)+1
 1502 0626 0E94 0000 		call i2c_read_done
 543:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				i2c.idx = 0;
 1504               	.LM161:
 1505 062a 1092 0000 		sts i2c+7,__zero_reg__
 544:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				i2c.rxStatus = 0;
 1507               	.LM162:
 1508 062e 1092 0000 		sts i2c+15,__zero_reg__
 1509 0632 C8C0      		rjmp .L153
 1510               	.L108:
 545:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				
 546:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				i2c.state = restoreState();
 547:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				break;
 548:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 549:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 550:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 			
 551:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				/****************************
 552:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				 * Slave Transmitter States *
 553:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				 ****************************/
 554:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 			case TWI_STX_ADR_ACK: /* 0xA8 */
 555:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 			case TWI_STX_ADR_ACK_M_ARB_LOST: /* 0xB0 */
 556:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				if (i2c.state != I2C_SLAVE_WAIT) {
 1512               	.LM163:
 1513 0634 8091 0000 		lds r24,i2c
 1514 0638 8630      		cpi r24,lo8(6)
 1515 063a 21F0      		breq .L109
 557:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 					i2c_send_done(i2c.flags|I2C_ERROR_FLAG);
 1517               	.LM164:
 1518 063c 8091 0000 		lds r24,i2c+16
 1519 0640 8160      		ori r24,lo8(1)
 1520 0642 CDC0      		rjmp .L152
 1521               	.L109:
 1522               	.LBB24:
 1523               	.LBB25:
 1525               	.LM165:
 1526 0644 8093 0000 		sts priorState,r24
 1527               	.LBE25:
 1528               	.LBE24:
 558:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 					break;
 559:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				} else {
 560:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 					saveState(i2c.state);
 561:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 					i2c.state = I2C_SLAVE_TX;
 1530               	.LM166:
 1531 0648 87E0      		ldi r24,lo8(7)
 1532 064a 8093 0000 		sts i2c,r24
 562:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 					i2c.msg_state = SOS_MSG_TX_RAW;
 1534               	.LM167:
 1535 064e 82E0      		ldi r24,lo8(2)
 1536 0650 8093 0000 		sts i2c+1,r24
 1537               	.L112:
 563:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				}
 564:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				// fall through
 565:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 566:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 			case TWI_STX_DATA_ACK: /* 0xB8 */
 567:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				if (i2c.msg_state == SOS_MSG_TX_RAW) {
 1539               	.LM168:
 1540 0654 8091 0000 		lds r24,i2c+1
 1541 0658 8230      		cpi r24,lo8(2)
 1542 065a 09F0      		breq .+2
 1543 065c C2C0      		rjmp .L41
 568:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 					i2c_setByte(i2c.dataBuf[i2c.idx++]);
 1545               	.LM169:
 1546 065e 9091 0000 		lds r25,i2c+7
 1547 0662 E091 0000 		lds r30,i2c+10
 1548 0666 F091 0000 		lds r31,(i2c+10)+1
 1549 066a E90F      		add r30,r25
 1550 066c F11D      		adc r31,__zero_reg__
 1551 066e 9F5F      		subi r25,lo8(-(1))
 1552 0670 9093 0000 		sts i2c+7,r25
 1553 0674 8081      		ld r24,Z
 1554 0676 8093 7300 		sts 115,r24
 569:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 570:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 					// unset TWEA (Send NACK after next/last byte)
 571:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 					if (i2c.msgLen == i2c.idx) {
 1556               	.LM170:
 1557 067a 8091 0000 		lds r24,i2c+6
 1558 067e 8917      		cp r24,r25
 1559 0680 09F0      		breq .+2
 1560 0682 83C0      		rjmp .L132
 572:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 						i2c_setCtrlReg((1<<TWINT)|(1<<TWEN)|(1<<TWIE));
 1562               	.LM171:
 1563 0684 85E8      		ldi r24,lo8(-123)
 1564 0686 8093 7400 		sts 116,r24
 573:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 						i2c.txPending = 1; // last byte failed
 1566               	.LM172:
 1567 068a 81E0      		ldi r24,lo8(1)
 1568 068c 8093 0000 		sts i2c+14,r24
 574:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 						i2c.msg_state = SOS_MSG_TX_END;
 1570               	.LM173:
 1571 0690 8BE0      		ldi r24,lo8(11)
 1572 0692 8093 0000 		sts i2c+1,r24
 1573 0696 A5C0      		rjmp .L41
 1574               	.L116:
 575:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 					} else { // Reset the TWI Interupt to wait to ack next byte
 576:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 						i2c_setCtrlReg((1<<TWINT)|(1<<TWEA)|(1<<TWEN)|(1<<TWIE));
 577:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 					}
 578:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				}
 579:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				break;
 580:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 581:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 			case TWI_STX_DATA_NACK: /* 0xC0 */
 582:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				// Master has sent a NACK before expected amount of data was sent.
 583:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				// set dirty bit on send buffer go to end state and issue send done
 584:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				if (i2c.msg_state != SOS_MSG_TX_END) { 
 1576               	.LM174:
 1577 0698 8091 0000 		lds r24,i2c+1
 1578 069c 8B30      		cpi r24,lo8(11)
 1579 069e 61F0      		breq .L117
 585:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 					i2c.txPending = i2c.txPending - i2c.idx + 1; // last byte failed
 1581               	.LM175:
 1582 06a0 8091 0000 		lds r24,i2c+14
 1583 06a4 9091 0000 		lds r25,i2c+7
 1584 06a8 891B      		sub r24,r25
 1585 06aa 8F5F      		subi r24,lo8(-(1))
 1586 06ac 8093 0000 		sts i2c+14,r24
 586:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 					i2c.msg_state = SOS_MSG_TX_END;
 1588               	.LM176:
 1589 06b0 8BE0      		ldi r24,lo8(11)
 1590 06b2 8093 0000 		sts i2c+1,r24
 1591 06b6 02C0      		rjmp .L118
 1592               	.L117:
 587:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				} else {
 588:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 					i2c.txPending = 0;
 1594               	.LM177:
 1595 06b8 1092 0000 		sts i2c+14,__zero_reg__
 1596               	.L118:
 589:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				}
 590:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 591:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				i2c_setCtrlReg((1<<TWINT)|(1<<TWEA)|(1<<TWEN)|(1<<TWIE));
 1598               	.LM178:
 1599 06bc 85EC      		ldi r24,lo8(-59)
 1600 06be 8093 7400 		sts 116,r24
 592:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 593:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				if (i2c.msg_state == SOS_MSG_TX_END) {
 1602               	.LM179:
 1603 06c2 8091 0000 		lds r24,i2c+1
 1604 06c6 8B30      		cpi r24,lo8(11)
 1605 06c8 09F0      		breq .+2
 1606 06ca 8BC0      		rjmp .L41
 594:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 					i2c.msg_state = SOS_MSG_NO_STATE;
 1608               	.LM180:
 1609 06cc 1092 0000 		sts i2c+1,__zero_reg__
 595:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 					i2c_send_done(i2c.flags);
 1611               	.LM181:
 1612 06d0 8091 0000 		lds r24,i2c+16
 1613 06d4 84C0      		rjmp .L152
 1614               	.L120:
 596:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				}
 597:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				break;
 598:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 599:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 			case TWI_STX_DATA_ACK_LAST_BYTE: /* 0xC8 */
 600:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				i2c.msg_state = SOS_MSG_NO_STATE;
 1616               	.LM182:
 1617 06d6 1092 0000 		sts i2c+1,__zero_reg__
 601:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				i2c_setCtrlReg((1<<TWINT)|(1<<TWEA)|(1<<TWEN)|(1<<TWIE));
 1619               	.LM183:
 1620 06da 85EC      		ldi r24,lo8(-59)
 1621 06dc 8093 7400 		sts 116,r24
 602:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				i2c_send_done(i2c.flags|I2C_BUFF_ERR_FLAG);
 1623               	.LM184:
 1624 06e0 8091 0000 		lds r24,i2c+16
 1625 06e4 8260      		ori r24,lo8(2)
 1626 06e6 7BC0      		rjmp .L152
 1627               	.L122:
 603:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				break;
 604:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 605:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 606:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 607:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				/*************************
 608:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				 * Slave Receiver States *
 609:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				 *************************/
 610:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				// all receptions are done in a raw mode
 611:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				// if it is a sos message it it will be packed later
 612:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 			case TWI_SRX_GEN_ACK: /* 0x70 */
 613:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 			case TWI_SRX_GEN_ACK_M_ARB_LOST: /* 0x78 */
 614:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				i2c.rxStatus = I2C_GEN_ADDR_FLAG;
 1629               	.LM185:
 1630 06e8 84E0      		ldi r24,lo8(4)
 1631 06ea 8093 0000 		sts i2c+15,r24
 1632               	.L124:
 1633               	.LBB26:
 1635               	.LM186:
 1636 06ee 8091 0000 		lds r24,i2c
 1637               	.LBB27:
 1639               	.LM187:
 1640 06f2 8093 0000 		sts priorState,r24
 1641               	.LBE27:
 1642               	.LBE26:
 615:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				// fall through
 616:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 617:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 			case TWI_SRX_ADR_ACK: /* 0x60 */
 618:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 			case TWI_SRX_ADR_ACK_M_ARB_LOST: /* 0x68 */
 619:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				saveState(i2c.state);
 620:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				i2c.state = I2C_SLAVE_RX;
 1644               	.LM188:
 1645 06f6 88E0      		ldi r24,lo8(8)
 1646 06f8 8093 0000 		sts i2c,r24
 621:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				i2c.msg_state = SOS_MSG_RX_RAW;
 1648               	.LM189:
 1649 06fc 83E0      		ldi r24,lo8(3)
 1650 06fe 8093 0000 		sts i2c+1,r24
 622:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				i2c.idx = 0;
 1652               	.LM190:
 1653 0702 1092 0000 		sts i2c+7,__zero_reg__
 1654 0706 41C0      		rjmp .L132
 1655               	.L127:
 623:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				i2c_setCtrlReg((1<<TWINT)|(1<<TWEA)|(1<<TWEN)|(1<<TWIE));
 624:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				break;
 625:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 626:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 			case TWI_SRX_ADR_DATA_ACK: /* 0x80 */
 627:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 			case TWI_SRX_GEN_DATA_ACK: /* 0x90 */
 628:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				if (i2c.msg_state == SOS_MSG_RX_RAW) {
 1657               	.LM191:
 1658 0708 8091 0000 		lds r24,i2c+1
 1659 070c 8330      		cpi r24,lo8(3)
 1660 070e E9F5      		brne .L132
 629:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 					i2c.rxDataBuf[i2c.idx++] = i2c_getByte();
 1662               	.LM192:
 1663 0710 6091 0000 		lds r22,i2c+7
 1664 0714 E091 0000 		lds r30,i2c+12
 1665 0718 F091 0000 		lds r31,(i2c+12)+1
 1666 071c E60F      		add r30,r22
 1667 071e F11D      		adc r31,__zero_reg__
 1668 0720 8091 7300 		lds r24,115
 1669 0724 8083      		st Z,r24
 1670 0726 6F5F      		subi r22,lo8(-(1))
 1671 0728 6093 0000 		sts i2c+7,r22
 630:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 					if (i2c.idx >= I2C_MAX_MSG_LEN) { // buffer overflow
 1673               	.LM193:
 1674 072c 67FF      		sbrs r22,7
 1675 072e 2DC0      		rjmp .L132
 631:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 						i2c.msg_state = SOS_MSG_RX_END;
 1677               	.LM194:
 1678 0730 81E1      		ldi r24,lo8(17)
 1679 0732 8093 0000 		sts i2c+1,r24
 632:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 						
 633:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 						// set flags and return data
 634:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 						i2c.rxStatus |= (I2C_BUFF_DIRTY_FLAG|I2C_BUFF_ERR_FLAG);
 1681               	.LM195:
 1682 0736 8091 0000 		lds r24,i2c+15
 1683 073a 8A60      		ori r24,lo8(10)
 1684 073c 8093 0000 		sts i2c+15,r24
 635:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 						i2c_read_done(i2c.rxDataBuf, i2c.idx, i2c.rxStatus);
 1686               	.LM196:
 1687 0740 482F      		mov r20,r24
 1688 0742 8091 0000 		lds r24,i2c+12
 1689 0746 9091 0000 		lds r25,(i2c+12)+1
 1690 074a 0E94 0000 		call i2c_read_done
 636:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 						i2c.idx = 0;
 1692               	.LM197:
 1693 074e 1092 0000 		sts i2c+7,__zero_reg__
 637:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 						i2c.rxStatus = 0;
 1695               	.LM198:
 1696 0752 1092 0000 		sts i2c+15,__zero_reg__
 1697 0756 19C0      		rjmp .L132
 1698               	.L131:
 638:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 					}
 639:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				}
 640:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				i2c_setCtrlReg((1<<TWINT)|(1<<TWEA)|(1<<TWEN)|(1<<TWIE));
 641:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				break;
 642:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 643:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 			case TWI_SRX_ADR_DATA_NACK: /* 0x88 */
 644:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 			case TWI_SRX_GEN_DATA_NACK: /* 0x98 */
 645:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				// switch to not addressed mode
 646:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				if (i2c.msg_state == SOS_MSG_RX_RAW) {
 1700               	.LM199:
 1701 0758 8091 0000 		lds r24,i2c+1
 1702 075c 8330      		cpi r24,lo8(3)
 1703 075e A9F4      		brne .L132
 647:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 					
 648:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 					// set flags and return data
 649:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 					i2c.rxStatus |= I2C_BUFF_DIRTY_FLAG;
 1705               	.LM200:
 1706 0760 8091 0000 		lds r24,i2c+15
 1707 0764 8860      		ori r24,lo8(8)
 1708 0766 8093 0000 		sts i2c+15,r24
 650:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 					i2c_read_done(i2c.rxDataBuf, i2c.idx, i2c.rxStatus);
 1710               	.LM201:
 1711 076a 482F      		mov r20,r24
 1712 076c 6091 0000 		lds r22,i2c+7
 1713 0770 8091 0000 		lds r24,i2c+12
 1714 0774 9091 0000 		lds r25,(i2c+12)+1
 1715 0778 0E94 0000 		call i2c_read_done
 651:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 					i2c.idx = 0;
 1717               	.LM202:
 1718 077c 1092 0000 		sts i2c+7,__zero_reg__
 652:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 					i2c.rxStatus = 0;
 1720               	.LM203:
 1721 0780 1092 0000 		sts i2c+15,__zero_reg__
 653:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 					i2c.msg_state = SOS_MSG_RX_END;
 1723               	.LM204:
 1724 0784 81E1      		ldi r24,lo8(17)
 1725 0786 8093 0000 		sts i2c+1,r24
 1726               	.L132:
 654:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				}
 655:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				i2c_setCtrlReg((1<<TWINT)|(1<<TWEA)|(1<<TWEN)|(1<<TWIE));
 1728               	.LM205:
 1729 078a 85EC      		ldi r24,lo8(-59)
 1730               	.L154:
 1731 078c 8093 7400 		sts 116,r24
 656:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				break;
 1733               	.LM206:
 1734 0790 28C0      		rjmp .L41
 1735               	.L133:
 657:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 658:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 			case TWI_SRX_STOP_RESTART: /* 0xA0 */
 659:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				// reset reciever
 660:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				i2c.msg_state = SOS_MSG_NO_STATE;
 1737               	.LM207:
 1738 0792 1092 0000 		sts i2c+1,__zero_reg__
 661:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				if (i2c.idx > 0) {
 1740               	.LM208:
 1741 0796 6091 0000 		lds r22,i2c+7
 1742 079a 6623      		tst r22
 1743 079c 81F0      		breq .L134
 662:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 					// need to make sure data has been read
 663:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 					i2c.rxStatus |= I2C_BUFF_DIRTY_FLAG;
 1745               	.LM209:
 1746 079e 8091 0000 		lds r24,i2c+15
 1747 07a2 8860      		ori r24,lo8(8)
 1748 07a4 8093 0000 		sts i2c+15,r24
 664:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 					i2c_read_done(i2c.rxDataBuf, i2c.idx, i2c.rxStatus);
 1750               	.LM210:
 1751 07a8 482F      		mov r20,r24
 1752 07aa 8091 0000 		lds r24,i2c+12
 1753 07ae 9091 0000 		lds r25,(i2c+12)+1
 1754 07b2 0E94 0000 		call i2c_read_done
 665:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 					i2c.idx = 0;
 1756               	.LM211:
 1757 07b6 1092 0000 		sts i2c+7,__zero_reg__
 666:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 					i2c.rxStatus = 0;
 1759               	.LM212:
 1760 07ba 1092 0000 		sts i2c+15,__zero_reg__
 1761               	.L134:
 667:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				}
 668:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				i2c_setCtrlReg((1<<TWINT)|(1<<TWEA)|(1<<TWEN)|(1<<TWIE));
 1763               	.LM213:
 1764 07be 85EC      		ldi r24,lo8(-59)
 1765 07c0 8093 7400 		sts 116,r24
 1766               	.L153:
 1767               	.LBB28:
 1768               	.LBB29:
 1770               	.LM214:
 1771 07c4 8091 0000 		lds r24,priorState
 1772               	.LBE29:
 1773               	.LBE28:
 1775               	.LM215:
 1776 07c8 8093 0000 		sts i2c,r24
 669:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				i2c.state = restoreState();
 670:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				break;
 1778               	.LM216:
 1779 07cc 0AC0      		rjmp .L41
 1780               	.L141:
 1781               	.LBB30:
 671:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 
 672:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				
 673:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 			
 674:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				/***************
 675:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				 * Misc States *
 676:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				 ***************/
 677:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				//case TWI_NO_STATE: /* 0xF8 */
 678:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 			case TWI_BUS_ERROR: /* 0x00 */
 679:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 			default:
 680:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 				{
 681:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 					uint8_t twiStatus=0;
 682:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 					// Store TWSR and automatically sets clears noErrors bit.
 683:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 					twiStatus = TWSR;
 1783               	.LM217:
 1784 07ce 8091 7100 		lds r24,113
 684:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 					// Clear TWINT and reset TWI Interface
 685:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 					i2c_setCtrlReg((1<<TWINT)|(1<<TWEA)|(1<<TWEN)|(1<<TWIE));
 1786               	.LM218:
 1787 07d2 85EC      		ldi r24,lo8(-59)
 1788 07d4 8093 7400 		sts 116,r24
 686:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 					i2c.state = I2C_IDLE;
 1790               	.LM219:
 1791 07d8 1092 0000 		sts i2c,__zero_reg__
 687:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 					// should really be i2c_error
 688:/Users/Administrator/sos-2x/processor/avr/i2c.c **** 					i2c_send_done(I2C_NULL_FLAG);
 1793               	.LM220:
 1794 07dc 80E0      		ldi r24,lo8(0)
 1795               	.L152:
 1796 07de 0E94 0000 		call i2c_send_done
 1797               	.L41:
 1798               	.LBE30:
 1799               	/* epilogue: frame size=0 */
 1800 07e2 FF91      		pop r31
 1801 07e4 EF91      		pop r30
 1802 07e6 BF91      		pop r27
 1803 07e8 AF91      		pop r26
 1804 07ea 9F91      		pop r25
 1805 07ec 8F91      		pop r24
 1806 07ee 7F91      		pop r23
 1807 07f0 6F91      		pop r22
 1808 07f2 5F91      		pop r21
 1809 07f4 4F91      		pop r20
 1810 07f6 3F91      		pop r19
 1811 07f8 2F91      		pop r18
 1812 07fa 0F90      		pop __tmp_reg__
 1813 07fc 0FBE      		out __SREG__,__tmp_reg__
 1814 07fe 0F90      		pop __tmp_reg__
 1815 0800 1F90      		pop __zero_reg__
 1816 0802 1895      		reti
 1817               	/* epilogue end (size=17) */
 1818               	/* function __vector_33 size 777 (743) */
 1865               	.Lscope4:
 1867               		.lcomm i2c,17
 1871               		.text
 1873               	Letext:
 1874               	/* File "/Users/Administrator/sos-2x/processor/avr/i2c.c": code 1077 = 0x0435 (1035), prologues  19
DEFINED SYMBOLS
                            *ABS*:00000000 i2c.c
                            *ABS*:0000003f __SREG__
                            *ABS*:0000003e __SP_H__
                            *ABS*:0000003d __SP_L__
                            *ABS*:00000000 __tmp_reg__
                            *ABS*:00000001 __zero_reg__
                             .bss:00000000 priorState
/var/tmp//cc2UkFQZ.s:300    .bss:00000001 i2c_initialized
/var/tmp//cc2UkFQZ.s:305    .text:00000000 i2c_hardware_init
/var/tmp//cc2UkFQZ.s:364    .text:0000002a i2c_initTransceiver
/var/tmp//cc2UkFQZ.s:837    .bss:00000003 i2c
/var/tmp//cc2UkFQZ.s:525    .text:000000d2 i2c_startTransceiverTx
/var/tmp//cc2UkFQZ.s:676    .text:00000176 i2c_startTransceiverRx
/var/tmp//cc2UkFQZ.s:301    .bss:00000002 addrFailCnt.0
/var/tmp//cc2UkFQZ.s:841    .text:00000220 __vector_33
/var/tmp//cc2UkFQZ.s:1873   .text:00000804 Letext

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
sos_blk_mem_free
sos_blk_mem_alloc
crcTable
i2c_send_done
i2c_read_done
