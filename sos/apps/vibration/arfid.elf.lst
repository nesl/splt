
arfid.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  0000b3c6  0000b47a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000b3c6  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .sos_bls      000001ee  0001fc00  0001fc00  0000b496  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .bss          00000ad4  0080011c  0080011c  0000b684  2**0
                  ALLOC
  4 .noinit       00000019  00800bf0  00800bf0  0000b684  2**0
                  ALLOC
  5 .eeprom       00000000  00810000  00810000  0000b684  2**0
                  CONTENTS
  6 .stab         00021b1c  00000000  00000000  0000b684  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .stabstr      000104ab  00000000  00000000  0002d1a0  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ad 02 	jmp	0x55a
       4:	0c 94 e8 02 	jmp	0x5d0
       8:	0c 94 e8 02 	jmp	0x5d0
       c:	0c 94 67 40 	jmp	0x80ce
      10:	0c 94 e8 02 	jmp	0x5d0
      14:	0c 94 e8 02 	jmp	0x5d0
      18:	0c 94 e8 02 	jmp	0x5d0
      1c:	0c 94 f1 04 	jmp	0x9e2
      20:	0c 94 e8 02 	jmp	0x5d0
      24:	0c 94 e8 02 	jmp	0x5d0
      28:	0c 94 e8 02 	jmp	0x5d0
      2c:	0c 94 e8 02 	jmp	0x5d0
      30:	0c 94 e8 02 	jmp	0x5d0
      34:	0c 94 e8 02 	jmp	0x5d0
      38:	0c 94 e8 02 	jmp	0x5d0
      3c:	0c 94 bd 33 	jmp	0x677a
      40:	0c 94 e8 02 	jmp	0x5d0
      44:	0c 94 e8 02 	jmp	0x5d0
      48:	0c 94 21 51 	jmp	0xa242
      4c:	0c 94 e8 02 	jmp	0x5d0
      50:	0c 94 1b 4f 	jmp	0x9e36
      54:	0c 94 6b 47 	jmp	0x8ed6
      58:	0c 94 e8 02 	jmp	0x5d0
      5c:	0c 94 e8 02 	jmp	0x5d0
      60:	0c 94 e8 02 	jmp	0x5d0
      64:	0c 94 e8 02 	jmp	0x5d0
      68:	0c 94 e8 02 	jmp	0x5d0
      6c:	0c 94 e8 02 	jmp	0x5d0
      70:	0c 94 e8 02 	jmp	0x5d0
      74:	0c 94 2a 55 	jmp	0xaa54
      78:	0c 94 e8 02 	jmp	0x5d0
      7c:	0c 94 e8 02 	jmp	0x5d0
      80:	0c 94 e8 02 	jmp	0x5d0
      84:	0c 94 ff 48 	jmp	0x91fe
      88:	0c 94 e8 02 	jmp	0x5d0

0000008c <sos_sysjmptbl>:
      8c:	0c 94 22 59 	jmp	0xb244
      90:	0c 94 28 13 	jmp	0x2650
      94:	0c 94 48 13 	jmp	0x2690
      98:	0c 94 63 13 	jmp	0x26c6
      9c:	0c 94 4c 19 	jmp	0x3298
      a0:	0c 94 b6 31 	jmp	0x636c
      a4:	0c 94 e3 31 	jmp	0x63c6
      a8:	0c 94 06 32 	jmp	0x640c
      ac:	0c 94 e3 18 	jmp	0x31c6
      b0:	0c 94 95 1d 	jmp	0x3b2a
      b4:	0c 94 65 19 	jmp	0x32ca
      b8:	0c 94 94 36 	jmp	0x6d28
      bc:	0c 94 8c 35 	jmp	0x6b18
      c0:	0c 94 cb 36 	jmp	0x6d96
      c4:	0c 94 12 55 	jmp	0xaa24
      c8:	0c 94 77 38 	jmp	0x70ee
      cc:	0c 94 bc 3e 	jmp	0x7d78
      d0:	0c 94 cd 13 	jmp	0x279a
      d4:	0c 94 df 2c 	jmp	0x59be
      d8:	0c 94 67 13 	jmp	0x26ce
      dc:	0c 94 00 00 	jmp	0x0
      e0:	0c 94 b5 22 	jmp	0x456a
      e4:	0c 94 0f 3c 	jmp	0x781e
      e8:	0c 94 2e 3c 	jmp	0x785c
      ec:	0c 94 4d 3c 	jmp	0x789a
      f0:	0c 94 66 3c 	jmp	0x78cc
      f4:	0c 94 71 3c 	jmp	0x78e2
      f8:	0c 94 8a 3c 	jmp	0x7914
      fc:	0c 94 e2 13 	jmp	0x27c4
     100:	0c 94 e6 13 	jmp	0x27cc
     104:	0c 94 ce 1d 	jmp	0x3b9c
     108:	0c 94 4a 46 	jmp	0x8c94
     10c:	0c 94 96 46 	jmp	0x8d2c
     110:	0c 94 c3 46 	jmp	0x8d86
     114:	0c 94 23 38 	jmp	0x7046
     118:	0c 94 4f 38 	jmp	0x709e
     11c:	0c 94 24 39 	jmp	0x7248
     120:	0c 94 a7 38 	jmp	0x714e
     124:	0c 94 d1 38 	jmp	0x71a2
     128:	0c 94 12 4c 	jmp	0x9824
     12c:	0c 94 40 4c 	jmp	0x9880
     130:	0c 94 63 4c 	jmp	0x98c6
     134:	0c 94 b3 4c 	jmp	0x9966
     138:	0c 94 8b 18 	jmp	0x3116
     13c:	0c 94 92 3a 	jmp	0x7524
     140:	0c 94 da 3a 	jmp	0x75b4
     144:	0c 94 ba 39 	jmp	0x7374
     148:	0c 94 de 39 	jmp	0x73bc
     14c:	0c 94 00 00 	jmp	0x0
     150:	0c 94 00 00 	jmp	0x0
     154:	0c 94 00 00 	jmp	0x0
     158:	0c 94 00 00 	jmp	0x0
     15c:	0c 94 00 00 	jmp	0x0
     160:	0c 94 00 00 	jmp	0x0
     164:	0c 94 fc 38 	jmp	0x71f8
     168:	0c 94 00 00 	jmp	0x0

0000016c <mod_header>:
     16c:	00 00 09 00 00 00 00 00 00 00 00 00 00 00 ed 09     ................

0000017c <mod_header>:
     17c:	00 00 11 00 00 00 00 00 00 00 00 00 00 00 c2 0c     ................

0000018c <mod_header>:
     18c:	0b 00 80 00 01 00 00 00 80 00 01 02 00 00 64 0f     ..............d.
     19c:	ae 3e 43 76 76 30 8d 01                             .>Cvv0..

000001a4 <mod_header>:
     1a4:	0b 00 81 00 01 00 00 00 81 00 01 02 00 00 b8 0f     ................
     1b4:	ae 3e 43 76 76 30 8d 01                             .>Cvv0..

000001bc <mod_header>:
     1bc:	00 00 02 00 00 00 00 00 00 00 00 00 00 00 83 13     ................

000001cc <mod_header>:
     1cc:	00 00 14 00 01 00 00 00 00 00 00 00 00 00 01 1c     ................
     1dc:	fe 1b 63 7a 76 31 ff ff                             ..czv1..

000001e4 <mod_header>:
     1e4:	00 00 10 01 00 00 00 00 00 00 00 00 00 00 94 24     ...............$

000001f4 <mod_header>:
     1f4:	00 00 06 00 0c 00 00 00 00 00 00 00 00 00 00 38     ...............8
     204:	ae 3e 63 43 77 32 ff ff ae 3e 63 43 77 32 ff ff     .>cCw2...>cCw2..
     214:	ae 3e 63 43 77 32 ff ff ae 3e 63 43 77 32 ff ff     .>cCw2...>cCw2..
     224:	ae 3e 63 43 77 32 ff ff ae 3e 63 43 77 32 ff ff     .>cCw2...>cCw2..
     234:	ae 3e 63 43 77 32 ff ff ae 3e 63 43 77 32 ff ff     .>cCw2...>cCw2..
     244:	ae 3e 63 43 77 32 ff ff ae 3e 63 43 77 32 ff ff     .>cCw2...>cCw2..
     254:	ae 3e 63 43 77 32 ff ff ae 3e 63 43 77 32 ff ff     .>cCw2...>cCw2..

00000264 <mod_header>:
     264:	00 00 06 00 08 00 00 00 00 00 00 00 00 00 7a 39     ..............z9
     274:	ae 3e 63 43 77 32 ff ff ae 3e 63 43 77 32 ff ff     .>cCw2...>cCw2..
     284:	ae 3e 63 43 77 32 ff ff ae 3e 63 43 77 32 ff ff     .>cCw2...>cCw2..
     294:	ae 3e 63 43 77 32 ff ff ae 3e 63 43 77 32 ff ff     .>cCw2...>cCw2..
     2a4:	ae 3e 63 43 77 32 ff ff ae 3e 63 43 77 32 ff ff     .>cCw2...>cCw2..

000002b4 <mod_header>:
     2b4:	00 00 48 01 00 00 00 00 00 00 00 00 00 00 8b 3f     ..H............?

000002c4 <mod_header>:
     2c4:	00 00 45 00 00 00 00 00 00 00 00 00 00 00 cb 43     ..E............C

000002d4 <mod_header>:
     2d4:	00 00 43 00 0a 00 00 00 00 00 00 00 00 00 0d 46     ..C............F
     2e4:	ae 3e 63 43 53 33 ff ff ae 3e 63 43 53 33 ff ff     .>cCS3...>cCS3..
     2f4:	ae 3e 63 43 53 33 ff ff ae 3e 63 43 53 33 ff ff     .>cCS3...>cCS3..
     304:	ae 3e 63 43 53 33 ff ff ae 3e 63 43 53 33 ff ff     .>cCS3...>cCS3..
     314:	ae 3e 63 43 53 33 ff ff ae 3e 63 43 53 33 ff ff     .>cCS3...>cCS3..
     324:	ae 3e 63 43 53 33 ff ff ae 3e 63 43 53 33 ff ff     .>cCS3...>cCS3..

00000334 <crcTable>:
     334:	00 00 21 10 42 20 63 30 84 40 a5 50 c6 60 e7 70     ..!.B c0.@.P.`.p
     344:	08 81 29 91 4a a1 6b b1 8c c1 ad d1 ce e1 ef f1     ..).J.k.........
     354:	31 12 10 02 73 32 52 22 b5 52 94 42 f7 72 d6 62     1...s2R".R.B.r.b
     364:	39 93 18 83 7b b3 5a a3 bd d3 9c c3 ff f3 de e3     9...{.Z.........
     374:	62 24 43 34 20 04 01 14 e6 64 c7 74 a4 44 85 54     b$C4 ....d.t.D.T
     384:	6a a5 4b b5 28 85 09 95 ee e5 cf f5 ac c5 8d d5     j.K.(...........
     394:	53 36 72 26 11 16 30 06 d7 76 f6 66 95 56 b4 46     S6r&..0..v.f.V.F
     3a4:	5b b7 7a a7 19 97 38 87 df f7 fe e7 9d d7 bc c7     [.z...8.........
     3b4:	c4 48 e5 58 86 68 a7 78 40 08 61 18 02 28 23 38     .H.X.h.x@.a..(#8
     3c4:	cc c9 ed d9 8e e9 af f9 48 89 69 99 0a a9 2b b9     ........H.i...+.
     3d4:	f5 5a d4 4a b7 7a 96 6a 71 1a 50 0a 33 3a 12 2a     .Z.J.z.jq.P.3:.*
     3e4:	fd db dc cb bf fb 9e eb 79 9b 58 8b 3b bb 1a ab     ........y.X.;...
     3f4:	a6 6c 87 7c e4 4c c5 5c 22 2c 03 3c 60 0c 41 1c     .l.|.L.\",.<`.A.
     404:	ae ed 8f fd ec cd cd dd 2a ad 0b bd 68 8d 49 9d     ........*...h.I.
     414:	97 7e b6 6e d5 5e f4 4e 13 3e 32 2e 51 1e 70 0e     .~.n.^.N.>2.Q.p.
     424:	9f ff be ef dd df fc cf 1b bf 3a af 59 9f 78 8f     ..........:.Y.x.
     434:	88 91 a9 81 ca b1 eb a1 0c d1 2d c1 4e f1 6f e1     ..........-.N.o.
     444:	80 10 a1 00 c2 30 e3 20 04 50 25 40 46 70 67 60     .....0. .P%@Fpg`
     454:	b9 83 98 93 fb a3 da b3 3d c3 1c d3 7f e3 5e f3     ........=.....^.
     464:	b1 02 90 12 f3 22 d2 32 35 42 14 52 77 62 56 72     .....".25B.RwbVr
     474:	ea b5 cb a5 a8 95 89 85 6e f5 4f e5 2c d5 0d c5     ........n.O.,...
     484:	e2 34 c3 24 a0 14 81 04 66 74 47 64 24 54 05 44     .4.$....ftGd$T.D
     494:	db a7 fa b7 99 87 b8 97 5f e7 7e f7 1d c7 3c d7     ........_.~...<.
     4a4:	d3 26 f2 36 91 06 b0 16 57 66 76 76 15 46 34 56     .&.6....Wfvv.F4V
     4b4:	4c d9 6d c9 0e f9 2f e9 c8 99 e9 89 8a b9 ab a9     L.m.../.........
     4c4:	44 58 65 48 06 78 27 68 c0 18 e1 08 82 38 a3 28     DXeH.x'h.....8.(
     4d4:	7d cb 5c db 3f eb 1e fb f9 8b d8 9b bb ab 9a bb     }.\.?...........
     4e4:	75 4a 54 5a 37 6a 16 7a f1 0a d0 1a b3 2a 92 3a     uJTZ7j.z.....*.:
     4f4:	2e fd 0f ed 6c dd 4d cd aa bd 8b ad e8 9d c9 8d     ....l.M.........
     504:	26 7c 07 6c 64 5c 45 4c a2 3c 83 2c e0 1c c1 0c     &|.ld\EL.<.,....
     514:	1f ef 3e ff 5d cf 7c df 9b af ba bf d9 8f f8 9f     ..>.].|.........
     524:	17 6e 36 7e 55 4e 74 5e 93 2e b2 3e d1 0e f0 1e     .n6~UNt^...>....
     534:	0f 57 0f 57 0d 56 3a 56 68 56 64 56 70 56 73 56     .W.W.V:VhVdVpVsV
     544:	7a 56 80 56 85 56 93 56 a0 56 a8 56 b2 56 bc 56     zV.V.V.V.V.V.V.V
     554:	ca 56 db 56 f9 56                                   .V.V.V

0000055a <__init>:
     55a:	11 24       	eor	r1, r1
     55c:	1f be       	out	0x3f, r1	; 63
     55e:	cf ef       	ldi	r28, 0xFF	; 255
     560:	d0 e1       	ldi	r29, 0x10	; 16
     562:	de bf       	out	0x3e, r29	; 62
     564:	cd bf       	out	0x3d, r28	; 61

00000566 <sos_watchdog_processing>:
     566:	94 b7       	in	r25, 0x34	; 52
     568:	9f 71       	andi	r25, 0x1F	; 31
     56a:	90 93 f0 0b 	sts	0x0BF0, r25
     56e:	14 be       	out	0x34, r1	; 52
     570:	8a b3       	in	r24, 0x1a	; 26
     572:	87 60       	ori	r24, 0x07	; 7
     574:	8a bb       	out	0x1a, r24	; 26
     576:	d9 9a       	sbi	0x1b, 1	; 27
     578:	da 9a       	sbi	0x1b, 2	; 27
     57a:	d8 9a       	sbi	0x1b, 0	; 27
     57c:	93 ff       	sbrs	r25, 3
     57e:	03 c0       	rjmp	.+6      	; 0x586
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	0e 94 bc 3e 	call	0x7d78
     586:	80 91 f0 0b 	lds	r24, 0x0BF0
     58a:	81 ff       	sbrs	r24, 1
     58c:	03 c0       	rjmp	.+6      	; 0x594
     58e:	82 e0       	ldi	r24, 0x02	; 2
     590:	0e 94 bc 3e 	call	0x7d78
     594:	80 91 f0 0b 	lds	r24, 0x0BF0
     598:	80 ff       	sbrs	r24, 0
     59a:	03 c0       	rjmp	.+6      	; 0x5a2
     59c:	82 e0       	ldi	r24, 0x02	; 2
     59e:	0e 94 bc 3e 	call	0x7d78

000005a2 <__do_copy_data>:
     5a2:	11 e0       	ldi	r17, 0x01	; 1
     5a4:	a0 e0       	ldi	r26, 0x00	; 0
     5a6:	b1 e0       	ldi	r27, 0x01	; 1
     5a8:	e6 ec       	ldi	r30, 0xC6	; 198
     5aa:	f3 eb       	ldi	r31, 0xB3	; 179
     5ac:	00 e0       	ldi	r16, 0x00	; 0
     5ae:	0b bf       	out	0x3b, r16	; 59
     5b0:	02 c0       	rjmp	.+4      	; 0x5b6
     5b2:	07 90       	elpm	r0, Z+
     5b4:	0d 92       	st	X+, r0
     5b6:	ac 31       	cpi	r26, 0x1C	; 28
     5b8:	b1 07       	cpc	r27, r17
     5ba:	d9 f7       	brne	.-10     	; 0x5b2

000005bc <__do_clear_bss>:
     5bc:	1b e0       	ldi	r17, 0x0B	; 11
     5be:	ac e1       	ldi	r26, 0x1C	; 28
     5c0:	b1 e0       	ldi	r27, 0x01	; 1
     5c2:	01 c0       	rjmp	.+2      	; 0x5c6

000005c4 <.do_clear_bss_loop>:
     5c4:	1d 92       	st	X+, r1

000005c6 <.do_clear_bss_start>:
     5c6:	a0 3f       	cpi	r26, 0xF0	; 240
     5c8:	b1 07       	cpc	r27, r17
     5ca:	e1 f7       	brne	.-8      	; 0x5c4
     5cc:	0c 94 0f 03 	jmp	0x61e

000005d0 <__bad_interrupt>:
     5d0:	0c 94 00 00 	jmp	0x0

000005d4 <init_IO>:
DEF_IO_PIN( PINA6, A, PA6);
DEF_IO_PIN( PINA5, A, PA5);
DEF_IO_PIN( PINA4, A, PA4);
DEF_IO_PIN( PINA3, A, PA3);
DEF_IO_PIN( PINA2, A, PA2);
     5d4:	d2 9a       	sbi	0x1a, 2	; 26
DEF_IO_PIN( PINA1, A, PA1);
DEF_IO_PIN( PINA0, A, PA0);
     5d6:	d0 9a       	sbi	0x1a, 0	; 26
     5d8:	d1 9a       	sbi	0x1a, 1	; 26

/**
 * PORTB:
 */
DEF_IO_PIN( PINB7, B, PB7);
DEF_IO_PIN( PINB6, B, PB6);
DEF_IO_PIN( PINB5, B, PB5);
DEF_IO_PIN( PINB4, B, PB4);
DEF_IO_PIN( PINB3, B, PB3);
DEF_IO_PIN( PINB2, B, PB2);
DEF_IO_PIN( PINB1, B, PB1);
DEF_IO_PIN( PINB0, B, PB0);

/**
 * PORTC:
 */
DEF_IO_PIN( PINC7, C, PC7);
     5da:	a7 9a       	sbi	0x14, 7	; 20
DEF_IO_PIN( PINC6, C, PC6);
     5dc:	a6 9a       	sbi	0x14, 6	; 20
DEF_IO_PIN( PINC5, C, PC5);
     5de:	a5 9a       	sbi	0x14, 5	; 20
DEF_IO_PIN( PINC4, C, PC4);
     5e0:	a4 9a       	sbi	0x14, 4	; 20
DEF_IO_PIN( PINC3, C, PC3);
     5e2:	a3 9a       	sbi	0x14, 3	; 20
DEF_IO_PIN( PINC2, C, PC2);
     5e4:	a2 9a       	sbi	0x14, 2	; 20
DEF_IO_PIN( PINC1, C, PC1);
     5e6:	a1 9a       	sbi	0x14, 1	; 20
DEF_IO_PIN( PINC0, C, PC0);
     5e8:	a0 9a       	sbi	0x14, 0	; 20
     5ea:	d4 98       	cbi	0x1a, 4	; 26
     5ec:	dc 98       	cbi	0x1b, 4	; 27
     5ee:	d3 9a       	sbi	0x1a, 3	; 26


/**
 * PORTD:
 */
DEF_IO_PIN( PIND7, D, PD7);
DEF_IO_PIN( PIND6, D, PD6);
DEF_IO_PIN( PIND5, D, PD5);
DEF_IO_PIN( PIND4, D, PD4);
DEF_IO_PIN( PIND3, D, PD3);
     5f0:	8b 9a       	sbi	0x11, 3	; 17
     5f2:	8d 9a       	sbi	0x11, 5	; 17
     5f4:	db 9a       	sbi	0x1b, 3	; 27
     5f6:	08 95       	ret

000005f8 <hardware_init>:
//  Funcation declarations
//----------------------------------------------------------------------------

void hardware_init (void){
  init_IO();
     5f8:	0e 94 ea 02 	call	0x5d4
  /**
   * @brief set watchdog timer
   * we use hardware fuse bit to enforce watchdog is always on
   * and ask timer to reset watchdog
   * Set up the longest watchdog here
   */
  //! Ram - From the AVR datasheet, the typical watchdog reset interval is 1.9 seconds at 3V Vcc for the max. prescalar value
  //  __asm__ __volatile__ ("wdr");
  //  WDTCR = (1 << WDCE) | (1 << WDE);                             //! Ram - Start the timed sequence required to change the watchdog pre-scaler values
  //  WDTCR = (1 << WDE) | (1 << WDP2) | (1 << WDP1) | (1 << WDP0); //! Ram - Set the pre-scalar values (Must be done within 4 clock cycles) (compiler must pre-compute const ?)

  //! component level init
  //! we do led initialization in sos_watchdog_processing
  systime_init();
     5fc:	0e 94 4e 55 	call	0xaa9c
  
  // SYSTEM TIMER
  timer_hardware_init(DEFAULT_INTERVAL, DEFAULT_SCALE);
     600:	63 e0       	ldi	r22, 0x03	; 3
     602:	80 e1       	ldi	r24, 0x10	; 16
     604:	0e 94 62 55 	call	0xaac4

#ifdef USE_UART1
  SET_FLASH_SELECT_DD_OUT();
  SET_FLASH_OUT_DD_OUT();
  SET_FLASH_CLK_DD_OUT();
  SET_FLASH_SELECT();
#endif

  // UART
  uart_system_init();
     608:	0e 94 77 53 	call	0xa6ee
#ifndef NO_SOS_UART
  //! Initalize uart comm channel
  sos_uart_init();
     60c:	0e 94 f7 3e 	call	0x7dee
#endif

  // I2C
  i2c_system_init();
     610:	0e 94 f1 4b 	call	0x97e2
#ifndef NO_SOS_I2C
  //! Initalize i2c comm channel
  sos_i2c_init();
  //! Initialize the I2C Comm Manager
  // Ram - Assuming that it is turned on
  // by default with the SOS_I2C component
  sos_i2c_mgr_init(); 
#endif


  // ADC
  adc_proc_init();
     614:	0e 94 10 46 	call	0x8c20

#ifndef SOS_EMU
//  radio_init(NON_BEACONED_PAN);
//hubert:  use mac_init for vmac
mac_init();
     618:	0e 94 51 0b 	call	0x16a2
     61c:	08 95       	ret

0000061e <main>:
#endif
}


void init_IO(void)
{
  //---------------------------------------
  // CC2420 Radio specific pin-definitions
  // Obtained from the TinyOS 1.1.7
  //---------------------------------------
  SET_RED_LED_DD_OUT();
  SET_YELLOW_LED_DD_OUT();
  SET_GREEN_LED_DD_OUT();

      
  SET_PW7_DD_OUT();
  SET_PW6_DD_OUT();
  SET_PW5_DD_OUT();
  SET_PW4_DD_OUT();
  SET_PW3_DD_OUT(); 
  SET_PW2_DD_OUT();
  SET_PW1_DD_OUT();
  SET_PW0_DD_OUT();

  SET_SERIAL_ID_DD_IN();
  CLR_SERIAL_ID();  // Prevent sourcing current

  SET_FLASH_SELECT_DD_OUT();
  SET_FLASH_OUT_DD_OUT();
  SET_FLASH_CLK_DD_OUT();
  SET_FLASH_SELECT();
    
}

/**
 * @brief functions for handling reset
 * 
 * This function will actually run before main() due to 
 * its section assignment.  
 */
#if 1
void sos_watchdog_processing() __attribute__ ((naked)) __attribute__ ((section (".init3")));

void sos_watchdog_processing()
{
    reset_flag = MCUCSR & 0x1F;
    MCUCSR = 0;

	// always init need to enable/disable pins
    led_init();

    if((reset_flag & ((1 << WDRF)))) {
        //booting_cond = SOS_BOOT_WDOGED;   
        LED_DBG(LED_RED_ON);
    }
    if(reset_flag & (1 << EXTRF)) {
        LED_DBG(LED_GREEN_ON);
    }
    if((reset_flag & ((1 << PORF)))) {
        LED_DBG(LED_GREEN_ON);
    }
    //MCUCSR = 0;
    /**
     * Check for watchdog reset, and resset due to 
     * illegal addressing (reset_flag == 0)
     */
/*
    if(reset_flag == 0) {
        //booting_cond = SOS_BOOT_CRASHED;
    } else {
        LED_DBG(LED_RED_ON);
        //booting_cond = SOS_BOOT_NORMAL;
    }
*/
/*
    if(booting_cond != SOS_BOOT_NORMAL) {
        sched_post_crash_checkup();
    }
*/
}
#endif


int main(void)
{
     61e:	cf ef       	ldi	r28, 0xFF	; 255
     620:	d0 e1       	ldi	r29, 0x10	; 16
     622:	de bf       	out	0x3e, r29	; 62
     624:	cd bf       	out	0x3d, r28	; 61
	sos_main(SOS_BOOT_NORMAL);
     626:	80 e0       	ldi	r24, 0x00	; 0
     628:	0e 94 1a 03 	call	0x634
	return 0;
}
     62c:	80 e0       	ldi	r24, 0x00	; 0
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	0c 94 e2 59 	jmp	0xb3c4

00000634 <sos_main>:

/** 
 * @brief Core event loop
 */
int sos_main(uint8_t cond){
     634:	1f 93       	push	r17
     636:	18 2f       	mov	r17, r24

	//! disable interrupt
	DISABLE_GLOBAL_INTERRUPTS();
     638:	f8 94       	cli
	
	//! Initialize the ID
	id_init();
     63a:	0e 94 84 35 	call	0x6b08

    //! initialize memory manager
    mem_init();
     63e:	0e 94 76 12 	call	0x24ec

	shm_init();
     642:	0e 94 27 3d 	call	0x7a4e

	//! initialize message pool
	msg_queue_init();
     646:	0e 94 ac 19 	call	0x3358

	//! initialize random number generator
	random_init();
     64a:	0e 94 9f 36 	call	0x6d3e

    //! initialize scheduler
    sched_init(cond);
     64e:	81 2f       	mov	r24, r17
     650:	0e 94 77 14 	call	0x28ee

	//! initialize sensor manager
#ifdef NEW_SENSING_API
	sensor_system_init();
#else
	sensor_init();
     654:	0e 94 03 38 	call	0x7006
#endif

	//! initialize the Function Table
	fntable_init();
     658:	0e 94 db 27 	call	0x4fb6

	//! Initialize the monitor
	monitor_init();
     65c:	0e 94 0d 34 	call	0x681a

    //! initialize hardware
    hardware_init();
     660:	0e 94 fc 02 	call	0x5f8

	codemem_init();
     664:	0e 94 63 22 	call	0x44c6

	routing_init();
     668:	0e 94 e1 1d 	call	0x3bc2

	//! starting memory module
	mem_start();
     66c:	0e 94 c9 11 	call	0x2392

#ifdef SOS_SFI
	//! Initialize SFI
	sfi_modtable_init();
#endif

	//! Initialize the code fetcher
	fetcher_init();
     670:	0e 94 c7 27 	call	0x4f8e

    //! enable interrupt
	ENABLE_GLOBAL_INTERRUPTS();
     674:	78 94       	sei

#ifdef SOS_USE_PREEMPTION
	// Enable preemption
	MAIN_ENABLE_PREEMPTION();
#endif
	DEBUG("SOS booted\n");
    //! start application
    sos_start();
     676:	0e 94 7e 13 	call	0x26fc

    //! enter main sched loop
    //! should never return from this call
	sched();
     67a:	0e 94 6c 17 	call	0x2ed8
    return 0;
}
     67e:	80 e0       	ldi	r24, 0x00	; 0
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	1f 91       	pop	r17
     684:	08 95       	ret

00000686 <TC_UWAIT>:
 *****************************************************************/
void TC_UWAIT(uint16_t u)
{
	uint16_t i;
	for (i=0; i < u; i++) {
     686:	00 97       	sbiw	r24, 0x00	; 0
     688:	61 f0       	breq	.+24     	; 0x6a2
	...
     69e:	01 97       	sbiw	r24, 0x01	; 1
     6a0:	f2 cf       	rjmp	.-28     	; 0x686
     6a2:	08 95       	ret

000006a4 <TC_MWAIT>:
		asm volatile("nop\n\t"
                   "nop\n\t"
                   "nop\n\t"
                   "nop\n\t"
		   "nop\n\t"
                   "nop\n\t"
                   "nop\n\t"
 		   "nop\n\t"
                   "nop\n\t"
                   "nop\n\t"
                   ::);
	}
}

/*****************************************************************
 * Wait for more time                                            *
 *****************************************************************/
void TC_MWAIT(uint16_t u)
{
     6a4:	0f 93       	push	r16
     6a6:	1f 93       	push	r17
     6a8:	cf 93       	push	r28
     6aa:	df 93       	push	r29
     6ac:	8c 01       	movw	r16, r24
	uint16_t i;
	for(i=0; i<u; i++) {
     6ae:	00 97       	sbiw	r24, 0x00	; 0
     6b0:	31 f0       	breq	.+12     	; 0x6be
     6b2:	ec 01       	movw	r28, r24
		TC_UWAIT(u);
     6b4:	c8 01       	movw	r24, r16
     6b6:	0e 94 43 03 	call	0x686
     6ba:	21 97       	sbiw	r28, 0x01	; 1
     6bc:	d9 f7       	brne	.-10     	; 0x6b4
     6be:	df 91       	pop	r29
     6c0:	cf 91       	pop	r28
     6c2:	1f 91       	pop	r17
     6c4:	0f 91       	pop	r16
     6c6:	08 95       	ret

000006c8 <TC_INIT_PINS>:
	}
}

/*****************************************************************
 * Initiate pin directions                                       *
 *****************************************************************/
void TC_INIT_PINS() 
{
	SETBITHIGH(DDRA,5);
     6c8:	d5 9a       	sbi	0x1a, 5	; 26
	SETBITHIGH(DDRA,6);
     6ca:	d6 9a       	sbi	0x1a, 6	; 26
	SETBITHIGH(DDRB,2);	
     6cc:	ba 9a       	sbi	0x17, 2	; 23
	SETBITHIGH(DDRB,1);
     6ce:	b9 9a       	sbi	0x17, 1	; 23
	SETBITHIGH(DDRB,0);
     6d0:	b8 9a       	sbi	0x17, 0	; 23

	SETBITLOW(DDRB,3);
     6d2:	bb 98       	cbi	0x17, 3	; 23
	SETBITLOW(DDRE,6); //external interrupt 6 as input
     6d4:	16 98       	cbi	0x02, 6	; 2
	SETBITLOW(DDRD,7);
     6d6:	8f 98       	cbi	0x11, 7	; 17
	SETBITLOW(DDRD,6);
     6d8:	8e 98       	cbi	0x11, 6	; 17
	SETBITLOW(DDRD,4);
     6da:	8c 98       	cbi	0x11, 4	; 17

	SETBITHIGH(PORTB,3);
     6dc:	c3 9a       	sbi	0x18, 3	; 24
//	SETBITHIGH(PORTE,6);
//	SETBITHIGH(PORTD,7);
	SETBITHIGH(PORTD,6);
     6de:	96 9a       	sbi	0x12, 6	; 18
	SETBITHIGH(PORTD,4);
     6e0:	94 9a       	sbi	0x12, 4	; 18

	//SPCR=(1<<SPE)|(1<<MSTR)|(1<<SPR0);
	SETBITHIGH(SPCR,MSTR);
     6e2:	6c 9a       	sbi	0x0d, 4	; 13
     6e4:	08 95       	ret

000006e6 <TC_WRITE_BYTE>:
//	SETBITHIGH(SPCR,SPE);
//	SETBITLOW(SPCR,DORD);
}

/*****************************************************************
 * Write byte to spi                                             *
 *****************************************************************/
void TC_WRITE_BYTE(uint8_t CC)
{	
     6e6:	1f 93       	push	r17
     6e8:	cf 93       	push	r28
     6ea:	18 2f       	mov	r17, r24
	int j;
	HAS_CRITICAL_SECTION;
	ENTER_CRITICAL_SECTION();
     6ec:	cf b7       	in	r28, 0x3f	; 63
     6ee:	f8 94       	cli
	TC_SET_SPI_WRITE;
     6f0:	0e 94 64 03 	call	0x6c8
	for(j=7; j>=0; j--) {
     6f4:	27 e0       	ldi	r18, 0x07	; 7
     6f6:	30 e0       	ldi	r19, 0x00	; 0
     6f8:	41 2f       	mov	r20, r17
     6fa:	55 27       	eor	r21, r21
     6fc:	61 e0       	ldi	r22, 0x01	; 1
     6fe:	70 e0       	ldi	r23, 0x00	; 0
		if( GETBIT(CC,j) ) 
     700:	cb 01       	movw	r24, r22
     702:	02 2e       	mov	r0, r18
     704:	02 c0       	rjmp	.+4      	; 0x70a
     706:	88 0f       	add	r24, r24
     708:	99 1f       	adc	r25, r25
     70a:	0a 94       	dec	r0
     70c:	e2 f7       	brpl	.-8      	; 0x706
     70e:	84 23       	and	r24, r20
     710:	95 23       	and	r25, r21
     712:	02 2e       	mov	r0, r18
     714:	02 c0       	rjmp	.+4      	; 0x71a
     716:	95 95       	asr	r25
     718:	87 95       	ror	r24
     71a:	0a 94       	dec	r0
     71c:	e2 f7       	brpl	.-8      	; 0x716
     71e:	89 2b       	or	r24, r25
     720:	11 f0       	breq	.+4      	; 0x726
			TC_SET_SI;	
     722:	c2 9a       	sbi	0x18, 2	; 24
     724:	01 c0       	rjmp	.+2      	; 0x728
		else
			TC_CLR_SI;
     726:	c2 98       	cbi	0x18, 2	; 24
		TC_SET_SCLK;	//generate the clock for spi
     728:	c1 9a       	sbi	0x18, 1	; 24
		TC_CLR_SCLK;	//generate the clock for spi
     72a:	c1 98       	cbi	0x18, 1	; 24
     72c:	21 50       	subi	r18, 0x01	; 1
     72e:	30 40       	sbci	r19, 0x00	; 0
     730:	37 ff       	sbrs	r19, 7
     732:	e6 cf       	rjmp	.-52     	; 0x700
	}
	LEAVE_CRITICAL_SECTION();
     734:	cf bf       	out	0x3f, r28	; 63
     736:	cf 91       	pop	r28
     738:	1f 91       	pop	r17
     73a:	08 95       	ret

0000073c <TC_WRITE_WORD>:
}

/*****************************************************************
 * Write word to spi                                             *
 *****************************************************************/
void TC_WRITE_WORD(uint16_t CC)
{	
     73c:	1f 93       	push	r17
     73e:	cf 93       	push	r28
     740:	df 93       	push	r29
     742:	ec 01       	movw	r28, r24
	int j;
	HAS_CRITICAL_SECTION;
	ENTER_CRITICAL_SECTION();
     744:	1f b7       	in	r17, 0x3f	; 63
     746:	f8 94       	cli
	TC_SET_SPI_WRITE;
     748:	0e 94 64 03 	call	0x6c8
	for(j=15; j>=0; j--) {
     74c:	2f e0       	ldi	r18, 0x0F	; 15
     74e:	30 e0       	ldi	r19, 0x00	; 0
     750:	41 e0       	ldi	r20, 0x01	; 1
     752:	50 e0       	ldi	r21, 0x00	; 0
		if( GETBIT(CC,j) )
     754:	ca 01       	movw	r24, r20
     756:	02 2e       	mov	r0, r18
     758:	02 c0       	rjmp	.+4      	; 0x75e
     75a:	88 0f       	add	r24, r24
     75c:	99 1f       	adc	r25, r25
     75e:	0a 94       	dec	r0
     760:	e2 f7       	brpl	.-8      	; 0x75a
     762:	8c 23       	and	r24, r28
     764:	9d 23       	and	r25, r29
     766:	02 2e       	mov	r0, r18
     768:	02 c0       	rjmp	.+4      	; 0x76e
     76a:	96 95       	lsr	r25
     76c:	87 95       	ror	r24
     76e:	0a 94       	dec	r0
     770:	e2 f7       	brpl	.-8      	; 0x76a
     772:	89 2b       	or	r24, r25
     774:	11 f0       	breq	.+4      	; 0x77a
			TC_SET_SI;	
     776:	c2 9a       	sbi	0x18, 2	; 24
     778:	01 c0       	rjmp	.+2      	; 0x77c
		else
			TC_CLR_SI;
     77a:	c2 98       	cbi	0x18, 2	; 24
		TC_SET_SCLK;
     77c:	c1 9a       	sbi	0x18, 1	; 24
		TC_CLR_SCLK;
     77e:	c1 98       	cbi	0x18, 1	; 24
     780:	21 50       	subi	r18, 0x01	; 1
     782:	30 40       	sbci	r19, 0x00	; 0
     784:	37 ff       	sbrs	r19, 7
     786:	e6 cf       	rjmp	.-52     	; 0x754
	}
	LEAVE_CRITICAL_SECTION();
     788:	1f bf       	out	0x3f, r17	; 63
     78a:	df 91       	pop	r29
     78c:	cf 91       	pop	r28
     78e:	1f 91       	pop	r17
     790:	08 95       	ret

00000792 <TC_READ_BYTE>:
}

/*****************************************************************
 * Read byte from spi                                            *
 *****************************************************************/
void TC_READ_BYTE(uint8_t *CC)
{	
     792:	0f 93       	push	r16
     794:	1f 93       	push	r17
     796:	cf 93       	push	r28
     798:	df 93       	push	r29
     79a:	ec 01       	movw	r28, r24
	int j;
	uint8_t ret = 0;
     79c:	10 e0       	ldi	r17, 0x00	; 0
	HAS_CRITICAL_SECTION;
	ENTER_CRITICAL_SECTION();
     79e:	0f b7       	in	r16, 0x3f	; 63
     7a0:	f8 94       	cli
	TC_SET_SPI_READ;
     7a2:	0e 94 64 03 	call	0x6c8
	for(j=7; j>=0; j--) {
     7a6:	27 e0       	ldi	r18, 0x07	; 7
     7a8:	30 e0       	ldi	r19, 0x00	; 0
     7aa:	41 e0       	ldi	r20, 0x01	; 1
     7ac:	50 e0       	ldi	r21, 0x00	; 0
		TC_SET_SCLK;		//generate the clock for spi
     7ae:	c1 9a       	sbi	0x18, 1	; 24
		if( TC_SO_IS_SET )
     7b0:	b3 9b       	sbis	0x16, 3	; 22
     7b2:	08 c0       	rjmp	.+16     	; 0x7c4
			SETBITHIGH(ret,j);
     7b4:	ca 01       	movw	r24, r20
     7b6:	02 2e       	mov	r0, r18
     7b8:	02 c0       	rjmp	.+4      	; 0x7be
     7ba:	88 0f       	add	r24, r24
     7bc:	99 1f       	adc	r25, r25
     7be:	0a 94       	dec	r0
     7c0:	e2 f7       	brpl	.-8      	; 0x7ba
     7c2:	18 2b       	or	r17, r24
		TC_CLR_SCLK;		//generate the clock for spi
     7c4:	c1 98       	cbi	0x18, 1	; 24
     7c6:	21 50       	subi	r18, 0x01	; 1
     7c8:	30 40       	sbci	r19, 0x00	; 0
     7ca:	37 ff       	sbrs	r19, 7
     7cc:	f0 cf       	rjmp	.-32     	; 0x7ae
	}
	*CC = ret;
     7ce:	18 83       	st	Y, r17
	LEAVE_CRITICAL_SECTION();
     7d0:	0f bf       	out	0x3f, r16	; 63
     7d2:	df 91       	pop	r29
     7d4:	cf 91       	pop	r28
     7d6:	1f 91       	pop	r17
     7d8:	0f 91       	pop	r16
     7da:	08 95       	ret

000007dc <TC_READ_WORD>:
}

/*****************************************************************
 * Read word from spi                                            *
 *****************************************************************/
void TC_READ_WORD(uint16_t *CC)
{	
     7dc:	ff 92       	push	r15
     7de:	0f 93       	push	r16
     7e0:	1f 93       	push	r17
     7e2:	cf 93       	push	r28
     7e4:	df 93       	push	r29
     7e6:	8c 01       	movw	r16, r24
	int j;
	uint16_t ret = 0;
     7e8:	c0 e0       	ldi	r28, 0x00	; 0
     7ea:	d0 e0       	ldi	r29, 0x00	; 0
	HAS_CRITICAL_SECTION;
	ENTER_CRITICAL_SECTION();
     7ec:	ff b6       	in	r15, 0x3f	; 63
     7ee:	f8 94       	cli
	TC_SET_SPI_READ;
     7f0:	0e 94 64 03 	call	0x6c8
	for(j=15; j>=0; j--) {
     7f4:	2f e0       	ldi	r18, 0x0F	; 15
     7f6:	30 e0       	ldi	r19, 0x00	; 0
     7f8:	41 e0       	ldi	r20, 0x01	; 1
     7fa:	50 e0       	ldi	r21, 0x00	; 0
		TC_SET_SCLK;
     7fc:	c1 9a       	sbi	0x18, 1	; 24
		if( TC_SO_IS_SET )
     7fe:	b3 9b       	sbis	0x16, 3	; 22
     800:	09 c0       	rjmp	.+18     	; 0x814
			SETBITHIGH(ret,j);
     802:	ca 01       	movw	r24, r20
     804:	02 2e       	mov	r0, r18
     806:	02 c0       	rjmp	.+4      	; 0x80c
     808:	88 0f       	add	r24, r24
     80a:	99 1f       	adc	r25, r25
     80c:	0a 94       	dec	r0
     80e:	e2 f7       	brpl	.-8      	; 0x808
     810:	c8 2b       	or	r28, r24
     812:	d9 2b       	or	r29, r25
		TC_CLR_SCLK;
     814:	c1 98       	cbi	0x18, 1	; 24
     816:	21 50       	subi	r18, 0x01	; 1
     818:	30 40       	sbci	r19, 0x00	; 0
     81a:	37 ff       	sbrs	r19, 7
     81c:	ef cf       	rjmp	.-34     	; 0x7fc
	}
	*CC = ret;
     81e:	f8 01       	movw	r30, r16
     820:	c0 83       	st	Z, r28
     822:	d1 83       	std	Z+1, r29	; 0x01
	LEAVE_CRITICAL_SECTION();
     824:	ff be       	out	0x3f, r15	; 63
     826:	df 91       	pop	r29
     828:	cf 91       	pop	r28
     82a:	1f 91       	pop	r17
     82c:	0f 91       	pop	r16
     82e:	ff 90       	pop	r15
     830:	08 95       	ret

00000832 <TC_GET_REG>:
}

/*****************************************************************
 * read register word                                            *
 *****************************************************************/
void TC_GET_REG(uint8_t R, int8_t I, int8_t J, uint16_t* C)
{	
     832:	ef 92       	push	r14
     834:	ff 92       	push	r15
     836:	0f 93       	push	r16
     838:	1f 93       	push	r17
     83a:	f6 2e       	mov	r15, r22
     83c:	e4 2e       	mov	r14, r20
     83e:	89 01       	movw	r16, r18
	int8_t i=I;
	int8_t j=J;
	TC_UNSELECT_RADIO;
     840:	c0 9a       	sbi	0x18, 0	; 24
	TC_SELECT_RADIO;
     842:	c0 98       	cbi	0x18, 0	; 24
	TC_WRITE_BYTE((0x40|R));
     844:	80 64       	ori	r24, 0x40	; 64
     846:	0e 94 73 03 	call	0x6e6
	TC_READ_WORD(C);
     84a:	c8 01       	movw	r24, r16
     84c:	0e 94 ee 03 	call	0x7dc
	*C = GETBITS(*C,i,j);
     850:	8f 2d       	mov	r24, r15
     852:	99 27       	eor	r25, r25
     854:	87 fd       	sbrc	r24, 7
     856:	90 95       	com	r25
     858:	01 96       	adiw	r24, 0x01	; 1
     85a:	2f ef       	ldi	r18, 0xFF	; 255
     85c:	3f ef       	ldi	r19, 0xFF	; 255
     85e:	a9 01       	movw	r20, r18
     860:	02 c0       	rjmp	.+4      	; 0x866
     862:	44 0f       	add	r20, r20
     864:	55 1f       	adc	r21, r21
     866:	8a 95       	dec	r24
     868:	e2 f7       	brpl	.-8      	; 0x862
     86a:	6e 2d       	mov	r22, r14
     86c:	77 27       	eor	r23, r23
     86e:	67 fd       	sbrc	r22, 7
     870:	70 95       	com	r23
     872:	80 e1       	ldi	r24, 0x10	; 16
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	86 1b       	sub	r24, r22
     878:	97 0b       	sbc	r25, r23
     87a:	02 c0       	rjmp	.+4      	; 0x880
     87c:	36 95       	lsr	r19
     87e:	27 95       	ror	r18
     880:	8a 95       	dec	r24
     882:	e2 f7       	brpl	.-8      	; 0x87c
     884:	42 2b       	or	r20, r18
     886:	53 2b       	or	r21, r19
     888:	40 95       	com	r20
     88a:	50 95       	com	r21
     88c:	f8 01       	movw	r30, r16
     88e:	80 81       	ld	r24, Z
     890:	91 81       	ldd	r25, Z+1	; 0x01
     892:	84 23       	and	r24, r20
     894:	95 23       	and	r25, r21
     896:	02 c0       	rjmp	.+4      	; 0x89c
     898:	96 95       	lsr	r25
     89a:	87 95       	ror	r24
     89c:	6a 95       	dec	r22
     89e:	e2 f7       	brpl	.-8      	; 0x898
     8a0:	80 83       	st	Z, r24
     8a2:	91 83       	std	Z+1, r25	; 0x01
	TC_UNSELECT_RADIO;
     8a4:	c0 9a       	sbi	0x18, 0	; 24
	TC_SELECT_RADIO;
     8a6:	c0 98       	cbi	0x18, 0	; 24
     8a8:	1f 91       	pop	r17
     8aa:	0f 91       	pop	r16
     8ac:	ff 90       	pop	r15
     8ae:	ef 90       	pop	r14
     8b0:	08 95       	ret

000008b2 <TC_SET_REG>:
}


/*****************************************************************
 * set register word                                             *
 *****************************************************************/
void TC_SET_REG(uint8_t R, int8_t I, int8_t J, uint16_t C)
{	
     8b2:	df 92       	push	r13
     8b4:	ef 92       	push	r14
     8b6:	ff 92       	push	r15
     8b8:	0f 93       	push	r16
     8ba:	1f 93       	push	r17
     8bc:	cf 93       	push	r28
     8be:	df 93       	push	r29
     8c0:	cd b7       	in	r28, 0x3d	; 61
     8c2:	de b7       	in	r29, 0x3e	; 62
     8c4:	22 97       	sbiw	r28, 0x02	; 2
     8c6:	0f b6       	in	r0, 0x3f	; 63
     8c8:	f8 94       	cli
     8ca:	de bf       	out	0x3e, r29	; 62
     8cc:	0f be       	out	0x3f, r0	; 63
     8ce:	cd bf       	out	0x3d, r28	; 61
     8d0:	d8 2e       	mov	r13, r24
     8d2:	16 2f       	mov	r17, r22
     8d4:	04 2f       	mov	r16, r20
     8d6:	79 01       	movw	r14, r18
	uint16_t wd;
	uint16_t tmp;
	int8_t i=I;
	int8_t j=J;
	TC_UNSELECT_RADIO;
     8d8:	c0 9a       	sbi	0x18, 0	; 24
	TC_SELECT_RADIO;
     8da:	c0 98       	cbi	0x18, 0	; 24
	TC_WRITE_BYTE((0x40|R));
     8dc:	80 64       	ori	r24, 0x40	; 64
     8de:	0e 94 73 03 	call	0x6e6
	TC_READ_WORD(&wd);
     8e2:	ce 01       	movw	r24, r28
     8e4:	01 96       	adiw	r24, 0x01	; 1
     8e6:	0e 94 ee 03 	call	0x7dc
	tmp=SETBITS(wd,C,i,j);
     8ea:	81 2f       	mov	r24, r17
     8ec:	99 27       	eor	r25, r25
     8ee:	87 fd       	sbrc	r24, 7
     8f0:	90 95       	com	r25
     8f2:	01 96       	adiw	r24, 0x01	; 1
     8f4:	2f ef       	ldi	r18, 0xFF	; 255
     8f6:	3f ef       	ldi	r19, 0xFF	; 255
     8f8:	a9 01       	movw	r20, r18
     8fa:	02 c0       	rjmp	.+4      	; 0x900
     8fc:	44 0f       	add	r20, r20
     8fe:	55 1f       	adc	r21, r21
     900:	8a 95       	dec	r24
     902:	e2 f7       	brpl	.-8      	; 0x8fc
     904:	11 27       	eor	r17, r17
     906:	07 fd       	sbrc	r16, 7
     908:	10 95       	com	r17
     90a:	80 e1       	ldi	r24, 0x10	; 16
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	80 1b       	sub	r24, r16
     910:	91 0b       	sbc	r25, r17
     912:	02 c0       	rjmp	.+4      	; 0x918
     914:	36 95       	lsr	r19
     916:	27 95       	ror	r18
     918:	8a 95       	dec	r24
     91a:	e2 f7       	brpl	.-8      	; 0x914
     91c:	42 2b       	or	r20, r18
     91e:	53 2b       	or	r21, r19
     920:	89 81       	ldd	r24, Y+1	; 0x01
     922:	9a 81       	ldd	r25, Y+2	; 0x02
     924:	84 23       	and	r24, r20
     926:	95 23       	and	r25, r21
     928:	89 83       	std	Y+1, r24	; 0x01
     92a:	9a 83       	std	Y+2, r25	; 0x02
     92c:	00 97       	sbiw	r24, 0x00	; 0
     92e:	49 f0       	breq	.+18     	; 0x942
     930:	02 c0       	rjmp	.+4      	; 0x936
     932:	ee 0c       	add	r14, r14
     934:	ff 1c       	adc	r15, r15
     936:	0a 95       	dec	r16
     938:	e2 f7       	brpl	.-8      	; 0x932
     93a:	8e 29       	or	r24, r14
     93c:	9f 29       	or	r25, r15
     93e:	89 83       	std	Y+1, r24	; 0x01
     940:	9a 83       	std	Y+2, r25	; 0x02
	TC_WRITE_BYTE(R);
     942:	8d 2d       	mov	r24, r13
     944:	0e 94 73 03 	call	0x6e6
	TC_WRITE_WORD(wd);
     948:	89 81       	ldd	r24, Y+1	; 0x01
     94a:	9a 81       	ldd	r25, Y+2	; 0x02
     94c:	0e 94 9e 03 	call	0x73c
	TC_UNSELECT_RADIO;
     950:	c0 9a       	sbi	0x18, 0	; 24
	TC_SELECT_RADIO;
     952:	c0 98       	cbi	0x18, 0	; 24
     954:	22 96       	adiw	r28, 0x02	; 2
     956:	0f b6       	in	r0, 0x3f	; 63
     958:	f8 94       	cli
     95a:	de bf       	out	0x3e, r29	; 62
     95c:	0f be       	out	0x3f, r0	; 63
     95e:	cd bf       	out	0x3d, r28	; 61
     960:	df 91       	pop	r29
     962:	cf 91       	pop	r28
     964:	1f 91       	pop	r17
     966:	0f 91       	pop	r16
     968:	ff 90       	pop	r15
     96a:	ef 90       	pop	r14
     96c:	df 90       	pop	r13
     96e:	08 95       	ret

00000970 <TC_STROBE>:
}

/*****************************************************************
 * run a strobe command on cc2420                                *
 *****************************************************************/
void TC_STROBE(uint8_t CC)
{	
	TC_CLR_CSN;
     970:	c0 98       	cbi	0x18, 0	; 24
	TC_WRITE_BYTE(CC);
     972:	0e 94 73 03 	call	0x6e6
	TC_READ_BYTE(&_current_stat);
     976:	86 e2       	ldi	r24, 0x26	; 38
     978:	91 e0       	ldi	r25, 0x01	; 1
     97a:	0e 94 c9 03 	call	0x792
	TC_SET_CSN;
     97e:	c0 9a       	sbi	0x18, 0	; 24
	TC_CLR_CSN;
     980:	c0 98       	cbi	0x18, 0	; 24
     982:	08 95       	ret

00000984 <TC_SetFIFOPCallBack>:
}

/*****************************************************************
 * set callback functions                                        *
 *****************************************************************/
void TC_SetFIFOPCallBack(void (*f)(int16_t timestamp)) {
	_FIFOP_IS_SET_CALL = f;
     984:	90 93 25 01 	sts	0x0125, r25
     988:	80 93 24 01 	sts	0x0124, r24
     98c:	08 95       	ret

0000098e <TC_SetFIFOCallBack>:
}
void TC_SetFIFOCallBack(void (*f)(int16_t timestamp)) {
	_FIFO_IS_SET_CALL = f;
     98e:	90 93 23 01 	sts	0x0123, r25
     992:	80 93 22 01 	sts	0x0122, r24
     996:	08 95       	ret

00000998 <TC_SetCCACallBack>:
}
void TC_SetCCACallBack(void (*f)(int16_t timestamp)) {
	_CCA_IS_SET_CALL = f;
     998:	90 93 21 01 	sts	0x0121, r25
     99c:	80 93 20 01 	sts	0x0120, r24
     9a0:	08 95       	ret

000009a2 <TC_SetSFDCallBack>:
}
void TC_SetSFDCallBack(void (*f1)(int16_t timestamp), void (*f2)(int16_t timestamp)) {
	_SFD_IS_SET_CALL = f1;
     9a2:	90 93 1f 01 	sts	0x011F, r25
     9a6:	80 93 1e 01 	sts	0x011E, r24
	_SFD_IS_CLR_CALL = f2;
     9aa:	70 93 1d 01 	sts	0x011D, r23
     9ae:	60 93 1c 01 	sts	0x011C, r22
     9b2:	08 95       	ret

000009b4 <TC_Enable_Interrupt>:
}

/*****************************************************************
 * define the interrupt functio                                  *
 *****************************************************************/
void TC_Enable_Interrupt()
{
	SETBITLOW(EIMSK,INT6);
     9b4:	89 b7       	in	r24, 0x39	; 57
     9b6:	8f 7b       	andi	r24, 0xBF	; 191
     9b8:	89 bf       	out	0x39, r24	; 57
	SETBITHIGH(EICRB,ISC61);
     9ba:	8a b7       	in	r24, 0x3a	; 58
     9bc:	80 62       	ori	r24, 0x20	; 32
     9be:	8a bf       	out	0x3a, r24	; 58
	SETBITHIGH(EICRB,ISC60);
     9c0:	8a b7       	in	r24, 0x3a	; 58
     9c2:	80 61       	ori	r24, 0x10	; 16
     9c4:	8a bf       	out	0x3a, r24	; 58
	SETBITHIGH(EIMSK,INT6);
     9c6:	89 b7       	in	r24, 0x39	; 57
     9c8:	80 64       	ori	r24, 0x40	; 64
     9ca:	89 bf       	out	0x39, r24	; 57
	SETBITHIGH(SREG,7);
     9cc:	8f b7       	in	r24, 0x3f	; 63
     9ce:	80 68       	ori	r24, 0x80	; 128
     9d0:	8f bf       	out	0x3f, r24	; 63
     9d2:	08 95       	ret

000009d4 <TC_Disable_Interrupt>:
}

void TC_Disable_Interrupt()
{
	SETBITLOW(EIMSK,INT6);
     9d4:	89 b7       	in	r24, 0x39	; 57
     9d6:	8f 7b       	andi	r24, 0xBF	; 191
     9d8:	89 bf       	out	0x39, r24	; 57
	SETBITLOW(SREG,7);
     9da:	8f b7       	in	r24, 0x3f	; 63
     9dc:	8f 77       	andi	r24, 0x7F	; 127
     9de:	8f bf       	out	0x3f, r24	; 63
     9e0:	08 95       	ret

000009e2 <__vector_7>:
}

static uint16_t st_timestamp;		//remember the time when start receiving packet

//ISR(INT6_vect) {
//FIXED BY JONATHAN! MICAZ DOES NOT HAVE THIS SIGNAL (it's jumper-optioned to ADC1, but ships with jumper removed)
//MOTESTIX has this connection if you need a MicaZ compatible device with a function interrupt signal.
//I'll leave this code here for now in case some init routine turns on the interrupt
SIGNAL(SIG_INTERRUPT6)
{
     9e2:	1f 92       	push	r1
     9e4:	0f 92       	push	r0
     9e6:	0f b6       	in	r0, 0x3f	; 63
     9e8:	0f 92       	push	r0
     9ea:	11 24       	eor	r1, r1
     9ec:	2f 93       	push	r18
     9ee:	3f 93       	push	r19
     9f0:	4f 93       	push	r20
     9f2:	5f 93       	push	r21
     9f4:	6f 93       	push	r22
     9f6:	7f 93       	push	r23
     9f8:	8f 93       	push	r24
     9fa:	9f 93       	push	r25
     9fc:	af 93       	push	r26
     9fe:	bf 93       	push	r27
     a00:	ef 93       	push	r30
     a02:	ff 93       	push	r31
//showbyte(0x0f);
	if( TC_FIFOP_IS_SET )
     a04:	0e 9b       	sbis	0x01, 6	; 1
     a06:	0b c0       	rjmp	.+22     	; 0xa1e
		if(_FIFOP_IS_SET_CALL) {
     a08:	e0 91 24 01 	lds	r30, 0x0124
     a0c:	f0 91 25 01 	lds	r31, 0x0125
     a10:	30 97       	sbiw	r30, 0x00	; 0
     a12:	29 f0       	breq	.+10     	; 0xa1e
//			_FIFOP_IS_SET_CALL(timestamp);
			_FIFOP_IS_SET_CALL(st_timestamp); //we want the timestamp when it receives the first byte
     a14:	80 91 27 01 	lds	r24, 0x0127
     a18:	90 91 28 01 	lds	r25, 0x0128
     a1c:	09 95       	icall
     a1e:	ff 91       	pop	r31
     a20:	ef 91       	pop	r30
     a22:	bf 91       	pop	r27
     a24:	af 91       	pop	r26
     a26:	9f 91       	pop	r25
     a28:	8f 91       	pop	r24
     a2a:	7f 91       	pop	r23
     a2c:	6f 91       	pop	r22
     a2e:	5f 91       	pop	r21
     a30:	4f 91       	pop	r20
     a32:	3f 91       	pop	r19
     a34:	2f 91       	pop	r18
     a36:	0f 90       	pop	r0
     a38:	0f be       	out	0x3f, r0	; 63
     a3a:	0f 90       	pop	r0
     a3c:	1f 90       	pop	r1
     a3e:	18 95       	reti

00000a40 <ker_radio_ack_enable>:
		}
//	SETBITLOW(PORTE,6);
//	SETBITLOW(EIFR,7);
//showbyte(0xf0);
}

//FIXED BY JONATHAN! There is no connection to INT7 by CC2420 on MicaZ or other platform.


/*****************************************************************
 * define these two functions for hardware.c                     *
 *****************************************************************/
void ker_radio_ack_enable()
{
	TC_ENABLE_ADDR_CHK;
     a40:	21 e0       	ldi	r18, 0x01	; 1
     a42:	30 e0       	ldi	r19, 0x00	; 0
     a44:	4b e0       	ldi	r20, 0x0B	; 11
     a46:	64 2f       	mov	r22, r20
     a48:	81 e1       	ldi	r24, 0x11	; 17
     a4a:	0e 94 59 04 	call	0x8b2
     a4e:	08 95       	ret

00000a50 <ker_radio_ack_disable>:
}
void ker_radio_ack_disable()
{
	TC_DISABLE_ADDR_CHK;
     a50:	20 e0       	ldi	r18, 0x00	; 0
     a52:	30 e0       	ldi	r19, 0x00	; 0
     a54:	4b e0       	ldi	r20, 0x0B	; 11
     a56:	64 2f       	mov	r22, r20
     a58:	81 e1       	ldi	r24, 0x11	; 17
     a5a:	0e 94 59 04 	call	0x8b2
     a5e:	08 95       	ret

00000a60 <host_to_net>:
}

/*****************************************************************
 * define endian switch function for host between net            *
 *
 * IEEE802.15.4 has little endian net protocol. See clause 7.2 of
 * 802.15.4-2004:
 * " Fields that are longer than a single octet are sent to the 
 * PHY in the order from the octet containing the lowest numbered bits
 * to the octet containing the highest numbered bits."
 *****************************************************************/
uint16_t host_to_net(uint16_t a)
{
     a60:	08 95       	ret

00000a62 <net_to_host>:
	return a;
}

uint16_t net_to_host(uint16_t a)
{
     a62:	08 95       	ret

00000a64 <Radio_Wakeup>:
}

void Radio_Wakeup()
{	
	TC_STROBE(CC2420_SXOSCON);
     a64:	81 e0       	ldi	r24, 0x01	; 1
     a66:	0e 94 b8 04 	call	0x970
	while(!TC_IS_XOSC16M_STABLE)
		TC_STROBE(CC2420_SNOP);
     a6a:	80 91 26 01 	lds	r24, 0x0126
     a6e:	86 fd       	sbrc	r24, 6
     a70:	02 c0       	rjmp	.+4      	; 0xa76
     a72:	80 e0       	ldi	r24, 0x00	; 0
     a74:	f8 cf       	rjmp	.-16     	; 0xa66

	TC_FLUSH_RX;
     a76:	88 e0       	ldi	r24, 0x08	; 8
     a78:	0e 94 b8 04 	call	0x970
     a7c:	88 e0       	ldi	r24, 0x08	; 8
     a7e:	0e 94 b8 04 	call	0x970
	TC_FLUSH_TX;
     a82:	89 e0       	ldi	r24, 0x09	; 9
     a84:	0e 94 b8 04 	call	0x970
	TC_STROBE(CC2420_SRXON);
     a88:	83 e0       	ldi	r24, 0x03	; 3
     a8a:	0e 94 b8 04 	call	0x970
     a8e:	08 95       	ret

00000a90 <Radio_Init>:
     a90:	1f 93       	push	r17
     a92:	cf 93       	push	r28
     a94:	df 93       	push	r29
     a96:	cd b7       	in	r28, 0x3d	; 61
     a98:	de b7       	in	r29, 0x3e	; 62
     a9a:	24 97       	sbiw	r28, 0x04	; 4
     a9c:	0f b6       	in	r0, 0x3f	; 63
     a9e:	f8 94       	cli
     aa0:	de bf       	out	0x3e, r29	; 62
     aa2:	0f be       	out	0x3f, r0	; 63
     aa4:	cd bf       	out	0x3d, r28	; 61
     aa6:	1f b7       	in	r17, 0x3f	; 63
     aa8:	f8 94       	cli
     aaa:	0e 94 64 03 	call	0x6c8
     aae:	dd 9a       	sbi	0x1b, 5	; 27
     ab0:	82 e3       	ldi	r24, 0x32	; 50
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	0e 94 43 03 	call	0x686
     ab8:	de 98       	cbi	0x1b, 6	; 27
     aba:	84 e1       	ldi	r24, 0x14	; 20
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	0e 94 43 03 	call	0x686
     ac2:	de 9a       	sbi	0x1b, 6	; 27
     ac4:	0e 94 32 05 	call	0xa64
     ac8:	21 e0       	ldi	r18, 0x01	; 1
     aca:	30 e0       	ldi	r19, 0x00	; 0
     acc:	46 e0       	ldi	r20, 0x06	; 6
     ace:	67 e0       	ldi	r22, 0x07	; 7
     ad0:	81 e1       	ldi	r24, 0x11	; 17
     ad2:	0e 94 59 04 	call	0x8b2
     ad6:	21 e0       	ldi	r18, 0x01	; 1
     ad8:	30 e0       	ldi	r19, 0x00	; 0
     ada:	4b e0       	ldi	r20, 0x0B	; 11
     adc:	64 2f       	mov	r22, r20
     ade:	81 e1       	ldi	r24, 0x11	; 17
     ae0:	0e 94 59 04 	call	0x8b2
     ae4:	21 e0       	ldi	r18, 0x01	; 1
     ae6:	30 e0       	ldi	r19, 0x00	; 0
     ae8:	44 e0       	ldi	r20, 0x04	; 4
     aea:	64 2f       	mov	r22, r20
     aec:	81 e1       	ldi	r24, 0x11	; 17
     aee:	0e 94 59 04 	call	0x8b2
     af2:	80 91 04 01 	lds	r24, 0x0104
     af6:	90 91 05 01 	lds	r25, 0x0105
     afa:	89 83       	std	Y+1, r24	; 0x01
     afc:	9a 83       	std	Y+2, r25	; 0x02
     afe:	c0 9a       	sbi	0x18, 0	; 24
     b00:	c0 98       	cbi	0x18, 0	; 24
     b02:	8a ee       	ldi	r24, 0xEA	; 234
     b04:	0e 94 73 03 	call	0x6e6
     b08:	80 e8       	ldi	r24, 0x80	; 128
     b0a:	0e 94 73 03 	call	0x6e6
     b0e:	89 81       	ldd	r24, Y+1	; 0x01
     b10:	0e 94 73 03 	call	0x6e6
     b14:	fe 01       	movw	r30, r28
     b16:	31 96       	adiw	r30, 0x01	; 1
     b18:	81 81       	ldd	r24, Z+1	; 0x01
     b1a:	0e 94 73 03 	call	0x6e6
     b1e:	c0 9a       	sbi	0x18, 0	; 24
     b20:	c0 98       	cbi	0x18, 0	; 24
     b22:	80 e2       	ldi	r24, 0x20	; 32
     b24:	94 e2       	ldi	r25, 0x24	; 36
     b26:	8b 83       	std	Y+3, r24	; 0x03
     b28:	9c 83       	std	Y+4, r25	; 0x04
     b2a:	c0 9a       	sbi	0x18, 0	; 24
     b2c:	c0 98       	cbi	0x18, 0	; 24
     b2e:	88 ee       	ldi	r24, 0xE8	; 232
     b30:	0e 94 73 03 	call	0x6e6
     b34:	80 e8       	ldi	r24, 0x80	; 128
     b36:	0e 94 73 03 	call	0x6e6
     b3a:	8b 81       	ldd	r24, Y+3	; 0x03
     b3c:	0e 94 73 03 	call	0x6e6
     b40:	8c 81       	ldd	r24, Y+4	; 0x04
     b42:	0e 94 73 03 	call	0x6e6
     b46:	c0 9a       	sbi	0x18, 0	; 24
     b48:	c0 98       	cbi	0x18, 0	; 24
     b4a:	1f bf       	out	0x3f, r17	; 63
     b4c:	24 96       	adiw	r28, 0x04	; 4
     b4e:	0f b6       	in	r0, 0x3f	; 63
     b50:	f8 94       	cli
     b52:	de bf       	out	0x3e, r29	; 62
     b54:	0f be       	out	0x3f, r0	; 63
     b56:	cd bf       	out	0x3d, r28	; 61
     b58:	df 91       	pop	r29
     b5a:	cf 91       	pop	r28
     b5c:	1f 91       	pop	r17
     b5e:	08 95       	ret

00000b60 <Radio_Check_CCA>:
}

int8_t Radio_Check_CCA()	//normal it will return 1. because once TC_CCA_IS_SET can let it return 1
{
     b60:	cf 93       	push	r28
     b62:	df 93       	push	r29
	int count;
	count=0;
     b64:	c0 e0       	ldi	r28, 0x00	; 0
     b66:	d0 e0       	ldi	r29, 0x00	; 0

	TC_STROBE(CC2420_SNOP);
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	0e 94 b8 04 	call	0x970
	if(TC_IS_TX_ACTIVE) {	//it is busy on sending
     b6e:	80 91 26 01 	lds	r24, 0x0126
     b72:	83 ff       	sbrs	r24, 3
     b74:	05 c0       	rjmp	.+10     	; 0xb80
		return 0;
     b76:	ce 01       	movw	r24, r28
     b78:	1f c0       	rjmp	.+62     	; 0xbb8
	}
	
	TC_STROBE(CC2420_SRXON);
	while(!TC_IS_RSSI_VALID)
		TC_STROBE(CC2420_SNOP);
	
	while(count<MAXCOUNTCCA) {
		TC_STROBE(CC2420_SNOP);
		if(TC_CCA_IS_SET) {
			return 1;
     b7a:	81 e0       	ldi	r24, 0x01	; 1
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	1c c0       	rjmp	.+56     	; 0xbb8
     b80:	83 e0       	ldi	r24, 0x03	; 3
     b82:	0e 94 b8 04 	call	0x970
     b86:	80 91 26 01 	lds	r24, 0x0126
     b8a:	81 fd       	sbrc	r24, 1
     b8c:	02 c0       	rjmp	.+4      	; 0xb92
     b8e:	80 e0       	ldi	r24, 0x00	; 0
     b90:	f8 cf       	rjmp	.-16     	; 0xb82
     b92:	80 e0       	ldi	r24, 0x00	; 0
     b94:	0e 94 b8 04 	call	0x970
     b98:	80 b3       	in	r24, 0x10	; 16
     b9a:	99 27       	eor	r25, r25
     b9c:	80 74       	andi	r24, 0x40	; 64
     b9e:	90 70       	andi	r25, 0x00	; 0
     ba0:	26 e0       	ldi	r18, 0x06	; 6
     ba2:	95 95       	asr	r25
     ba4:	87 95       	ror	r24
     ba6:	2a 95       	dec	r18
     ba8:	e1 f7       	brne	.-8      	; 0xba2
     baa:	00 97       	sbiw	r24, 0x00	; 0
     bac:	31 f7       	brne	.-52     	; 0xb7a
		}
		count++;
     bae:	21 96       	adiw	r28, 0x01	; 1
     bb0:	23 e0       	ldi	r18, 0x03	; 3
     bb2:	c8 3e       	cpi	r28, 0xE8	; 232
     bb4:	d2 07       	cpc	r29, r18
     bb6:	6c f3       	brlt	.-38     	; 0xb92
     bb8:	df 91       	pop	r29
     bba:	cf 91       	pop	r28
     bbc:	08 95       	ret

00000bbe <Radio_Check_SFD>:
	}
	return 0;
}

int8_t Radio_Check_SFD() {
     bbe:	cf 93       	push	r28
     bc0:	df 93       	push	r29
	int count;
	int16_t timestamp;
	count=0;
     bc2:	c0 e0       	ldi	r28, 0x00	; 0
     bc4:	d0 e0       	ldi	r29, 0x00	; 0
	TC_STROBE(CC2420_SNOP);
     bc6:	80 e0       	ldi	r24, 0x00	; 0
     bc8:	0e 94 b8 04 	call	0x970
	while( !TC_SFD_IS_SET && ++count<MAXCOUNTSFD )
		TC_STROBE(CC2420_SNOP);
     bcc:	84 99       	sbic	0x10, 4	; 16
     bce:	0c c0       	rjmp	.+24     	; 0xbe8
     bd0:	c1 e0       	ldi	r28, 0x01	; 1
     bd2:	d0 e0       	ldi	r29, 0x00	; 0
     bd4:	80 e0       	ldi	r24, 0x00	; 0
     bd6:	0e 94 b8 04 	call	0x970
     bda:	84 99       	sbic	0x10, 4	; 16
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8
     bde:	21 96       	adiw	r28, 0x01	; 1
     be0:	83 e0       	ldi	r24, 0x03	; 3
     be2:	c8 3e       	cpi	r28, 0xE8	; 232
     be4:	d8 07       	cpc	r29, r24
     be6:	b4 f3       	brlt	.-20     	; 0xbd4
	if(count<MAXCOUNTSFD) { 
     be8:	c8 5e       	subi	r28, 0xE8	; 232
     bea:	d3 40       	sbci	r29, 0x03	; 3
     bec:	94 f4       	brge	.+36     	; 0xc12
		if(_SFD_IS_SET_CALL) {
     bee:	80 91 1e 01 	lds	r24, 0x011E
     bf2:	90 91 1f 01 	lds	r25, 0x011F
     bf6:	89 2b       	or	r24, r25
     bf8:	49 f0       	breq	.+18     	; 0xc0c
			timestamp = getTime();
     bfa:	0e 94 12 55 	call	0xaa24
     bfe:	dc 01       	movw	r26, r24
     c00:	cb 01       	movw	r24, r22
			_SFD_IS_SET_CALL(timestamp);
     c02:	e0 91 1e 01 	lds	r30, 0x011E
     c06:	f0 91 1f 01 	lds	r31, 0x011F
     c0a:	09 95       	icall
		}
		return 1;
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	02 c0       	rjmp	.+4      	; 0xc16
	}
	return 0;
     c12:	80 e0       	ldi	r24, 0x00	; 0
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	df 91       	pop	r29
     c18:	cf 91       	pop	r28
     c1a:	08 95       	ret

00000c1c <Radio_Send_CCA>:
}

int8_t Radio_Send_CCA(uint8_t *bytes, uint8_t num)
{	
     c1c:	0f 93       	push	r16
     c1e:	1f 93       	push	r17
     c20:	cf 93       	push	r28
     c22:	df 93       	push	r29
     c24:	ec 01       	movw	r28, r24
     c26:	16 2f       	mov	r17, r22
	int i;
	TC_SELECT_RADIO;
     c28:	c0 98       	cbi	0x18, 0	; 24
	TC_WRITE_BYTE(CC2420_TXFIFO);
     c2a:	8e e3       	ldi	r24, 0x3E	; 62
     c2c:	0e 94 73 03 	call	0x6e6
	TC_WRITE_BYTE(num);
     c30:	81 2f       	mov	r24, r17
     c32:	0e 94 73 03 	call	0x6e6
	for(i=0;i<num;i++)
     c36:	81 2f       	mov	r24, r17
     c38:	99 27       	eor	r25, r25
     c3a:	00 97       	sbiw	r24, 0x00	; 0
     c3c:	49 f0       	breq	.+18     	; 0xc50
     c3e:	8e 01       	movw	r16, r28
     c40:	ec 01       	movw	r28, r24
		TC_WRITE_BYTE(bytes[i]);
     c42:	f8 01       	movw	r30, r16
     c44:	81 91       	ld	r24, Z+
     c46:	8f 01       	movw	r16, r30
     c48:	0e 94 73 03 	call	0x6e6
     c4c:	21 97       	sbiw	r28, 0x01	; 1
     c4e:	c9 f7       	brne	.-14     	; 0xc42
	TC_UNSELECT_RADIO;
     c50:	c0 9a       	sbi	0x18, 0	; 24
	TC_STROBE(CC2420_STXONCCA);
     c52:	85 e0       	ldi	r24, 0x05	; 5
     c54:	0e 94 b8 04 	call	0x970
	if( TC_IS_TX_UNDERFLOW || !TC_IS_TX_ACTIVE  ) {
     c58:	80 91 26 01 	lds	r24, 0x0126
     c5c:	99 27       	eor	r25, r25
     c5e:	85 fd       	sbrc	r24, 5
     c60:	02 c0       	rjmp	.+4      	; 0xc66
     c62:	83 fd       	sbrc	r24, 3
     c64:	06 c0       	rjmp	.+12     	; 0xc72
		TC_FLUSH_TX;
     c66:	89 e0       	ldi	r24, 0x09	; 9
     c68:	0e 94 b8 04 	call	0x970
		return 0;
     c6c:	80 e0       	ldi	r24, 0x00	; 0
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	02 c0       	rjmp	.+4      	; 0xc76
	}
	return 1;
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	df 91       	pop	r29
     c78:	cf 91       	pop	r28
     c7a:	1f 91       	pop	r17
     c7c:	0f 91       	pop	r16
     c7e:	08 95       	ret

00000c80 <Radio_Check_Preamble>:
}

int8_t Radio_Check_Preamble()
{	
     c80:	cf 93       	push	r28
     c82:	df 93       	push	r29
	int count;
	count=0;
     c84:	c0 e0       	ldi	r28, 0x00	; 0
     c86:	d0 e0       	ldi	r29, 0x00	; 0
	
	//Check that channel has signal
	if( !TC_IS_RSSI_VALID ) {
     c88:	80 91 26 01 	lds	r24, 0x0126
     c8c:	81 fd       	sbrc	r24, 1
     c8e:	09 c0       	rjmp	.+18     	; 0xca2
		TC_STROBE(CC2420_SRXON);
     c90:	83 e0       	ldi	r24, 0x03	; 3
     c92:	0e 94 b8 04 	call	0x970
		while(!TC_IS_RSSI_VALID)
			TC_STROBE(CC2420_SNOP);
     c96:	80 91 26 01 	lds	r24, 0x0126
     c9a:	81 fd       	sbrc	r24, 1
     c9c:	02 c0       	rjmp	.+4      	; 0xca2
     c9e:	80 e0       	ldi	r24, 0x00	; 0
     ca0:	f8 cf       	rjmp	.-16     	; 0xc92
	}	
	while(count<MAXCOUNTCCA) {
		if(!TC_CCA_IS_SET) {
     ca2:	86 9b       	sbis	0x10, 6	; 16
     ca4:	0b c0       	rjmp	.+22     	; 0xcbc
			count = -1;
			break;
		}
		count++;
     ca6:	21 96       	adiw	r28, 0x01	; 1
     ca8:	83 e0       	ldi	r24, 0x03	; 3
     caa:	c8 3e       	cpi	r28, 0xE8	; 232
     cac:	d8 07       	cpc	r29, r24
     cae:	cc f3       	brlt	.-14     	; 0xca2
	}

	if( count == -1 ) {	//if yes, check SFD
     cb0:	cf 5f       	subi	r28, 0xFF	; 255
     cb2:	df 4f       	sbci	r29, 0xFF	; 255
     cb4:	31 f4       	brne	.+12     	; 0xcc2
//		if( Radio_Check_SFD() )	//? we don't need to check SFD, if !CCA, means has data
			return 1;
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	05 c0       	rjmp	.+10     	; 0xcc6
     cbc:	cf ef       	ldi	r28, 0xFF	; 255
     cbe:	df ef       	ldi	r29, 0xFF	; 255
     cc0:	f7 cf       	rjmp	.-18     	; 0xcb0
	}
	return 0;
     cc2:	80 e0       	ldi	r24, 0x00	; 0
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	df 91       	pop	r29
     cc8:	cf 91       	pop	r28
     cca:	08 95       	ret

00000ccc <Radio_Send_Pack>:
}

void Radio_Send_Pack(vhal_data *vd, int16_t *timestamp)
{	
     ccc:	ef 92       	push	r14
     cce:	ff 92       	push	r15
     cd0:	0f 93       	push	r16
     cd2:	1f 93       	push	r17
     cd4:	cf 93       	push	r28
     cd6:	df 93       	push	r29
     cd8:	8c 01       	movw	r16, r24
     cda:	7b 01       	movw	r14, r22
	int i;
	uint8_t num;

	num = vd->pre_payload_len + vd->payload_len + vd->post_payload_len;
     cdc:	fc 01       	movw	r30, r24
     cde:	c0 81       	ld	r28, Z
     ce0:	81 81       	ldd	r24, Z+1	; 0x01
     ce2:	c8 0f       	add	r28, r24
     ce4:	82 81       	ldd	r24, Z+2	; 0x02
     ce6:	c8 0f       	add	r28, r24
	if( num > MAXBUFFSIZE ) {
     ce8:	c1 38       	cpi	r28, 0x81	; 129
     cea:	38 f0       	brcs	.+14     	; 0xcfa
		TC_FLUSH_TX;
     cec:	89 e0       	ldi	r24, 0x09	; 9
     cee:	0e 94 b8 04 	call	0x970
		TC_STROBE(CC2420_SNOP);
     cf2:	80 e0       	ldi	r24, 0x00	; 0
     cf4:	0e 94 b8 04 	call	0x970
		return;
     cf8:	49 c0       	rjmp	.+146    	; 0xd8c
	}

	// Flush the TXFIFO before you transmit.
	TC_FLUSH_TX;
     cfa:	89 e0       	ldi	r24, 0x09	; 9
     cfc:	0e 94 b8 04 	call	0x970

	TC_SELECT_RADIO;
     d00:	c0 98       	cbi	0x18, 0	; 24
	TC_WRITE_BYTE(CC2420_TXFIFO);
     d02:	8e e3       	ldi	r24, 0x3E	; 62
     d04:	0e 94 73 03 	call	0x6e6
	TC_WRITE_BYTE(num);
     d08:	8c 2f       	mov	r24, r28
     d0a:	0e 94 73 03 	call	0x6e6

	// FCF, Sequence Number
	for(i=0;i<3;i++)
     d0e:	c0 e0       	ldi	r28, 0x00	; 0
     d10:	d0 e0       	ldi	r29, 0x00	; 0
		TC_WRITE_BYTE(vd->pre_payload[i]);
     d12:	f8 01       	movw	r30, r16
     d14:	a3 81       	ldd	r26, Z+3	; 0x03
     d16:	b4 81       	ldd	r27, Z+4	; 0x04
     d18:	ac 0f       	add	r26, r28
     d1a:	bd 1f       	adc	r27, r29
     d1c:	8c 91       	ld	r24, X
     d1e:	0e 94 73 03 	call	0x6e6
     d22:	21 96       	adiw	r28, 0x01	; 1
     d24:	c3 30       	cpi	r28, 0x03	; 3
     d26:	d1 05       	cpc	r29, r1
     d28:	a4 f3       	brlt	.-24     	; 0xd12

	// Skip the forth byte to work around msp430 gcc

	// PANID, Destination Address, Source Address
	// Did, Sid, Message Type 
	for(i=4; i<13;i++)
     d2a:	c4 e0       	ldi	r28, 0x04	; 4
     d2c:	d0 e0       	ldi	r29, 0x00	; 0
		TC_WRITE_BYTE(vd->pre_payload[i]);
     d2e:	f8 01       	movw	r30, r16
     d30:	a3 81       	ldd	r26, Z+3	; 0x03
     d32:	b4 81       	ldd	r27, Z+4	; 0x04
     d34:	ac 0f       	add	r26, r28
     d36:	bd 1f       	adc	r27, r29
     d38:	8c 91       	ld	r24, X
     d3a:	0e 94 73 03 	call	0x6e6
     d3e:	21 96       	adiw	r28, 0x01	; 1
     d40:	cd 30       	cpi	r28, 0x0D	; 13
     d42:	d1 05       	cpc	r29, r1
     d44:	a4 f3       	brlt	.-24     	; 0xd2e

	// Actual message payload
	for(i=0;i<vd->payload_len;i++)
     d46:	f8 01       	movw	r30, r16
     d48:	81 81       	ldd	r24, Z+1	; 0x01
     d4a:	c0 e0       	ldi	r28, 0x00	; 0
     d4c:	d0 e0       	ldi	r29, 0x00	; 0
     d4e:	88 23       	and	r24, r24
     d50:	79 f0       	breq	.+30     	; 0xd70
		TC_WRITE_BYTE(vd->payload[i]);
     d52:	f8 01       	movw	r30, r16
     d54:	a5 81       	ldd	r26, Z+5	; 0x05
     d56:	b6 81       	ldd	r27, Z+6	; 0x06
     d58:	ac 0f       	add	r26, r28
     d5a:	bd 1f       	adc	r27, r29
     d5c:	8c 91       	ld	r24, X
     d5e:	0e 94 73 03 	call	0x6e6
     d62:	21 96       	adiw	r28, 0x01	; 1
     d64:	f8 01       	movw	r30, r16
     d66:	81 81       	ldd	r24, Z+1	; 0x01
     d68:	99 27       	eor	r25, r25
     d6a:	c8 17       	cp	r28, r24
     d6c:	d9 07       	cpc	r29, r25
     d6e:	8c f3       	brlt	.-30     	; 0xd52

	TC_UNSELECT_RADIO;
     d70:	c0 9a       	sbi	0x18, 0	; 24
	TC_STROBE(CC2420_STXONCCA);
     d72:	85 e0       	ldi	r24, 0x05	; 5
     d74:	0e 94 b8 04 	call	0x970
	TC_STROBE(CC2420_SNOP);
     d78:	80 e0       	ldi	r24, 0x00	; 0
     d7a:	0e 94 b8 04 	call	0x970

		// ACK was received! Everything went fine...
	*timestamp = getTime();
     d7e:	0e 94 12 55 	call	0xaa24
     d82:	dc 01       	movw	r26, r24
     d84:	cb 01       	movw	r24, r22
     d86:	f7 01       	movw	r30, r14
     d88:	80 83       	st	Z, r24
     d8a:	91 83       	std	Z+1, r25	; 0x01
     d8c:	df 91       	pop	r29
     d8e:	cf 91       	pop	r28
     d90:	1f 91       	pop	r17
     d92:	0f 91       	pop	r16
     d94:	ff 90       	pop	r15
     d96:	ef 90       	pop	r14
     d98:	08 95       	ret

00000d9a <Radio_Recv_Pack>:
	return;
}

int8_t Radio_Recv_Pack(vhal_data *vd)
{	
     d9a:	cf 92       	push	r12
     d9c:	df 92       	push	r13
     d9e:	ef 92       	push	r14
     da0:	ff 92       	push	r15
     da2:	0f 93       	push	r16
     da4:	1f 93       	push	r17
     da6:	cf 93       	push	r28
     da8:	df 93       	push	r29
     daa:	cd b7       	in	r28, 0x3d	; 61
     dac:	de b7       	in	r29, 0x3e	; 62
     dae:	23 97       	sbiw	r28, 0x03	; 3
     db0:	0f b6       	in	r0, 0x3f	; 63
     db2:	f8 94       	cli
     db4:	de bf       	out	0x3e, r29	; 62
     db6:	0f be       	out	0x3f, r0	; 63
     db8:	cd bf       	out	0x3d, r28	; 61
     dba:	7c 01       	movw	r14, r24
	uint8_t i;
	uint8_t num;
	uint8_t tmp_byte;
	uint16_t FCF;
	uint8_t CRC;
#ifndef MICAZ_PLATFORM
	uint8_t break_flag;
	
	break_flag=0;
#endif

	if( TC_IS_RX_OVERFLOW ) {
     dbc:	80 b3       	in	r24, 0x10	; 16
     dbe:	08 2f       	mov	r16, r24
     dc0:	11 27       	eor	r17, r17
     dc2:	00 0f       	add	r16, r16
     dc4:	01 2f       	mov	r16, r17
     dc6:	00 1f       	adc	r16, r16
     dc8:	11 0b       	sbc	r17, r17
     dca:	11 95       	neg	r17
     dcc:	01 15       	cp	r16, r1
     dce:	11 05       	cpc	r17, r1
     dd0:	11 f4       	brne	.+4      	; 0xdd6
     dd2:	0e 99       	sbic	0x01, 6	; 1
     dd4:	70 c0       	rjmp	.+224    	; 0xeb6
		TC_FLUSH_RX;
		TC_STROBE(CC2420_SNOP);
		return 0;
	}

	TC_SELECT_RADIO;
     dd6:	c0 98       	cbi	0x18, 0	; 24
	TC_WRITE_BYTE( ( 0x40 | CC2420_RXFIFO ) );
     dd8:	8f e7       	ldi	r24, 0x7F	; 127
     dda:	0e 94 73 03 	call	0x6e6
	TC_READ_BYTE(&num);
     dde:	ce 01       	movw	r24, r28
     de0:	01 96       	adiw	r24, 0x01	; 1
     de2:	0e 94 c9 03 	call	0x792
	num = num & 0x7F; // The MSB of the length byte is not used!!!
     de6:	89 81       	ldd	r24, Y+1	; 0x01
     de8:	8f 77       	andi	r24, 0x7F	; 127
     dea:	89 83       	std	Y+1, r24	; 0x01


	// Frame Control Field
	TC_READ_BYTE(&(vd->pre_payload[0]));
     dec:	f7 01       	movw	r30, r14
     dee:	83 81       	ldd	r24, Z+3	; 0x03
     df0:	94 81       	ldd	r25, Z+4	; 0x04
     df2:	0e 94 c9 03 	call	0x792
	TC_READ_BYTE(&(vd->pre_payload[1]));
     df6:	f7 01       	movw	r30, r14
     df8:	83 81       	ldd	r24, Z+3	; 0x03
     dfa:	94 81       	ldd	r25, Z+4	; 0x04
     dfc:	01 96       	adiw	r24, 0x01	; 1
     dfe:	0e 94 c9 03 	call	0x792
	FCF = vd->pre_payload[0];
     e02:	f7 01       	movw	r30, r14
     e04:	a3 81       	ldd	r26, Z+3	; 0x03
     e06:	b4 81       	ldd	r27, Z+4	; 0x04
     e08:	8c 91       	ld	r24, X
     e0a:	c8 2e       	mov	r12, r24
     e0c:	dd 24       	eor	r13, r13
	FCF |= ((uint16_t) (vd->pre_payload[1] << 8) );
     e0e:	fd 01       	movw	r30, r26
     e10:	81 81       	ldd	r24, Z+1	; 0x01
     e12:	99 27       	eor	r25, r25
     e14:	98 2f       	mov	r25, r24
     e16:	88 27       	eor	r24, r24
     e18:	c8 2a       	or	r12, r24
     e1a:	d9 2a       	or	r13, r25

	// Sequence number
	TC_READ_BYTE(&(vd->pre_payload[2]));
     e1c:	cd 01       	movw	r24, r26
     e1e:	02 96       	adiw	r24, 0x02	; 2
     e20:	0e 94 c9 03 	call	0x792

	//error check
	if(num < BASIC_RF_ACK_PACKET_SIZE)
     e24:	29 81       	ldd	r18, Y+1	; 0x01
     e26:	25 30       	cpi	r18, 0x05	; 5
     e28:	78 f1       	brcs	.+94     	; 0xe88
	{
		// ignore everything
		TC_UNSELECT_RADIO;
		TC_FLUSH_RX;
		TC_STROBE(CC2420_SNOP);
		return 0;
	} else if ((num == BASIC_RF_ACK_PACKET_SIZE) && (FCF == BASIC_RF_ACK_FCF))
     e2a:	25 30       	cpi	r18, 0x05	; 5
     e2c:	f1 f4       	brne	.+60     	; 0xe6a
     e2e:	f2 e0       	ldi	r31, 0x02	; 2
     e30:	cf 16       	cp	r12, r31
     e32:	d1 04       	cpc	r13, r1
     e34:	d1 f4       	brne	.+52     	; 0xe6a
	{
		// An ACK packet has been received!
		// Footer
		TC_READ_BYTE(&tmp_byte);
     e36:	ce 01       	movw	r24, r28
     e38:	02 96       	adiw	r24, 0x02	; 2
     e3a:	0e 94 c9 03 	call	0x792
		TC_READ_BYTE(&CRC);
     e3e:	ce 01       	movw	r24, r28
     e40:	03 96       	adiw	r24, 0x03	; 3
     e42:	0e 94 c9 03 	call	0x792
		if(((FCF & (BASIC_RF_FCF_BM)) && (CRC & BASIC_RF_CRC_OK_BM)))
     e46:	8b 81       	ldd	r24, Y+3	; 0x03
     e48:	87 ff       	sbrs	r24, 7
     e4a:	07 c0       	rjmp	.+14     	; 0xe5a
		{
			_MacRecvAck(vd->pre_payload[2]);
     e4c:	f7 01       	movw	r30, r14
     e4e:	a3 81       	ldd	r26, Z+3	; 0x03
     e50:	b4 81       	ldd	r27, Z+4	; 0x04
     e52:	fd 01       	movw	r30, r26
     e54:	82 81       	ldd	r24, Z+2	; 0x02
     e56:	0e 94 5c 0a 	call	0x14b8
			//received_ack_seq = vd->pre_payload[2]; // notify the Transmitter that the ACK was received!
		}
		// Even if the CRC is correct do not pass the ACKs directly to the application layer
		TC_UNSELECT_RADIO;
     e5a:	c0 9a       	sbi	0x18, 0	; 24
		TC_FLUSH_RX;
     e5c:	88 e0       	ldi	r24, 0x08	; 8
     e5e:	0e 94 b8 04 	call	0x970
     e62:	88 e0       	ldi	r24, 0x08	; 8
     e64:	0e 94 b8 04 	call	0x970
     e68:	88 c0       	rjmp	.+272    	; 0xf7a
		return 0;
	}


	// A regular data packet has been received!
	vd->payload_len = num - vd->pre_payload_len - vd->post_payload_len;
     e6a:	f7 01       	movw	r30, r14
     e6c:	90 81       	ld	r25, Z
     e6e:	82 2f       	mov	r24, r18
     e70:	89 1b       	sub	r24, r25
     e72:	32 81       	ldd	r19, Z+2	; 0x02
     e74:	83 1b       	sub	r24, r19
     e76:	81 83       	std	Z+1, r24	; 0x01
	if( num>MAXBUFFSIZE || vd->pre_payload_len>=num || vd->payload_len>=num || vd->post_payload_len>=num) {
     e78:	21 38       	cpi	r18, 0x81	; 129
     e7a:	30 f4       	brcc	.+12     	; 0xe88
     e7c:	92 17       	cp	r25, r18
     e7e:	20 f4       	brcc	.+8      	; 0xe88
     e80:	82 17       	cp	r24, r18
     e82:	10 f4       	brcc	.+4      	; 0xe88
     e84:	32 17       	cp	r19, r18
     e86:	48 f0       	brcs	.+18     	; 0xe9a
		TC_UNSELECT_RADIO;
     e88:	c0 9a       	sbi	0x18, 0	; 24
		TC_FLUSH_RX;
     e8a:	88 e0       	ldi	r24, 0x08	; 8
     e8c:	0e 94 b8 04 	call	0x970
     e90:	88 e0       	ldi	r24, 0x08	; 8
     e92:	0e 94 b8 04 	call	0x970
		TC_STROBE(CC2420_SNOP);
     e96:	80 e0       	ldi	r24, 0x00	; 0
     e98:	e5 cf       	rjmp	.-54     	; 0xe64
		return 0;
	}

	if( vd->payload_len > 0 ) {
     e9a:	88 23       	and	r24, r24
     e9c:	b9 f0       	breq	.+46     	; 0xecc
 * Will return a NULL pointer if the call to sys_malloc fails.
 */
static inline void *ker_malloc(uint16_t size, sos_pid_t id)
{
  return sos_blk_mem_alloc(size, id, false);
     e9e:	40 e0       	ldi	r20, 0x00	; 0
     ea0:	63 e6       	ldi	r22, 0x63	; 99
     ea2:	99 27       	eor	r25, r25
     ea4:	0e 94 14 11 	call	0x2228
     ea8:	8c 01       	movw	r16, r24
     eaa:	f7 01       	movw	r30, r14
     eac:	85 83       	std	Z+5, r24	; 0x05
     eae:	96 83       	std	Z+6, r25	; 0x06
		vd->payload = (uint8_t*)ker_malloc(vd->payload_len, VHALPID);
		if( vd->payload == NULL) {
     eb0:	89 2b       	or	r24, r25
     eb2:	61 f4       	brne	.+24     	; 0xecc
			TC_UNSELECT_RADIO;
     eb4:	c0 9a       	sbi	0x18, 0	; 24
			TC_FLUSH_RX;
     eb6:	88 e0       	ldi	r24, 0x08	; 8
     eb8:	0e 94 b8 04 	call	0x970
     ebc:	88 e0       	ldi	r24, 0x08	; 8
     ebe:	0e 94 b8 04 	call	0x970
			TC_STROBE(CC2420_SNOP);
     ec2:	80 e0       	ldi	r24, 0x00	; 0
     ec4:	0e 94 b8 04 	call	0x970
			return 0;
     ec8:	c8 01       	movw	r24, r16
     eca:	59 c0       	rjmp	.+178    	; 0xf7e
		}
	}

	//for(i=3;i<vd->pre_payload_len;i++){
	// Simon: skip the forth byte when filling the buffer to avoid mspgcc problem
	for(i=4;i<(vd->pre_payload_len+1);i++){
     ecc:	14 e0       	ldi	r17, 0x04	; 4
     ece:	f7 01       	movw	r30, r14
     ed0:	80 81       	ld	r24, Z
     ed2:	99 27       	eor	r25, r25
     ed4:	01 96       	adiw	r24, 0x01	; 1
     ed6:	05 97       	sbiw	r24, 0x05	; 5
     ed8:	8c f0       	brlt	.+34     	; 0xefc
#ifndef MICAZ_PLATFORM
		if(!TC_FIFO_IS_SET)
		{
			break_flag=1;
			break;
		}
#endif
		TC_READ_BYTE(&(vd->pre_payload[i]));
     eda:	f7 01       	movw	r30, r14
     edc:	83 81       	ldd	r24, Z+3	; 0x03
     ede:	94 81       	ldd	r25, Z+4	; 0x04
     ee0:	81 0f       	add	r24, r17
     ee2:	91 1d       	adc	r25, r1
     ee4:	0e 94 c9 03 	call	0x792
     ee8:	1f 5f       	subi	r17, 0xFF	; 255
     eea:	21 2f       	mov	r18, r17
     eec:	33 27       	eor	r19, r19
     eee:	f7 01       	movw	r30, r14
     ef0:	80 81       	ld	r24, Z
     ef2:	99 27       	eor	r25, r25
     ef4:	01 96       	adiw	r24, 0x01	; 1
     ef6:	28 17       	cp	r18, r24
     ef8:	39 07       	cpc	r19, r25
     efa:	7c f3       	brlt	.-34     	; 0xeda
	}
	for(i=0;i<vd->payload_len;i++){
     efc:	10 e0       	ldi	r17, 0x00	; 0
     efe:	f7 01       	movw	r30, r14
     f00:	81 81       	ldd	r24, Z+1	; 0x01
     f02:	18 17       	cp	r17, r24
     f04:	48 f4       	brcc	.+18     	; 0xf18
#ifndef MICAZ_PLATFORM
		if(!TC_FIFO_IS_SET)
		{
			break_flag=1;
			break;
		}
#endif
		TC_READ_BYTE(&(vd->payload[i]));
     f06:	f7 01       	movw	r30, r14
     f08:	85 81       	ldd	r24, Z+5	; 0x05
     f0a:	96 81       	ldd	r25, Z+6	; 0x06
     f0c:	81 0f       	add	r24, r17
     f0e:	91 1d       	adc	r25, r1
     f10:	0e 94 c9 03 	call	0x792
     f14:	1f 5f       	subi	r17, 0xFF	; 255
     f16:	f3 cf       	rjmp	.-26     	; 0xefe
	}
	for(i=0;i<vd->post_payload_len;i++){
     f18:	10 e0       	ldi	r17, 0x00	; 0
     f1a:	f7 01       	movw	r30, r14
     f1c:	82 81       	ldd	r24, Z+2	; 0x02
     f1e:	18 17       	cp	r17, r24
     f20:	48 f4       	brcc	.+18     	; 0xf34
#ifndef MICAZ_PLATFORM
		if(!TC_FIFO_IS_SET)
		{
			break_flag=1;
			break;
		}
#endif
		TC_READ_BYTE(&(vd->post_payload[i]));
     f22:	f7 01       	movw	r30, r14
     f24:	87 81       	ldd	r24, Z+7	; 0x07
     f26:	90 85       	ldd	r25, Z+8	; 0x08
     f28:	81 0f       	add	r24, r17
     f2a:	91 1d       	adc	r25, r1
     f2c:	0e 94 c9 03 	call	0x792
     f30:	1f 5f       	subi	r17, 0xFF	; 255
     f32:	f3 cf       	rjmp	.-26     	; 0xf1a
	}
	TC_UNSELECT_RADIO;
     f34:	c0 9a       	sbi	0x18, 0	; 24
	TC_FLUSH_RX;
     f36:	88 e0       	ldi	r24, 0x08	; 8
     f38:	0e 94 b8 04 	call	0x970
     f3c:	88 e0       	ldi	r24, 0x08	; 8
     f3e:	0e 94 b8 04 	call	0x970
	TC_STROBE(CC2420_SNOP);
     f42:	80 e0       	ldi	r24, 0x00	; 0
     f44:	0e 94 b8 04 	call	0x970

#ifndef MICAZ_PLATFORM
	if(break_flag==1) {
		ker_free(vd->payload);
		return 0;
	}
#endif

	// vd->postpayload[i-1] corresponds to the CRC
	CRC = (uint8_t) vd->post_payload[i-1];
     f48:	f7 01       	movw	r30, r14
     f4a:	a7 81       	ldd	r26, Z+7	; 0x07
     f4c:	b0 85       	ldd	r27, Z+8	; 0x08
     f4e:	a1 0f       	add	r26, r17
     f50:	b1 1d       	adc	r27, r1
     f52:	11 97       	sbiw	r26, 0x01	; 1
     f54:	ec 91       	ld	r30, X
     f56:	eb 83       	std	Y+3, r30	; 0x03
	if(((FCF & (BASIC_RF_FCF_BM)) && (CRC & BASIC_RF_CRC_OK_BM)))
     f58:	8f ed       	ldi	r24, 0xDF	; 223
     f5a:	9f ef       	ldi	r25, 0xFF	; 255
     f5c:	c8 22       	and	r12, r24
     f5e:	d9 22       	and	r13, r25
     f60:	cd 28       	or	r12, r13
     f62:	29 f0       	breq	.+10     	; 0xf6e
     f64:	e7 ff       	sbrs	r30, 7
     f66:	03 c0       	rjmp	.+6      	; 0xf6e
	{
		// CRC is correct!
		return 1;
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	08 c0       	rjmp	.+16     	; 0xf7e
 * @return void
 */
static inline void ker_free(void* ptr)
{
  sos_blk_mem_free(ptr, false);
     f6e:	60 e0       	ldi	r22, 0x00	; 0
     f70:	f7 01       	movw	r30, r14
     f72:	85 81       	ldd	r24, Z+5	; 0x05
     f74:	96 81       	ldd	r25, Z+6	; 0x06
     f76:	0e 94 98 11 	call	0x2330
	}
	else
	{
		// CRC is wrong...
		ker_free(vd->payload);
		return 0;
     f7a:	80 e0       	ldi	r24, 0x00	; 0
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	23 96       	adiw	r28, 0x03	; 3
     f80:	0f b6       	in	r0, 0x3f	; 63
     f82:	f8 94       	cli
     f84:	de bf       	out	0x3e, r29	; 62
     f86:	0f be       	out	0x3f, r0	; 63
     f88:	cd bf       	out	0x3d, r28	; 61
     f8a:	df 91       	pop	r29
     f8c:	cf 91       	pop	r28
     f8e:	1f 91       	pop	r17
     f90:	0f 91       	pop	r16
     f92:	ff 90       	pop	r15
     f94:	ef 90       	pop	r14
     f96:	df 90       	pop	r13
     f98:	cf 90       	pop	r12
     f9a:	08 95       	ret

00000f9c <getSeq>:
static uint8_t getSeq()
{
	uint8_t ret;
	HAS_CRITICAL_SECTION;
	ENTER_CRITICAL_SECTION();
     f9c:	8f b7       	in	r24, 0x3f	; 63
     f9e:	f8 94       	cli
	ret = seq_count;
     fa0:	90 91 56 01 	lds	r25, 0x0156
	LEAVE_CRITICAL_SECTION();
     fa4:	8f bf       	out	0x3f, r24	; 63
	return ret;
}
     fa6:	89 2f       	mov	r24, r25
     fa8:	99 27       	eor	r25, r25
     faa:	08 95       	ret

00000fac <radio_gc>:

/*************************************************************************
 * increase sequence number                                              *
 *************************************************************************/
static uint8_t incSeq()
{
	uint8_t ret;
	HAS_CRITICAL_SECTION;
	ENTER_CRITICAL_SECTION();
	if(seq_count==0xFF) { // do not use 0x00 as a sequence number!
		ENTER_CRITICAL_SECTION();
		seq_count=1;
		ret=1;          // 0x00 will be considered ACKed by default!
	} else {
		ret = seq_count++;
	}
	LEAVE_CRITICAL_SECTION();
	return ret;
}

/*************************************************************************
 * set sequence number to 0                                              *
 *************************************************************************/
static void resetSeq()
{
	HAS_CRITICAL_SECTION;
	ENTER_CRITICAL_SECTION();
	seq_count = 1 + ker_rand()%255;
	LEAVE_CRITICAL_SECTION();
}

/*************************************************************************
 * message dispatch function for backoff mechanism for Collision         *
 *   Avoidance implementation                                            *
 *************************************************************************/
static int8_t vmac_handler(void *state, Message *e)
{
HAS_CRITICAL_SECTION;
//   MsgParam *p = (MsgParam*)(e->data);
   switch(e->type){
       case MSG_TIMER_TIMEOUT:
		{

		ENTER_CRITICAL_SECTION();
		radio_msg_send(vmac_msg);
		LEAVE_CRITICAL_SECTION();
		break;
		}
	   case MSG_VMAC_TX_NEXT_MSG:
	   {
		ENTER_CRITICAL_SECTION();
		if( vmac_msg == NULL ) {
			retry_count = 0;
			vmac_msg = mq_dequeue(&vmac_pq);
			if( vmac_msg != NULL ) {
				radio_msg_send(vmac_msg);
			}
		}
		LEAVE_CRITICAL_SECTION();	   
	     break;
	   }
	   case MSG_VMAC_TX_ACKED:
	   {
		ENTER_CRITICAL_SECTION();
		ker_timer_stop(RADIO_PID, WAKEUP_TIMER_TID);
		vmac_send_state = VMAC_SEND_STATE_IDLE;
		retry_count = 0;
		msg_send_senddone(vmac_msg, 1, RADIO_PID);  //to release the memory for this msg
		vmac_msg = NULL;
		vmac_msg = mq_dequeue(&vmac_pq);
		if( vmac_msg != NULL ) {
			radio_msg_send(vmac_msg);
		}
		LEAVE_CRITICAL_SECTION();
		break;
	   }
       default:
		break;
   }
   return SOS_OK;
}

/*************************************************************************
 * GC support                                                            *
 *************************************************************************/
void radio_gc( void )
{
	mq_gc_mark_payload( &vmac_pq, RADIO_PID );  
     fac:	69 e0       	ldi	r22, 0x09	; 9
     fae:	86 e4       	ldi	r24, 0x46	; 70
     fb0:	91 e0       	ldi	r25, 0x01	; 1
     fb2:	0e 94 0b 1b 	call	0x3616
	if( vmac_msg != NULL && vmac_msg->data != NULL 
     fb6:	e0 91 2b 01 	lds	r30, 0x012B
     fba:	f0 91 2c 01 	lds	r31, 0x012C
     fbe:	30 97       	sbiw	r30, 0x00	; 0
     fc0:	61 f0       	breq	.+24     	; 0xfda
     fc2:	60 85       	ldd	r22, Z+8	; 0x08
     fc4:	71 85       	ldd	r23, Z+9	; 0x09
     fc6:	61 15       	cp	r22, r1
     fc8:	71 05       	cpc	r23, r1
     fca:	39 f0       	breq	.+14     	; 0xfda
     fcc:	82 85       	ldd	r24, Z+10	; 0x0a
     fce:	93 85       	ldd	r25, Z+11	; 0x0b
     fd0:	82 ff       	sbrs	r24, 2
     fd2:	03 c0       	rjmp	.+6      	; 0xfda
			&& flag_msg_release(vmac_msg->flag) ) {
		ker_gc_mark( RADIO_PID, vmac_msg->data );
     fd4:	89 e0       	ldi	r24, 0x09	; 9
     fd6:	0e 94 9b 12 	call	0x2536
	}
	malloc_gc( RADIO_PID );
     fda:	89 e0       	ldi	r24, 0x09	; 9
     fdc:	0e 94 db 12 	call	0x25b6
     fe0:	08 95       	ret

00000fe2 <radio_msg_gc>:
}

void radio_msg_gc( void )
{
	mq_gc_mark_hdr( &vmac_pq, RADIO_PID );
     fe2:	69 e0       	ldi	r22, 0x09	; 9
     fe4:	86 e4       	ldi	r24, 0x46	; 70
     fe6:	91 e0       	ldi	r25, 0x01	; 1
     fe8:	0e 94 4f 1b 	call	0x369e
     fec:	08 95       	ret

00000fee <mac_set_recv_callback>:
}


/*************************************************************************
 * define the callback function for receiving data                       *
 *************************************************************************/
void (*_mac_recv_callback)(Message *m) = 0;
void mac_set_recv_callback(void (*func)(Message *m))
{
	_mac_recv_callback = func;
     fee:	90 93 2a 01 	sts	0x012A, r25
     ff2:	80 93 29 01 	sts	0x0129, r24
     ff6:	08 95       	ret

00000ff8 <sosmsg_to_mac>:
}

/*************************************************************************
 * change packet's format from SOS message to MAC                        *
 *************************************************************************/
void sosmsg_to_mac(Message *msg, VMAC_PPDU *ppdu)
{
     ff8:	ef 92       	push	r14
     ffa:	ff 92       	push	r15
     ffc:	0f 93       	push	r16
     ffe:	1f 93       	push	r17
    1000:	8c 01       	movw	r16, r24
    1002:	7b 01       	movw	r14, r22
	ppdu->len = msg->len + PRE_PAYLOAD_LEN + POST_PAYLOAD_LEN;
    1004:	fc 01       	movw	r30, r24
    1006:	87 81       	ldd	r24, Z+7	; 0x07
    1008:	82 5f       	subi	r24, 0xF2	; 242
    100a:	fb 01       	movw	r30, r22
    100c:	85 83       	std	Z+5, r24	; 0x05

	ppdu->mpdu.daddr = host_to_net(msg->daddr);
    100e:	f8 01       	movw	r30, r16
    1010:	82 81       	ldd	r24, Z+2	; 0x02
    1012:	93 81       	ldd	r25, Z+3	; 0x03
    1014:	0e 94 30 05 	call	0xa60
    1018:	f7 01       	movw	r30, r14
    101a:	84 87       	std	Z+12, r24	; 0x0c
    101c:	95 87       	std	Z+13, r25	; 0x0d
	ppdu->mpdu.saddr = host_to_net(msg->saddr);
    101e:	f8 01       	movw	r30, r16
    1020:	84 81       	ldd	r24, Z+4	; 0x04
    1022:	95 81       	ldd	r25, Z+5	; 0x05
    1024:	0e 94 30 05 	call	0xa60
    1028:	f7 01       	movw	r30, r14
    102a:	86 87       	std	Z+14, r24	; 0x0e
    102c:	97 87       	std	Z+15, r25	; 0x0f
	ppdu->mpdu.did = msg->did;
    102e:	f8 01       	movw	r30, r16
    1030:	80 81       	ld	r24, Z
    1032:	f7 01       	movw	r30, r14
    1034:	80 8b       	std	Z+16, r24	; 0x10
	ppdu->mpdu.sid = msg->sid;
    1036:	f8 01       	movw	r30, r16
    1038:	81 81       	ldd	r24, Z+1	; 0x01
    103a:	f7 01       	movw	r30, r14
    103c:	81 8b       	std	Z+17, r24	; 0x11
	ppdu->mpdu.type = msg->type;
    103e:	f8 01       	movw	r30, r16
    1040:	86 81       	ldd	r24, Z+6	; 0x06
    1042:	f7 01       	movw	r30, r14
    1044:	82 8b       	std	Z+18, r24	; 0x12

	ppdu->mpdu.data = msg->data;
    1046:	f8 01       	movw	r30, r16
    1048:	80 85       	ldd	r24, Z+8	; 0x08
    104a:	91 85       	ldd	r25, Z+9	; 0x09
    104c:	f7 01       	movw	r30, r14
    104e:	83 8b       	std	Z+19, r24	; 0x13
    1050:	94 8b       	std	Z+20, r25	; 0x14
    1052:	1f 91       	pop	r17
    1054:	0f 91       	pop	r16
    1056:	ff 90       	pop	r15
    1058:	ef 90       	pop	r14
    105a:	08 95       	ret

0000105c <mac_to_sosmsg>:
}

/*************************************************************************
 * change packet's format from MAC to SOS message                        *
 *************************************************************************/
void mac_to_sosmsg(VMAC_PPDU *ppdu, Message *msg)
{
    105c:	0f 93       	push	r16
    105e:	1f 93       	push	r17
    1060:	cf 93       	push	r28
    1062:	df 93       	push	r29
    1064:	8c 01       	movw	r16, r24
    1066:	eb 01       	movw	r28, r22
	msg->len = ppdu->len - (PRE_PAYLOAD_LEN + POST_PAYLOAD_LEN);
    1068:	fc 01       	movw	r30, r24
    106a:	85 81       	ldd	r24, Z+5	; 0x05
    106c:	8e 50       	subi	r24, 0x0E	; 14
    106e:	8f 83       	std	Y+7, r24	; 0x07

	msg->daddr = net_to_host(ppdu->mpdu.daddr);
    1070:	84 85       	ldd	r24, Z+12	; 0x0c
    1072:	95 85       	ldd	r25, Z+13	; 0x0d
    1074:	0e 94 31 05 	call	0xa62
    1078:	8a 83       	std	Y+2, r24	; 0x02
    107a:	9b 83       	std	Y+3, r25	; 0x03
	msg->saddr = net_to_host(ppdu->mpdu.saddr);
    107c:	f8 01       	movw	r30, r16
    107e:	86 85       	ldd	r24, Z+14	; 0x0e
    1080:	97 85       	ldd	r25, Z+15	; 0x0f
    1082:	0e 94 31 05 	call	0xa62
    1086:	8c 83       	std	Y+4, r24	; 0x04
    1088:	9d 83       	std	Y+5, r25	; 0x05
	msg->did = ppdu->mpdu.did;
    108a:	f8 01       	movw	r30, r16
    108c:	80 89       	ldd	r24, Z+16	; 0x10
    108e:	88 83       	st	Y, r24
	msg->sid = ppdu->mpdu.sid;
    1090:	81 89       	ldd	r24, Z+17	; 0x11
    1092:	89 83       	std	Y+1, r24	; 0x01
	msg->type = ppdu->mpdu.type;
    1094:	82 89       	ldd	r24, Z+18	; 0x12
    1096:	8e 83       	std	Y+6, r24	; 0x06

	//msg->data = ppdu->mpdu.data;
	if(msg->len==0){
    1098:	8f 81       	ldd	r24, Y+7	; 0x07
    109a:	88 23       	and	r24, r24
    109c:	19 f4       	brne	.+6      	; 0x10a4
		msg->data = NULL;
    109e:	18 86       	std	Y+8, r1	; 0x08
    10a0:	19 86       	std	Y+9, r1	; 0x09
    10a2:	05 c0       	rjmp	.+10     	; 0x10ae
	} else {
		msg->data = ppdu->mpdu.data;
    10a4:	f8 01       	movw	r30, r16
    10a6:	83 89       	ldd	r24, Z+19	; 0x13
    10a8:	94 89       	ldd	r25, Z+20	; 0x14
    10aa:	88 87       	std	Y+8, r24	; 0x08
    10ac:	99 87       	std	Y+9, r25	; 0x09
	}
	msg->flag |= SOS_MSG_RELEASE;
    10ae:	8a 85       	ldd	r24, Y+10	; 0x0a
    10b0:	9b 85       	ldd	r25, Y+11	; 0x0b
    10b2:	84 60       	ori	r24, 0x04	; 4
    10b4:	8a 87       	std	Y+10, r24	; 0x0a
    10b6:	9b 87       	std	Y+11, r25	; 0x0b
    // RSSI is the most significant byte of the post payload
    // But, since the word is little endian, its the lower byte.
    msg->rssi = (ppdu->mpdu.fcs & 0x00ff);
    10b8:	f8 01       	movw	r30, r16
    10ba:	85 89       	ldd	r24, Z+21	; 0x15
    10bc:	88 8b       	std	Y+16, r24	; 0x10
    10be:	df 91       	pop	r29
    10c0:	cf 91       	pop	r28
    10c2:	1f 91       	pop	r17
    10c4:	0f 91       	pop	r16
    10c6:	08 95       	ret

000010c8 <mac_to_vhal>:
}

/*************************************************************************
 * change packet's format from MAC to vhal                               *
 *************************************************************************/
void mac_to_vhal(VMAC_PPDU *ppdu, vhal_data *vd)
{
    10c8:	cf 93       	push	r28
    10ca:	df 93       	push	r29
    10cc:	fc 01       	movw	r30, r24
    10ce:	db 01       	movw	r26, r22
	vd->pre_payload_len = PRE_PAYLOAD_LEN;
    10d0:	8c e0       	ldi	r24, 0x0C	; 12
    10d2:	8c 93       	st	X, r24
	vd->pre_payload = (uint8_t*)&ppdu->mpdu.fcf;
    10d4:	36 96       	adiw	r30, 0x06	; 6
    10d6:	eb 01       	movw	r28, r22
    10d8:	eb 83       	std	Y+3, r30	; 0x03
    10da:	fc 83       	std	Y+4, r31	; 0x04

	vd->post_payload_len = POST_PAYLOAD_LEN;
    10dc:	82 e0       	ldi	r24, 0x02	; 2
    10de:	8a 83       	std	Y+2, r24	; 0x02
	vd->post_payload = (uint8_t*)&ppdu->mpdu.fcs;
    10e0:	3f 96       	adiw	r30, 0x0f	; 15
    10e2:	ef 83       	std	Y+7, r30	; 0x07
    10e4:	f8 87       	std	Y+8, r31	; 0x08
    10e6:	75 97       	sbiw	r30, 0x15	; 21

	vd->payload_len = ppdu->len - vd->pre_payload_len - vd->post_payload_len;
    10e8:	85 81       	ldd	r24, Z+5	; 0x05
    10ea:	8e 50       	subi	r24, 0x0E	; 14
    10ec:	89 83       	std	Y+1, r24	; 0x01
	vd->payload = ppdu->mpdu.data;
    10ee:	83 89       	ldd	r24, Z+19	; 0x13
    10f0:	94 89       	ldd	r25, Z+20	; 0x14
    10f2:	8d 83       	std	Y+5, r24	; 0x05
    10f4:	9e 83       	std	Y+6, r25	; 0x06
    10f6:	df 91       	pop	r29
    10f8:	cf 91       	pop	r28
    10fa:	08 95       	ret

000010fc <vhal_to_mac>:
}

/*************************************************************************
 * change packet's format from vhal to MAC                               *
 *************************************************************************/
void vhal_to_mac(vhal_data *vd, VMAC_PPDU *ppdu)
{
    10fc:	cf 93       	push	r28
    10fe:	df 93       	push	r29
    1100:	ac 01       	movw	r20, r24
    1102:	fb 01       	movw	r30, r22
	ppdu->len = vd->payload_len + vd->pre_payload_len + vd->post_payload_len;
    1104:	ec 01       	movw	r28, r24
    1106:	89 81       	ldd	r24, Y+1	; 0x01
    1108:	98 81       	ld	r25, Y
    110a:	89 0f       	add	r24, r25
    110c:	9a 81       	ldd	r25, Y+2	; 0x02
    110e:	89 0f       	add	r24, r25
    1110:	85 83       	std	Z+5, r24	; 0x05
	memcpy((uint8_t*)&ppdu->mpdu.fcf, vd->pre_payload, PRE_PAYLOAD_LEN);
    1112:	2b 81       	ldd	r18, Y+3	; 0x03
    1114:	3c 81       	ldd	r19, Y+4	; 0x04
    1116:	36 96       	adiw	r30, 0x06	; 6
    1118:	8c e0       	ldi	r24, 0x0C	; 12
    111a:	df 01       	movw	r26, r30
    111c:	e9 01       	movw	r28, r18
    111e:	09 90       	ld	r0, Y+
    1120:	0d 92       	st	X+, r0
    1122:	8a 95       	dec	r24
    1124:	e1 f7       	brne	.-8      	; 0x111e
    1126:	36 97       	sbiw	r30, 0x06	; 6

	ppdu->mpdu.data = vd->payload;
    1128:	ea 01       	movw	r28, r20
    112a:	8d 81       	ldd	r24, Y+5	; 0x05
    112c:	9e 81       	ldd	r25, Y+6	; 0x06
    112e:	83 8b       	std	Z+19, r24	; 0x13
    1130:	94 8b       	std	Z+20, r25	; 0x14
	memcpy((uint8_t*)&ppdu->mpdu.fcs, vd->post_payload, vd->post_payload_len);
    1132:	8a 81       	ldd	r24, Y+2	; 0x02
    1134:	99 27       	eor	r25, r25
    1136:	2f 81       	ldd	r18, Y+7	; 0x07
    1138:	38 85       	ldd	r19, Y+8	; 0x08
    113a:	ac 01       	movw	r20, r24
    113c:	b9 01       	movw	r22, r18
    113e:	cf 01       	movw	r24, r30
    1140:	45 96       	adiw	r24, 0x15	; 21
    1142:	0e 94 56 59 	call	0xb2ac
    1146:	df 91       	pop	r29
    1148:	cf 91       	pop	r28
    114a:	08 95       	ret

0000114c <MacBackoff_congestionBackoff>:
}

/*************************************************************************
 * send the message by radio                                             *
 *************************************************************************/
static void radio_msg_send(Message *msg)
{
	int16_t timestamp;
	//construct the packet
	VMAC_PPDU ppdu;
	vhal_data vd;

	if( Radio_Check_CCA() ) {
		if( retry_count == 0 ) {
			incSeq();
		}
		if(msg->type == MSG_TIMESTAMP){
			uint32_t timestp = ker_systime32();
			memcpy(msg->data, (uint8_t*)(&timestp),sizeof(uint32_t));
		}
		sosmsg_to_mac(msg, &ppdu);

        if(msg->daddr==BCAST_ADDRESS || msg->type == MSG_TIMESTAMP) {
			ppdu.mpdu.fcf = BASIC_RF_FCF_NOACK;     //Broadcast: No Ack
		} else {
			//ppdu.mpdu.fcf = BASIC_RF_FCF_NOACK;     //Broadcast: No Ack
			ppdu.mpdu.fcf = BASIC_RF_FCF_ACK;       //Unicast: Ack
		}

		ppdu.mpdu.panid = host_to_net(VMAC_PANID); // PANID
		ppdu.mpdu.seq = getSeq();	//count by software
		ppdu.mpdu.fcs = 1;		//doesn't matter, hardware supports it

		mac_to_vhal(&ppdu, &vd);
		timestamp_outgoing(msg, ker_systime32());
		Radio_Send_Pack(&vd, &timestamp);
	
        // do not retransmit broadcast messages nor timestamps!
		if( msg->daddr == BCAST_ADDRESS || msg->type == MSG_TIMESTAMP) {
		//if( 1 ) {
			retry_count = 0;
			msg_send_senddone(msg, 1, RADIO_PID);
			vmac_msg = NULL;
			vmac_send_state = VMAC_SEND_STATE_IDLE;
			return;
		} else {
			
			if( retry_count < (uint8_t)MAX_RETRIES ) {
				vmac_send_state = VMAC_SEND_STATE_WAIT_FOR_ACK;
				vmac_msg = msg;
				//
				// We add TWO milliseconds for the ACK transmission time
				//
				if( ker_timer_restart(RADIO_PID, WAKEUP_TIMER_TID, 
					MacBackoff_congestionBackoff(retry_count) + 2) != SOS_OK ) {
					ker_timer_start(RADIO_PID, WAKEUP_TIMER_TID,
							MacBackoff_congestionBackoff(retry_count) + 2);
				}
				retry_count++;
			} else {
				retry_count = 0;
				msg_send_senddone(vmac_msg, 0, RADIO_PID);  //to release the memory for this msg
				vmac_msg = NULL;
				vmac_send_state = VMAC_SEND_STATE_IDLE;
				if( getMsgNumOfQueue() != 0 ) {
					post_short( RADIO_PID, RADIO_PID, MSG_VMAC_TX_NEXT_MSG, 0, 0, 0);
				}
			}
		}
	} else {
		if( retry_count < (uint8_t)MAX_RETRIES ) {
			vmac_send_state = VMAC_SEND_STATE_BACKOFF;
			vmac_msg = msg;
			if( ker_timer_restart(RADIO_PID, WAKEUP_TIMER_TID, 
				MacBackoff_congestionBackoff(retry_count)) != SOS_OK ) 	// setup backoff timer
			{
				ker_timer_start(RADIO_PID, WAKEUP_TIMER_TID,
						MacBackoff_congestionBackoff(retry_count));
			}
			retry_count++;
		} else {
			retry_count = 0;
			msg_send_senddone(vmac_msg, 0, RADIO_PID);  //to release the memory for this msg
			vmac_msg = NULL;
			vmac_send_state = VMAC_SEND_STATE_IDLE;
			if( getMsgNumOfQueue() != 0 ) {
				post_short( RADIO_PID, RADIO_PID, MSG_VMAC_TX_NEXT_MSG, 0, 0, 0);
			}
		}
	}
}

/*************************************************************************
 * get message number in the queue                                       *
 *************************************************************************/
static uint8_t getMsgNumOfQueue()
{
	uint8_t ret = 0;
	HAS_CRITICAL_SECTION;
	ENTER_CRITICAL_SECTION();
	ret = vmac_pq.msg_cnt;
	LEAVE_CRITICAL_SECTION();
	return ret;
}


/*************************************************************************
 * will be called by post_net, etc functions to send message             *
 *************************************************************************/
/*
 * If send state is not idle, queue the message.
 * If CCA is busy, perform backoff.
 * Otherwise, send the message and wait for ACK.
 */
void radio_msg_alloc(Message *msg)
{
	HAS_CRITICAL_SECTION;

	ENTER_CRITICAL_SECTION();
	if( vmac_send_state != VMAC_SEND_STATE_IDLE ) {
		mq_enqueue(&vmac_pq, msg);
		LEAVE_CRITICAL_SECTION();
		return;
	}

	retry_count = 0;
	radio_msg_send(msg);

	LEAVE_CRITICAL_SECTION();
}

void _MacRecvAck(uint8_t ack_seq)
{
	if( (vmac_send_state == VMAC_SEND_STATE_WAIT_FOR_ACK) && (getSeq() == ack_seq) ) {
		//LED_DBG(LED_RED_TOGGLE);
		post_short( RADIO_PID, RADIO_PID, MSG_VMAC_TX_ACKED, 0, 0, 0 );
	}
}

/*************************************************************************
 * the callback fnction for reading data from cc2420                     *
 *************************************************************************/
void _MacRecvCallBack(int16_t timestamp)
{
#ifdef SOS_USE_PREEMPTION
  HAS_PREEMPTION_SECTION;
  // disable preemption
  DISABLE_PREEMPTION();
#endif

	VMAC_PPDU ppdu;
	vhal_data vd;

	mac_to_vhal(&ppdu, &vd);   // note that vd.payload_len will have a bogus entry. It will be overwritten in Radio_Recv_Pack
	Radio_Disable_Interrupt();		//disable interrupt while reading data
	if( !Radio_Recv_Pack(&vd) ) {
		Radio_Enable_Interrupt();	//enable interrupt
		return;
	}
	Radio_Enable_Interrupt();   //enable interrupt
	vhal_to_mac(&vd, &ppdu);
/* This is now done on the chip with the PANID
	if( ppdu.mpdu.group     != node_group_id ) {	 
		ker_free(vd.payload);	 
		Radio_Enable_Interrupt();		//enable interrupt
		return;	 
	}	 
	*/
	// Andreas - filter node ID here, even before allocating any new memory 
	// if you're using sos/config/base you must comment this block out!
	if (net_to_host(ppdu.mpdu.daddr) != node_address && net_to_host(ppdu.mpdu.daddr) != BCAST_ADDRESS)
	{
		ker_free(vd.payload);
		return;
	}

	Message *msg = msg_create();
	if( msg == NULL ) {
		ker_free(vd.payload);
		return;
	}
	mac_to_sosmsg(&ppdu, msg);

	// Andreas - start debug
#ifdef ENA_VMAC_UART_DEBUG
	uint8_t *payload;
	uint8_t msg_len;
	msg_len=msg->len;
	payload = msg->data;

	//post_uart(msg->sid, msg->did, msg->type, msg_len, payload, SOS_MSG_RELEASE, msg->daddr);

	// Swap daddr with saddr, because daddr is useless when debugging.
	// This way, if sossrv says "dest addr: 15" that actually means the message SENDER was node 15
	post_uart(msg->sid, msg->did, msg->type, msg_len, payload, SOS_MSG_RELEASE, msg->saddr);
#endif

	if(msg->type == MSG_TIMESTAMP){
		uint32_t timestp = ker_systime32();
		memcpy(((uint8_t*)(msg->data) + sizeof(uint32_t)),(uint8_t*)(&timestp),sizeof(uint32_t));
	}
    timestamp_incoming(msg, ker_systime32());

	// Check for duplicates
    if (msg->saddr != BCAST_ADDRESS)
    {
        uint8_t found = 0;
        uint8_t i;
        for(i=0; i<NUM_DUP_CHECK; i++)
        {
            if(msg->saddr == dup_addr[i])
            {
                if(ppdu.mpdu.seq == dup_seq[i])
                {
                    // duplicate message
                    //ker_free(vd.payload);
                    //properly dispose of the message.
                    msg->flag |= SOS_MSG_RELEASE;
                    msg_dispose(msg);
                    return;
                } else {
                    // same address, but different seq
                    dup_seq[i] = ppdu.mpdu.seq;
                    found = 1;
                    break;
                }
            }
        }
        if(!found){
            // not an entry yet. Find an empty spot, or overwrite one
            found = 0;
            for(i=0; i<NUM_DUP_CHECK; i++)
            {
                if(dup_addr[i] == BCAST_ADDRESS){
                    dup_addr[i] = msg->saddr;
                    dup_seq[i] = ppdu.mpdu.seq;
                    found = 1;
                    break;
                }
            }
            if(!found){
                // overwrite oldest
                dup_addr[oldest_dup] = msg->saddr;
                dup_seq[oldest_dup] = ppdu.mpdu.seq;
                oldest_dup = (oldest_dup + 1)%NUM_DUP_CHECK;
            }
        }
    }

	handle_incoming_msg(msg, SOS_MSG_RADIO_IO);
#ifdef SOS_USE_PREEMPTION
	ENABLE_GLOBAL_INTERRUPTS();
	ENABLE_PREEMPTION(NULL);
#endif
}

/*************************************************************************
 * set radio timestamp                                                   *
 *************************************************************************/
int8_t radio_set_timestamp(bool on)
{
	return SOS_OK;
}

/*************************************************************************
 * Implement exponential backoff mechanism                               *
 *************************************************************************/
static int16_t MacBackoff_congestionBackoff(int8_t retries)
{
    114c:	cf 93       	push	r28
    114e:	df 93       	push	r29
	int8_t i;
	int16_t masktime = 1;
    1150:	c1 e0       	ldi	r28, 0x01	; 1
    1152:	d0 e0       	ldi	r29, 0x00	; 0
	for(i=0; i<retries; i++)
    1154:	18 16       	cp	r1, r24
    1156:	24 f4       	brge	.+8      	; 0x1160
		masktime *= 2;			//masktime = 2^retries
    1158:	cc 0f       	add	r28, r28
    115a:	dd 1f       	adc	r29, r29
    115c:	81 50       	subi	r24, 0x01	; 1
    115e:	e1 f7       	brne	.-8      	; 0x1158
	masktime --;				//get the mask
    1160:	21 97       	sbiw	r28, 0x01	; 1
	if( masktime > 1023 )
    1162:	84 e0       	ldi	r24, 0x04	; 4
    1164:	c0 30       	cpi	r28, 0x00	; 0
    1166:	d8 07       	cpc	r29, r24
    1168:	14 f0       	brlt	.+4      	; 0x116e
		masktime = 1023;		//max backoff 1023
    116a:	cf ef       	ldi	r28, 0xFF	; 255
    116c:	d3 e0       	ldi	r29, 0x03	; 3
//	return ((ker_rand() & 0xF) + TIMER_MIN_INTERVAL);
	return ((ker_rand() & masktime) + TIMER_MIN_INTERVAL);
    116e:	0e 94 cb 36 	call	0x6d96
    1172:	c8 23       	and	r28, r24
    1174:	d9 23       	and	r29, r25
}
    1176:	ce 01       	movw	r24, r28
    1178:	05 96       	adiw	r24, 0x05	; 5
    117a:	df 91       	pop	r29
    117c:	cf 91       	pop	r28
    117e:	08 95       	ret

00001180 <getMsgNumOfQueue>:
    1180:	8f b7       	in	r24, 0x3f	; 63
    1182:	f8 94       	cli
    1184:	90 91 46 01 	lds	r25, 0x0146
    1188:	8f bf       	out	0x3f, r24	; 63
    118a:	89 2f       	mov	r24, r25
    118c:	99 27       	eor	r25, r25
    118e:	08 95       	ret

00001190 <radio_msg_send>:
    1190:	df 92       	push	r13
    1192:	ef 92       	push	r14
    1194:	ff 92       	push	r15
    1196:	0f 93       	push	r16
    1198:	1f 93       	push	r17
    119a:	cf 93       	push	r28
    119c:	df 93       	push	r29
    119e:	cd b7       	in	r28, 0x3d	; 61
    11a0:	de b7       	in	r29, 0x3e	; 62
    11a2:	a2 97       	sbiw	r28, 0x22	; 34
    11a4:	0f b6       	in	r0, 0x3f	; 63
    11a6:	f8 94       	cli
    11a8:	de bf       	out	0x3e, r29	; 62
    11aa:	0f be       	out	0x3f, r0	; 63
    11ac:	cd bf       	out	0x3d, r28	; 61
    11ae:	7c 01       	movw	r14, r24
    11b0:	0e 94 b0 05 	call	0xb60
    11b4:	d8 2e       	mov	r13, r24
    11b6:	90 91 57 01 	lds	r25, 0x0157
    11ba:	88 23       	and	r24, r24
    11bc:	09 f4       	brne	.+2      	; 0x11c0
    11be:	b6 c0       	rjmp	.+364    	; 0x132c
    11c0:	99 23       	and	r25, r25
    11c2:	71 f4       	brne	.+28     	; 0x11e0
    11c4:	9f b7       	in	r25, 0x3f	; 63
    11c6:	f8 94       	cli
    11c8:	80 91 56 01 	lds	r24, 0x0156
    11cc:	8f 3f       	cpi	r24, 0xFF	; 255
    11ce:	21 f4       	brne	.+8      	; 0x11d8
    11d0:	9f b7       	in	r25, 0x3f	; 63
    11d2:	f8 94       	cli
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	01 c0       	rjmp	.+2      	; 0x11da
    11d8:	8f 5f       	subi	r24, 0xFF	; 255
    11da:	80 93 56 01 	sts	0x0156, r24
    11de:	9f bf       	out	0x3f, r25	; 63
    11e0:	f7 01       	movw	r30, r14
    11e2:	86 81       	ldd	r24, Z+6	; 0x06
    11e4:	80 31       	cpi	r24, 0x10	; 16
    11e6:	61 f4       	brne	.+24     	; 0x1200
    11e8:	0e 94 12 55 	call	0xaa24
    11ec:	dc 01       	movw	r26, r24
    11ee:	cb 01       	movw	r24, r22
    11f0:	f7 01       	movw	r30, r14
    11f2:	20 85       	ldd	r18, Z+8	; 0x08
    11f4:	31 85       	ldd	r19, Z+9	; 0x09
    11f6:	f9 01       	movw	r30, r18
    11f8:	80 83       	st	Z, r24
    11fa:	91 83       	std	Z+1, r25	; 0x01
    11fc:	a2 83       	std	Z+2, r26	; 0x02
    11fe:	b3 83       	std	Z+3, r27	; 0x03
    1200:	be 01       	movw	r22, r28
    1202:	6f 5f       	subi	r22, 0xFF	; 255
    1204:	7f 4f       	sbci	r23, 0xFF	; 255
    1206:	c7 01       	movw	r24, r14
    1208:	0e 94 fc 07 	call	0xff8
    120c:	f7 01       	movw	r30, r14
    120e:	82 81       	ldd	r24, Z+2	; 0x02
    1210:	93 81       	ldd	r25, Z+3	; 0x03
    1212:	8f 5f       	subi	r24, 0xFF	; 255
    1214:	9f 4f       	sbci	r25, 0xFF	; 255
    1216:	21 f0       	breq	.+8      	; 0x1220
    1218:	f7 01       	movw	r30, r14
    121a:	86 81       	ldd	r24, Z+6	; 0x06
    121c:	80 31       	cpi	r24, 0x10	; 16
    121e:	19 f4       	brne	.+6      	; 0x1226
    1220:	81 e4       	ldi	r24, 0x41	; 65
    1222:	98 e8       	ldi	r25, 0x88	; 136
    1224:	02 c0       	rjmp	.+4      	; 0x122a
    1226:	81 e6       	ldi	r24, 0x61	; 97
    1228:	98 e8       	ldi	r25, 0x88	; 136
    122a:	8f 83       	std	Y+7, r24	; 0x07
    122c:	98 87       	std	Y+8, r25	; 0x08
    122e:	80 e2       	ldi	r24, 0x20	; 32
    1230:	94 e2       	ldi	r25, 0x24	; 36
    1232:	0e 94 30 05 	call	0xa60
    1236:	8b 87       	std	Y+11, r24	; 0x0b
    1238:	9c 87       	std	Y+12, r25	; 0x0c
    123a:	0e 94 ce 07 	call	0xf9c
    123e:	89 87       	std	Y+9, r24	; 0x09
    1240:	81 e0       	ldi	r24, 0x01	; 1
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	8e 8b       	std	Y+22, r24	; 0x16
    1246:	9f 8b       	std	Y+23, r25	; 0x17
    1248:	8e 01       	movw	r16, r28
    124a:	08 5e       	subi	r16, 0xE8	; 232
    124c:	1f 4f       	sbci	r17, 0xFF	; 255
    124e:	b8 01       	movw	r22, r16
    1250:	ce 01       	movw	r24, r28
    1252:	01 96       	adiw	r24, 0x01	; 1
    1254:	0e 94 64 08 	call	0x10c8
    1258:	0e 94 12 55 	call	0xaa24
    125c:	dc 01       	movw	r26, r24
    125e:	cb 01       	movw	r24, r22
    1260:	ac 01       	movw	r20, r24
    1262:	bd 01       	movw	r22, r26
    1264:	c7 01       	movw	r24, r14
    1266:	0e 94 35 37 	call	0x6e6a
    126a:	be 01       	movw	r22, r28
    126c:	6f 5d       	subi	r22, 0xDF	; 223
    126e:	7f 4f       	sbci	r23, 0xFF	; 255
    1270:	c8 01       	movw	r24, r16
    1272:	0e 94 66 06 	call	0xccc
    1276:	f7 01       	movw	r30, r14
    1278:	82 81       	ldd	r24, Z+2	; 0x02
    127a:	93 81       	ldd	r25, Z+3	; 0x03
    127c:	8f 5f       	subi	r24, 0xFF	; 255
    127e:	9f 4f       	sbci	r25, 0xFF	; 255
    1280:	21 f0       	breq	.+8      	; 0x128a
    1282:	f7 01       	movw	r30, r14
    1284:	86 81       	ldd	r24, Z+6	; 0x06
    1286:	80 31       	cpi	r24, 0x10	; 16
    1288:	71 f4       	brne	.+28     	; 0x12a6
    128a:	10 92 57 01 	sts	0x0157, r1
    128e:	49 e0       	ldi	r20, 0x09	; 9
    1290:	61 e0       	ldi	r22, 0x01	; 1
    1292:	c7 01       	movw	r24, r14
    1294:	0e 94 bc 1b 	call	0x3778
    1298:	10 92 2c 01 	sts	0x012C, r1
    129c:	10 92 2b 01 	sts	0x012B, r1
    12a0:	10 92 2d 01 	sts	0x012D, r1
    12a4:	8c c0       	rjmp	.+280    	; 0x13be
    12a6:	90 91 57 01 	lds	r25, 0x0157
    12aa:	95 30       	cpi	r25, 0x05	; 5
    12ac:	28 f5       	brcc	.+74     	; 0x12f8
    12ae:	82 e0       	ldi	r24, 0x02	; 2
    12b0:	80 93 2d 01 	sts	0x012D, r24
    12b4:	f0 92 2c 01 	sts	0x012C, r15
    12b8:	e0 92 2b 01 	sts	0x012B, r14
    12bc:	89 2f       	mov	r24, r25
    12be:	0e 94 a6 08 	call	0x114c
    12c2:	02 96       	adiw	r24, 0x02	; 2
    12c4:	aa 27       	eor	r26, r26
    12c6:	97 fd       	sbrc	r25, 7
    12c8:	a0 95       	com	r26
    12ca:	ba 2f       	mov	r27, r26
    12cc:	9c 01       	movw	r18, r24
    12ce:	ad 01       	movw	r20, r26
    12d0:	60 e0       	ldi	r22, 0x00	; 0
    12d2:	89 e0       	ldi	r24, 0x09	; 9
    12d4:	0e 94 63 31 	call	0x62c6
    12d8:	88 23       	and	r24, r24
    12da:	09 f4       	brne	.+2      	; 0x12de
    12dc:	4d c0       	rjmp	.+154    	; 0x1378
    12de:	80 91 57 01 	lds	r24, 0x0157
    12e2:	0e 94 a6 08 	call	0x114c
    12e6:	02 96       	adiw	r24, 0x02	; 2
    12e8:	aa 27       	eor	r26, r26
    12ea:	97 fd       	sbrc	r25, 7
    12ec:	a0 95       	com	r26
    12ee:	ba 2f       	mov	r27, r26
    12f0:	9c 01       	movw	r18, r24
    12f2:	ad 01       	movw	r20, r26
    12f4:	60 e0       	ldi	r22, 0x00	; 0
    12f6:	3d c0       	rjmp	.+122    	; 0x1372
    12f8:	10 92 57 01 	sts	0x0157, r1
    12fc:	49 e0       	ldi	r20, 0x09	; 9
    12fe:	60 e0       	ldi	r22, 0x00	; 0
    1300:	80 91 2b 01 	lds	r24, 0x012B
    1304:	90 91 2c 01 	lds	r25, 0x012C
    1308:	0e 94 bc 1b 	call	0x3778
    130c:	10 92 2c 01 	sts	0x012C, r1
    1310:	10 92 2b 01 	sts	0x012B, r1
    1314:	10 92 2d 01 	sts	0x012D, r1
    1318:	0e 94 c0 08 	call	0x1180
    131c:	88 23       	and	r24, r24
    131e:	09 f4       	brne	.+2      	; 0x1322
    1320:	4e c0       	rjmp	.+156    	; 0x13be
    1322:	ee 24       	eor	r14, r14
    1324:	ff 24       	eor	r15, r15
    1326:	87 01       	movw	r16, r14
    1328:	20 e0       	ldi	r18, 0x00	; 0
    132a:	44 c0       	rjmp	.+136    	; 0x13b4
    132c:	95 30       	cpi	r25, 0x05	; 5
    132e:	50 f5       	brcc	.+84     	; 0x1384
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	80 93 2d 01 	sts	0x012D, r24
    1336:	f0 92 2c 01 	sts	0x012C, r15
    133a:	e0 92 2b 01 	sts	0x012B, r14
    133e:	89 2f       	mov	r24, r25
    1340:	0e 94 a6 08 	call	0x114c
    1344:	aa 27       	eor	r26, r26
    1346:	97 fd       	sbrc	r25, 7
    1348:	a0 95       	com	r26
    134a:	ba 2f       	mov	r27, r26
    134c:	9c 01       	movw	r18, r24
    134e:	ad 01       	movw	r20, r26
    1350:	6d 2d       	mov	r22, r13
    1352:	89 e0       	ldi	r24, 0x09	; 9
    1354:	0e 94 63 31 	call	0x62c6
    1358:	88 23       	and	r24, r24
    135a:	71 f0       	breq	.+28     	; 0x1378
    135c:	80 91 57 01 	lds	r24, 0x0157
    1360:	0e 94 a6 08 	call	0x114c
    1364:	aa 27       	eor	r26, r26
    1366:	97 fd       	sbrc	r25, 7
    1368:	a0 95       	com	r26
    136a:	ba 2f       	mov	r27, r26
    136c:	9c 01       	movw	r18, r24
    136e:	ad 01       	movw	r20, r26
    1370:	6d 2d       	mov	r22, r13
    1372:	89 e0       	ldi	r24, 0x09	; 9
    1374:	0e 94 2a 31 	call	0x6254
    1378:	80 91 57 01 	lds	r24, 0x0157
    137c:	8f 5f       	subi	r24, 0xFF	; 255
    137e:	80 93 57 01 	sts	0x0157, r24
    1382:	1d c0       	rjmp	.+58     	; 0x13be
    1384:	80 93 57 01 	sts	0x0157, r24
    1388:	49 e0       	ldi	r20, 0x09	; 9
    138a:	68 2f       	mov	r22, r24
    138c:	80 91 2b 01 	lds	r24, 0x012B
    1390:	90 91 2c 01 	lds	r25, 0x012C
    1394:	0e 94 bc 1b 	call	0x3778
    1398:	10 92 2c 01 	sts	0x012C, r1
    139c:	10 92 2b 01 	sts	0x012B, r1
    13a0:	d0 92 2d 01 	sts	0x012D, r13
    13a4:	0e 94 c0 08 	call	0x1180
    13a8:	88 23       	and	r24, r24
    13aa:	49 f0       	breq	.+18     	; 0x13be
    13ac:	ee 24       	eor	r14, r14
    13ae:	ff 24       	eor	r15, r15
    13b0:	87 01       	movw	r16, r14
    13b2:	2d 2d       	mov	r18, r13
    13b4:	40 e2       	ldi	r20, 0x20	; 32
    13b6:	69 e0       	ldi	r22, 0x09	; 9
    13b8:	86 2f       	mov	r24, r22
    13ba:	0e 94 50 18 	call	0x30a0
    13be:	a2 96       	adiw	r28, 0x22	; 34
    13c0:	0f b6       	in	r0, 0x3f	; 63
    13c2:	f8 94       	cli
    13c4:	de bf       	out	0x3e, r29	; 62
    13c6:	0f be       	out	0x3f, r0	; 63
    13c8:	cd bf       	out	0x3d, r28	; 61
    13ca:	df 91       	pop	r29
    13cc:	cf 91       	pop	r28
    13ce:	1f 91       	pop	r17
    13d0:	0f 91       	pop	r16
    13d2:	ff 90       	pop	r15
    13d4:	ef 90       	pop	r14
    13d6:	df 90       	pop	r13
    13d8:	08 95       	ret

000013da <vmac_handler>:
    13da:	cf 93       	push	r28
    13dc:	fb 01       	movw	r30, r22
    13de:	86 81       	ldd	r24, Z+6	; 0x06
    13e0:	99 27       	eor	r25, r25
    13e2:	80 32       	cpi	r24, 0x20	; 32
    13e4:	91 05       	cpc	r25, r1
    13e6:	99 f0       	breq	.+38     	; 0x140e
    13e8:	81 32       	cpi	r24, 0x21	; 33
    13ea:	91 05       	cpc	r25, r1
    13ec:	1c f4       	brge	.+6      	; 0x13f4
    13ee:	02 97       	sbiw	r24, 0x02	; 2
    13f0:	21 f0       	breq	.+8      	; 0x13fa
    13f2:	48 c0       	rjmp	.+144    	; 0x1484
    13f4:	81 97       	sbiw	r24, 0x21	; 33
    13f6:	19 f1       	breq	.+70     	; 0x143e
    13f8:	45 c0       	rjmp	.+138    	; 0x1484
    13fa:	cf b7       	in	r28, 0x3f	; 63
    13fc:	f8 94       	cli
    13fe:	80 91 2b 01 	lds	r24, 0x012B
    1402:	90 91 2c 01 	lds	r25, 0x012C
    1406:	0e 94 c8 08 	call	0x1190
    140a:	cf bf       	out	0x3f, r28	; 63
    140c:	3b c0       	rjmp	.+118    	; 0x1484
    140e:	cf b7       	in	r28, 0x3f	; 63
    1410:	f8 94       	cli
    1412:	80 91 2b 01 	lds	r24, 0x012B
    1416:	90 91 2c 01 	lds	r25, 0x012C
    141a:	89 2b       	or	r24, r25
    141c:	71 f4       	brne	.+28     	; 0x143a
    141e:	10 92 57 01 	sts	0x0157, r1
    1422:	86 e4       	ldi	r24, 0x46	; 70
    1424:	91 e0       	ldi	r25, 0x01	; 1
    1426:	0e 94 21 1a 	call	0x3442
    142a:	90 93 2c 01 	sts	0x012C, r25
    142e:	80 93 2b 01 	sts	0x012B, r24
    1432:	00 97       	sbiw	r24, 0x00	; 0
    1434:	11 f0       	breq	.+4      	; 0x143a
    1436:	0e 94 c8 08 	call	0x1190
    143a:	cf bf       	out	0x3f, r28	; 63
    143c:	23 c0       	rjmp	.+70     	; 0x1484
    143e:	cf b7       	in	r28, 0x3f	; 63
    1440:	f8 94       	cli
    1442:	60 e0       	ldi	r22, 0x00	; 0
    1444:	89 e0       	ldi	r24, 0x09	; 9
    1446:	0e 94 40 30 	call	0x6080
    144a:	10 92 2d 01 	sts	0x012D, r1
    144e:	10 92 57 01 	sts	0x0157, r1
    1452:	49 e0       	ldi	r20, 0x09	; 9
    1454:	61 e0       	ldi	r22, 0x01	; 1
    1456:	80 91 2b 01 	lds	r24, 0x012B
    145a:	90 91 2c 01 	lds	r25, 0x012C
    145e:	0e 94 bc 1b 	call	0x3778
    1462:	10 92 2c 01 	sts	0x012C, r1
    1466:	10 92 2b 01 	sts	0x012B, r1
    146a:	86 e4       	ldi	r24, 0x46	; 70
    146c:	91 e0       	ldi	r25, 0x01	; 1
    146e:	0e 94 21 1a 	call	0x3442
    1472:	90 93 2c 01 	sts	0x012C, r25
    1476:	80 93 2b 01 	sts	0x012B, r24
    147a:	00 97       	sbiw	r24, 0x00	; 0
    147c:	11 f0       	breq	.+4      	; 0x1482
    147e:	0e 94 c8 08 	call	0x1190
    1482:	cf bf       	out	0x3f, r28	; 63
    1484:	80 e0       	ldi	r24, 0x00	; 0
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	cf 91       	pop	r28
    148a:	08 95       	ret

0000148c <radio_msg_alloc>:
    148c:	cf 93       	push	r28
    148e:	bc 01       	movw	r22, r24
    1490:	cf b7       	in	r28, 0x3f	; 63
    1492:	f8 94       	cli
    1494:	80 91 2d 01 	lds	r24, 0x012D
    1498:	88 23       	and	r24, r24
    149a:	31 f0       	breq	.+12     	; 0x14a8
    149c:	86 e4       	ldi	r24, 0x46	; 70
    149e:	91 e0       	ldi	r25, 0x01	; 1
    14a0:	0e 94 cb 19 	call	0x3396
    14a4:	cf bf       	out	0x3f, r28	; 63
    14a6:	06 c0       	rjmp	.+12     	; 0x14b4
    14a8:	80 93 57 01 	sts	0x0157, r24
    14ac:	cb 01       	movw	r24, r22
    14ae:	0e 94 c8 08 	call	0x1190
    14b2:	cf bf       	out	0x3f, r28	; 63
    14b4:	cf 91       	pop	r28
    14b6:	08 95       	ret

000014b8 <_MacRecvAck>:
    14b8:	ef 92       	push	r14
    14ba:	ff 92       	push	r15
    14bc:	0f 93       	push	r16
    14be:	1f 93       	push	r17
    14c0:	18 2f       	mov	r17, r24
    14c2:	80 91 2d 01 	lds	r24, 0x012D
    14c6:	82 30       	cpi	r24, 0x02	; 2
    14c8:	69 f4       	brne	.+26     	; 0x14e4
    14ca:	0e 94 ce 07 	call	0xf9c
    14ce:	81 17       	cp	r24, r17
    14d0:	49 f4       	brne	.+18     	; 0x14e4
    14d2:	ee 24       	eor	r14, r14
    14d4:	ff 24       	eor	r15, r15
    14d6:	87 01       	movw	r16, r14
    14d8:	20 e0       	ldi	r18, 0x00	; 0
    14da:	41 e2       	ldi	r20, 0x21	; 33
    14dc:	69 e0       	ldi	r22, 0x09	; 9
    14de:	86 2f       	mov	r24, r22
    14e0:	0e 94 50 18 	call	0x30a0
    14e4:	1f 91       	pop	r17
    14e6:	0f 91       	pop	r16
    14e8:	ff 90       	pop	r15
    14ea:	ef 90       	pop	r14
    14ec:	08 95       	ret

000014ee <_MacRecvCallBack>:
    14ee:	0f 93       	push	r16
    14f0:	1f 93       	push	r17
    14f2:	cf 93       	push	r28
    14f4:	df 93       	push	r29
    14f6:	cd b7       	in	r28, 0x3d	; 61
    14f8:	de b7       	in	r29, 0x3e	; 62
    14fa:	a0 97       	sbiw	r28, 0x20	; 32
    14fc:	0f b6       	in	r0, 0x3f	; 63
    14fe:	f8 94       	cli
    1500:	de bf       	out	0x3e, r29	; 62
    1502:	0f be       	out	0x3f, r0	; 63
    1504:	cd bf       	out	0x3d, r28	; 61
    1506:	8e 01       	movw	r16, r28
    1508:	08 5e       	subi	r16, 0xE8	; 232
    150a:	1f 4f       	sbci	r17, 0xFF	; 255
    150c:	b8 01       	movw	r22, r16
    150e:	ce 01       	movw	r24, r28
    1510:	01 96       	adiw	r24, 0x01	; 1
    1512:	0e 94 64 08 	call	0x10c8
    1516:	0e 94 ea 04 	call	0x9d4
    151a:	c8 01       	movw	r24, r16
    151c:	0e 94 cd 06 	call	0xd9a
    1520:	88 23       	and	r24, r24
    1522:	19 f4       	brne	.+6      	; 0x152a
    1524:	0e 94 da 04 	call	0x9b4
    1528:	ae c0       	rjmp	.+348    	; 0x1686
    152a:	0e 94 da 04 	call	0x9b4
    152e:	be 01       	movw	r22, r28
    1530:	6f 5f       	subi	r22, 0xFF	; 255
    1532:	7f 4f       	sbci	r23, 0xFF	; 255
    1534:	c8 01       	movw	r24, r16
    1536:	0e 94 7e 08 	call	0x10fc
    153a:	8d 85       	ldd	r24, Y+13	; 0x0d
    153c:	9e 85       	ldd	r25, Y+14	; 0x0e
    153e:	0e 94 31 05 	call	0xa62
    1542:	20 91 04 01 	lds	r18, 0x0104
    1546:	30 91 05 01 	lds	r19, 0x0105
    154a:	82 17       	cp	r24, r18
    154c:	93 07       	cpc	r25, r19
    154e:	39 f0       	breq	.+14     	; 0x155e
    1550:	8d 85       	ldd	r24, Y+13	; 0x0d
    1552:	9e 85       	ldd	r25, Y+14	; 0x0e
    1554:	0e 94 31 05 	call	0xa62
    1558:	8f 5f       	subi	r24, 0xFF	; 255
    155a:	9f 4f       	sbci	r25, 0xFF	; 255
    155c:	29 f4       	brne	.+10     	; 0x1568
    155e:	0e 94 8b 1b 	call	0x3716
    1562:	8c 01       	movw	r16, r24
    1564:	00 97       	sbiw	r24, 0x00	; 0
    1566:	d9 f4       	brne	.+54     	; 0x159e
 * @return void
 */
static inline void ker_free(void* ptr)
{
  sos_blk_mem_free(ptr, false);
    1568:	60 e0       	ldi	r22, 0x00	; 0
    156a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    156c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    156e:	0e 94 98 11 	call	0x2330
    1572:	89 c0       	rjmp	.+274    	; 0x1686
    1574:	f8 01       	movw	r30, r16
    1576:	82 85       	ldd	r24, Z+10	; 0x0a
    1578:	93 85       	ldd	r25, Z+11	; 0x0b
    157a:	84 60       	ori	r24, 0x04	; 4
    157c:	82 87       	std	Z+10, r24	; 0x0a
    157e:	93 87       	std	Z+11, r25	; 0x0b
    1580:	c8 01       	movw	r24, r16
    1582:	0e 94 a3 1b 	call	0x3746
    1586:	7f c0       	rjmp	.+254    	; 0x1686
    1588:	f8 01       	movw	r30, r16
    158a:	84 81       	ldd	r24, Z+4	; 0x04
    158c:	95 81       	ldd	r25, Z+5	; 0x05
    158e:	8d 93       	st	X+, r24
    1590:	9c 93       	st	X, r25
    1592:	42 5a       	subi	r20, 0xA2	; 162
    1594:	5e 4f       	sbci	r21, 0xFE	; 254
    1596:	89 85       	ldd	r24, Y+9	; 0x09
    1598:	fa 01       	movw	r30, r20
    159a:	80 83       	st	Z, r24
    159c:	6b c0       	rjmp	.+214    	; 0x1674
    159e:	bc 01       	movw	r22, r24
    15a0:	ce 01       	movw	r24, r28
    15a2:	01 96       	adiw	r24, 0x01	; 1
    15a4:	0e 94 2e 08 	call	0x105c
    15a8:	f8 01       	movw	r30, r16
    15aa:	86 81       	ldd	r24, Z+6	; 0x06
    15ac:	80 31       	cpi	r24, 0x10	; 16
    15ae:	61 f4       	brne	.+24     	; 0x15c8
    15b0:	0e 94 12 55 	call	0xaa24
    15b4:	dc 01       	movw	r26, r24
    15b6:	cb 01       	movw	r24, r22
    15b8:	f8 01       	movw	r30, r16
    15ba:	20 85       	ldd	r18, Z+8	; 0x08
    15bc:	31 85       	ldd	r19, Z+9	; 0x09
    15be:	f9 01       	movw	r30, r18
    15c0:	84 83       	std	Z+4, r24	; 0x04
    15c2:	95 83       	std	Z+5, r25	; 0x05
    15c4:	a6 83       	std	Z+6, r26	; 0x06
    15c6:	b7 83       	std	Z+7, r27	; 0x07
    15c8:	0e 94 12 55 	call	0xaa24
    15cc:	dc 01       	movw	r26, r24
    15ce:	cb 01       	movw	r24, r22
    15d0:	ac 01       	movw	r20, r24
    15d2:	bd 01       	movw	r22, r26
    15d4:	c8 01       	movw	r24, r16
    15d6:	0e 94 23 37 	call	0x6e46
    15da:	f8 01       	movw	r30, r16
    15dc:	44 81       	ldd	r20, Z+4	; 0x04
    15de:	55 81       	ldd	r21, Z+5	; 0x05
    15e0:	ff ef       	ldi	r31, 0xFF	; 255
    15e2:	4f 3f       	cpi	r20, 0xFF	; 255
    15e4:	5f 07       	cpc	r21, r31
    15e6:	09 f4       	brne	.+2      	; 0x15ea
    15e8:	45 c0       	rjmp	.+138    	; 0x1674
    15ea:	20 e0       	ldi	r18, 0x00	; 0
    15ec:	32 2f       	mov	r19, r18
    15ee:	ee e5       	ldi	r30, 0x5E	; 94
    15f0:	f1 e0       	ldi	r31, 0x01	; 1
    15f2:	a8 e5       	ldi	r26, 0x58	; 88
    15f4:	b1 e0       	ldi	r27, 0x01	; 1
    15f6:	8d 91       	ld	r24, X+
    15f8:	9d 91       	ld	r25, X+
    15fa:	48 17       	cp	r20, r24
    15fc:	59 07       	cpc	r21, r25
    15fe:	39 f4       	brne	.+14     	; 0x160e
    1600:	99 85       	ldd	r25, Y+9	; 0x09
    1602:	80 81       	ld	r24, Z
    1604:	98 17       	cp	r25, r24
    1606:	09 f4       	brne	.+2      	; 0x160a
    1608:	b5 cf       	rjmp	.-150    	; 0x1574
    160a:	90 83       	st	Z, r25
    160c:	33 c0       	rjmp	.+102    	; 0x1674
    160e:	2f 5f       	subi	r18, 0xFF	; 255
    1610:	31 96       	adiw	r30, 0x01	; 1
    1612:	23 30       	cpi	r18, 0x03	; 3
    1614:	80 f3       	brcs	.-32     	; 0x15f6
    1616:	23 2f       	mov	r18, r19
    1618:	40 e0       	ldi	r20, 0x00	; 0
    161a:	50 e0       	ldi	r21, 0x00	; 0
    161c:	da 01       	movw	r26, r20
    161e:	a4 0f       	add	r26, r20
    1620:	b5 1f       	adc	r27, r21
    1622:	a8 5a       	subi	r26, 0xA8	; 168
    1624:	be 4f       	sbci	r27, 0xFE	; 254
    1626:	8d 91       	ld	r24, X+
    1628:	9c 91       	ld	r25, X
    162a:	11 97       	sbiw	r26, 0x01	; 1
    162c:	8f 5f       	subi	r24, 0xFF	; 255
    162e:	9f 4f       	sbci	r25, 0xFF	; 255
    1630:	09 f4       	brne	.+2      	; 0x1634
    1632:	aa cf       	rjmp	.-172    	; 0x1588
    1634:	2f 5f       	subi	r18, 0xFF	; 255
    1636:	4f 5f       	subi	r20, 0xFF	; 255
    1638:	5f 4f       	sbci	r21, 0xFF	; 255
    163a:	23 30       	cpi	r18, 0x03	; 3
    163c:	78 f3       	brcs	.-34     	; 0x161c
    163e:	80 91 61 01 	lds	r24, 0x0161
    1642:	28 2f       	mov	r18, r24
    1644:	33 27       	eor	r19, r19
    1646:	d9 01       	movw	r26, r18
    1648:	a2 0f       	add	r26, r18
    164a:	b3 1f       	adc	r27, r19
    164c:	a8 5a       	subi	r26, 0xA8	; 168
    164e:	be 4f       	sbci	r27, 0xFE	; 254
    1650:	f8 01       	movw	r30, r16
    1652:	84 81       	ldd	r24, Z+4	; 0x04
    1654:	95 81       	ldd	r25, Z+5	; 0x05
    1656:	8d 93       	st	X+, r24
    1658:	9c 93       	st	X, r25
    165a:	f9 01       	movw	r30, r18
    165c:	e2 5a       	subi	r30, 0xA2	; 162
    165e:	fe 4f       	sbci	r31, 0xFE	; 254
    1660:	89 85       	ldd	r24, Y+9	; 0x09
    1662:	80 83       	st	Z, r24
    1664:	c9 01       	movw	r24, r18
    1666:	01 96       	adiw	r24, 0x01	; 1
    1668:	63 e0       	ldi	r22, 0x03	; 3
    166a:	70 e0       	ldi	r23, 0x00	; 0
    166c:	0e 94 92 59 	call	0xb324
    1670:	80 93 61 01 	sts	0x0161, r24

static inline void handle_incoming_msg(Message *msg, uint16_t channel_flag)
{
  //   DEBUG("<NET STACK> Received message from network\n");
  msg->flag |= SOS_MSG_FROM_NETWORK | channel_flag;
    1674:	f8 01       	movw	r30, r16
    1676:	82 85       	ldd	r24, Z+10	; 0x0a
    1678:	93 85       	ldd	r25, Z+11	; 0x0b
    167a:	93 60       	ori	r25, 0x03	; 3
    167c:	82 87       	std	Z+10, r24	; 0x0a
    167e:	93 87       	std	Z+11, r25	; 0x0b
  msg->daddr = entohs(msg->daddr);
  msg->saddr = entohs(msg->saddr);
  sched_msg_alloc(msg);
    1680:	c8 01       	movw	r24, r16
    1682:	0e 94 ec 16 	call	0x2dd8
    1686:	a0 96       	adiw	r28, 0x20	; 32
    1688:	0f b6       	in	r0, 0x3f	; 63
    168a:	f8 94       	cli
    168c:	de bf       	out	0x3e, r29	; 62
    168e:	0f be       	out	0x3f, r0	; 63
    1690:	cd bf       	out	0x3d, r28	; 61
    1692:	df 91       	pop	r29
    1694:	cf 91       	pop	r28
    1696:	1f 91       	pop	r17
    1698:	0f 91       	pop	r16
    169a:	08 95       	ret

0000169c <radio_set_timestamp>:
    169c:	80 e0       	ldi	r24, 0x00	; 0
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	08 95       	ret

000016a2 <mac_init>:

/*************************************************************************
 * Initiate the radio and mac                                            *
 *************************************************************************/
void mac_init()
{
    16a2:	1f 93       	push	r17
    uint8_t i;
	Radio_Init();
    16a4:	0e 94 48 05 	call	0xa90
	Radio_Set_Channel(RADIO_CHANNEL);
    16a8:	2f e6       	ldi	r18, 0x6F	; 111
    16aa:	31 e0       	ldi	r19, 0x01	; 1
    16ac:	40 e0       	ldi	r20, 0x00	; 0
    16ae:	69 e0       	ldi	r22, 0x09	; 9
    16b0:	88 e1       	ldi	r24, 0x18	; 24
    16b2:	0e 94 59 04 	call	0x8b2
    16b6:	80 91 26 01 	lds	r24, 0x0126
    16ba:	86 ff       	sbrs	r24, 6
    16bc:	03 c0       	rjmp	.+6      	; 0x16c4
    16be:	83 e0       	ldi	r24, 0x03	; 3
    16c0:	0e 94 b8 04 	call	0x970
	//Radio_Set_Channel(13);

#ifdef SOS_USE_PREEMPTION
	ker_register_module(sos_get_header_address(mod_header));
#else
	sched_register_kernel_module(&vmac_module, sos_get_header_address(mod_header), NULL);
    16c4:	8c e6       	ldi	r24, 0x6C	; 108
    16c6:	91 e0       	ldi	r25, 0x01	; 1
    16c8:	aa 27       	eor	r26, r26
    16ca:	97 fd       	sbrc	r25, 7
    16cc:	a0 95       	com	r26
    16ce:	ba 2f       	mov	r27, r26
    16d0:	b6 95       	lsr	r27
    16d2:	a7 95       	ror	r26
    16d4:	97 95       	ror	r25
    16d6:	87 95       	ror	r24
    16d8:	40 e0       	ldi	r20, 0x00	; 0
    16da:	50 e0       	ldi	r21, 0x00	; 0
    16dc:	bc 01       	movw	r22, r24
    16de:	8e e3       	ldi	r24, 0x3E	; 62
    16e0:	91 e0       	ldi	r25, 0x01	; 1
    16e2:	0e 94 4a 14 	call	0x2894
#endif

	// Timer needs to be done after reigsteration
	ker_permanent_timer_init(&wakeup_timer, RADIO_PID, WAKEUP_TIMER_TID, TIMER_ONE_SHOT);
    16e6:	21 e0       	ldi	r18, 0x01	; 1
    16e8:	40 e0       	ldi	r20, 0x00	; 0
    16ea:	69 e0       	ldi	r22, 0x09	; 9
    16ec:	8e e2       	ldi	r24, 0x2E	; 46
    16ee:	91 e0       	ldi	r25, 0x01	; 1
    16f0:	0e 94 bf 30 	call	0x617e

	mq_init(&vmac_pq);	//! Initialize sending queue
    16f4:	86 e4       	ldi	r24, 0x46	; 70
    16f6:	91 e0       	ldi	r25, 0x01	; 1
    16f8:	0e 94 b9 19 	call	0x3372
    16fc:	1f b7       	in	r17, 0x3f	; 63
    16fe:	f8 94       	cli
    1700:	0e 94 cb 36 	call	0x6d96
    1704:	6f ef       	ldi	r22, 0xFF	; 255
    1706:	70 e0       	ldi	r23, 0x00	; 0
    1708:	0e 94 7e 59 	call	0xb2fc
    170c:	8f 5f       	subi	r24, 0xFF	; 255
    170e:	80 93 56 01 	sts	0x0156, r24
    1712:	1f bf       	out	0x3f, r17	; 63
	resetSeq();		//set seq_count to random initial number
	retry_count = 0; 	//set retries 0
    1714:	10 92 57 01 	sts	0x0157, r1
    1718:	2f ef       	ldi	r18, 0xFF	; 255
    171a:	3f ef       	ldi	r19, 0xFF	; 255
    171c:	ae e5       	ldi	r26, 0x5E	; 94
    171e:	b1 e0       	ldi	r27, 0x01	; 1
    1720:	82 e0       	ldi	r24, 0x02	; 2
    1722:	e8 e5       	ldi	r30, 0x58	; 88
    1724:	f1 e0       	ldi	r31, 0x01	; 1
    for(i=0; i<NUM_DUP_CHECK; i++){
        dup_addr[i] = BCAST_ADDRESS;
    1726:	21 93       	st	Z+, r18
    1728:	31 93       	st	Z+, r19
        dup_seq[i] = 0;
    172a:	1d 92       	st	X+, r1
    172c:	81 50       	subi	r24, 0x01	; 1
    172e:	87 ff       	sbrs	r24, 7
    1730:	fa cf       	rjmp	.-12     	; 0x1726
    }
    oldest_dup = 0;
    1732:	10 92 61 01 	sts	0x0161, r1

	vmac_send_state = VMAC_SEND_STATE_IDLE;
    1736:	10 92 2d 01 	sts	0x012D, r1
	vmac_msg = NULL;
    173a:	10 92 2c 01 	sts	0x012C, r1
    173e:	10 92 2b 01 	sts	0x012B, r1
	//enable interrupt for receiving data
	Radio_SetPackRecvedCallBack(_MacRecvCallBack);
    1742:	87 e7       	ldi	r24, 0x77	; 119
    1744:	9a e0       	ldi	r25, 0x0A	; 10
    1746:	0e 94 c2 04 	call	0x984
	Radio_Enable_Interrupt();
    174a:	0e 94 da 04 	call	0x9b4
    174e:	1f 91       	pop	r17
    1750:	08 95       	ret

00001752 <restartInterval>:
	st.blocked = 1;
}

static void restartInterval( uint8_t new_tou )
{
    1752:	ef 92       	push	r14
    1754:	ff 92       	push	r15
    1756:	0f 93       	push	r16
    1758:	1f 93       	push	r17
    175a:	18 2f       	mov	r17, r24
	int32_t tou_interval = 0;
	int32_t rand_val = 0;
	ker_timer_stop( KER_DFT_LOADER_PID, TOU_TID  );	
    175c:	60 e0       	ldi	r22, 0x00	; 0
    175e:	81 e1       	ldi	r24, 0x11	; 17
    1760:	0e 94 40 30 	call	0x6080
	ker_timer_stop( KER_DFT_LOADER_PID, TRAN_TID );	
    1764:	61 e0       	ldi	r22, 0x01	; 1
    1766:	81 e1       	ldi	r24, 0x11	; 17
    1768:	0e 94 40 30 	call	0x6080
	ker_timer_stop( KER_DFT_LOADER_PID, DATA_TID );	
    176c:	62 e0       	ldi	r22, 0x02	; 2
    176e:	81 e1       	ldi	r24, 0x11	; 17
    1770:	0e 94 40 30 	call	0x6080

	if ( new_tou < TOU_MAX ) {
    1774:	1a 30       	cpi	r17, 0x0A	; 10
    1776:	18 f4       	brcc	.+6      	; 0x177e
		st.tou = new_tou;
    1778:	10 93 92 01 	sts	0x0192, r17
    177c:	03 c0       	rjmp	.+6      	; 0x1784
	} else {
		st.tou = TOU_MAX;
    177e:	8a e0       	ldi	r24, 0x0A	; 10
    1780:	80 93 92 01 	sts	0x0192, r24
	}
	st.tran_count = 0;
    1784:	10 92 94 01 	sts	0x0194, r1
	st.data_count = 0;
    1788:	10 92 95 01 	sts	0x0195, r1

	tou_interval = TOU_INTERVAL * (1L << st.tou);
    178c:	e1 2c       	mov	r14, r1
    178e:	44 e0       	ldi	r20, 0x04	; 4
    1790:	f4 2e       	mov	r15, r20
    1792:	01 2d       	mov	r16, r1
    1794:	11 2d       	mov	r17, r1
    1796:	00 90 92 01 	lds	r0, 0x0192
    179a:	04 c0       	rjmp	.+8      	; 0x17a4
    179c:	ee 0c       	add	r14, r14
    179e:	ff 1c       	adc	r15, r15
    17a0:	00 1f       	adc	r16, r16
    17a2:	11 1f       	adc	r17, r17
    17a4:	0a 94       	dec	r0
    17a6:	d2 f7       	brpl	.-12     	; 0x179c
	
	ker_timer_start( KER_DFT_LOADER_PID, TOU_TID, tou_interval );
    17a8:	a8 01       	movw	r20, r16
    17aa:	97 01       	movw	r18, r14
    17ac:	60 91 94 01 	lds	r22, 0x0194
    17b0:	81 e1       	ldi	r24, 0x11	; 17
    17b2:	0e 94 2a 31 	call	0x6254
	if ( st.net_state & SEND_DATA ) {
    17b6:	80 91 93 01 	lds	r24, 0x0193
    17ba:	80 ff       	sbrs	r24, 0
    17bc:	21 c0       	rjmp	.+66     	; 0x1800
		//! pick random timeout between tou_interval / 2 and tou_interval
		rand_val = ker_rand() % (tou_interval / 2);
    17be:	0e 94 cb 36 	call	0x6d96
    17c2:	9c 01       	movw	r18, r24
    17c4:	44 27       	eor	r20, r20
    17c6:	55 27       	eor	r21, r21
    17c8:	ca 01       	movw	r24, r20
    17ca:	b9 01       	movw	r22, r18
    17cc:	a8 01       	movw	r20, r16
    17ce:	97 01       	movw	r18, r14
    17d0:	17 ff       	sbrs	r17, 7
    17d2:	04 c0       	rjmp	.+8      	; 0x17dc
    17d4:	2f 5f       	subi	r18, 0xFF	; 255
    17d6:	3f 4f       	sbci	r19, 0xFF	; 255
    17d8:	4f 4f       	sbci	r20, 0xFF	; 255
    17da:	5f 4f       	sbci	r21, 0xFF	; 255
    17dc:	79 01       	movw	r14, r18
    17de:	8a 01       	movw	r16, r20
    17e0:	15 95       	asr	r17
    17e2:	07 95       	ror	r16
    17e4:	f7 94       	ror	r15
    17e6:	e7 94       	ror	r14
    17e8:	a8 01       	movw	r20, r16
    17ea:	97 01       	movw	r18, r14
    17ec:	0e 94 a5 59 	call	0xb34a
    17f0:	9b 01       	movw	r18, r22
    17f2:	ac 01       	movw	r20, r24
		rand_val += (tou_interval / 2);
    17f4:	2e 0d       	add	r18, r14
    17f6:	3f 1d       	adc	r19, r15
    17f8:	40 1f       	adc	r20, r16
    17fa:	51 1f       	adc	r21, r17
		ker_timer_start( KER_DFT_LOADER_PID, DATA_TID, rand_val );
    17fc:	62 e0       	ldi	r22, 0x02	; 2
    17fe:	20 c0       	rjmp	.+64     	; 0x1840
	} else {
		//! pick random timeout between tou_interval / 2 and tou_interval
		rand_val = ker_rand() % (tou_interval / 2);
    1800:	0e 94 cb 36 	call	0x6d96
    1804:	9c 01       	movw	r18, r24
    1806:	44 27       	eor	r20, r20
    1808:	55 27       	eor	r21, r21
    180a:	ca 01       	movw	r24, r20
    180c:	b9 01       	movw	r22, r18
    180e:	a8 01       	movw	r20, r16
    1810:	97 01       	movw	r18, r14
    1812:	17 ff       	sbrs	r17, 7
    1814:	04 c0       	rjmp	.+8      	; 0x181e
    1816:	2f 5f       	subi	r18, 0xFF	; 255
    1818:	3f 4f       	sbci	r19, 0xFF	; 255
    181a:	4f 4f       	sbci	r20, 0xFF	; 255
    181c:	5f 4f       	sbci	r21, 0xFF	; 255
    181e:	79 01       	movw	r14, r18
    1820:	8a 01       	movw	r16, r20
    1822:	15 95       	asr	r17
    1824:	07 95       	ror	r16
    1826:	f7 94       	ror	r15
    1828:	e7 94       	ror	r14
    182a:	a8 01       	movw	r20, r16
    182c:	97 01       	movw	r18, r14
    182e:	0e 94 a5 59 	call	0xb34a
    1832:	9b 01       	movw	r18, r22
    1834:	ac 01       	movw	r20, r24
		rand_val += (tou_interval / 2);
    1836:	2e 0d       	add	r18, r14
    1838:	3f 1d       	adc	r19, r15
    183a:	40 1f       	adc	r20, r16
    183c:	51 1f       	adc	r21, r17
		ker_timer_start( KER_DFT_LOADER_PID, TRAN_TID, rand_val );
    183e:	61 e0       	ldi	r22, 0x01	; 1
    1840:	81 e1       	ldi	r24, 0x11	; 17
    1842:	0e 94 2a 31 	call	0x6254
    1846:	1f 91       	pop	r17
    1848:	0f 91       	pop	r16
    184a:	ff 90       	pop	r15
    184c:	ef 90       	pop	r14
    184e:	08 95       	ret

00001850 <process_version_data>:
	}
}	

static int8_t handle_timeout( Message *msg )
{
	MsgParam* params = ( MsgParam * )( msg->data );

	switch( params->byte ) {
		case TOU_TID:
		{
			if( st.net_state != MAINTAIN ) {
				restartInterval( 0 );
			} else {
				restartInterval( st.tou + 1 );
			}
			break;
		}
		case TRAN_TID:
		{
			/*
			 * Transmit Version number
			 */
			if( st.blocked == 0 ) {
			version_t *v;
			v = ker_malloc( sizeof(version_t), KER_DFT_LOADER_PID );
			if( v == NULL ) return -ENOMEM;
			*v = version_hton(st.version_data->version);
			
			post_link(KER_DFT_LOADER_PID, KER_DFT_LOADER_PID, 
					MSG_VERSION_ADV, sizeof(version_t), v, 
					SOS_MSG_RELEASE | SOS_MSG_ALL_LINK_IO, 
					BCAST_ADDRESS);
			}
			break;
		}
		case DATA_TID:
		{
			msg_version_data_t *d;
			
			d = (msg_version_data_t *) ker_malloc(
				sizeof( msg_version_data_t ), 
				KER_DFT_LOADER_PID);

			if( d != NULL ) {
				memcpy(d, st.version_data, sizeof( msg_version_data_t ));

				d->version = version_hton( st.version_data->version );
				
				post_link(KER_DFT_LOADER_PID, KER_DFT_LOADER_PID, 
						MSG_VERSION_DATA, 
						sizeof( msg_version_data_t ),
						d, 
						SOS_MSG_RELEASE | SOS_MSG_ALL_LINK_IO, 
						BCAST_ADDRESS);
			}
			st.net_state &= ~SEND_DATA;
			break;
		}
	}
	return SOS_OK;
}

static int8_t handle_version_adv( Message *msg )
{
	msg_version_adv_t *pkt = (msg_version_adv_t *) msg->data;

	if( pkt->version > st.version_data->version ) {
		// Someone has new version, tell them we don't have quickly...
		restartInterval( 0 );
	} else if( pkt->version < st.version_data->version ) {
		if( ( st.net_state & SEND_DATA ) == 0 ) {
			st.net_state |= SEND_DATA;
			restartInterval( 0 );
		} 
	} else {
		st.tran_count += 1;
		if( st.tran_count >= OVERHEARD_K ) {
			ker_timer_stop( KER_DFT_LOADER_PID, TRAN_TID ); 
		}
	}
	return SOS_OK;
}

static int8_t handle_version_data( Message *msg ) 
{
	msg_version_data_t *pkt = (msg_version_data_t *) msg->data;

	if( st.net_state & SEND_DATA ) {
		/*
		 * We have data to send
		 */
		if( pkt->version == st.version_data->version) {
			st.data_count ++;
			if( st.data_count >= OVERHEARD_K ) {
				st.net_state &= ~SEND_DATA;
				ker_timer_stop( KER_DFT_LOADER_PID, DATA_TID );
			}
			return SOS_OK;
		}
	}
	if( pkt->version > st.version_data->version ) {
		restartInterval( 0 );
		ker_free(st.version_data);
		st.version_data = (msg_version_data_t*) ker_msg_take_data(KER_DFT_LOADER_PID, msg);
		process_version_data( st.version_data, msg->saddr );
	}
	return SOS_OK;
}

static int8_t request_new_module(sos_shm_t key, loader_cam_t *cam, uint8_t size, uint16_t saddr, uint8_t type)
{
  cam->code_size = size; 
	cam->fetcher.fetchtype = type;
	cam->fetcher.cm = ker_codemem_alloc(
			size * LOADER_SIZE_MULTIPLIER, 
			CODEMEM_TYPE_EXECUTABLE);
	DEBUG_PID( KER_DFT_LOADER_PID, "request new module with size = %d\n", 
			size * LOADER_SIZE_MULTIPLIER);
	if(cam->fetcher.cm == CODEMEM_INVALID) {
		return -ENOMEM;
	}
	if( fetcher_request( KER_DFT_LOADER_PID, key, (uint16_t)size * LOADER_SIZE_MULTIPLIER, saddr ) 
			!= SOS_OK ) {
		ker_codemem_free( cam->fetcher.cm );
		return -ENOMEM;
	}
	block_protocol();
	return SOS_OK;

}

static void process_version_data( msg_version_data_t *v, uint16_t saddr ) 
{
    1850:	8f 92       	push	r8
    1852:	9f 92       	push	r9
    1854:	af 92       	push	r10
    1856:	bf 92       	push	r11
    1858:	cf 92       	push	r12
    185a:	df 92       	push	r13
    185c:	ef 92       	push	r14
    185e:	ff 92       	push	r15
    1860:	0f 93       	push	r16
    1862:	1f 93       	push	r17
    1864:	cf 93       	push	r28
    1866:	df 93       	push	r29
    1868:	4b 01       	movw	r8, r22
	uint8_t i;
	for( i = 0; i < NUM_LOADER_PARAMS_ENTRIES + NUM_LOADER_MODULE_ENTRIES; i++ ) {
    186a:	aa 24       	eor	r10, r10
    186c:	6c 01       	movw	r12, r24
 * Create shared memory name based on task ID and task defined ID 
 */
static inline sos_shm_t sys_shm_name( sos_pid_t pid, uint8_t id ) 
{
  return (((sos_shm_t) pid) << 8) | id;
    186e:	0a 2d       	mov	r16, r10
    1870:	11 27       	eor	r17, r17
    1872:	11 61       	ori	r17, 0x11	; 17
		sos_shm_t key = sys_shm_name( KER_DFT_LOADER_PID, i);
		loader_cam_t *cam;
		uint8_t type;
		uint8_t size;
		uint8_t ver;

		if( i < NUM_LOADER_PARAMS_ENTRIES) {
    1874:	27 e0       	ldi	r18, 0x07	; 7
    1876:	2a 15       	cp	r18, r10
    1878:	30 f0       	brcs	.+12     	; 0x1886
			size = (v->pam_size[i]);
    187a:	f6 01       	movw	r30, r12
    187c:	f2 84       	ldd	r15, Z+10	; 0x0a
			ver = (v->pam_ver[i]);
    187e:	b2 80       	ldd	r11, Z+2	; 0x02
			type = FETCHTYPE_DATA;
    1880:	61 e0       	ldi	r22, 0x01	; 1
    1882:	e6 2e       	mov	r14, r22
    1884:	04 c0       	rjmp	.+8      	; 0x188e
		} else {
			size = (v->mod_size[i - NUM_LOADER_PARAMS_ENTRIES]);
    1886:	f6 01       	movw	r30, r12
    1888:	f2 88       	ldd	r15, Z+18	; 0x12
			ver = (v->mod_ver[i - NUM_LOADER_PARAMS_ENTRIES]);
    188a:	b2 84       	ldd	r11, Z+10	; 0x0a
			type = FETCHTYPE_MODULE;
    188c:	ee 24       	eor	r14, r14
		}

		cam = ker_shm_get( KER_DFT_LOADER_PID,  key );
    188e:	b8 01       	movw	r22, r16
    1890:	81 e1       	ldi	r24, 0x11	; 17
    1892:	0e 94 c9 3b 	call	0x7792
    1896:	ec 01       	movw	r28, r24

		if( cam == NULL && size == 0 ) {
    1898:	89 2b       	or	r24, r25
    189a:	c9 f4       	brne	.+50     	; 0x18ce
    189c:	ff 20       	and	r15, r15
    189e:	09 f4       	brne	.+2      	; 0x18a2
    18a0:	5c c0       	rjmp	.+184    	; 0x195a
 * Will return a NULL pointer if the call to sys_malloc fails.
 */
static inline void *ker_malloc(uint16_t size, sos_pid_t id)
{
  return sos_blk_mem_alloc(size, id, false);
    18a2:	40 e0       	ldi	r20, 0x00	; 0
    18a4:	61 e1       	ldi	r22, 0x11	; 17
    18a6:	86 e0       	ldi	r24, 0x06	; 6
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	0e 94 14 11 	call	0x2228
    18ae:	ec 01       	movw	r28, r24
			// We cannot find entry and the size is zero
			// skip this slot
			continue;
		}


		if( cam == NULL ) {
			// we need to add a new module
			cam = (loader_cam_t*) ker_malloc(sizeof(loader_cam_t), KER_DFT_LOADER_PID);
			if( cam == NULL) {
    18b0:	00 97       	sbiw	r24, 0x00	; 0
    18b2:	09 f4       	brne	.+2      	; 0x18b6
    18b4:	5a c0       	rjmp	.+180    	; 0x196a
				return;
			}
			if( ker_shm_open( KER_DFT_LOADER_PID, key, cam ) != SOS_OK ) {
    18b6:	ac 01       	movw	r20, r24
    18b8:	b8 01       	movw	r22, r16
    18ba:	81 e1       	ldi	r24, 0x11	; 17
    18bc:	0e 94 2d 3b 	call	0x765a
    18c0:	88 23       	and	r24, r24
    18c2:	11 f1       	breq	.+68     	; 0x1908
 * @return void
 */
static inline void ker_free(void* ptr)
{
  sos_blk_mem_free(ptr, false);
    18c4:	60 e0       	ldi	r22, 0x00	; 0
    18c6:	ce 01       	movw	r24, r28
    18c8:	0e 94 98 11 	call	0x2330
				ker_free( cam );
				return;
    18cc:	4e c0       	rjmp	.+156    	; 0x196a
			}
		} else {
			// we need to replace a module
			if( cam->version == ver ) {
    18ce:	8c 81       	ldd	r24, Y+4	; 0x04
    18d0:	8b 15       	cp	r24, r11
    18d2:	09 f4       	brne	.+2      	; 0x18d6
    18d4:	42 c0       	rjmp	.+132    	; 0x195a
				continue;
			}
			//! new version of module found...
			if( cam->fetcher.status != FETCHING_DONE ) {
    18d6:	8b 81       	ldd	r24, Y+3	; 0x03
    18d8:	81 30       	cpi	r24, 0x01	; 1
    18da:	51 f0       	breq	.+20     	; 0x18f0
				if( cam->fetcher.status == FETCHING_STARTED ) {
    18dc:	88 23       	and	r24, r24
    18de:	21 f4       	brne	.+8      	; 0x18e8
					st.blocked = 0;
    18e0:	80 93 98 01 	sts	0x0198, r24
					restartInterval( 0 );
    18e4:	0e 94 a9 0b 	call	0x1752
				}
				fetcher_cancel( KER_DFT_LOADER_PID, key );	
    18e8:	b8 01       	movw	r22, r16
    18ea:	81 e1       	ldi	r24, 0x11	; 17
    18ec:	0e 94 08 24 	call	0x4810
				ker_codemem_free(cam->fetcher.cm);
			} else /* if( cam->fetcher.status == FETCHING_DONE ) */ {
				ker_codemem_free(cam->fetcher.cm);
    18f0:	88 81       	ld	r24, Y
    18f2:	99 81       	ldd	r25, Y+1	; 0x01
    18f4:	0e 94 e6 21 	call	0x43cc
			}
			if( size == 0 ) {
    18f8:	ff 20       	and	r15, r15
    18fa:	31 f4       	brne	.+12     	; 0x1908
				//! an rmmod case
				ker_shm_close( KER_DFT_LOADER_PID,  key );
    18fc:	b8 01       	movw	r22, r16
    18fe:	81 e1       	ldi	r24, 0x11	; 17
    1900:	0e 94 82 3b 	call	0x7704
 * @return void
 */
static inline void ker_free(void* ptr)
{
  sos_blk_mem_free(ptr, false);
    1904:	6f 2d       	mov	r22, r15
    1906:	26 c0       	rjmp	.+76     	; 0x1954
    1908:	fd 82       	std	Y+5, r15	; 0x05
    190a:	ea 82       	std	Y+2, r14	; 0x02
    190c:	8f 2d       	mov	r24, r15
    190e:	99 27       	eor	r25, r25
    1910:	f8 2e       	mov	r15, r24
    1912:	ee 24       	eor	r14, r14
    1914:	62 e0       	ldi	r22, 0x02	; 2
    1916:	c7 01       	movw	r24, r14
    1918:	0e 94 13 1f 	call	0x3e26
    191c:	88 83       	st	Y, r24
    191e:	99 83       	std	Y+1, r25	; 0x01
    1920:	8f 5f       	subi	r24, 0xFF	; 255
    1922:	9f 4f       	sbci	r25, 0xFF	; 255
    1924:	91 f0       	breq	.+36     	; 0x194a
    1926:	94 01       	movw	r18, r8
    1928:	a7 01       	movw	r20, r14
    192a:	b8 01       	movw	r22, r16
    192c:	81 e1       	ldi	r24, 0x11	; 17
    192e:	0e 94 d5 22 	call	0x45aa
    1932:	88 23       	and	r24, r24
    1934:	29 f0       	breq	.+10     	; 0x1940
    1936:	88 81       	ld	r24, Y
    1938:	99 81       	ldd	r25, Y+1	; 0x01
    193a:	0e 94 e6 21 	call	0x43cc
    193e:	05 c0       	rjmp	.+10     	; 0x194a
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	80 93 98 01 	sts	0x0198, r24
				ker_free( cam );
				continue;
			} 
			//! an insmod case with cam
		} 
		if( request_new_module( key, cam, size, saddr, type) != SOS_OK ) {
			ker_shm_close( KER_DFT_LOADER_PID, key );
			ker_free( cam );
		} else {
			// another insmod case
			cam->version = ver;
    1946:	bc 82       	std	Y+4, r11	; 0x04
			// only do one fetching
			return;
    1948:	10 c0       	rjmp	.+32     	; 0x196a
    194a:	b8 01       	movw	r22, r16
    194c:	81 e1       	ldi	r24, 0x11	; 17
    194e:	0e 94 82 3b 	call	0x7704
 * @return void
 */
static inline void ker_free(void* ptr)
{
  sos_blk_mem_free(ptr, false);
    1952:	60 e0       	ldi	r22, 0x00	; 0
    1954:	ce 01       	movw	r24, r28
    1956:	0e 94 98 11 	call	0x2330
    195a:	a3 94       	inc	r10
    195c:	08 94       	sec
    195e:	c1 1c       	adc	r12, r1
    1960:	d1 1c       	adc	r13, r1
    1962:	2f e0       	ldi	r18, 0x0F	; 15
    1964:	2a 15       	cp	r18, r10
    1966:	08 f0       	brcs	.+2      	; 0x196a
    1968:	82 cf       	rjmp	.-252    	; 0x186e
    196a:	df 91       	pop	r29
    196c:	cf 91       	pop	r28
    196e:	1f 91       	pop	r17
    1970:	0f 91       	pop	r16
    1972:	ff 90       	pop	r15
    1974:	ef 90       	pop	r14
    1976:	df 90       	pop	r13
    1978:	cf 90       	pop	r12
    197a:	bf 90       	pop	r11
    197c:	af 90       	pop	r10
    197e:	9f 90       	pop	r9
    1980:	8f 90       	pop	r8
    1982:	08 95       	ret

00001984 <loader_handler>:
		}
	}
}

static int8_t handle_fetcher_done( Message *msg ) 
{
	fetcher_state_t *f = (fetcher_state_t*) msg->data;
	if( is_fetcher_succeed( f ) == true ) {
		//mod_header_ptr p;
		loader_cam_t *cam;
		fetcher_commit(f, true);

		st.blocked = 0;
		restartInterval( 0 );

		cam = ker_shm_get( KER_DFT_LOADER_PID,  f->map.key );
		if( cam->fetcher.fetchtype == FETCHTYPE_DATA) {
			uint8_t buf[2];
			ker_codemem_read( cam->fetcher.cm, KER_DFT_LOADER_PID, buf, 2, 0);
			post_short(buf[0], KER_DFT_LOADER_PID, MSG_LOADER_DATA_AVAILABLE,
					buf[1], cam->fetcher.cm, 0);
			DEBUG_PID(KER_DFT_LOADER_PID, "Data Ready\n" );
#ifdef LOADER_NET_EXPERIMENT
			ker_led(LED_GREEN_TOGGLE);
#endif
		} else {
		  uint8_t mcu_type;
#ifndef SOS_SIM
		  uint8_t plat_type;
#endif
		  mod_header_ptr p;
								
		  // Link and load the module here
		  melf_load_module(cam->fetcher.cm);
		  // Get the address of the module header
		  p = ker_codemem_get_header_address( cam->fetcher.cm ); 

		  // get processor type and platform type
		  mcu_type = sos_read_header_byte(p, 
					offsetof( mod_header_t, processor_type ));
#ifdef SOS_SIM
		  //if( (mcu_type == MCU_TYPE) )
		  if( p != 0 ) 
			// In simulation, we don't check for anything
#else
			plat_type = sos_read_header_byte(p, 
						offsetof( mod_header_t, platform_type ));

		  if( (mcu_type == MCU_TYPE) && 
			  ( plat_type == HW_TYPE || plat_type == PLATFORM_ANY) )
#endif
			{
			  /*
			   * If MCU is matched, this means we are using the same 
			   * instruction set.
			   * And if this module is for this *specific* platform or 
			   * simply for all platform with the same MCU
			   */
			  // mark module executable
			  ker_codemem_mark_executable( cam->fetcher.cm );
			  if (cam->version & 0x80) {
#ifdef SOS_SFI
				sfi_modtable_register(cam->fetcher.cm);
				if (SOS_OK == ker_verify_module(cam->fetcher.cm)){
				  sfi_modtable_flash(p);
				  ker_register_module(p);
				}
				else
				  sfi_exception(KER_VERIFY_FAIL_EXCEPTION);
#else
				ker_register_module(p);
#endif //SOS_SFI
			  }
			} else {
				DEBUG("invalid module for this node\n");
			}
		}
		process_version_data( st.version_data, st.recent_neighbor);
	} else {
	  DEBUG_PID( KER_DFT_LOADER_PID, "Fetch failed!, request %d\n", st.recent_neighbor);
	  f = (fetcher_state_t*) ker_msg_take_data(KER_DFT_LOADER_PID, msg);
	  fetcher_restart( f, st.recent_neighbor );
	}
	return SOS_OK;
}

static int8_t handle_loader_ls_on_node( Message *msg )
{
	msg_ls_reply_t *reply;
	uint8_t i;

	reply = (msg_ls_reply_t *) ker_malloc( sizeof( msg_ls_reply_t ),
			KER_DFT_LOADER_PID );
	if( reply == NULL ) return -ENOMEM;

	for( i = 0; i < NUM_LOADER_PARAMS_ENTRIES; i ++ ) {
		sos_shm_t key = sys_shm_name( KER_DFT_LOADER_PID, i );
		loader_cam_t *cam;
		uint8_t buf[2];

		cam = ker_shm_get( KER_DFT_LOADER_PID,  key );
		if( cam != NULL && cam->fetcher.status == FETCHING_DONE 
				&& (ker_codemem_read( cam->fetcher.cm, KER_DFT_LOADER_PID, 
						buf, 2, 0) == SOS_OK)) {
			DEBUG_PID( KER_DFT_LOADER_PID, "Data(%d) = %d %d\n", i, buf[0], buf[1]);
			reply->pam_dst_pid[ i ] = buf[0];
			reply->pam_dst_subpid[ i ] = buf[1];
		} else {
			DEBUG_PID( KER_DFT_LOADER_PID, "Data(%d) = NULL\n", i);
			/*
			if( cam != NULL && cam->fetcher.status == FETCHING_DONE) {
				DEBUG_PID( KER_DFT_LOADER_PID, "ker_codemem_read failed...\n");
			}
			*/
			reply->pam_dst_pid[ i ] = NULL_PID;
			reply->pam_dst_subpid[ i ] = 0;
		}
	}
	for( i = 0; i < NUM_LOADER_MODULE_ENTRIES; i ++ ) {
		sos_shm_t key = sys_shm_name( KER_DFT_LOADER_PID, 
				NUM_LOADER_PARAMS_ENTRIES + i );
		loader_cam_t *cam;

		cam = ker_shm_get( KER_DFT_LOADER_PID,  key );

		if( cam != NULL && cam->fetcher.status == FETCHING_DONE ) {
			mod_header_ptr p;
			sos_code_id_t cid;
			// Get the address of the module header
			p = ker_codemem_get_header_address( cam->fetcher.cm );
			cid = sos_read_header_word( p, offsetof(mod_header_t, code_id));
			// warning: already netowrk order...
			reply->code_id[ i ] = cid;
		} else {
			reply->code_id[ i ] = 0;
		}
	}
	post_auto( KER_DFT_LOADER_PID,
			KER_DFT_LOADER_PID,
			MSG_LOADER_LS_REPLY,
			sizeof( msg_ls_reply_t ),
			reply,
			SOS_MSG_RELEASE,
			msg->saddr);
	return SOS_OK;
}

static int8_t handle_init()
{
	ker_permanent_timer_init((&st.tou_timer), KER_DFT_LOADER_PID, 
			TOU_TID, TIMER_ONE_SHOT);		
	ker_permanent_timer_init((&st.tran_timer), KER_DFT_LOADER_PID, 
			TRAN_TID, TIMER_ONE_SHOT);		
	ker_permanent_timer_init((&st.data_timer), KER_DFT_LOADER_PID, 
			DATA_TID, TIMER_ONE_SHOT);		
	st.net_state = MAINTAIN;
	st.tran_count = 0;
	st.data_count = 0;
	st.blocked    = 0;
	st.recent_neighbor = 0;
	st.version_data = ker_malloc(sizeof(msg_version_data_t), KER_DFT_LOADER_PID);
	if(st.version_data == NULL) return -ENOMEM;

	memset((uint8_t *) st.version_data, 0, sizeof(msg_version_data_t));
	/*
     * Use default version to be 1 so that loader_pc can probe loaded data
	 */
	st.version_data->version = 1;

	restartInterval( 0 );
	return SOS_OK;
}

#ifdef LOADER_NET_EXPERIMENT
//static bool experiment_started = false;
#ifndef EXPERIMENT_SIZE
#define EXPERIMENT_SIZE 256
#endif
static void start_experiment(uint16_t size)
{
	sos_shm_t key;
	loader_cam_t *cam;
	codemem_t cm;
	uint8_t buf[2];

	buf[0] = 128;
	buf[1] = 1;
	DEBUG_PID(KER_DFT_LOADER_PID, "start experiment: size = %d\n", size);
	cm = ker_codemem_alloc( size, CODEMEM_TYPE_EXECUTABLE);
	ker_codemem_write(cm, KER_DFT_LOADER_PID, buf, 2, 0);
	cam = ker_malloc(sizeof(loader_cam_t), KER_DFT_LOADER_PID);

	st.version_data->pam_ver[0]++;
	st.version_data->pam_size[0] = (size + (LOADER_SIZE_MULTIPLIER - 1)) / LOADER_SIZE_MULTIPLIER;
	st.version_data->version ++;

	key = sys_shm_name( KER_DFT_LOADER_PID, 0 );
	cam->fetcher.fetchtype = FETCHTYPE_DATA;
	cam->fetcher.cm = cm;
	ker_shm_open( KER_DFT_LOADER_PID, key, cam);	
	restartInterval(0);
}
#endif

static int8_t loader_handler( void *state, Message *msg )
{
    1984:	6f 92       	push	r6
    1986:	7f 92       	push	r7
    1988:	8f 92       	push	r8
    198a:	9f 92       	push	r9
    198c:	bf 92       	push	r11
    198e:	cf 92       	push	r12
    1990:	df 92       	push	r13
    1992:	ef 92       	push	r14
    1994:	ff 92       	push	r15
    1996:	0f 93       	push	r16
    1998:	1f 93       	push	r17
    199a:	cf 93       	push	r28
    199c:	df 93       	push	r29
    199e:	cd b7       	in	r28, 0x3d	; 61
    19a0:	de b7       	in	r29, 0x3e	; 62
    19a2:	24 97       	sbiw	r28, 0x04	; 4
    19a4:	0f b6       	in	r0, 0x3f	; 63
    19a6:	f8 94       	cli
    19a8:	de bf       	out	0x3e, r29	; 62
    19aa:	0f be       	out	0x3f, r0	; 63
    19ac:	cd bf       	out	0x3d, r28	; 61
    19ae:	6b 01       	movw	r12, r22
	switch (msg->type){
    19b0:	fb 01       	movw	r30, r22
    19b2:	86 81       	ldd	r24, Z+6	; 0x06
    19b4:	08 2f       	mov	r16, r24
    19b6:	11 27       	eor	r17, r17
    19b8:	0c 30       	cpi	r16, 0x0C	; 12
    19ba:	11 05       	cpc	r17, r1
    19bc:	09 f4       	brne	.+2      	; 0x19c0
    19be:	a2 c1       	rjmp	.+836    	; 0x1d04
    19c0:	0d 30       	cpi	r16, 0x0D	; 13
    19c2:	11 05       	cpc	r17, r1
    19c4:	44 f4       	brge	.+16     	; 0x19d6
    19c6:	01 15       	cp	r16, r1
    19c8:	11 05       	cpc	r17, r1
    19ca:	09 f4       	brne	.+2      	; 0x19ce
    19cc:	16 c2       	rjmp	.+1068   	; 0x1dfa
    19ce:	02 30       	cpi	r16, 0x02	; 2
    19d0:	11 05       	cpc	r17, r1
    19d2:	91 f0       	breq	.+36     	; 0x19f8
    19d4:	58 c2       	rjmp	.+1200   	; 0x1e86
    19d6:	01 32       	cpi	r16, 0x21	; 33
    19d8:	11 05       	cpc	r17, r1
    19da:	09 f4       	brne	.+2      	; 0x19de
    19dc:	b5 c0       	rjmp	.+362    	; 0x1b48
    19de:	02 32       	cpi	r16, 0x22	; 34
    19e0:	11 05       	cpc	r17, r1
    19e2:	2c f4       	brge	.+10     	; 0x19ee
    19e4:	00 32       	cpi	r16, 0x20	; 32
    19e6:	11 05       	cpc	r17, r1
    19e8:	09 f4       	brne	.+2      	; 0x19ec
    19ea:	77 c0       	rjmp	.+238    	; 0x1ada
    19ec:	4c c2       	rjmp	.+1176   	; 0x1e86
    19ee:	02 32       	cpi	r16, 0x22	; 34
    19f0:	11 05       	cpc	r17, r1
    19f2:	09 f4       	brne	.+2      	; 0x19f6
    19f4:	ff c0       	rjmp	.+510    	; 0x1bf4
    19f6:	47 c2       	rjmp	.+1166   	; 0x1e86
    19f8:	fb 01       	movw	r30, r22
    19fa:	a0 85       	ldd	r26, Z+8	; 0x08
    19fc:	b1 85       	ldd	r27, Z+9	; 0x09
    19fe:	8c 91       	ld	r24, X
    1a00:	68 2f       	mov	r22, r24
    1a02:	77 27       	eor	r23, r23
    1a04:	61 30       	cpi	r22, 0x01	; 1
    1a06:	71 05       	cpc	r23, r1
    1a08:	b1 f0       	breq	.+44     	; 0x1a36
    1a0a:	62 30       	cpi	r22, 0x02	; 2
    1a0c:	71 05       	cpc	r23, r1
    1a0e:	1c f4       	brge	.+6      	; 0x1a16
    1a10:	67 2b       	or	r22, r23
    1a12:	29 f0       	breq	.+10     	; 0x1a1e
    1a14:	74 c1       	rjmp	.+744    	; 0x1cfe
    1a16:	62 30       	cpi	r22, 0x02	; 2
    1a18:	71 05       	cpc	r23, r1
    1a1a:	71 f1       	breq	.+92     	; 0x1a78
    1a1c:	70 c1       	rjmp	.+736    	; 0x1cfe
    1a1e:	80 91 93 01 	lds	r24, 0x0193
    1a22:	88 23       	and	r24, r24
    1a24:	11 f0       	breq	.+4      	; 0x1a2a
    1a26:	80 e0       	ldi	r24, 0x00	; 0
    1a28:	03 c0       	rjmp	.+6      	; 0x1a30
    1a2a:	80 91 92 01 	lds	r24, 0x0192
    1a2e:	8f 5f       	subi	r24, 0xFF	; 255
    1a30:	0e 94 a9 0b 	call	0x1752
    1a34:	64 c1       	rjmp	.+712    	; 0x1cfe
    1a36:	40 91 98 01 	lds	r20, 0x0198
    1a3a:	44 23       	and	r20, r20
    1a3c:	09 f0       	breq	.+2      	; 0x1a40
    1a3e:	5f c1       	rjmp	.+702    	; 0x1cfe
 * Will return a NULL pointer if the call to sys_malloc fails.
 */
static inline void *ker_malloc(uint16_t size, sos_pid_t id)
{
  return sos_blk_mem_alloc(size, id, false);
    1a40:	61 e1       	ldi	r22, 0x11	; 17
    1a42:	c8 01       	movw	r24, r16
    1a44:	0e 94 14 11 	call	0x2228
    1a48:	dc 01       	movw	r26, r24
    1a4a:	89 2b       	or	r24, r25
    1a4c:	09 f4       	brne	.+2      	; 0x1a50
    1a4e:	04 c2       	rjmp	.+1032   	; 0x1e58
    1a50:	e0 91 99 01 	lds	r30, 0x0199
    1a54:	f0 91 9a 01 	lds	r31, 0x019A
    1a58:	80 81       	ld	r24, Z
    1a5a:	91 81       	ldd	r25, Z+1	; 0x01
    1a5c:	8d 93       	st	X+, r24
    1a5e:	9c 93       	st	X, r25
    1a60:	11 97       	sbiw	r26, 0x01	; 1
    1a62:	8f ef       	ldi	r24, 0xFF	; 255
    1a64:	c8 2e       	mov	r12, r24
    1a66:	d8 2e       	mov	r13, r24
    1a68:	04 e0       	ldi	r16, 0x04	; 4
    1a6a:	e0 2e       	mov	r14, r16
    1a6c:	0e e1       	ldi	r16, 0x1E	; 30
    1a6e:	f0 2e       	mov	r15, r16
    1a70:	8d 01       	movw	r16, r26
    1a72:	22 e0       	ldi	r18, 0x02	; 2
    1a74:	40 e2       	ldi	r20, 0x20	; 32
    1a76:	3f c1       	rjmp	.+638    	; 0x1cf6
 * Will return a NULL pointer if the call to sys_malloc fails.
 */
static inline void *ker_malloc(uint16_t size, sos_pid_t id)
{
  return sos_blk_mem_alloc(size, id, false);
    1a78:	40 e0       	ldi	r20, 0x00	; 0
    1a7a:	61 e1       	ldi	r22, 0x11	; 17
    1a7c:	85 e2       	ldi	r24, 0x25	; 37
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	0e 94 14 11 	call	0x2228
    1a84:	bc 01       	movw	r22, r24
    1a86:	00 97       	sbiw	r24, 0x00	; 0
    1a88:	11 f1       	breq	.+68     	; 0x1ace
    1a8a:	40 91 99 01 	lds	r20, 0x0199
    1a8e:	50 91 9a 01 	lds	r21, 0x019A
    1a92:	25 e2       	ldi	r18, 0x25	; 37
    1a94:	dc 01       	movw	r26, r24
    1a96:	fa 01       	movw	r30, r20
    1a98:	82 2f       	mov	r24, r18
    1a9a:	01 90       	ld	r0, Z+
    1a9c:	0d 92       	st	X+, r0
    1a9e:	8a 95       	dec	r24
    1aa0:	e1 f7       	brne	.-8      	; 0x1a9a
    1aa2:	e0 91 99 01 	lds	r30, 0x0199
    1aa6:	f0 91 9a 01 	lds	r31, 0x019A
    1aaa:	80 81       	ld	r24, Z
    1aac:	91 81       	ldd	r25, Z+1	; 0x01
    1aae:	db 01       	movw	r26, r22
    1ab0:	8d 93       	st	X+, r24
    1ab2:	9c 93       	st	X, r25
    1ab4:	1f ef       	ldi	r17, 0xFF	; 255
    1ab6:	c1 2e       	mov	r12, r17
    1ab8:	d1 2e       	mov	r13, r17
    1aba:	b4 e0       	ldi	r27, 0x04	; 4
    1abc:	eb 2e       	mov	r14, r27
    1abe:	be e1       	ldi	r27, 0x1E	; 30
    1ac0:	fb 2e       	mov	r15, r27
    1ac2:	8b 01       	movw	r16, r22
    1ac4:	41 e2       	ldi	r20, 0x21	; 33
    1ac6:	61 e1       	ldi	r22, 0x11	; 17
    1ac8:	86 2f       	mov	r24, r22
    1aca:	0e 94 25 1d 	call	0x3a4a
    1ace:	80 91 93 01 	lds	r24, 0x0193
    1ad2:	8e 7f       	andi	r24, 0xFE	; 254
    1ad4:	80 93 93 01 	sts	0x0193, r24
    1ad8:	12 c1       	rjmp	.+548    	; 0x1cfe
		case MSG_TIMER_TIMEOUT: 
		{ return handle_timeout( msg ); }

		case MSG_VERSION_ADV:
		{
			msg_version_adv_t *pkt = (msg_version_adv_t *) msg->data;
    1ada:	fb 01       	movw	r30, r22
    1adc:	40 85       	ldd	r20, Z+8	; 0x08
    1ade:	51 85       	ldd	r21, Z+9	; 0x09
			pkt->version = version_ntoh(pkt->version);	
			if(pkt->version >= st.version_data->version) {
    1ae0:	a0 91 99 01 	lds	r26, 0x0199
    1ae4:	b0 91 9a 01 	lds	r27, 0x019A
    1ae8:	fa 01       	movw	r30, r20
    1aea:	20 81       	ld	r18, Z
    1aec:	31 81       	ldd	r19, Z+1	; 0x01
    1aee:	8d 91       	ld	r24, X+
    1af0:	9c 91       	ld	r25, X
    1af2:	11 97       	sbiw	r26, 0x01	; 1
    1af4:	28 17       	cp	r18, r24
    1af6:	39 07       	cpc	r19, r25
    1af8:	38 f0       	brcs	.+14     	; 0x1b08
				st.recent_neighbor = msg->saddr;
    1afa:	fb 01       	movw	r30, r22
    1afc:	84 81       	ldd	r24, Z+4	; 0x04
    1afe:	95 81       	ldd	r25, Z+5	; 0x05
    1b00:	90 93 97 01 	sts	0x0197, r25
    1b04:	80 93 96 01 	sts	0x0196, r24
    1b08:	fa 01       	movw	r30, r20
    1b0a:	20 81       	ld	r18, Z
    1b0c:	31 81       	ldd	r19, Z+1	; 0x01
    1b0e:	8d 91       	ld	r24, X+
    1b10:	9c 91       	ld	r25, X
    1b12:	82 17       	cp	r24, r18
    1b14:	93 07       	cpc	r25, r19
    1b16:	50 f0       	brcs	.+20     	; 0x1b2c
    1b18:	28 17       	cp	r18, r24
    1b1a:	39 07       	cpc	r19, r25
    1b1c:	58 f4       	brcc	.+22     	; 0x1b34
    1b1e:	80 91 93 01 	lds	r24, 0x0193
    1b22:	80 fd       	sbrc	r24, 0
    1b24:	67 c1       	rjmp	.+718    	; 0x1df4
    1b26:	81 60       	ori	r24, 0x01	; 1
    1b28:	80 93 93 01 	sts	0x0193, r24
    1b2c:	80 e0       	ldi	r24, 0x00	; 0
    1b2e:	0e 94 a9 0b 	call	0x1752
    1b32:	60 c1       	rjmp	.+704    	; 0x1df4
    1b34:	80 91 94 01 	lds	r24, 0x0194
    1b38:	8f 5f       	subi	r24, 0xFF	; 255
    1b3a:	80 93 94 01 	sts	0x0194, r24
    1b3e:	88 23       	and	r24, r24
    1b40:	09 f4       	brne	.+2      	; 0x1b44
    1b42:	58 c1       	rjmp	.+688    	; 0x1df4
    1b44:	61 e0       	ldi	r22, 0x01	; 1
    1b46:	30 c0       	rjmp	.+96     	; 0x1ba8
			}
			return handle_version_adv( msg ); 
		}

		case MSG_VERSION_DATA:
		{ 
			msg_version_data_t *pkt = (msg_version_data_t *) msg->data;
    1b48:	fb 01       	movw	r30, r22
    1b4a:	a0 85       	ldd	r26, Z+8	; 0x08
    1b4c:	b1 85       	ldd	r27, Z+9	; 0x09
			pkt->version = version_ntoh(pkt->version);
			if(pkt->version >= st.version_data->version) {
    1b4e:	60 91 99 01 	lds	r22, 0x0199
    1b52:	70 91 9a 01 	lds	r23, 0x019A
    1b56:	2d 91       	ld	r18, X+
    1b58:	3c 91       	ld	r19, X
    1b5a:	11 97       	sbiw	r26, 0x01	; 1
    1b5c:	fb 01       	movw	r30, r22
    1b5e:	80 81       	ld	r24, Z
    1b60:	91 81       	ldd	r25, Z+1	; 0x01
    1b62:	28 17       	cp	r18, r24
    1b64:	39 07       	cpc	r19, r25
    1b66:	38 f0       	brcs	.+14     	; 0x1b76
				st.recent_neighbor = msg->saddr;
    1b68:	f6 01       	movw	r30, r12
    1b6a:	84 81       	ldd	r24, Z+4	; 0x04
    1b6c:	95 81       	ldd	r25, Z+5	; 0x05
    1b6e:	90 93 97 01 	sts	0x0197, r25
    1b72:	80 93 96 01 	sts	0x0196, r24
    1b76:	40 91 93 01 	lds	r20, 0x0193
    1b7a:	40 ff       	sbrs	r20, 0
    1b7c:	19 c0       	rjmp	.+50     	; 0x1bb0
    1b7e:	2d 91       	ld	r18, X+
    1b80:	3c 91       	ld	r19, X
    1b82:	11 97       	sbiw	r26, 0x01	; 1
    1b84:	fb 01       	movw	r30, r22
    1b86:	80 81       	ld	r24, Z
    1b88:	91 81       	ldd	r25, Z+1	; 0x01
    1b8a:	28 17       	cp	r18, r24
    1b8c:	39 07       	cpc	r19, r25
    1b8e:	81 f4       	brne	.+32     	; 0x1bb0
    1b90:	80 91 95 01 	lds	r24, 0x0195
    1b94:	8f 5f       	subi	r24, 0xFF	; 255
    1b96:	80 93 95 01 	sts	0x0195, r24
    1b9a:	88 23       	and	r24, r24
    1b9c:	09 f4       	brne	.+2      	; 0x1ba0
    1b9e:	2a c1       	rjmp	.+596    	; 0x1df4
    1ba0:	4e 7f       	andi	r20, 0xFE	; 254
    1ba2:	40 93 93 01 	sts	0x0193, r20
    1ba6:	62 e0       	ldi	r22, 0x02	; 2
    1ba8:	81 e1       	ldi	r24, 0x11	; 17
    1baa:	0e 94 40 30 	call	0x6080
    1bae:	22 c1       	rjmp	.+580    	; 0x1df4
    1bb0:	e0 91 99 01 	lds	r30, 0x0199
    1bb4:	f0 91 9a 01 	lds	r31, 0x019A
    1bb8:	2d 91       	ld	r18, X+
    1bba:	3c 91       	ld	r19, X
    1bbc:	80 81       	ld	r24, Z
    1bbe:	91 81       	ldd	r25, Z+1	; 0x01
    1bc0:	82 17       	cp	r24, r18
    1bc2:	93 07       	cpc	r25, r19
    1bc4:	08 f0       	brcs	.+2      	; 0x1bc8
    1bc6:	16 c1       	rjmp	.+556    	; 0x1df4
    1bc8:	80 e0       	ldi	r24, 0x00	; 0
    1bca:	0e 94 a9 0b 	call	0x1752
 * @return void
 */
static inline void ker_free(void* ptr)
{
  sos_blk_mem_free(ptr, false);
    1bce:	60 e0       	ldi	r22, 0x00	; 0
    1bd0:	80 91 99 01 	lds	r24, 0x0199
    1bd4:	90 91 9a 01 	lds	r25, 0x019A
    1bd8:	0e 94 98 11 	call	0x2330
    1bdc:	b6 01       	movw	r22, r12
    1bde:	81 e1       	ldi	r24, 0x11	; 17
    1be0:	0e 94 12 19 	call	0x3224
    1be4:	90 93 9a 01 	sts	0x019A, r25
    1be8:	80 93 99 01 	sts	0x0199, r24
    1bec:	f6 01       	movw	r30, r12
    1bee:	64 81       	ldd	r22, Z+4	; 0x04
    1bf0:	75 81       	ldd	r23, Z+5	; 0x05
    1bf2:	f4 c0       	rjmp	.+488    	; 0x1ddc
 * Will return a NULL pointer if the call to sys_malloc fails.
 */
static inline void *ker_malloc(uint16_t size, sos_pid_t id)
{
  return sos_blk_mem_alloc(size, id, false);
    1bf4:	40 e0       	ldi	r20, 0x00	; 0
    1bf6:	61 e1       	ldi	r22, 0x11	; 17
    1bf8:	80 e2       	ldi	r24, 0x20	; 32
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	0e 94 14 11 	call	0x2228
    1c00:	4c 01       	movw	r8, r24
    1c02:	00 97       	sbiw	r24, 0x00	; 0
    1c04:	09 f4       	brne	.+2      	; 0x1c08
    1c06:	28 c1       	rjmp	.+592    	; 0x1e58
    1c08:	7c 01       	movw	r14, r24
    1c0a:	66 24       	eor	r6, r6
    1c0c:	77 24       	eor	r7, r7
    1c0e:	a7 e0       	ldi	r26, 0x07	; 7
    1c10:	ba 2e       	mov	r11, r26
 * Create shared memory name based on task ID and task defined ID 
 */
static inline sos_shm_t sys_shm_name( sos_pid_t pid, uint8_t id ) 
{
  return (((sos_shm_t) pid) << 8) | id;
    1c12:	c3 01       	movw	r24, r6
    1c14:	91 61       	ori	r25, 0x11	; 17
    1c16:	bc 01       	movw	r22, r24
    1c18:	81 e1       	ldi	r24, 0x11	; 17
    1c1a:	0e 94 c9 3b 	call	0x7792
    1c1e:	fc 01       	movw	r30, r24
    1c20:	89 2b       	or	r24, r25
    1c22:	c1 f0       	breq	.+48     	; 0x1c54
    1c24:	83 81       	ldd	r24, Z+3	; 0x03
    1c26:	81 30       	cpi	r24, 0x01	; 1
    1c28:	a9 f4       	brne	.+42     	; 0x1c54
    1c2a:	00 e0       	ldi	r16, 0x00	; 0
    1c2c:	10 e0       	ldi	r17, 0x00	; 0
    1c2e:	22 e0       	ldi	r18, 0x02	; 2
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	ae 01       	movw	r20, r28
    1c34:	4f 5f       	subi	r20, 0xFF	; 255
    1c36:	5f 4f       	sbci	r21, 0xFF	; 255
    1c38:	61 e1       	ldi	r22, 0x11	; 17
    1c3a:	80 81       	ld	r24, Z
    1c3c:	91 81       	ldd	r25, Z+1	; 0x01
    1c3e:	0e 94 d2 20 	call	0x41a4
    1c42:	88 23       	and	r24, r24
    1c44:	39 f4       	brne	.+14     	; 0x1c54
    1c46:	89 81       	ldd	r24, Y+1	; 0x01
    1c48:	d7 01       	movw	r26, r14
    1c4a:	8c 93       	st	X, r24
    1c4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4e:	f7 01       	movw	r30, r14
    1c50:	80 87       	std	Z+8, r24	; 0x08
    1c52:	05 c0       	rjmp	.+10     	; 0x1c5e
    1c54:	8f ef       	ldi	r24, 0xFF	; 255
    1c56:	d7 01       	movw	r26, r14
    1c58:	8c 93       	st	X, r24
    1c5a:	f7 01       	movw	r30, r14
    1c5c:	10 86       	std	Z+8, r1	; 0x08
    1c5e:	ba 94       	dec	r11
    1c60:	08 94       	sec
    1c62:	61 1c       	adc	r6, r1
    1c64:	71 1c       	adc	r7, r1
    1c66:	08 94       	sec
    1c68:	e1 1c       	adc	r14, r1
    1c6a:	f1 1c       	adc	r15, r1
    1c6c:	b7 fe       	sbrs	r11, 7
    1c6e:	d1 cf       	rjmp	.-94     	; 0x1c12
    1c70:	bb 24       	eor	r11, r11
    1c72:	84 01       	movw	r16, r8
    1c74:	00 5f       	subi	r16, 0xF0	; 240
    1c76:	1f 4f       	sbci	r17, 0xFF	; 255
    1c78:	78 01       	movw	r14, r16
/**
 * Create shared memory name based on task ID and task defined ID 
 */
static inline sos_shm_t sys_shm_name( sos_pid_t pid, uint8_t id ) 
{
    1c7a:	f8 e0       	ldi	r31, 0x08	; 8
    1c7c:	bf 0e       	add	r11, r31
  return (((sos_shm_t) pid) << 8) | id;
    1c7e:	8b 2d       	mov	r24, r11
    1c80:	99 27       	eor	r25, r25
    1c82:	28 ef       	ldi	r18, 0xF8	; 248
    1c84:	b2 0e       	add	r11, r18
    1c86:	91 61       	ori	r25, 0x11	; 17
    1c88:	bc 01       	movw	r22, r24
    1c8a:	81 e1       	ldi	r24, 0x11	; 17
    1c8c:	0e 94 c9 3b 	call	0x7792
    1c90:	fc 01       	movw	r30, r24
    1c92:	89 2b       	or	r24, r25
    1c94:	c1 f0       	breq	.+48     	; 0x1cc6
    1c96:	83 81       	ldd	r24, Z+3	; 0x03
    1c98:	81 30       	cpi	r24, 0x01	; 1
    1c9a:	a9 f4       	brne	.+42     	; 0x1cc6
    1c9c:	80 81       	ld	r24, Z
    1c9e:	91 81       	ldd	r25, Z+1	; 0x01
    1ca0:	0e 94 e3 21 	call	0x43c6
    1ca4:	aa 27       	eor	r26, r26
    1ca6:	bb 27       	eor	r27, r27
    1ca8:	88 0f       	add	r24, r24
    1caa:	99 1f       	adc	r25, r25
    1cac:	aa 1f       	adc	r26, r26
    1cae:	bb 1f       	adc	r27, r27
    1cb0:	08 96       	adiw	r24, 0x08	; 8
    1cb2:	a1 1d       	adc	r26, r1
    1cb4:	b1 1d       	adc	r27, r1
    1cb6:	ab bf       	out	0x3b, r26	; 59
    1cb8:	fc 01       	movw	r30, r24
    1cba:	87 91       	elpm	r24, Z+
    1cbc:	96 91       	elpm	r25, Z
    1cbe:	d7 01       	movw	r26, r14
    1cc0:	8d 93       	st	X+, r24
    1cc2:	9c 93       	st	X, r25
    1cc4:	03 c0       	rjmp	.+6      	; 0x1ccc
    1cc6:	f8 01       	movw	r30, r16
    1cc8:	10 82       	st	Z, r1
    1cca:	11 82       	std	Z+1, r1	; 0x01
    1ccc:	b3 94       	inc	r11
    1cce:	82 e0       	ldi	r24, 0x02	; 2
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	e8 0e       	add	r14, r24
    1cd4:	f9 1e       	adc	r15, r25
    1cd6:	08 0f       	add	r16, r24
    1cd8:	19 1f       	adc	r17, r25
    1cda:	97 e0       	ldi	r25, 0x07	; 7
    1cdc:	9b 15       	cp	r25, r11
    1cde:	68 f6       	brcc	.-102    	; 0x1c7a
							   uint8_t type,
							   uint8_t len,
							   void* data,
							   uint16_t flag,
							   uint16_t daddr) {
    1ce0:	f6 01       	movw	r30, r12
    1ce2:	84 81       	ldd	r24, Z+4	; 0x04
    1ce4:	95 81       	ldd	r25, Z+5	; 0x05
  return post_link(did, sid, type, len, data, flag | SOS_MSG_ALL_LINK_IO | SOS_MSG_LINK_AUTO, daddr);
    1ce6:	6c 01       	movw	r12, r24
    1ce8:	e4 e0       	ldi	r30, 0x04	; 4
    1cea:	ee 2e       	mov	r14, r30
    1cec:	ee e3       	ldi	r30, 0x3E	; 62
    1cee:	fe 2e       	mov	r15, r30
    1cf0:	84 01       	movw	r16, r8
    1cf2:	20 e2       	ldi	r18, 0x20	; 32
    1cf4:	43 e2       	ldi	r20, 0x23	; 35
    1cf6:	61 e1       	ldi	r22, 0x11	; 17
    1cf8:	86 2f       	mov	r24, r22
    1cfa:	0e 94 25 1d 	call	0x3a4a
    1cfe:	80 e0       	ldi	r24, 0x00	; 0
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	bd c0       	rjmp	.+378    	; 0x1e7e
    1d04:	fb 01       	movw	r30, r22
    1d06:	00 85       	ldd	r16, Z+8	; 0x08
    1d08:	11 85       	ldd	r17, Z+9	; 0x09
void fetcher_commit(fetcher_state_t *s, bool commit);

static inline bool is_fetcher_succeed(fetcher_state_t *s)
{
	if(s->retx <= FETCHER_REQUEST_MAX_RETX) {
    1d0a:	f8 01       	movw	r30, r16
    1d0c:	83 81       	ldd	r24, Z+3	; 0x03
    1d0e:	84 30       	cpi	r24, 0x04	; 4
    1d10:	08 f0       	brcs	.+2      	; 0x1d14
    1d12:	67 c0       	rjmp	.+206    	; 0x1de2
    1d14:	61 e0       	ldi	r22, 0x01	; 1
    1d16:	c8 01       	movw	r24, r16
    1d18:	0e 94 df 23 	call	0x47be
    1d1c:	10 92 98 01 	sts	0x0198, r1
    1d20:	80 91 98 01 	lds	r24, 0x0198
    1d24:	0e 94 a9 0b 	call	0x1752
    1d28:	f8 01       	movw	r30, r16
    1d2a:	61 85       	ldd	r22, Z+9	; 0x09
    1d2c:	72 85       	ldd	r23, Z+10	; 0x0a
    1d2e:	81 e1       	ldi	r24, 0x11	; 17
    1d30:	0e 94 c9 3b 	call	0x7792
    1d34:	6c 01       	movw	r12, r24
    1d36:	fc 01       	movw	r30, r24
    1d38:	82 81       	ldd	r24, Z+2	; 0x02
    1d3a:	81 30       	cpi	r24, 0x01	; 1
    1d3c:	b9 f4       	brne	.+46     	; 0x1d6c
    1d3e:	00 e0       	ldi	r16, 0x00	; 0
    1d40:	10 e0       	ldi	r17, 0x00	; 0
    1d42:	22 e0       	ldi	r18, 0x02	; 2
    1d44:	30 e0       	ldi	r19, 0x00	; 0
    1d46:	ae 01       	movw	r20, r28
    1d48:	4d 5f       	subi	r20, 0xFD	; 253
    1d4a:	5f 4f       	sbci	r21, 0xFF	; 255
    1d4c:	61 e1       	ldi	r22, 0x11	; 17
    1d4e:	80 81       	ld	r24, Z
    1d50:	91 81       	ldd	r25, Z+1	; 0x01
    1d52:	0e 94 d2 20 	call	0x41a4
    1d56:	78 01       	movw	r14, r16
    1d58:	d6 01       	movw	r26, r12
    1d5a:	0d 91       	ld	r16, X+
    1d5c:	1c 91       	ld	r17, X
    1d5e:	2c 81       	ldd	r18, Y+4	; 0x04
    1d60:	4b e2       	ldi	r20, 0x2B	; 43
    1d62:	61 e1       	ldi	r22, 0x11	; 17
    1d64:	8b 81       	ldd	r24, Y+3	; 0x03
    1d66:	0e 94 50 18 	call	0x30a0
    1d6a:	30 c0       	rjmp	.+96     	; 0x1dcc
    1d6c:	f6 01       	movw	r30, r12
    1d6e:	80 81       	ld	r24, Z
    1d70:	91 81       	ldd	r25, Z+1	; 0x01
    1d72:	0e 94 45 58 	call	0xb08a
    1d76:	d6 01       	movw	r26, r12
    1d78:	8d 91       	ld	r24, X+
    1d7a:	9c 91       	ld	r25, X
    1d7c:	0e 94 e3 21 	call	0x43c6
    1d80:	8c 01       	movw	r16, r24
    1d82:	c8 01       	movw	r24, r16
    1d84:	aa 27       	eor	r26, r26
    1d86:	bb 27       	eor	r27, r27
    1d88:	88 0f       	add	r24, r24
    1d8a:	99 1f       	adc	r25, r25
    1d8c:	aa 1f       	adc	r26, r26
    1d8e:	bb 1f       	adc	r27, r27
    1d90:	0a 96       	adiw	r24, 0x0a	; 10
    1d92:	a1 1d       	adc	r26, r1
    1d94:	b1 1d       	adc	r27, r1
    1d96:	ab bf       	out	0x3b, r26	; 59
    1d98:	fc 01       	movw	r30, r24
    1d9a:	27 91       	elpm	r18, Z+
    1d9c:	01 96       	adiw	r24, 0x01	; 1
    1d9e:	a1 1d       	adc	r26, r1
    1da0:	b1 1d       	adc	r27, r1
    1da2:	ab bf       	out	0x3b, r26	; 59
    1da4:	fc 01       	movw	r30, r24
    1da6:	87 91       	elpm	r24, Z+
    1da8:	21 30       	cpi	r18, 0x01	; 1
    1daa:	81 f4       	brne	.+32     	; 0x1dcc
    1dac:	82 30       	cpi	r24, 0x02	; 2
    1dae:	11 f0       	breq	.+4      	; 0x1db4
    1db0:	8f 3f       	cpi	r24, 0xFF	; 255
    1db2:	61 f4       	brne	.+24     	; 0x1dcc
    1db4:	f6 01       	movw	r30, r12
    1db6:	80 81       	ld	r24, Z
    1db8:	91 81       	ldd	r25, Z+1	; 0x01
    1dba:	0e 94 b0 21 	call	0x4360
    1dbe:	f6 01       	movw	r30, r12
    1dc0:	84 81       	ldd	r24, Z+4	; 0x04
    1dc2:	87 ff       	sbrs	r24, 7
    1dc4:	03 c0       	rjmp	.+6      	; 0x1dcc
    1dc6:	c8 01       	movw	r24, r16
    1dc8:	0e 94 7e 15 	call	0x2afc
    1dcc:	60 91 96 01 	lds	r22, 0x0196
    1dd0:	70 91 97 01 	lds	r23, 0x0197
    1dd4:	80 91 99 01 	lds	r24, 0x0199
    1dd8:	90 91 9a 01 	lds	r25, 0x019A
    1ddc:	0e 94 28 0c 	call	0x1850
    1de0:	09 c0       	rjmp	.+18     	; 0x1df4
    1de2:	81 e1       	ldi	r24, 0x11	; 17
    1de4:	0e 94 12 19 	call	0x3224
    1de8:	60 91 96 01 	lds	r22, 0x0196
    1dec:	70 91 97 01 	lds	r23, 0x0197
    1df0:	0e 94 9c 23 	call	0x4738
    1df4:	80 e0       	ldi	r24, 0x00	; 0
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	48 c0       	rjmp	.+144    	; 0x1e8a
    1dfa:	21 e0       	ldi	r18, 0x01	; 1
    1dfc:	40 e0       	ldi	r20, 0x00	; 0
    1dfe:	61 e1       	ldi	r22, 0x11	; 17
    1e00:	82 e6       	ldi	r24, 0x62	; 98
    1e02:	91 e0       	ldi	r25, 0x01	; 1
    1e04:	0e 94 bf 30 	call	0x617e
    1e08:	21 e0       	ldi	r18, 0x01	; 1
    1e0a:	42 2f       	mov	r20, r18
    1e0c:	61 e1       	ldi	r22, 0x11	; 17
    1e0e:	82 e7       	ldi	r24, 0x72	; 114
    1e10:	91 e0       	ldi	r25, 0x01	; 1
    1e12:	0e 94 bf 30 	call	0x617e
    1e16:	21 e0       	ldi	r18, 0x01	; 1
    1e18:	42 e0       	ldi	r20, 0x02	; 2
    1e1a:	61 e1       	ldi	r22, 0x11	; 17
    1e1c:	82 e8       	ldi	r24, 0x82	; 130
    1e1e:	91 e0       	ldi	r25, 0x01	; 1
    1e20:	0e 94 bf 30 	call	0x617e
    1e24:	10 92 93 01 	sts	0x0193, r1
    1e28:	10 92 94 01 	sts	0x0194, r1
    1e2c:	10 92 95 01 	sts	0x0195, r1
    1e30:	10 92 98 01 	sts	0x0198, r1
    1e34:	10 93 97 01 	sts	0x0197, r17
    1e38:	00 93 96 01 	sts	0x0196, r16
 * Will return a NULL pointer if the call to sys_malloc fails.
 */
static inline void *ker_malloc(uint16_t size, sos_pid_t id)
{
  return sos_blk_mem_alloc(size, id, false);
    1e3c:	40 91 93 01 	lds	r20, 0x0193
    1e40:	61 e1       	ldi	r22, 0x11	; 17
    1e42:	85 e2       	ldi	r24, 0x25	; 37
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	0e 94 14 11 	call	0x2228
    1e4a:	fc 01       	movw	r30, r24
    1e4c:	90 93 9a 01 	sts	0x019A, r25
    1e50:	80 93 99 01 	sts	0x0199, r24
    1e54:	89 2b       	or	r24, r25
    1e56:	19 f4       	brne	.+6      	; 0x1e5e
    1e58:	84 ef       	ldi	r24, 0xF4	; 244
    1e5a:	9f ef       	ldi	r25, 0xFF	; 255
    1e5c:	10 c0       	rjmp	.+32     	; 0x1e7e
    1e5e:	85 e2       	ldi	r24, 0x25	; 37
    1e60:	11 92       	st	Z+, r1
    1e62:	8a 95       	dec	r24
    1e64:	e9 f7       	brne	.-6      	; 0x1e60
    1e66:	e0 91 99 01 	lds	r30, 0x0199
    1e6a:	f0 91 9a 01 	lds	r31, 0x019A
    1e6e:	81 e0       	ldi	r24, 0x01	; 1
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	80 83       	st	Z, r24
    1e74:	91 83       	std	Z+1, r25	; 0x01
    1e76:	80 e0       	ldi	r24, 0x00	; 0
    1e78:	0e 94 a9 0b 	call	0x1752
    1e7c:	c8 01       	movw	r24, r16
    1e7e:	99 27       	eor	r25, r25
    1e80:	87 fd       	sbrc	r24, 7
    1e82:	90 95       	com	r25
    1e84:	02 c0       	rjmp	.+4      	; 0x1e8a
			}
			return handle_version_data( msg ); 
		}

		case MSG_LOADER_LS_ON_NODE:
		{
			return handle_loader_ls_on_node( msg );
		}

		case MSG_FETCHER_DONE:
		{ 
			return handle_fetcher_done( msg ); 
		}

		case MSG_INIT:
		{ 
#ifdef LOADER_NET_EXPERIMENT
			handle_init();
			if( ker_id() == 0 ) {
				start_experiment(EXPERIMENT_SIZE);	
			}
#else
			return handle_init(); 
#endif
		}

		default:
		return -EINVAL;
    1e86:	8a ee       	ldi	r24, 0xEA	; 234
    1e88:	9f ef       	ldi	r25, 0xFF	; 255
    1e8a:	24 96       	adiw	r28, 0x04	; 4
    1e8c:	0f b6       	in	r0, 0x3f	; 63
    1e8e:	f8 94       	cli
    1e90:	de bf       	out	0x3e, r29	; 62
    1e92:	0f be       	out	0x3f, r0	; 63
    1e94:	cd bf       	out	0x3d, r28	; 61
    1e96:	df 91       	pop	r29
    1e98:	cf 91       	pop	r28
    1e9a:	1f 91       	pop	r17
    1e9c:	0f 91       	pop	r16
    1e9e:	ff 90       	pop	r15
    1ea0:	ef 90       	pop	r14
    1ea2:	df 90       	pop	r13
    1ea4:	cf 90       	pop	r12
    1ea6:	bf 90       	pop	r11
    1ea8:	9f 90       	pop	r9
    1eaa:	8f 90       	pop	r8
    1eac:	7f 90       	pop	r7
    1eae:	6f 90       	pop	r6
    1eb0:	08 95       	ret

00001eb2 <loader_get_header>:
	}
	return SOS_OK;
}



#ifndef _MODULE_
mod_header_ptr loader_get_header()
{
	return sos_get_header_address(mod_header);
    1eb2:	8c e7       	ldi	r24, 0x7C	; 124
    1eb4:	91 e0       	ldi	r25, 0x01	; 1
    1eb6:	aa 27       	eor	r26, r26
    1eb8:	97 fd       	sbrc	r25, 7
    1eba:	a0 95       	com	r26
    1ebc:	ba 2f       	mov	r27, r26
    1ebe:	b6 95       	lsr	r27
    1ec0:	a7 95       	ror	r26
    1ec2:	97 95       	ror	r25
    1ec4:	87 95       	ror	r24
    1ec6:	08 95       	ret

00001ec8 <rfidtag_msg_handler>:



static int8_t rfidtag_msg_handler(void *state, Message *msg)
{
    1ec8:	ef 92       	push	r14
    1eca:	ff 92       	push	r15
    1ecc:	0f 93       	push	r16
    1ece:	1f 93       	push	r17
    1ed0:	cf 93       	push	r28
    1ed2:	df 93       	push	r29
    1ed4:	fc 01       	movw	r30, r24
    1ed6:	db 01       	movw	r26, r22
  app_state_t *s = (app_state_t*)state;

  switch (msg->type){
    1ed8:	eb 01       	movw	r28, r22
    1eda:	8e 81       	ldd	r24, Y+6	; 0x06
    1edc:	99 27       	eor	r25, r25
    1ede:	82 30       	cpi	r24, 0x02	; 2
    1ee0:	91 05       	cpc	r25, r1
    1ee2:	a9 f0       	breq	.+42     	; 0x1f0e
    1ee4:	83 30       	cpi	r24, 0x03	; 3
    1ee6:	91 05       	cpc	r25, r1
    1ee8:	1c f4       	brge	.+6      	; 0x1ef0
    1eea:	89 2b       	or	r24, r25
    1eec:	21 f0       	breq	.+8      	; 0x1ef6
    1eee:	29 c0       	rjmp	.+82     	; 0x1f42
    1ef0:	06 97       	sbiw	r24, 0x06	; 6
    1ef2:	51 f1       	breq	.+84     	; 0x1f48
    1ef4:	26 c0       	rjmp	.+76     	; 0x1f42
    case MSG_INIT:
      {
        s->pid = msg->did;
    1ef6:	8c 91       	ld	r24, X
    1ef8:	81 87       	std	Z+9, r24	; 0x09
        s->state = 0;
    1efa:	12 86       	std	Z+10, r1	; 0x0a
 */
static inline int8_t sys_timer_start( uint8_t tid, int32_t interval, uint8_t type )
{
#ifdef SYS_JUMP_TBL_START
	return ((sys_timer_start_ker_func_t)(SYS_JUMP_TBL_START+SYS_JUMP_TBL_SIZE*5))( tid, interval, type );
    1efc:	22 85       	ldd	r18, Z+10	; 0x0a
    1efe:	40 e0       	ldi	r20, 0x00	; 0
    1f00:	58 e0       	ldi	r21, 0x08	; 8
    1f02:	60 e0       	ldi	r22, 0x00	; 0
    1f04:	70 e0       	ldi	r23, 0x00	; 0
    1f06:	82 2f       	mov	r24, r18
    1f08:	0e 94 50 00 	call	0xa0
        DEBUG("Rfidtag Start\n");

	sys_timer_start(aRFID_TID,aRFID_TIMER_INTERVAL,TIMER_REPEAT);	
        break;
    1f0c:	1d c0       	rjmp	.+58     	; 0x1f48
 */
static inline void sys_led( uint8_t op )
{
#ifdef SYS_JUMP_TBL_START
	((sys_led_ker_func_t)(SYS_JUMP_TBL_START+SYS_JUMP_TBL_SIZE*16))( op );
    1f0e:	89 e0       	ldi	r24, 0x09	; 9
    1f10:	0e 94 66 00 	call	0xcc
    1f14:	0e 94 5e 00 	call	0xbc
    1f18:	8c 01       	movw	r16, r24
    1f1a:	81 e0       	ldi	r24, 0x01	; 1
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	0e 94 48 00 	call	0x90
    1f22:	fc 01       	movw	r30, r24
      }


    case MSG_FINAL:
      {
        DEBUG("Rfid Stop\n");
        break;
      }

    case MSG_TIMER_TIMEOUT:
	{
		sys_led(LED_YELLOW_TOGGLE);
		uint8_t *address;
		uint8_t data;
		data = sys_id();
		address = sys_malloc(sizeof(uint8_t));
		if (address !=NULL)
    1f24:	89 2b       	or	r24, r25
    1f26:	81 f0       	breq	.+32     	; 0x1f48
		{
			*address = data;
    1f28:	00 83       	st	Z, r16
 */
static inline int8_t sys_post_link( sos_pid_t dst_mod_id, uint8_t type, uint8_t size, void *  data, uint16_t flag, uint16_t dst_node_addr )
{
#ifdef SYS_JUMP_TBL_START 
	return ((sys_post_link_ker_func_t)(SYS_JUMP_TBL_START+SYS_JUMP_TBL_SIZE*9))( dst_mod_id, type, size, data, flag, dst_node_addr );
    1f2a:	8f ef       	ldi	r24, 0xFF	; 255
    1f2c:	e8 2e       	mov	r14, r24
    1f2e:	f8 2e       	mov	r15, r24
    1f30:	0c e0       	ldi	r16, 0x0C	; 12
    1f32:	12 e0       	ldi	r17, 0x02	; 2
    1f34:	9f 01       	movw	r18, r30
    1f36:	41 e0       	ldi	r20, 0x01	; 1
    1f38:	64 e2       	ldi	r22, 0x24	; 36
    1f3a:	82 e8       	ldi	r24, 0x82	; 130
    1f3c:	0e 94 58 00 	call	0xb0
			sys_post_net(DFLT_APP_ID2, MSG_RFID_TAG, 1, (void*)address, SOS_MSG_RELEASE | SOS_MSG_RELIABLE, BCAST_ADDRESS);
		}
		break;
    1f40:	03 c0       	rjmp	.+6      	; 0x1f48
	}
    default:
      return -EINVAL;
    1f42:	8a ee       	ldi	r24, 0xEA	; 234
    1f44:	9f ef       	ldi	r25, 0xFF	; 255
    1f46:	02 c0       	rjmp	.+4      	; 0x1f4c
  }

  return SOS_OK;
    1f48:	80 e0       	ldi	r24, 0x00	; 0
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	df 91       	pop	r29
    1f4e:	cf 91       	pop	r28
    1f50:	1f 91       	pop	r17
    1f52:	0f 91       	pop	r16
    1f54:	ff 90       	pop	r15
    1f56:	ef 90       	pop	r14
    1f58:	08 95       	ret

00001f5a <rfidtag_get_header>:
}






#ifndef _MODULE_
mod_header_ptr rfidtag_get_header()
{
  return sos_get_header_address(mod_header);
    1f5a:	8c e8       	ldi	r24, 0x8C	; 140
    1f5c:	91 e0       	ldi	r25, 0x01	; 1
    1f5e:	aa 27       	eor	r26, r26
    1f60:	97 fd       	sbrc	r25, 7
    1f62:	a0 95       	com	r26
    1f64:	ba 2f       	mov	r27, r26
    1f66:	b6 95       	lsr	r27
    1f68:	a7 95       	ror	r26
    1f6a:	97 95       	ror	r25
    1f6c:	87 95       	ror	r24
    1f6e:	08 95       	ret

00001f70 <irtag_msg_handler>:
    1f70:	cf 93       	push	r28
    1f72:	df 93       	push	r29
    1f74:	fc 01       	movw	r30, r24
    1f76:	db 01       	movw	r26, r22
    1f78:	eb 01       	movw	r28, r22
    1f7a:	8e 81       	ldd	r24, Y+6	; 0x06
    1f7c:	99 27       	eor	r25, r25
    1f7e:	82 30       	cpi	r24, 0x02	; 2
    1f80:	91 05       	cpc	r25, r1
    1f82:	a9 f0       	breq	.+42     	; 0x1fae
    1f84:	83 30       	cpi	r24, 0x03	; 3
    1f86:	91 05       	cpc	r25, r1
    1f88:	1c f4       	brge	.+6      	; 0x1f90
    1f8a:	89 2b       	or	r24, r25
    1f8c:	21 f0       	breq	.+8      	; 0x1f96
    1f8e:	13 c0       	rjmp	.+38     	; 0x1fb6
    1f90:	06 97       	sbiw	r24, 0x06	; 6
    1f92:	a1 f0       	breq	.+40     	; 0x1fbc
    1f94:	10 c0       	rjmp	.+32     	; 0x1fb6
    1f96:	8c 91       	ld	r24, X
    1f98:	81 87       	std	Z+9, r24	; 0x09
    1f9a:	12 86       	std	Z+10, r1	; 0x0a
 */
static inline int8_t sys_timer_start( uint8_t tid, int32_t interval, uint8_t type )
{
#ifdef SYS_JUMP_TBL_START
	return ((sys_timer_start_ker_func_t)(SYS_JUMP_TBL_START+SYS_JUMP_TBL_SIZE*5))( tid, interval, type );
    1f9c:	22 85       	ldd	r18, Z+10	; 0x0a
    1f9e:	42 e0       	ldi	r20, 0x02	; 2
    1fa0:	50 e0       	ldi	r21, 0x00	; 0
    1fa2:	60 e0       	ldi	r22, 0x00	; 0
    1fa4:	70 e0       	ldi	r23, 0x00	; 0
    1fa6:	8a e0       	ldi	r24, 0x0A	; 10
    1fa8:	0e 94 50 00 	call	0xa0
    1fac:	07 c0       	rjmp	.+14     	; 0x1fbc
    1fae:	88 e0       	ldi	r24, 0x08	; 8
    1fb0:	0e 94 66 00 	call	0xcc
    1fb4:	03 c0       	rjmp	.+6      	; 0x1fbc
    1fb6:	8a ee       	ldi	r24, 0xEA	; 234
    1fb8:	9f ef       	ldi	r25, 0xFF	; 255
    1fba:	02 c0       	rjmp	.+4      	; 0x1fc0
    1fbc:	80 e0       	ldi	r24, 0x00	; 0
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	df 91       	pop	r29
    1fc2:	cf 91       	pop	r28
    1fc4:	08 95       	ret

00001fc6 <irtag_get_header>:
    1fc6:	84 ea       	ldi	r24, 0xA4	; 164
    1fc8:	91 e0       	ldi	r25, 0x01	; 1
    1fca:	aa 27       	eor	r26, r26
    1fcc:	97 fd       	sbrc	r25, 7
    1fce:	a0 95       	com	r26
    1fd0:	ba 2f       	mov	r27, r26
    1fd2:	b6 95       	lsr	r27
    1fd4:	a7 95       	ror	r26
    1fd6:	97 95       	ror	r25
    1fd8:	87 95       	ror	r24
    1fda:	08 95       	ret

00001fdc <sos_blk_mem_change_own>:
// SFI Mode: 1. If call from un-trusted domain. change permissions only if current domain is block owner
//           2. If call from trusted domain, everything is fair !!
//-----------------------------------------------------------------------------
int8_t sos_blk_mem_change_own(void* ptr, sos_pid_t id, bool bCallFromModule) 
{
    1fdc:	cf 93       	push	r28
    1fde:	df 93       	push	r29
#ifdef SOS_SFI
  HAS_CRITICAL_SECTION;
  uint8_t perms;
  uint16_t block_num;
  int8_t domid;
#endif

  Block* blockptr = TO_BLOCK_PTR(ptr); // Convert to a block address         
    1fe0:	dc 01       	movw	r26, r24
    1fe2:	13 97       	sbiw	r26, 0x03	; 3
  sos_pid_t old_owner;
  // Check for errors                                          
  if (NULL_PID == id || NULL == ptr) return SOS_OK;           
    1fe4:	6f 3f       	cpi	r22, 0xFF	; 255
    1fe6:	01 f1       	breq	.+64     	; 0x2028
    1fe8:	89 2b       	or	r24, r25
    1fea:	f1 f0       	breq	.+60     	; 0x2028

#ifdef SOS_SFI
  ENTER_CRITICAL_SECTION();

  //Get the permission for the first block
  block_num = MEMMAP_GET_BLK_NUM(blockptr);
  MEMMAP_GET_PERMS(block_num, perms);

  // Check - Not a start of segment
  if ((perms & MEMMAP_SEG_MASK) == MEMMAP_SEG_LATER) {
    LEAVE_CRITICAL_SECTION();
    sfi_exception(MALLOC_EXCEPTION);
  }

#ifdef SFI_DOMS_8 
  if ((bCallFromModule && ((perms & MEMMAP_DOM_MASK) == curr_dom_id))|| (!bCallFromModule))
#endif
#ifdef SFI_DOMS_2
  if ((bCallFromModule && ((perms & MEMMAP_DOM_MASK) != KER_DOM_ID)) || (!bCallFromModule))
#endif
    {
      // Call has come from trusted domain OR
      // Call has come from block owner
      
      // Get domain id of new owner
      domid = sfi_get_domain_id(id);
      if (domid < 0){
	LEAVE_CRITICAL_SECTION();
	sfi_exception(SFI_DOMAINID_EXCEPTION);
      }
      
      // Change Permissions Only if it is required
      if (domid != (perms & MEMMAP_DOM_MASK)){
	MEMMAP_SET_PERMS(block_num, DOM_SEG_START(domid));
	memmap_change_perms((void*)((Block*)(blockptr + 1)),
			    MEMMAP_SEG_MASK | MEMMAP_DOM_MASK,
			    DOM_SEG_LATER(perms),
			    DOM_SEG_LATER(domid));
      }
      LEAVE_CRITICAL_SECTION();
    }
  else{
    // Non-owner trying to change ownership of the block
    DEBUG("Current domain is not owner of this block.\n");
    LEAVE_CRITICAL_SECTION();
    sfi_exception(MALLOC_EXCEPTION);
    return -EINVAL;
  }

#else
  // Check for memory corruption                               
  if ((blockptr < malloc_heap) || (blockptr >= (malloc_heap + NUM_HEAP_BLOCKS)) ) {
    1fec:	81 e0       	ldi	r24, 0x01	; 1
    1fee:	af 39       	cpi	r26, 0x9F	; 159
    1ff0:	b8 07       	cpc	r27, r24
    1ff2:	a0 f0       	brcs	.+40     	; 0x201c
    1ff4:	c9 e0       	ldi	r28, 0x09	; 9
    1ff6:	af 39       	cpi	r26, 0x9F	; 159
    1ff8:	bc 07       	cpc	r27, r28
    1ffa:	80 f4       	brcc	.+32     	; 0x201c
		
	  return -EINVAL;
  }
  if (blockptr->blockhdr.owner != BLOCK_GUARD_BYTE(blockptr))  {
    1ffc:	ed 91       	ld	r30, X+
    1ffe:	fc 91       	ld	r31, X
    2000:	11 97       	sbiw	r26, 0x01	; 1
    2002:	83 e0       	ldi	r24, 0x03	; 3
    2004:	ee 0f       	add	r30, r30
    2006:	ff 1f       	adc	r31, r31
    2008:	8a 95       	dec	r24
    200a:	e1 f7       	brne	.-8      	; 0x2004
    200c:	ea 0f       	add	r30, r26
    200e:	fb 1f       	adc	r31, r27
    2010:	31 97       	sbiw	r30, 0x01	; 1
    2012:	ed 01       	movw	r28, r26
    2014:	9a 81       	ldd	r25, Y+2	; 0x02
    2016:	80 81       	ld	r24, Z
    2018:	98 17       	cp	r25, r24
    201a:	19 f0       	breq	.+6      	; 0x2022
    DEBUG("sos_blk_mem_change_own: detect memory corruption %x\n", (int)blockptr);
    DEBUG("possible owner %d %d\n", blockptr->blockhdr.owner, BLOCK_GUARD_BYTE(blockptr));
    return -EINVAL;
    201c:	8a ee       	ldi	r24, 0xEA	; 234
    201e:	9f ef       	ldi	r25, 0xFF	; 255
    2020:	05 c0       	rjmp	.+10     	; 0x202c
  }
  BLOCK_GUARD_BYTE(blockptr) = id; 
    2022:	60 83       	st	Z, r22
#endif
  old_owner =  blockptr->blockhdr.owner;
  // Set the new block ID                                      
  blockptr->blockhdr.owner = id;        
    2024:	fd 01       	movw	r30, r26
    2026:	62 83       	std	Z+2, r22	; 0x02
  //ker_log( SOS_LOG_CHANGE_OWN, id, old_owner);  
  return SOS_OK;
    2028:	80 e0       	ldi	r24, 0x00	; 0
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	df 91       	pop	r29
    202e:	cf 91       	pop	r28
    2030:	08 95       	ret

00002032 <Unlink>:
}

void mem_start() 
{
#ifdef SOS_USE_GC
#ifdef SOS_USE_PREEMPTION
	ker_register_module(sos_get_header_address(mod_header));
#else
  sched_register_kernel_module(&malloc_module, sos_get_header_address(mod_header), NULL);
#endif // SOS_USE_PREEMPTION
#endif // SOS_USE_GC
}

int8_t mem_remove_all(sos_pid_t id)
{
  HAS_CRITICAL_SECTION;
  Block* block = (Block*)malloc_heap;

  ENTER_CRITICAL_SECTION();
  for (block = (Block*)malloc_heap; 
       block != mSentinel; 
       block += block->blockhdr.blocks & ~MEM_MASK) 
    {
      if ( (block->blockhdr.owner == id) && (block->blockhdr.blocks & RESERVED) ){
		ker_free(block->userPart);
      }		
    }
  //printMem("remove_all_end: ");
  LEAVE_CRITICAL_SECTION();
  return SOS_OK;
}


//-----------------------------------------------------------------------------
// Re-allocate the buffer to a new area the requested size. If possible the
// existing area is simply expanded. Otherwise a new area is allocated and
// the current contents copied.
// SFI Mode: 1. If call from untrusted domain, only owner is allowed to realloc
//-----------------------------------------------------------------------------
void* sos_blk_mem_realloc(void* pntr, uint16_t newSize, bool bCallFromModule)
{
  HAS_CRITICAL_SECTION;
  sos_pid_t id;
#ifdef SOS_PROFILE_FRAGMENTATION
  uint16_t old_blocks = 0;
#endif
#ifdef SOS_SFI
  uint16_t block_num;
  uint8_t perms;  
  uint16_t oldSize;
  int8_t domid;
#endif
  // Check for errors.
  //
  if ( (pntr == NULL ) || (newSize == 0) ) {
	  return pntr;
  }

  printMem("realloc start: ");
#ifdef SOS_SFI
  ENTER_CRITICAL_SECTION();
  // Get the permission of the first block
  block_num = MEMMAP_GET_BLK_NUM(pntr);
  MEMMAP_GET_PERMS(block_num, perms);
#ifdef SFI_DOMS_8
  if ((bCallFromModule) && ((perms & MEMMAP_DOM_MASK) != curr_dom_id))
#endif
#ifdef SFI_DOMS_2
  if ((bCallFromModule) && ((perms & MEMMAP_DOM_MASK) == KER_DOM_ID))
#endif
    {
      LEAVE_CRITICAL_SECTION();
      sfi_exception(MALLOC_EXCEPTION);
      // Error - Untrusted domain trying to realloc memory that it does not own or that is free.
    }
  domid = perms & MEMMAP_DOM_MASK;
  LEAVE_CRITICAL_SECTION();
#endif


  Block* block = TO_BLOCK_PTR(pntr);   // convert user to block address
  uint16_t reqBlocks = (newSize + BLOCKOVERHEAD + sizeof(Block) - 1) >> SHIFT_VALUE;

  ENTER_CRITICAL_SECTION();
  id = block->blockhdr.owner;
  block->blockhdr.blocks &= ~RESERVED;         // expose the size
#ifdef SOS_PROFILE_FRAGMENTATION
  old_blocks = block->blockhdr.blocks;
#endif
#ifdef SOS_SFI
  oldSize = BLOCKS_TO_BYTES(block->blockhdr.blocks);
#endif

  // The fastest option is to merge this block with any free blocks
  // that are contiguous with this block.
  //
  block = MergeBlocks(block);

  if (block->blockhdr.blocks > reqBlocks)
    {
      // The merge produced a larger block than required, so split it
      // into two blocks. This also takes care of the case where the
      // new size is less than the old.
      //
#ifdef SOS_PROFILE_FRAGMENTATION
	malloc_record_blocks( (int16_t) reqBlocks - (int16_t) old_blocks );	
#endif
      SplitBlock(block, reqBlocks);
	  
#ifdef SOS_SFI
      if (reqBlocks < oldSize){
	memmap_set_perms((Block*)(block + reqBlocks), 
			 (oldSize - reqBlocks)*(sizeof(Block)), 
			 MEMMAP_SEG_START|BLOCK_FREE);
      }
      else{
	memmap_set_perms((Block*)(block + oldSize),
			   (reqBlocks - oldSize)*(sizeof(Block)), 
			   DOM_SEG_LATER(domid));
      }
#endif
      
    }
  else if (block->blockhdr.blocks < reqBlocks)
    {
      // Could not expand this block. Must attempt to allocate
      // a new one the correct size and copy the current contents.
      //
#ifndef SOS_SFI
      uint16_t oldSize = BLOCKS_TO_BYTES(block->blockhdr.blocks);
#endif
	  block->blockhdr.blocks |= RESERVED;         // convert it back
      block = (Block*)ker_malloc(newSize, id);
      if (NULL != block)
        {
	  // A new block large enough has been allocated. Copy the
	  // existing data and then discard the old block.
	  //
	  block = TO_BLOCK_PTR(block);
	  memcpy(block->userPart, (Block*)(TO_BLOCK_PTR(pntr))->userPart, oldSize);
	  sos_blk_mem_free(pntr, bCallFromModule);
        }
      else
        {
	  // Cannot re-allocate this block. Note the old pointer
	  // is still valid.
	  //
	  LEAVE_CRITICAL_SECTION();
	  return NULL;        // no valid options
        }
    }
#ifdef SOS_SFI
  else if (block->blockhdr.blocks == reqBlocks)
    {
      memmap_set_perms((Block*)(block + oldSize), 
		       (reqBlocks - oldSize)*(sizeof(Block)), 
		       DOM_SEG_LATER(domid));
    }
#endif

  block->blockhdr.blocks |= RESERVED;
  block->blockhdr.owner = id;
#ifndef SOS_SFI                                
  BLOCK_GUARD_BYTE(block) = id; 
#endif
  LEAVE_CRITICAL_SECTION();
  printMem("realloc end: ");
  return block->userPart;
}
//-----------------------------------------------------------------------------
// Compute the number of blocks that will fit in the memory area defined.
// Allocate the pool of blocks. Note this includes the sentinel area that is 
// attached to the end and is always only one block. The first entry in the 
// free list pool is set to include all available blocks. The sentinel is 
// initialised to point back to the start of the pool.
//
void mem_init(void)
{
  Block* head;

  DEBUG("malloc init\n");
  mPool = malloc_heap;
  mSentinel = &(malloc_heap[NUM_HEAP_BLOCKS-1]);

  mSentinel->blockhdr.blocks = 1;
  mSentinel->blockhdr.blocks |= RESERVED;           // now cannot be used
  mSentinel->prev = mSentinel;
  mSentinel->next = mSentinel;

  // Entire pool is initially a single unallocated area.
  //
  head = &mPool[0];
  head->blockhdr.blocks = NUM_HEAP_BLOCKS-1;         // initially all of free memeory
  InsertAfter(head);                      // link the sentinel

#ifdef SOS_SFI
  memmap_init(); // Initialize all the memory to be owned by the kernel
  memmap_set_perms((void*) mPool, NUM_HEAP_BLOCKS * sizeof(Block), MEMMAP_SEG_START|BLOCK_FREE); // Init heap to unallocated
#endif

#ifdef SOS_PROFILE_FRAGMENTATION
	mf.num_blocks = 0;
	mf.num_outstanding = 0;
#endif

}

//-----------------------------------------------------------------------------
// As each area is examined for a fit, we also examine the following area. 
// If it is free then it must also be on the Free list. Being a doubly-linked 
// list, we can combine these two areas in constant time. If an area is 
// combined, the procedure then looks again at the following area, thus 
// repeatedly combining areas until a reserved area is found. In terminal 
// cases this will be the sentinel block.
//
static Block* MergeBlocks(Block* block)
{
  while (TRUE)
    {
      Block* successor = block + block->blockhdr.blocks;   // point to next area
      /*
	DEBUG("block = %x, blocks = %d, successor = %x, alloc = %d\n",
	(unsigned int)block,
	block->blockhdr.blocks,
	(unsigned int) successor,
	successor->blockhdr.blocks);
      */
      if (successor->blockhdr.blocks & RESERVED)           // done if reserved
        {
	  return block;
        }
      Unlink(successor);
      block->blockhdr.blocks += successor->blockhdr.blocks;         // add in its blocks
    }
}

static Block* MergeBlocksQuick(Block *block, uint16_t req_blocks)
{
  while (TRUE)
    {
      Block* successor = block + block->blockhdr.blocks;   // point to next area
      if (successor->blockhdr.blocks & RESERVED)           // done if reserved
	{
	  return block;
	}
      Unlink(successor);
      block->blockhdr.blocks += successor->blockhdr.blocks;         // add in its blocks
      if( block->blockhdr.blocks >= req_blocks ) {
	return block;
      }
    }
}


//-----------------------------------------------------------------------------
//
static void SplitBlock(Block* block, uint16_t reqBlocks)  
{
  Block* newBlock = block + reqBlocks;            // create a remainder area
  newBlock->blockhdr.blocks = block->blockhdr.blocks - reqBlocks;   // set its size and mark as free
  block->blockhdr.blocks = reqBlocks;                      // set us to requested size
  newBlock->blockhdr.blocks &= ~MEM_MASK;
  InsertAfter(newBlock);                          // stitch remainder into free list
}
    
//-----------------------------------------------------------------------------
//
static void InsertAfter(Block* block)
{
	/*
  Block* p = mSentinel->next;
  mSentinel->next = block;
  block->prev = mSentinel;
  block->next = p;
  p->prev = block;
  */

  Block *p = mSentinel->next;

  while( p < block && p != mSentinel) {
	  p = p->next;
  }
  p->prev->next = block;
  block->prev = p->prev;
  p->prev = block;
  block->next = p;
}

//-----------------------------------------------------------------------------
//
static void Unlink(Block* block)
{
    2032:	cf 93       	push	r28
    2034:	df 93       	push	r29
    2036:	fc 01       	movw	r30, r24
  block->prev->next = block->next;
    2038:	a3 81       	ldd	r26, Z+3	; 0x03
    203a:	b4 81       	ldd	r27, Z+4	; 0x04
    203c:	85 81       	ldd	r24, Z+5	; 0x05
    203e:	96 81       	ldd	r25, Z+6	; 0x06
    2040:	ed 01       	movw	r28, r26
    2042:	8d 83       	std	Y+5, r24	; 0x05
    2044:	9e 83       	std	Y+6, r25	; 0x06
  block->next->prev = block->prev;
    2046:	05 80       	ldd	r0, Z+5	; 0x05
    2048:	f6 81       	ldd	r31, Z+6	; 0x06
    204a:	e0 2d       	mov	r30, r0
    204c:	a3 83       	std	Z+3, r26	; 0x03
    204e:	b4 83       	std	Z+4, r27	; 0x04
    2050:	df 91       	pop	r29
    2052:	cf 91       	pop	r28
    2054:	08 95       	ret

00002056 <MergeBlocks>:
    2056:	0f 93       	push	r16
    2058:	1f 93       	push	r17
    205a:	cf 93       	push	r28
    205c:	df 93       	push	r29
    205e:	8c 01       	movw	r16, r24
    2060:	f8 01       	movw	r30, r16
    2062:	c0 81       	ld	r28, Z
    2064:	d1 81       	ldd	r29, Z+1	; 0x01
    2066:	93 e0       	ldi	r25, 0x03	; 3
    2068:	cc 0f       	add	r28, r28
    206a:	dd 1f       	adc	r29, r29
    206c:	9a 95       	dec	r25
    206e:	e1 f7       	brne	.-8      	; 0x2068
    2070:	c0 0f       	add	r28, r16
    2072:	d1 1f       	adc	r29, r17
    2074:	88 81       	ld	r24, Y
    2076:	99 81       	ldd	r25, Y+1	; 0x01
    2078:	99 23       	and	r25, r25
    207a:	6c f0       	brlt	.+26     	; 0x2096
    207c:	ce 01       	movw	r24, r28
    207e:	0e 94 19 10 	call	0x2032
    2082:	f8 01       	movw	r30, r16
    2084:	80 81       	ld	r24, Z
    2086:	91 81       	ldd	r25, Z+1	; 0x01
    2088:	28 81       	ld	r18, Y
    208a:	39 81       	ldd	r19, Y+1	; 0x01
    208c:	82 0f       	add	r24, r18
    208e:	93 1f       	adc	r25, r19
    2090:	80 83       	st	Z, r24
    2092:	91 83       	std	Z+1, r25	; 0x01
    2094:	e5 cf       	rjmp	.-54     	; 0x2060
    2096:	c8 01       	movw	r24, r16
    2098:	df 91       	pop	r29
    209a:	cf 91       	pop	r28
    209c:	1f 91       	pop	r17
    209e:	0f 91       	pop	r16
    20a0:	08 95       	ret

000020a2 <sos_blk_mem_longterm_alloc>:
    20a2:	cf 92       	push	r12
    20a4:	df 92       	push	r13
    20a6:	ef 92       	push	r14
    20a8:	ff 92       	push	r15
    20aa:	0f 93       	push	r16
    20ac:	1f 93       	push	r17
    20ae:	cf 93       	push	r28
    20b0:	df 93       	push	r29
    20b2:	c6 2e       	mov	r12, r22
    20b4:	00 e0       	ldi	r16, 0x00	; 0
    20b6:	10 e0       	ldi	r17, 0x00	; 0
    20b8:	00 97       	sbiw	r24, 0x00	; 0
    20ba:	11 f4       	brne	.+4      	; 0x20c0
    20bc:	c8 01       	movw	r24, r16
    20be:	6d c0       	rjmp	.+218    	; 0x219a
    20c0:	5b e0       	ldi	r21, 0x0B	; 11
    20c2:	e5 2e       	mov	r14, r21
    20c4:	f1 2c       	mov	r15, r1
    20c6:	e8 0e       	add	r14, r24
    20c8:	f9 1e       	adc	r15, r25
    20ca:	43 e0       	ldi	r20, 0x03	; 3
    20cc:	f6 94       	lsr	r15
    20ce:	e7 94       	ror	r14
    20d0:	4a 95       	dec	r20
    20d2:	e1 f7       	brne	.-8      	; 0x20cc
    20d4:	df b6       	in	r13, 0x3f	; 63
    20d6:	f8 94       	cli
    20d8:	e0 91 9d 01 	lds	r30, 0x019D
    20dc:	f0 91 9e 01 	lds	r31, 0x019E
    20e0:	a5 81       	ldd	r26, Z+5	; 0x05
    20e2:	b6 81       	ldd	r27, Z+6	; 0x06
    20e4:	ae 17       	cp	r26, r30
    20e6:	bf 07       	cpc	r27, r31
    20e8:	69 f0       	breq	.+26     	; 0x2104
    20ea:	cd 01       	movw	r24, r26
    20ec:	0e 94 2b 10 	call	0x2056
    20f0:	ec 01       	movw	r28, r24
    20f2:	ad 81       	ldd	r26, Y+5	; 0x05
    20f4:	be 81       	ldd	r27, Y+6	; 0x06
    20f6:	80 91 9d 01 	lds	r24, 0x019D
    20fa:	90 91 9e 01 	lds	r25, 0x019E
    20fe:	a8 17       	cp	r26, r24
    2100:	b9 07       	cpc	r27, r25
    2102:	99 f7       	brne	.-26     	; 0x20ea
    2104:	e0 91 9d 01 	lds	r30, 0x019D
    2108:	f0 91 9e 01 	lds	r31, 0x019E
    210c:	a5 81       	ldd	r26, Z+5	; 0x05
    210e:	b6 81       	ldd	r27, Z+6	; 0x06
    2110:	ae 17       	cp	r26, r30
    2112:	bf 07       	cpc	r27, r31
    2114:	99 f0       	breq	.+38     	; 0x213c
    2116:	0a 17       	cp	r16, r26
    2118:	1b 07       	cpc	r17, r27
    211a:	38 f4       	brcc	.+14     	; 0x212a
    211c:	8d 91       	ld	r24, X+
    211e:	9c 91       	ld	r25, X
    2120:	11 97       	sbiw	r26, 0x01	; 1
    2122:	8e 15       	cp	r24, r14
    2124:	9f 05       	cpc	r25, r15
    2126:	08 f0       	brcs	.+2      	; 0x212a
    2128:	8d 01       	movw	r16, r26
    212a:	ed 01       	movw	r28, r26
    212c:	ad 81       	ldd	r26, Y+5	; 0x05
    212e:	be 81       	ldd	r27, Y+6	; 0x06
    2130:	ae 17       	cp	r26, r30
    2132:	bf 07       	cpc	r27, r31
    2134:	81 f7       	brne	.-32     	; 0x2116
    2136:	01 15       	cp	r16, r1
    2138:	11 05       	cpc	r17, r1
    213a:	21 f4       	brne	.+8      	; 0x2144
    213c:	df be       	out	0x3f, r13	; 63
    213e:	80 e0       	ldi	r24, 0x00	; 0
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	2b c0       	rjmp	.+86     	; 0x219a
    2144:	f8 01       	movw	r30, r16
    2146:	80 81       	ld	r24, Z
    2148:	91 81       	ldd	r25, Z+1	; 0x01
    214a:	8e 19       	sub	r24, r14
    214c:	9f 09       	sbc	r25, r15
    214e:	ec 01       	movw	r28, r24
    2150:	33 e0       	ldi	r19, 0x03	; 3
    2152:	cc 0f       	add	r28, r28
    2154:	dd 1f       	adc	r29, r29
    2156:	3a 95       	dec	r19
    2158:	e1 f7       	brne	.-8      	; 0x2152
    215a:	c0 0f       	add	r28, r16
    215c:	d1 1f       	adc	r29, r17
    215e:	c0 17       	cp	r28, r16
    2160:	d1 07       	cpc	r29, r17
    2162:	21 f4       	brne	.+8      	; 0x216c
    2164:	ce 01       	movw	r24, r28
    2166:	0e 94 19 10 	call	0x2032
    216a:	05 c0       	rjmp	.+10     	; 0x2176
    216c:	f8 01       	movw	r30, r16
    216e:	80 83       	st	Z, r24
    2170:	91 83       	std	Z+1, r25	; 0x01
    2172:	e8 82       	st	Y, r14
    2174:	f9 82       	std	Y+1, r15	; 0x01
    2176:	e8 81       	ld	r30, Y
    2178:	f9 81       	ldd	r31, Y+1	; 0x01
    217a:	f0 68       	ori	r31, 0x80	; 128
    217c:	e8 83       	st	Y, r30
    217e:	f9 83       	std	Y+1, r31	; 0x01
    2180:	ca 82       	std	Y+2, r12	; 0x02
    2182:	23 e0       	ldi	r18, 0x03	; 3
    2184:	ee 0f       	add	r30, r30
    2186:	ff 1f       	adc	r31, r31
    2188:	2a 95       	dec	r18
    218a:	e1 f7       	brne	.-8      	; 0x2184
    218c:	ec 0f       	add	r30, r28
    218e:	fd 1f       	adc	r31, r29
    2190:	31 97       	sbiw	r30, 0x01	; 1
    2192:	c0 82       	st	Z, r12
    2194:	df be       	out	0x3f, r13	; 63
    2196:	ce 01       	movw	r24, r28
    2198:	03 96       	adiw	r24, 0x03	; 3
    219a:	df 91       	pop	r29
    219c:	cf 91       	pop	r28
    219e:	1f 91       	pop	r17
    21a0:	0f 91       	pop	r16
    21a2:	ff 90       	pop	r15
    21a4:	ef 90       	pop	r14
    21a6:	df 90       	pop	r13
    21a8:	cf 90       	pop	r12
    21aa:	08 95       	ret

000021ac <InsertAfter>:
    21ac:	cf 93       	push	r28
    21ae:	df 93       	push	r29
    21b0:	ec 01       	movw	r28, r24
    21b2:	80 91 9d 01 	lds	r24, 0x019D
    21b6:	90 91 9e 01 	lds	r25, 0x019E
    21ba:	fc 01       	movw	r30, r24
    21bc:	04 c0       	rjmp	.+8      	; 0x21c6
    21be:	a8 17       	cp	r26, r24
    21c0:	b9 07       	cpc	r27, r25
    21c2:	31 f0       	breq	.+12     	; 0x21d0
    21c4:	fd 01       	movw	r30, r26
    21c6:	a5 81       	ldd	r26, Z+5	; 0x05
    21c8:	b6 81       	ldd	r27, Z+6	; 0x06
    21ca:	ac 17       	cp	r26, r28
    21cc:	bd 07       	cpc	r27, r29
    21ce:	b8 f3       	brcs	.-18     	; 0x21be
    21d0:	fd 01       	movw	r30, r26
    21d2:	83 81       	ldd	r24, Z+3	; 0x03
    21d4:	94 81       	ldd	r25, Z+4	; 0x04
    21d6:	fc 01       	movw	r30, r24
    21d8:	c5 83       	std	Z+5, r28	; 0x05
    21da:	d6 83       	std	Z+6, r29	; 0x06
    21dc:	8b 83       	std	Y+3, r24	; 0x03
    21de:	9c 83       	std	Y+4, r25	; 0x04
    21e0:	fd 01       	movw	r30, r26
    21e2:	c3 83       	std	Z+3, r28	; 0x03
    21e4:	d4 83       	std	Z+4, r29	; 0x04
    21e6:	ad 83       	std	Y+5, r26	; 0x05
    21e8:	be 83       	std	Y+6, r27	; 0x06
    21ea:	df 91       	pop	r29
    21ec:	cf 91       	pop	r28
    21ee:	08 95       	ret

000021f0 <SplitBlock>:
    21f0:	dc 01       	movw	r26, r24
    21f2:	9b 01       	movw	r18, r22
    21f4:	fb 01       	movw	r30, r22
    21f6:	63 e0       	ldi	r22, 0x03	; 3
    21f8:	ee 0f       	add	r30, r30
    21fa:	ff 1f       	adc	r31, r31
    21fc:	6a 95       	dec	r22
    21fe:	e1 f7       	brne	.-8      	; 0x21f8
    2200:	e8 0f       	add	r30, r24
    2202:	f9 1f       	adc	r31, r25
    2204:	8d 91       	ld	r24, X+
    2206:	9c 91       	ld	r25, X
    2208:	11 97       	sbiw	r26, 0x01	; 1
    220a:	82 1b       	sub	r24, r18
    220c:	93 0b       	sbc	r25, r19
    220e:	80 83       	st	Z, r24
    2210:	91 83       	std	Z+1, r25	; 0x01
    2212:	2d 93       	st	X+, r18
    2214:	3c 93       	st	X, r19
    2216:	80 81       	ld	r24, Z
    2218:	91 81       	ldd	r25, Z+1	; 0x01
    221a:	9f 73       	andi	r25, 0x3F	; 63
    221c:	80 83       	st	Z, r24
    221e:	91 83       	std	Z+1, r25	; 0x01
    2220:	cf 01       	movw	r24, r30
    2222:	0e 94 d6 10 	call	0x21ac
    2226:	08 95       	ret

00002228 <sos_blk_mem_alloc>:
    2228:	cf 92       	push	r12
    222a:	df 92       	push	r13
    222c:	ef 92       	push	r14
    222e:	ff 92       	push	r15
    2230:	0f 93       	push	r16
    2232:	1f 93       	push	r17
    2234:	cf 93       	push	r28
    2236:	df 93       	push	r29
    2238:	c6 2e       	mov	r12, r22
    223a:	00 97       	sbiw	r24, 0x00	; 0
    223c:	09 f4       	brne	.+2      	; 0x2240
    223e:	6f c0       	rjmp	.+222    	; 0x231e
    2240:	ab e0       	ldi	r26, 0x0B	; 11
    2242:	ea 2e       	mov	r14, r26
    2244:	f1 2c       	mov	r15, r1
    2246:	e8 0e       	add	r14, r24
    2248:	f9 1e       	adc	r15, r25
    224a:	f3 e0       	ldi	r31, 0x03	; 3
    224c:	f6 94       	lsr	r15
    224e:	e7 94       	ror	r14
    2250:	fa 95       	dec	r31
    2252:	e1 f7       	brne	.-8      	; 0x224c
    2254:	df b6       	in	r13, 0x3f	; 63
    2256:	f8 94       	cli
    2258:	e0 91 9d 01 	lds	r30, 0x019D
    225c:	f0 91 9e 01 	lds	r31, 0x019E
    2260:	05 81       	ldd	r16, Z+5	; 0x05
    2262:	16 81       	ldd	r17, Z+6	; 0x06
    2264:	0e 17       	cp	r16, r30
    2266:	1f 07       	cpc	r17, r31
    2268:	69 f1       	breq	.+90     	; 0x22c4
    226a:	d8 01       	movw	r26, r16
    226c:	cd 91       	ld	r28, X+
    226e:	dc 91       	ld	r29, X
    2270:	e3 e0       	ldi	r30, 0x03	; 3
    2272:	cc 0f       	add	r28, r28
    2274:	dd 1f       	adc	r29, r29
    2276:	ea 95       	dec	r30
    2278:	e1 f7       	brne	.-8      	; 0x2272
    227a:	c0 0f       	add	r28, r16
    227c:	d1 1f       	adc	r29, r17
    227e:	88 81       	ld	r24, Y
    2280:	99 81       	ldd	r25, Y+1	; 0x01
    2282:	99 23       	and	r25, r25
    2284:	7c f0       	brlt	.+30     	; 0x22a4
    2286:	ce 01       	movw	r24, r28
    2288:	0e 94 19 10 	call	0x2032
    228c:	f8 01       	movw	r30, r16
    228e:	80 81       	ld	r24, Z
    2290:	91 81       	ldd	r25, Z+1	; 0x01
    2292:	28 81       	ld	r18, Y
    2294:	39 81       	ldd	r19, Y+1	; 0x01
    2296:	82 0f       	add	r24, r18
    2298:	93 1f       	adc	r25, r19
    229a:	80 83       	st	Z, r24
    229c:	91 83       	std	Z+1, r25	; 0x01
    229e:	8e 15       	cp	r24, r14
    22a0:	9f 05       	cpc	r25, r15
    22a2:	18 f3       	brcs	.-58     	; 0x226a
    22a4:	d8 01       	movw	r26, r16
    22a6:	8d 91       	ld	r24, X+
    22a8:	9c 91       	ld	r25, X
    22aa:	8e 15       	cp	r24, r14
    22ac:	9f 05       	cpc	r25, r15
    22ae:	50 f4       	brcc	.+20     	; 0x22c4
    22b0:	e8 01       	movw	r28, r16
    22b2:	0d 81       	ldd	r16, Y+5	; 0x05
    22b4:	1e 81       	ldd	r17, Y+6	; 0x06
    22b6:	80 91 9d 01 	lds	r24, 0x019D
    22ba:	90 91 9e 01 	lds	r25, 0x019E
    22be:	08 17       	cp	r16, r24
    22c0:	19 07       	cpc	r17, r25
    22c2:	99 f6       	brne	.-90     	; 0x226a
    22c4:	80 91 9d 01 	lds	r24, 0x019D
    22c8:	90 91 9e 01 	lds	r25, 0x019E
    22cc:	08 17       	cp	r16, r24
    22ce:	19 07       	cpc	r17, r25
    22d0:	21 f4       	brne	.+8      	; 0x22da
    22d2:	df be       	out	0x3f, r13	; 63
    22d4:	80 e0       	ldi	r24, 0x00	; 0
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	22 c0       	rjmp	.+68     	; 0x231e
    22da:	f8 01       	movw	r30, r16
    22dc:	80 81       	ld	r24, Z
    22de:	91 81       	ldd	r25, Z+1	; 0x01
    22e0:	e8 16       	cp	r14, r24
    22e2:	f9 06       	cpc	r15, r25
    22e4:	20 f4       	brcc	.+8      	; 0x22ee
    22e6:	b7 01       	movw	r22, r14
    22e8:	c8 01       	movw	r24, r16
    22ea:	0e 94 f8 10 	call	0x21f0
    22ee:	c8 01       	movw	r24, r16
    22f0:	0e 94 19 10 	call	0x2032
    22f4:	d8 01       	movw	r26, r16
    22f6:	ed 91       	ld	r30, X+
    22f8:	fc 91       	ld	r31, X
    22fa:	11 97       	sbiw	r26, 0x01	; 1
    22fc:	f0 68       	ori	r31, 0x80	; 128
    22fe:	ed 93       	st	X+, r30
    2300:	fc 93       	st	X, r31
    2302:	e8 01       	movw	r28, r16
    2304:	ca 82       	std	Y+2, r12	; 0x02
    2306:	73 e0       	ldi	r23, 0x03	; 3
    2308:	ee 0f       	add	r30, r30
    230a:	ff 1f       	adc	r31, r31
    230c:	7a 95       	dec	r23
    230e:	e1 f7       	brne	.-8      	; 0x2308
    2310:	e0 0f       	add	r30, r16
    2312:	f1 1f       	adc	r31, r17
    2314:	31 97       	sbiw	r30, 0x01	; 1
    2316:	c0 82       	st	Z, r12
    2318:	df be       	out	0x3f, r13	; 63
    231a:	c8 01       	movw	r24, r16
    231c:	03 96       	adiw	r24, 0x03	; 3
    231e:	df 91       	pop	r29
    2320:	cf 91       	pop	r28
    2322:	1f 91       	pop	r17
    2324:	0f 91       	pop	r16
    2326:	ff 90       	pop	r15
    2328:	ef 90       	pop	r14
    232a:	df 90       	pop	r13
    232c:	cf 90       	pop	r12
    232e:	08 95       	ret

00002330 <sos_blk_mem_free>:
    2330:	1f 93       	push	r17
    2332:	cf 93       	push	r28
    2334:	df 93       	push	r29
    2336:	00 97       	sbiw	r24, 0x00	; 0
    2338:	41 f1       	breq	.+80     	; 0x238a
    233a:	dc 01       	movw	r26, r24
    233c:	13 97       	sbiw	r26, 0x03	; 3
    233e:	81 e0       	ldi	r24, 0x01	; 1
    2340:	af 39       	cpi	r26, 0x9F	; 159
    2342:	b8 07       	cpc	r27, r24
    2344:	10 f1       	brcs	.+68     	; 0x238a
    2346:	c9 e0       	ldi	r28, 0x09	; 9
    2348:	af 39       	cpi	r26, 0x9F	; 159
    234a:	bc 07       	cpc	r27, r28
    234c:	f0 f4       	brcc	.+60     	; 0x238a
    234e:	2d 91       	ld	r18, X+
    2350:	3c 91       	ld	r19, X
    2352:	11 97       	sbiw	r26, 0x01	; 1
    2354:	3f 73       	andi	r19, 0x3F	; 63
    2356:	f9 01       	movw	r30, r18
    2358:	c3 e0       	ldi	r28, 0x03	; 3
    235a:	ee 0f       	add	r30, r30
    235c:	ff 1f       	adc	r31, r31
    235e:	ca 95       	dec	r28
    2360:	e1 f7       	brne	.-8      	; 0x235a
    2362:	ea 0f       	add	r30, r26
    2364:	fb 1f       	adc	r31, r27
    2366:	31 97       	sbiw	r30, 0x01	; 1
    2368:	ed 01       	movw	r28, r26
    236a:	9a 81       	ldd	r25, Y+2	; 0x02
    236c:	80 81       	ld	r24, Z
    236e:	98 17       	cp	r25, r24
    2370:	61 f4       	brne	.+24     	; 0x238a
    2372:	1f b7       	in	r17, 0x3f	; 63
    2374:	f8 94       	cli
    2376:	2d 93       	st	X+, r18
    2378:	3c 93       	st	X, r19
    237a:	11 97       	sbiw	r26, 0x01	; 1
    237c:	8f ef       	ldi	r24, 0xFF	; 255
    237e:	fd 01       	movw	r30, r26
    2380:	82 83       	std	Z+2, r24	; 0x02
    2382:	cd 01       	movw	r24, r26
    2384:	0e 94 d6 10 	call	0x21ac
    2388:	1f bf       	out	0x3f, r17	; 63
    238a:	df 91       	pop	r29
    238c:	cf 91       	pop	r28
    238e:	1f 91       	pop	r17
    2390:	08 95       	ret

00002392 <mem_start>:
    2392:	08 95       	ret

00002394 <mem_remove_all>:
    2394:	0f 93       	push	r16
    2396:	1f 93       	push	r17
    2398:	cf 93       	push	r28
    239a:	df 93       	push	r29
    239c:	08 2f       	mov	r16, r24
    239e:	cf e9       	ldi	r28, 0x9F	; 159
    23a0:	d1 e0       	ldi	r29, 0x01	; 1
    23a2:	1f b7       	in	r17, 0x3f	; 63
    23a4:	f8 94       	cli
    23a6:	80 91 9d 01 	lds	r24, 0x019D
    23aa:	90 91 9e 01 	lds	r25, 0x019E
    23ae:	c8 17       	cp	r28, r24
    23b0:	d9 07       	cpc	r29, r25
    23b2:	b1 f0       	breq	.+44     	; 0x23e0
    23b4:	8a 81       	ldd	r24, Y+2	; 0x02
    23b6:	80 17       	cp	r24, r16
    23b8:	49 f4       	brne	.+18     	; 0x23cc
    23ba:	88 81       	ld	r24, Y
    23bc:	99 81       	ldd	r25, Y+1	; 0x01
    23be:	97 ff       	sbrs	r25, 7
    23c0:	05 c0       	rjmp	.+10     	; 0x23cc
 * @return void
 */
static inline void ker_free(void* ptr)
{
  sos_blk_mem_free(ptr, false);
    23c2:	60 e0       	ldi	r22, 0x00	; 0
    23c4:	ce 01       	movw	r24, r28
    23c6:	03 96       	adiw	r24, 0x03	; 3
    23c8:	0e 94 98 11 	call	0x2330
    23cc:	88 81       	ld	r24, Y
    23ce:	99 81       	ldd	r25, Y+1	; 0x01
    23d0:	23 e0       	ldi	r18, 0x03	; 3
    23d2:	88 0f       	add	r24, r24
    23d4:	99 1f       	adc	r25, r25
    23d6:	2a 95       	dec	r18
    23d8:	e1 f7       	brne	.-8      	; 0x23d2
    23da:	c8 0f       	add	r28, r24
    23dc:	d9 1f       	adc	r29, r25
    23de:	e3 cf       	rjmp	.-58     	; 0x23a6
    23e0:	1f bf       	out	0x3f, r17	; 63
    23e2:	80 e0       	ldi	r24, 0x00	; 0
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	df 91       	pop	r29
    23e8:	cf 91       	pop	r28
    23ea:	1f 91       	pop	r17
    23ec:	0f 91       	pop	r16
    23ee:	08 95       	ret

000023f0 <sos_blk_mem_realloc>:
    23f0:	9f 92       	push	r9
    23f2:	af 92       	push	r10
    23f4:	bf 92       	push	r11
    23f6:	cf 92       	push	r12
    23f8:	df 92       	push	r13
    23fa:	ef 92       	push	r14
    23fc:	ff 92       	push	r15
    23fe:	0f 93       	push	r16
    2400:	1f 93       	push	r17
    2402:	cf 93       	push	r28
    2404:	df 93       	push	r29
    2406:	6c 01       	movw	r12, r24
    2408:	8b 01       	movw	r16, r22
    240a:	94 2e       	mov	r9, r20
    240c:	00 97       	sbiw	r24, 0x00	; 0
    240e:	11 f0       	breq	.+4      	; 0x2414
    2410:	67 2b       	or	r22, r23
    2412:	11 f4       	brne	.+4      	; 0x2418
    2414:	b6 01       	movw	r22, r12
    2416:	5d c0       	rjmp	.+186    	; 0x24d2
    2418:	ec 01       	movw	r28, r24
    241a:	23 97       	sbiw	r28, 0x03	; 3
    241c:	05 5f       	subi	r16, 0xF5	; 245
    241e:	1f 4f       	sbci	r17, 0xFF	; 255
    2420:	78 01       	movw	r14, r16
    2422:	53 e0       	ldi	r21, 0x03	; 3
    2424:	f6 94       	lsr	r15
    2426:	e7 94       	ror	r14
    2428:	5a 95       	dec	r21
    242a:	e1 f7       	brne	.-8      	; 0x2424
    242c:	0b 50       	subi	r16, 0x0B	; 11
    242e:	10 40       	sbci	r17, 0x00	; 0
    2430:	bf b6       	in	r11, 0x3f	; 63
    2432:	f8 94       	cli
    2434:	aa 80       	ldd	r10, Y+2	; 0x02
    2436:	88 81       	ld	r24, Y
    2438:	99 81       	ldd	r25, Y+1	; 0x01
    243a:	9f 77       	andi	r25, 0x7F	; 127
    243c:	88 83       	st	Y, r24
    243e:	99 83       	std	Y+1, r25	; 0x01
    2440:	ce 01       	movw	r24, r28
    2442:	0e 94 2b 10 	call	0x2056
    2446:	ec 01       	movw	r28, r24
    2448:	88 81       	ld	r24, Y
    244a:	99 81       	ldd	r25, Y+1	; 0x01
    244c:	e8 16       	cp	r14, r24
    244e:	f9 06       	cpc	r15, r25
    2450:	28 f4       	brcc	.+10     	; 0x245c
    2452:	b7 01       	movw	r22, r14
    2454:	ce 01       	movw	r24, r28
    2456:	0e 94 f8 10 	call	0x21f0
    245a:	28 c0       	rjmp	.+80     	; 0x24ac
    245c:	8e 15       	cp	r24, r14
    245e:	9f 05       	cpc	r25, r15
    2460:	28 f5       	brcc	.+74     	; 0x24ac
    2462:	7c 01       	movw	r14, r24
    2464:	43 e0       	ldi	r20, 0x03	; 3
    2466:	ee 0c       	add	r14, r14
    2468:	ff 1c       	adc	r15, r15
    246a:	4a 95       	dec	r20
    246c:	e1 f7       	brne	.-8      	; 0x2466
    246e:	2d ef       	ldi	r18, 0xFD	; 253
    2470:	3f ef       	ldi	r19, 0xFF	; 255
    2472:	e2 0e       	add	r14, r18
    2474:	f3 1e       	adc	r15, r19
    2476:	90 68       	ori	r25, 0x80	; 128
    2478:	88 83       	st	Y, r24
    247a:	99 83       	std	Y+1, r25	; 0x01
 * Will return a NULL pointer if the call to sys_malloc fails.
 */
static inline void *ker_malloc(uint16_t size, sos_pid_t id)
{
  return sos_blk_mem_alloc(size, id, false);
    247c:	40 e0       	ldi	r20, 0x00	; 0
    247e:	6a 2d       	mov	r22, r10
    2480:	c8 01       	movw	r24, r16
    2482:	0e 94 14 11 	call	0x2228
    2486:	ec 01       	movw	r28, r24
    2488:	89 2b       	or	r24, r25
    248a:	61 f0       	breq	.+24     	; 0x24a4
    248c:	23 97       	sbiw	r28, 0x03	; 3
    248e:	a7 01       	movw	r20, r14
    2490:	b6 01       	movw	r22, r12
    2492:	ce 01       	movw	r24, r28
    2494:	03 96       	adiw	r24, 0x03	; 3
    2496:	0e 94 56 59 	call	0xb2ac
    249a:	69 2d       	mov	r22, r9
    249c:	c6 01       	movw	r24, r12
    249e:	0e 94 98 11 	call	0x2330
    24a2:	04 c0       	rjmp	.+8      	; 0x24ac
    24a4:	bf be       	out	0x3f, r11	; 63
    24a6:	60 e0       	ldi	r22, 0x00	; 0
    24a8:	70 e0       	ldi	r23, 0x00	; 0
    24aa:	13 c0       	rjmp	.+38     	; 0x24d2
    24ac:	e8 81       	ld	r30, Y
    24ae:	f9 81       	ldd	r31, Y+1	; 0x01
    24b0:	f0 68       	ori	r31, 0x80	; 128
    24b2:	e8 83       	st	Y, r30
    24b4:	f9 83       	std	Y+1, r31	; 0x01
    24b6:	aa 82       	std	Y+2, r10	; 0x02
    24b8:	33 e0       	ldi	r19, 0x03	; 3
    24ba:	ee 0f       	add	r30, r30
    24bc:	ff 1f       	adc	r31, r31
    24be:	3a 95       	dec	r19
    24c0:	e1 f7       	brne	.-8      	; 0x24ba
    24c2:	ec 0f       	add	r30, r28
    24c4:	fd 1f       	adc	r31, r29
    24c6:	31 97       	sbiw	r30, 0x01	; 1
    24c8:	a0 82       	st	Z, r10
    24ca:	bf be       	out	0x3f, r11	; 63
    24cc:	be 01       	movw	r22, r28
    24ce:	6d 5f       	subi	r22, 0xFD	; 253
    24d0:	7f 4f       	sbci	r23, 0xFF	; 255
    24d2:	cb 01       	movw	r24, r22
    24d4:	df 91       	pop	r29
    24d6:	cf 91       	pop	r28
    24d8:	1f 91       	pop	r17
    24da:	0f 91       	pop	r16
    24dc:	ff 90       	pop	r15
    24de:	ef 90       	pop	r14
    24e0:	df 90       	pop	r13
    24e2:	cf 90       	pop	r12
    24e4:	bf 90       	pop	r11
    24e6:	af 90       	pop	r10
    24e8:	9f 90       	pop	r9
    24ea:	08 95       	ret

000024ec <mem_init>:
    24ec:	4f e9       	ldi	r20, 0x9F	; 159
    24ee:	51 e0       	ldi	r21, 0x01	; 1
    24f0:	50 93 9c 01 	sts	0x019C, r21
    24f4:	40 93 9b 01 	sts	0x019B, r20
    24f8:	9a 01       	movw	r18, r20
    24fa:	28 50       	subi	r18, 0x08	; 8
    24fc:	38 4f       	sbci	r19, 0xF8	; 248
    24fe:	30 93 9e 01 	sts	0x019E, r19
    2502:	20 93 9d 01 	sts	0x019D, r18
    2506:	81 e0       	ldi	r24, 0x01	; 1
    2508:	90 e8       	ldi	r25, 0x80	; 128
    250a:	90 93 98 09 	sts	0x0998, r25
    250e:	80 93 97 09 	sts	0x0997, r24
    2512:	30 93 9b 09 	sts	0x099B, r19
    2516:	20 93 9a 09 	sts	0x099A, r18
    251a:	30 93 9d 09 	sts	0x099D, r19
    251e:	20 93 9c 09 	sts	0x099C, r18
    2522:	8f ef       	ldi	r24, 0xFF	; 255
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	90 93 a0 01 	sts	0x01A0, r25
    252a:	80 93 9f 01 	sts	0x019F, r24
    252e:	ca 01       	movw	r24, r20
    2530:	0e 94 d6 10 	call	0x21ac
    2534:	08 95       	ret

00002536 <ker_gc_mark>:
}

#if 0
static inline void mem_defrag()
{
  HAS_CRITICAL_SECTION;
  Block* block;
  ENTER_CRITICAL_SECTION();
  printMem("before defrag\n");
  for (block = mSentinel->next; block != mSentinel; block = block->next)
    {
      block = MergeBlocks(block);
    }
  printMem("after defrag\n");
  LEAVE_CRITICAL_SECTION();
}
#endif

#ifdef SOS_USE_GC
static int8_t mem_handler(void *state, Message *msg)
{
  switch(msg->type){
  case MSG_TIMER_TIMEOUT:
    {
      //mem_defrag();
	  //led_yellow_toggle();
	  malloc_gc_kernel();
	  //led_yellow_toggle();
      break;
    }
  case MSG_INIT:
    {
      ker_timer_init(KER_MEM_PID, 0, TIMER_REPEAT);
      ker_timer_start(KER_MEM_PID, 0, MEM_GC_PERIOD);
      break;
    }
  case MSG_DEBUG:
    {
      break;
    }
  default:
    return -EINVAL;
  }
  return SOS_OK;
}
#endif /* #ifdef SOS_USE_GC */

#if 0
static void verify_memory( void )
{
  Block* block;
  block = (Block*)malloc_heap;
  Block* next_block;
  while(block != mSentinel) {
    next_block = block + (block->blockhdr.blocks & ~MEM_MASK);
    if( block->blockhdr.blocks & RESERVED ) {
      if( block->blockhdr.owner != BLOCK_GUARD_BYTE(block) ) {
	ker_led(LED_RED_TOGGLE);
	return;
      }
    }
    if( next_block != mSentinel) {
      if( (next_block->blockhdr.blocks & ~MEM_MASK) > ((MALLOC_HEAP_SIZE + (BLOCK_SIZE - 1))/BLOCK_SIZE) ) {
	ker_led(LED_GREEN_TOGGLE);
	ker_led(LED_RED_TOGGLE);
	return;
      }	
    }
    block = next_block;
  }

}
#endif

int8_t ker_gc_mark( sos_pid_t pid, void *pntr )
{
    2536:	48 2f       	mov	r20, r24
	Block* baseArea;   // convert to a block address
	Block* itr;
	
	baseArea = TO_BLOCK_PTR(pntr);   // convert to a block address
    2538:	63 50       	subi	r22, 0x03	; 3
    253a:	70 40       	sbci	r23, 0x00	; 0
	
	if ( (baseArea < malloc_heap) || (baseArea >= (malloc_heap + NUM_HEAP_BLOCKS)) ) {
    253c:	81 e0       	ldi	r24, 0x01	; 1
    253e:	6f 39       	cpi	r22, 0x9F	; 159
    2540:	78 07       	cpc	r23, r24
    2542:	10 f1       	brcs	.+68     	; 0x2588
    2544:	89 e0       	ldi	r24, 0x09	; 9
    2546:	6f 39       	cpi	r22, 0x9F	; 159
    2548:	78 07       	cpc	r23, r24
    254a:	38 f0       	brcs	.+14     	; 0x255a
    254c:	1d c0       	rjmp	.+58     	; 0x2588
		// Not a valid block
		return -EINVAL;
	}
	
	//
	// Traverse the memory list to make sure that this is a valid memory block
	//
	itr = (Block*)malloc_heap;
	while(itr != mSentinel && itr >= malloc_heap && itr < &(malloc_heap[NUM_HEAP_BLOCKS])) {
		if( itr == baseArea ) {
			if( (itr->blockhdr.owner == pid) && 
					((itr->blockhdr.blocks & RESERVED) != 0)) {
				DEBUG_GC("Mark memory: %d\n", (int) itr->userPart);
#ifdef SOS_PROFILE_FRAGMENTATION
				ker_gc_bytes_temp += BLOCKS_TO_BYTES(itr->blockhdr.blocks);
#endif
				itr->blockhdr.blocks |= GC_MARK;
    254e:	90 64       	ori	r25, 0x40	; 64
    2550:	80 83       	st	Z, r24
    2552:	91 83       	std	Z+1, r25	; 0x01
				return SOS_OK;
    2554:	80 e0       	ldi	r24, 0x00	; 0
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	08 95       	ret
    255a:	ef e9       	ldi	r30, 0x9F	; 159
    255c:	f1 e0       	ldi	r31, 0x01	; 1
			}
			return -EINVAL;
		}
		itr += itr->blockhdr.blocks & ~MEM_MASK;
    255e:	20 91 9d 01 	lds	r18, 0x019D
    2562:	30 91 9e 01 	lds	r19, 0x019E
    2566:	e2 17       	cp	r30, r18
    2568:	f3 07       	cpc	r31, r19
    256a:	09 f1       	breq	.+66     	; 0x25ae
    256c:	89 e0       	ldi	r24, 0x09	; 9
    256e:	ef 39       	cpi	r30, 0x9F	; 159
    2570:	f8 07       	cpc	r31, r24
    2572:	e8 f4       	brcc	.+58     	; 0x25ae
    2574:	e6 17       	cp	r30, r22
    2576:	f7 07       	cpc	r31, r23
    2578:	51 f4       	brne	.+20     	; 0x258e
    257a:	82 81       	ldd	r24, Z+2	; 0x02
    257c:	84 17       	cp	r24, r20
    257e:	21 f4       	brne	.+8      	; 0x2588
    2580:	80 81       	ld	r24, Z
    2582:	91 81       	ldd	r25, Z+1	; 0x01
    2584:	99 23       	and	r25, r25
    2586:	1c f3       	brlt	.-58     	; 0x254e
    2588:	8a ee       	ldi	r24, 0xEA	; 234
    258a:	9f ef       	ldi	r25, 0xFF	; 255
    258c:	08 95       	ret
    258e:	80 81       	ld	r24, Z
    2590:	91 81       	ldd	r25, Z+1	; 0x01
    2592:	a3 e0       	ldi	r26, 0x03	; 3
    2594:	88 0f       	add	r24, r24
    2596:	99 1f       	adc	r25, r25
    2598:	aa 95       	dec	r26
    259a:	e1 f7       	brne	.-8      	; 0x2594
    259c:	e8 0f       	add	r30, r24
    259e:	f9 1f       	adc	r31, r25
    25a0:	e2 17       	cp	r30, r18
    25a2:	f3 07       	cpc	r31, r19
    25a4:	21 f0       	breq	.+8      	; 0x25ae
    25a6:	81 e0       	ldi	r24, 0x01	; 1
    25a8:	ef 39       	cpi	r30, 0x9F	; 159
    25aa:	f8 07       	cpc	r31, r24
    25ac:	f8 f6       	brcc	.-66     	; 0x256c
	}
	return -EINVAL;
    25ae:	8a ee       	ldi	r24, 0xEA	; 234
    25b0:	9f ef       	ldi	r25, 0xFF	; 255
}
    25b2:	08 95       	ret
    25b4:	08 95       	ret

000025b6 <malloc_gc>:

//
// GC a module
//
void malloc_gc(sos_pid_t pid)
{
    25b6:	1f 93       	push	r17
    25b8:	cf 93       	push	r28
    25ba:	df 93       	push	r29
    25bc:	18 2f       	mov	r17, r24
#ifdef SOS_DEBUG_GC
	int i;
#endif
	Block* block = (Block*)malloc_heap;
    25be:	cf e9       	ldi	r28, 0x9F	; 159
    25c0:	d1 e0       	ldi	r29, 0x01	; 1
	//
	// Traverse the memory
	// Look for matching pid
	// If the memory is reserved and is not marked, free it
	//
	for (block = (Block*)malloc_heap; 
    25c2:	80 91 9d 01 	lds	r24, 0x019D
    25c6:	90 91 9e 01 	lds	r25, 0x019E
    25ca:	c8 17       	cp	r28, r24
    25cc:	d9 07       	cpc	r29, r25
    25ce:	c1 f1       	breq	.+112    	; 0x2640
    25d0:	89 e0       	ldi	r24, 0x09	; 9
    25d2:	cf 39       	cpi	r28, 0x9F	; 159
    25d4:	d8 07       	cpc	r29, r24
    25d6:	a0 f5       	brcc	.+104    	; 0x2640
       block != mSentinel && block >= malloc_heap && block < &(malloc_heap[NUM_HEAP_BLOCKS]); 
       block += block->blockhdr.blocks & ~MEM_MASK) 
    {
		if ( (block->blockhdr.owner == pid) &&
    25d8:	8a 81       	ldd	r24, Y+2	; 0x02
    25da:	81 17       	cp	r24, r17
    25dc:	c9 f4       	brne	.+50     	; 0x2610
    25de:	28 81       	ld	r18, Y
    25e0:	39 81       	ldd	r19, Y+1	; 0x01
    25e2:	37 ff       	sbrs	r19, 7
    25e4:	15 c0       	rjmp	.+42     	; 0x2610
		((block->blockhdr.blocks & RESERVED) != 0) ) { 
			if( ((block->blockhdr.blocks & GC_MARK) == 0) ){
    25e6:	c9 01       	movw	r24, r18
    25e8:	84 e0       	ldi	r24, 0x04	; 4
    25ea:	98 9f       	mul	r25, r24
    25ec:	81 2d       	mov	r24, r1
    25ee:	99 27       	eor	r25, r25
    25f0:	11 24       	eor	r1, r1
    25f2:	80 fd       	sbrc	r24, 0
    25f4:	0a c0       	rjmp	.+20     	; 0x260a
				DEBUG_GC("Found memory leak: %d\n", (int) block->userPart);
#ifdef SOS_PROFILE_FRAGMENTATION
				mf.leak_pid = pid;
#else
				led_red_toggle();
    25f6:	8b b3       	in	r24, 0x1b	; 27
    25f8:	94 e0       	ldi	r25, 0x04	; 4
    25fa:	89 27       	eor	r24, r25
    25fc:	8b bb       	out	0x1b, r24	; 27
 * @return void
 */
static inline void ker_free(void* ptr)
{
  sos_blk_mem_free(ptr, false);
    25fe:	60 e0       	ldi	r22, 0x00	; 0
    2600:	ce 01       	movw	r24, r28
    2602:	03 96       	adiw	r24, 0x03	; 3
    2604:	0e 94 98 11 	call	0x2330
    2608:	03 c0       	rjmp	.+6      	; 0x2610
#endif

				ker_free(block->userPart);
			} else {
				block->blockhdr.blocks &= ~GC_MARK;
    260a:	3f 7b       	andi	r19, 0xBF	; 191
    260c:	28 83       	st	Y, r18
    260e:	39 83       	std	Y+1, r19	; 0x01
    2610:	88 81       	ld	r24, Y
    2612:	99 81       	ldd	r25, Y+1	; 0x01
    2614:	b3 e0       	ldi	r27, 0x03	; 3
    2616:	88 0f       	add	r24, r24
    2618:	99 1f       	adc	r25, r25
    261a:	ba 95       	dec	r27
    261c:	e1 f7       	brne	.-8      	; 0x2616
    261e:	c8 0f       	add	r28, r24
    2620:	d9 1f       	adc	r29, r25
    2622:	80 91 9d 01 	lds	r24, 0x019D
    2626:	90 91 9e 01 	lds	r25, 0x019E
    262a:	c8 17       	cp	r28, r24
    262c:	d9 07       	cpc	r29, r25
    262e:	41 f0       	breq	.+16     	; 0x2640
    2630:	81 e0       	ldi	r24, 0x01	; 1
    2632:	cf 39       	cpi	r28, 0x9F	; 159
    2634:	d8 07       	cpc	r29, r24
    2636:	20 f0       	brcs	.+8      	; 0x2640
    2638:	89 e0       	ldi	r24, 0x09	; 9
    263a:	cf 39       	cpi	r28, 0x9F	; 159
    263c:	d8 07       	cpc	r29, r24
    263e:	60 f2       	brcs	.-104    	; 0x25d8
    2640:	df 91       	pop	r29
    2642:	cf 91       	pop	r28
    2644:	1f 91       	pop	r17
    2646:	08 95       	ret

00002648 <malloc_gc_kernel>:
			}		
		}
	}
	
#ifdef SOS_DEBUG_GC
	for (block = (Block*)malloc_heap, i= 0; 
       block != mSentinel; 
       block += block->blockhdr.blocks & ~MEM_MASK) 
    {
		DEBUG_GC("block %d : addr: %x size: %d alloc: %d owner: %d check %d\n", i++, 
	  (unsigned int) block, 
	  (unsigned int) (block->blockhdr.blocks & ~MEM_MASK), 
	  (unsigned int) (block->blockhdr.blocks & RESERVED)? 1 : 0, 
	  (unsigned int) block->blockhdr.owner,
	  (unsigned int) BLOCK_GUARD_BYTE(block));
    }
#endif

}

//
// GC entire kernel
//
void malloc_gc_kernel( void )
{
    2648:	08 95       	ret

0000264a <malloc_gc_module>:
#ifdef SOS_USE_GC
	HAS_CRITICAL_SECTION;
	ENTER_CRITICAL_SECTION();
#ifdef SOS_PROFILE_FRAGMENTATION
	ker_gc_bytes_temp = 0;
#endif
	shm_gc();
	LEAVE_CRITICAL_SECTION();

	ENTER_CRITICAL_SECTION();
	timer_gc();
	LEAVE_CRITICAL_SECTION();

	ENTER_CRITICAL_SECTION();
	sched_gc();
	LEAVE_CRITICAL_SECTION();
#ifdef SOS_RADIO_CHANNEL
	ENTER_CRITICAL_SECTION();
	radio_gc();
	LEAVE_CRITICAL_SECTION();
#endif

#ifdef SOS_UART_CHANNEL
	ENTER_CRITICAL_SECTION();
	uart_gc();
	LEAVE_CRITICAL_SECTION();
#endif

	ENTER_CRITICAL_SECTION();
	mq_gc();
#ifdef SOS_PROFILE_FRAGMENTATION
	mf.ker_gc_bytes = ker_gc_bytes_temp;
#endif
	LEAVE_CRITICAL_SECTION();
#endif
}

uint8_t malloc_gc_module( sos_pid_t pid )
{
#ifdef SOS_USE_GC
	sos_module_t *mcb;
	Block* block;
	uint8_t mod_memmap_cnt = 0;
	Block** mod_memmap;
	uint8_t mod_stack_sp = 0;
	Block** mod_gc_stack;
	
	Block*  mod_memmap_buf[MEM_MOD_GC_STACK_SIZE];
	Block*  mod_gc_stack_buf[MEM_MOD_GC_STACK_SIZE];
	uint8_t num_leaks = 0;
#ifdef SOS_PROFILE_FRAGMENTATION
	uint16_t num_bytes_gc = 0;
#endif
	HAS_CRITICAL_SECTION;
	//
	// Get module control block
	//
	mcb = ker_get_module( pid );
	
	if( mcb == NULL || mcb->handler_state == NULL) {
		return 0;
	}
	
	if( (mcb->flag & SOS_KER_STATIC_MODULE) != 0 ) {
		// Don't check for static module (kernel module)
		return 0;
		//Block* baseArea; 
		//baseArea = TO_BLOCK_PTR(mcb->handler_state);
		//baseArea->blockhdr.blocks |= GC_MARK;
	}
	
	ENTER_CRITICAL_SECTION();
	//
	// get number of blocks we need to check against
	//
	DEBUG_GC("in malloc_gc_module\n");
	DEBUG_GC("get number of blocks\n");
	for (block = (Block*)malloc_heap; 
       block != mSentinel && block >= malloc_heap && block < &(malloc_heap[NUM_HEAP_BLOCKS]); 
       block += block->blockhdr.blocks & ~MEM_MASK) 
    {
		if ( (block->blockhdr.owner == pid) &&
		((block->blockhdr.blocks & RESERVED) != 0) ) { 
			mod_memmap_cnt++;
		}
	}
	
	DEBUG_GC("allocate memory: mod_memmap_cnt = %d\n", mod_memmap_cnt);
	//
	// Allocate memory
	//
	if( mod_memmap_cnt < MEM_MOD_GC_STACK_SIZE ) {
		mod_memmap = mod_memmap_buf;
		mod_gc_stack = mod_gc_stack_buf;
	} else {
		mod_memmap = ker_malloc( sizeof(Block*) * mod_memmap_cnt, KER_MEM_PID );
		if( mod_memmap == NULL ) {
			LEAVE_CRITICAL_SECTION();
			DEBUG_GC("no memory\n");
			return 0;
		}
		
		mod_gc_stack = ker_malloc( sizeof(Block*) * mod_memmap_cnt, KER_MEM_PID );
		if( mod_gc_stack == NULL ) {
			ker_free( mod_memmap );
			LEAVE_CRITICAL_SECTION();
			DEBUG_GC("no memory\n");
			return 0;
		}
	}
	
	//
	// Get all blocks in place
	//
	DEBUG_GC("get all blocks in place\n");
	for (block = (Block*)malloc_heap, mod_memmap_cnt = 0; 
       block != mSentinel && block >= malloc_heap && block < &(malloc_heap[NUM_HEAP_BLOCKS]); 
       block += block->blockhdr.blocks & ~MEM_MASK) 
    {
		if ( (block->blockhdr.owner == pid) &&
		((block->blockhdr.blocks & RESERVED) != 0) ) {
			block->blockhdr.blocks &= ~GC_MARK;
			mod_memmap[mod_memmap_cnt] = block;
			mod_memmap_cnt++;
#ifdef SOS_PROFILE_FRAGMENTATION
			num_bytes_gc += BLOCKS_TO_BYTES(block->blockhdr.blocks);
#endif
		}
	}
	LEAVE_CRITICAL_SECTION();
#ifdef SOS_PROFILE_FRAGMENTATION
	mf.gc_bytes = num_bytes_gc;
#endif
	
	//
	// Use module state as the root
	//
	mod_gc_stack[0] = TO_BLOCK_PTR(mcb->handler_state);
	//
	// Mark this item checked
	//
	(mod_gc_stack[0])->blockhdr.blocks |= GC_MARK;
	mod_stack_sp = 1;
	
	//
	// Run until all items in the stack is checked
	//
	DEBUG_GC("Mark memory\n");
	while( mod_stack_sp != 0 ) {
		uint16_t mem_size; // memory size to check 
		uint16_t i;
		uint8_t *userPart;
		
		mod_stack_sp--;
		block = mod_gc_stack[ mod_stack_sp ];
		
		mem_size = BLOCKS_TO_BYTES( block->blockhdr.blocks );
		userPart = block->userPart;
		
		for( i = 0; i < mem_size; i++ ) {
			void *pntr;
			uint8_t j;
			//
			// treated as double pointers
			//
			pntr = *((uint8_t**)(userPart + i));
			
			//
			// Check against the memmap
			//
			for( j = 0; j < mod_memmap_cnt; j++ ) {
				if( pntr == (mod_memmap[j])->userPart ) {
					if( (((mod_memmap[j])->blockhdr.blocks) & GC_MARK) == 0 ) {
						// found a match, added to sp
						DEBUG_GC("Found a match addr: %d index: %d, value: %d\n", (int)userPart, (int) i, (int)pntr);
						(mod_memmap[j])->blockhdr.blocks |= GC_MARK;
						mod_gc_stack[ mod_stack_sp ] = mod_memmap[j];
						mod_stack_sp++;
					}
				}
			}
		}
	}
	
	DEBUG_GC("do module GC\n");
	//
	// Now do GC
	//
	{
		uint8_t k;
		
		for( k = 0; k < mod_memmap_cnt; k++ ) {
			if( ((mod_memmap[k])->blockhdr.blocks & GC_MARK) == 0 ) {
				// found leak...
				DEBUG_GC("Found memory leak: %d\n", (int) (mod_memmap[k])->userPart);
				num_leaks++;
				ker_free( (mod_memmap[k])->userPart );
			} else {
				(mod_memmap[k])->blockhdr.blocks &= ~GC_MARK;
			}
		} 
	}
	
	DEBUG_GC("memory cleanup\n");
	//
	// Clean up
	//
	if( mod_memmap_cnt >= MEM_MOD_GC_STACK_SIZE ) {
		ker_free( mod_memmap );
		ker_free( mod_gc_stack );
	}
	return num_leaks;
#else
	return 0;
#endif	
}
    264a:	80 e0       	ldi	r24, 0x00	; 0
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	08 95       	ret

00002650 <ker_sys_malloc>:

#ifdef SOS_DEBUG_MALLOC
#ifndef SOS_SFI
static void printMem(char* s)
{
  Block* block;
  int i = 0;

  DEBUG("%s\n", s);
  for (block = mSentinel->next; block != mSentinel && block < &(malloc_heap[NUM_HEAP_BLOCKS]) && block >= malloc_heap; 
  block = block->next)
    {
      /*
	if(block->blockhdr.owner != BLOCK_GUARD_BYTE(block)) {
	DEBUG("detect memory corruption in PrintMem\n");
	DEBUG("possible owner %d %d\n", block->blockhdr.owner, BLOCK_GUARD_BYTE(block));
	} else {
      */
      DEBUG("block %d : block: %x, prev : %x, next : %x, blocks : %d\n", i,
	    (unsigned int) block, 
	    (unsigned int) block->prev, 
	    (unsigned int) block->next, 
	    (unsigned int) block->blockhdr.blocks);	
      //}
      i++;
    }
  DEBUG("Memory Map:\n");
  block = (Block*)malloc_heap;
  i = 0;
  while(block != mSentinel && block >= malloc_heap && block < &(malloc_heap[NUM_HEAP_BLOCKS])) {
    DEBUG("block %d : addr: %x size: %d alloc: %d owner: %d check %d\n", i++, 
	  (unsigned int) block, 
	  (unsigned int) (block->blockhdr.blocks & ~MEM_MASK), 
	  (unsigned int) (block->blockhdr.blocks & RESERVED)? 1 : 0, 
	  (unsigned int) block->blockhdr.owner,
	  (unsigned int) BLOCK_GUARD_BYTE(block));
	if( (block->blockhdr.blocks & ~MEM_MASK) == 0 ) {
		DEBUG("blocks is zero\n");
		exit(1);
	}
    block += block->blockhdr.blocks & ~MEM_MASK;
  }

}
#else
static void printMem(char* s)
{
  Block* block;
  int i = 0;

  DEBUG("%s\n", s);
  for (block = mSentinel->next; block != mSentinel; block = block->next){
    DEBUG("Block %d : Addr: %x, Prev : %x, Next : %x, Blocks : %d\n", i++, (uint32_t)block, (uint32_t)block->prev, (uint32_t)block->next, block->blockhdr.blocks);	
  }
  DEBUG("Memory Map:\n");
  block = (Block*)malloc_heap;
  i = 0;
  while(block != mSentinel) {
    DEBUG("block %d : Addr: %x size: %d alloc: %d owner: %d\n", i++, (uint32_t)block, block->blockhdr.blocks & ~MEM_MASK, (block->blockhdr.blocks & RESERVED)? 1: 0, block->blockhdr.owner);
    block += block->blockhdr.blocks & ~MEM_MASK;
  }
}
#endif // SOS_SFI
#endif

#ifdef SOS_PROFILE_FRAGMENTATION
static void malloc_record_efrag(uint16_t b)
{
	mf.malloc_efrag = b << SHIFT_VALUE;
}

static void malloc_record_ifrag(Block *b, uint16_t size, sos_pid_t id)
{
	mf.malloc_ifrag = ((b->blockhdr.blocks << SHIFT_VALUE) - (size + BLOCKOVERHEAD));    
	mf.alloc = size;
	mf.alloc_pid = id;

}

static void malloc_record_blocks(int16_t blks)
{
	mf.num_blocks += blks;
}

static void malloc_record_outstanding(int8_t alloc)
{
	if( alloc ) {
		mf.num_outstanding++;
	} else {
		mf.num_outstanding--;
	}
	
}
#endif

void* ker_sys_malloc(uint16_t size)
{    
    2650:	ff 92       	push	r15
    2652:	0f 93       	push	r16
    2654:	1f 93       	push	r17
    2656:	cf 93       	push	r28
    2658:	df 93       	push	r29
    265a:	8c 01       	movw	r16, r24
  sos_pid_t my_id = ker_get_current_pid();    
    265c:	0e 94 e2 13 	call	0x27c4
    2660:	f8 2e       	mov	r15, r24
  void *ret = sos_blk_mem_alloc(size, my_id, true);    
    2662:	41 e0       	ldi	r20, 0x01	; 1
    2664:	68 2f       	mov	r22, r24
    2666:	c8 01       	movw	r24, r16
    2668:	0e 94 14 11 	call	0x2228
    266c:	ec 01       	movw	r28, r24
  if( ret != NULL ) {        
    266e:	89 2b       	or	r24, r25
    2670:	41 f4       	brne	.+16     	; 0x2682
    return ret;    
  }    
  if( size == 0 ) {
    2672:	01 15       	cp	r16, r1
    2674:	11 05       	cpc	r17, r1
    2676:	11 f4       	brne	.+4      	; 0x267c
	return NULL;
    2678:	c8 01       	movw	r24, r16
    267a:	04 c0       	rjmp	.+8      	; 0x2684
  }
#ifndef SOS_TEST_SUITE
  ker_mod_panic(my_id);    
    267c:	8f 2d       	mov	r24, r15
    267e:	0e 94 4a 18 	call	0x3094
#endif
  return NULL;
    2682:	ce 01       	movw	r24, r28
    2684:	df 91       	pop	r29
    2686:	cf 91       	pop	r28
    2688:	1f 91       	pop	r17
    268a:	0f 91       	pop	r16
    268c:	ff 90       	pop	r15
    268e:	08 95       	ret

00002690 <ker_sys_realloc>:
}

void* ker_sys_realloc(void* pntr, uint16_t newSize)
{
    2690:	0f 93       	push	r16
    2692:	1f 93       	push	r17
    2694:	cf 93       	push	r28
    2696:	df 93       	push	r29
    2698:	8b 01       	movw	r16, r22
  void *ret = sos_blk_mem_realloc(pntr, newSize, true);
    269a:	41 e0       	ldi	r20, 0x01	; 1
    269c:	0e 94 f8 11 	call	0x23f0
    26a0:	ec 01       	movw	r28, r24
  if( ret != NULL ) {
    26a2:	89 2b       	or	r24, r25
    26a4:	49 f4       	brne	.+18     	; 0x26b8
    return ret;
  }
  if( newSize == 0 ) {
    26a6:	01 15       	cp	r16, r1
    26a8:	11 05       	cpc	r17, r1
    26aa:	11 f4       	brne	.+4      	; 0x26b0
	return NULL;
    26ac:	b8 01       	movw	r22, r16
    26ae:	05 c0       	rjmp	.+10     	; 0x26ba
  }
#ifndef SOS_TEST_SUITE
  ker_mod_panic(ker_get_current_pid());
    26b0:	0e 94 e2 13 	call	0x27c4
    26b4:	0e 94 4a 18 	call	0x3094
#endif
  return NULL;
    26b8:	be 01       	movw	r22, r28
}
    26ba:	cb 01       	movw	r24, r22
    26bc:	df 91       	pop	r29
    26be:	cf 91       	pop	r28
    26c0:	1f 91       	pop	r17
    26c2:	0f 91       	pop	r16
    26c4:	08 95       	ret

000026c6 <ker_sys_free>:

void ker_sys_free(void *pntr) 
{
  sos_blk_mem_free(pntr, true);
    26c6:	61 e0       	ldi	r22, 0x01	; 1
    26c8:	0e 94 98 11 	call	0x2330
    26cc:	08 95       	ret

000026ce <ker_sys_change_own>:
}	

int8_t ker_sys_change_own( void* ptr )
{
    26ce:	0f 93       	push	r16
    26d0:	1f 93       	push	r17
    26d2:	cf 93       	push	r28
    26d4:	8c 01       	movw	r16, r24
  sos_pid_t my_id = ker_get_current_pid();    
    26d6:	0e 94 e2 13 	call	0x27c4
    26da:	c8 2f       	mov	r28, r24
  if( SOS_OK != sos_blk_mem_change_own( ptr, my_id, true ) ) {
    26dc:	41 e0       	ldi	r20, 0x01	; 1
    26de:	68 2f       	mov	r22, r24
    26e0:	c8 01       	movw	r24, r16
    26e2:	0e 94 ee 0f 	call	0x1fdc
    26e6:	88 23       	and	r24, r24
    26e8:	19 f0       	breq	.+6      	; 0x26f0
#ifndef SOS_TEST_SUITE
	ker_mod_panic(my_id);
    26ea:	8c 2f       	mov	r24, r28
    26ec:	0e 94 4a 18 	call	0x3094
#else
	return -EINVAL;
#endif
  }
  return SOS_OK;
}
    26f0:	80 e0       	ldi	r24, 0x00	; 0
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	cf 91       	pop	r28
    26f6:	1f 91       	pop	r17
    26f8:	0f 91       	pop	r16
    26fa:	08 95       	ret

000026fc <sos_start>:
//	ker_register_module(loader_get_header());
//	ker_register_module(neighbor_get_header());
//	ker_register_module(tree_routing_get_header());
//	ker_register_module(rfidtag_get_header());
	ker_register_module(irtag_get_header());
    26fc:	0e 94 e3 0f 	call	0x1fc6
    2700:	0e 94 7e 15 	call	0x2afc
    2704:	08 95       	ret

00002706 <sched_handler>:
//----------------------------------------------------------------------------
//  FUNCTION IMPLEMENTATIONS
//----------------------------------------------------------------------------
static int8_t sched_handler(void *state, Message *msg)
{
    2706:	fb 01       	movw	r30, r22
  if(msg->type == MSG_INIT) return SOS_OK;
    2708:	86 81       	ldd	r24, Z+6	; 0x06
    270a:	88 23       	and	r24, r24
    270c:	19 f4       	brne	.+6      	; 0x2714
    270e:	80 e0       	ldi	r24, 0x00	; 0
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	08 95       	ret
  return -EINVAL;
    2714:	8a ee       	ldi	r24, 0xEA	; 234
    2716:	9f ef       	ldi	r25, 0xFF	; 255
}
    2718:	08 95       	ret
    271a:	08 95       	ret

0000271c <sched_add_interrupt>:

// Initialize the scheduler
void sched_init(uint8_t cond)
{
  register uint8_t i = 0;
  if(cond != SOS_BOOT_NORMAL) {
		//! iterate through module_list and check for memory bug
  }

	// initialize the message queue
  mq_init(&schedpq);
  //! initialize all bins to be empty
  for(i = 0; i < SCHED_NUMBER_BINS; i++) {
		mod_bin[i] = NULL;
  }
  for(i = 0; i < SCHED_PID_SLOTS; i++) {
		pid_pool[i] = 0;
  }

	// Initialize PID stack
	pid_sp = pid_stack;
	// initialize short message
	short_msg.data = short_msg.payload;
	short_msg.daddr = node_address;
	short_msg.saddr = node_address;
	short_msg.len = 3;

#ifdef SOS_USE_PREEMPTION
	// Initialize slab
	ker_slab_init( KER_SCHED_PID, &sched_slab, sizeof(sos_module_t), 4, SLAB_LONGTERM);
	// register the module
	ker_register_module(sos_get_header_address(mod_header));
	// initialize curr_pri
	curr_pri = 0;
	// initialize the priority stack
	pri_sp = pri_stack;
#else
  sched_register_kernel_module(&sched_module, sos_get_header_address(mod_header), mod_bin);
	sched_stalled = false;

	for(i = 0; i < SCHED_NUM_INTS; i++) {
		int_array[i] = NULL;
	}

	// Initialize slab
	ker_slab_init( KER_SCHED_PID, &sched_slab, sizeof(sos_module_t), 4, SLAB_LONGTERM );
#endif	
}

#ifndef SOS_USE_PREEMPTION
void sched_add_interrupt(uint8_t id, sched_int_t f)
{
	if( id >= SCHED_NUM_INTS ) return;
    271c:	84 30       	cpi	r24, 0x04	; 4
    271e:	58 f4       	brcc	.+22     	; 0x2736

	int_array[id] = f;
    2720:	e8 2f       	mov	r30, r24
    2722:	ff 27       	eor	r31, r31
    2724:	ee 0f       	add	r30, r30
    2726:	ff 1f       	adc	r31, r31
    2728:	e5 55       	subi	r30, 0x55	; 85
    272a:	f6 4f       	sbci	r31, 0xF6	; 246
    272c:	60 83       	st	Z, r22
    272e:	71 83       	std	Z+1, r23	; 0x01
	int_ready = 1;
    2730:	81 e0       	ldi	r24, 0x01	; 1
    2732:	80 93 a0 09 	sts	0x09A0, r24
    2736:	08 95       	ret
    2738:	08 95       	ret

0000273a <ker_get_module>:
}

static void handle_callback( void )
{
	uint8_t i;
	int_ready = 0;
	for(i = 0; i < SCHED_NUM_INTS; i++) {
		if( int_array[i] != NULL ) {
			sched_int_t f = int_array[i];
			int_array[i] = NULL;
			f();
		}
	}
}
#endif

/**
 * @brief get handle from pid
 * @return handle if successful, -ESRCH otherwise
 */
#define hash_pid(id)           ((id) % SCHED_NUMBER_BINS)

// Get pointer to module control block
sos_module_t* ker_get_module(sos_pid_t pid)
{
    273a:	98 2f       	mov	r25, r24
	static sos_module_t *cache = NULL;
  uint8_t bins;
  sos_module_t *handle;

	// Check the cache for module
	if((cache != NULL) && (cache->pid == pid)) {
    273c:	e0 91 a1 09 	lds	r30, 0x09A1
    2740:	f0 91 a2 09 	lds	r31, 0x09A2
    2744:	30 97       	sbiw	r30, 0x00	; 0
    2746:	51 f0       	breq	.+20     	; 0x275c
    2748:	84 81       	ldd	r24, Z+4	; 0x04
    274a:	89 17       	cp	r24, r25
    274c:	39 f4       	brne	.+14     	; 0x275c
    274e:	04 c0       	rjmp	.+8      	; 0x2758
		return cache;
	}

  //! first hash pid into bins
	bins = hash_pid(pid);
  handle = mod_bin[bins];
  while(handle != NULL) {
		if(handle->pid == pid) {
			cache = handle;
    2750:	f0 93 a2 09 	sts	0x09A2, r31
    2754:	e0 93 a1 09 	sts	0x09A1, r30
			return handle;
    2758:	cf 01       	movw	r24, r30
    275a:	08 95       	ret
    275c:	89 2f       	mov	r24, r25
    275e:	83 70       	andi	r24, 0x03	; 3
    2760:	e8 2f       	mov	r30, r24
    2762:	ff 27       	eor	r31, r31
    2764:	ee 0f       	add	r30, r30
    2766:	ff 1f       	adc	r31, r31
    2768:	ef 5f       	subi	r30, 0xFF	; 255
    276a:	f3 4f       	sbci	r31, 0xF3	; 243
    276c:	01 90       	ld	r0, Z+
    276e:	f0 81       	ld	r31, Z
    2770:	e0 2d       	mov	r30, r0
		} else {
			handle = handle->next;
    2772:	30 97       	sbiw	r30, 0x00	; 0
    2774:	21 f0       	breq	.+8      	; 0x277e
    2776:	84 81       	ldd	r24, Z+4	; 0x04
    2778:	89 17       	cp	r24, r25
    277a:	51 f3       	breq	.-44     	; 0x2750
    277c:	f7 cf       	rjmp	.-18     	; 0x276c
		}
  }
  return NULL;
    277e:	80 e0       	ldi	r24, 0x00	; 0
    2780:	90 e0       	ldi	r25, 0x00	; 0
}
    2782:	08 95       	ret
    2784:	08 95       	ret

00002786 <ker_get_module_state>:

void* ker_get_module_state(sos_pid_t pid)
{
	sos_module_t *m = ker_get_module(pid);
    2786:	0e 94 9d 13 	call	0x273a
    278a:	fc 01       	movw	r30, r24
	if(m == NULL) return NULL;
    278c:	00 97       	sbiw	r24, 0x00	; 0
    278e:	09 f4       	brne	.+2      	; 0x2792
    2790:	08 95       	ret
	
	return m->handler_state;
    2792:	86 81       	ldd	r24, Z+6	; 0x06
    2794:	97 81       	ldd	r25, Z+7	; 0x07
}
    2796:	08 95       	ret
    2798:	08 95       	ret

0000279a <ker_sys_get_module_state>:

void* ker_sys_get_module_state( void )
{
	sos_module_t *m = ker_get_module(curr_pid);
    279a:	80 91 ed 0b 	lds	r24, 0x0BED
    279e:	0e 94 9d 13 	call	0x273a
    27a2:	fc 01       	movw	r30, r24
	
	if(m == NULL) return NULL;
    27a4:	00 97       	sbiw	r24, 0x00	; 0
    27a6:	09 f4       	brne	.+2      	; 0x27aa
    27a8:	08 95       	ret
	return m->handler_state;
    27aa:	86 81       	ldd	r24, Z+6	; 0x06
    27ac:	97 81       	ldd	r25, Z+7	; 0x07
}
    27ae:	08 95       	ret
    27b0:	08 95       	ret

000027b2 <ker_set_current_pid>:

sos_pid_t ker_set_current_pid( sos_pid_t pid )
{
	sos_pid_t ret = curr_pid;
    27b2:	90 91 ed 0b 	lds	r25, 0x0BED
	if( pid != RUNTIME_PID ) {
    27b6:	8f 3f       	cpi	r24, 0xFF	; 255
    27b8:	11 f0       	breq	.+4      	; 0x27be
		curr_pid = pid;
    27ba:	80 93 ed 0b 	sts	0x0BED, r24
	}
	return ret;
}
    27be:	89 2f       	mov	r24, r25
    27c0:	99 27       	eor	r25, r25
    27c2:	08 95       	ret

000027c4 <ker_get_current_pid>:

sos_pid_t ker_get_current_pid( void )
{
	return curr_pid;
    27c4:	80 91 ed 0b 	lds	r24, 0x0BED
}
    27c8:	99 27       	eor	r25, r25
    27ca:	08 95       	ret

000027cc <ker_get_caller_pid>:

sos_pid_t ker_get_caller_pid( void )
{
	return *(pid_sp - 1);
    27cc:	e0 91 ee 0b 	lds	r30, 0x0BEE
    27d0:	f0 91 ef 0b 	lds	r31, 0x0BEF
    27d4:	31 97       	sbiw	r30, 0x01	; 1
    27d6:	80 81       	ld	r24, Z
}
    27d8:	99 27       	eor	r25, r25
    27da:	08 95       	ret

000027dc <sched_get_all_module>:

void ker_killall(sos_code_id_t code_id)
{
	bool found = false;
	uint8_t i;

	do {
		found = false;
		for(i=0;i<SCHED_NUMBER_BINS;i++){
			sos_module_t *handle;
			handle = mod_bin[i];
			while( handle != NULL ) {
				sos_code_id_t cid;
				cid = sos_read_header_word(handle->header,
						offsetof(mod_header_t, code_id));
				cid = entohs(cid);
				if( cid == code_id ) {
					ker_deregister_module(handle->pid);
#ifdef SOS_SFI
					sfi_modtable_deregister(handle->pid);
#endif
					found = true;	
					break;
				}
				handle = handle->next;
			}
			if( found == true ) {
				break;
			}
		}
	} while( found == true );
}

// Get handle to the hash table
sos_module_t **sched_get_all_module()
{
	return mod_bin;
}
    27dc:	81 e0       	ldi	r24, 0x01	; 1
    27de:	9c e0       	ldi	r25, 0x0C	; 12
    27e0:	08 95       	ret

000027e2 <sched_register_module>:

static sos_pid_t sched_get_pid_from_pool()
{
	sos_pid_t p = 0;
	uint8_t i, j;

	for(i = 0; i < SCHED_PID_SLOTS; i++) {
		uint8_t mask = 1;
		for(j = 0; j < 8; j++, p++, mask <<= 1) {
			if(p == SCHED_NUM_THREAD_PIDS) {
				return NULL_PID;
			}
			if((mask & (pid_pool[i])) == 0) {
				pid_pool[i] |= mask;
				return p+SCHED_MIN_THREAD_PID;
			}
		}
	}
	return NULL_PID;
}

/**
 * @brief register task with handle
 * Here we assume the state has been initialized.
 * We just need to link to the bin
 */
static int8_t sched_register_module(sos_module_t *h, mod_header_ptr p,
		void *init, uint8_t init_size)
{
    27e2:	cf 92       	push	r12
    27e4:	df 92       	push	r13
    27e6:	ef 92       	push	r14
    27e8:	ff 92       	push	r15
    27ea:	0f 93       	push	r16
    27ec:	1f 93       	push	r17
    27ee:	cf 93       	push	r28
    27f0:	df 93       	push	r29
    27f2:	ec 01       	movw	r28, r24
    27f4:	7b 01       	movw	r14, r22
    27f6:	8a 01       	movw	r16, r20
    27f8:	c2 2e       	mov	r12, r18
  HAS_CRITICAL_SECTION;
  uint8_t num_timers;
  uint8_t bins = hash_pid(h->pid);
    27fa:	8c 81       	ldd	r24, Y+4	; 0x04
    27fc:	33 e0       	ldi	r19, 0x03	; 3
    27fe:	d3 2e       	mov	r13, r19
    2800:	d8 22       	and	r13, r24

  if(ker_get_module(h->pid) != NULL) {
    2802:	0e 94 9d 13 	call	0x273a
    2806:	89 2b       	or	r24, r25
    2808:	19 f0       	breq	.+6      	; 0x2810
		return -EEXIST;
    280a:	8f ee       	ldi	r24, 0xEF	; 239
    280c:	9f ef       	ldi	r25, 0xFF	; 255
    280e:	39 c0       	rjmp	.+114    	; 0x2882
	//ker_deregister_module(h->pid);
	DEBUG("Module %d is already registered\n", h->pid);
  }

  //! Read the number of timers to be pre-allocated
  num_timers = sos_read_header_byte(p, offsetof(mod_header_t, num_timers));
    2810:	c7 01       	movw	r24, r14
    2812:	aa 27       	eor	r26, r26
    2814:	bb 27       	eor	r27, r27
    2816:	88 0f       	add	r24, r24
    2818:	99 1f       	adc	r25, r25
    281a:	aa 1f       	adc	r26, r26
    281c:	bb 1f       	adc	r27, r27
    281e:	03 96       	adiw	r24, 0x03	; 3
    2820:	a1 1d       	adc	r26, r1
    2822:	b1 1d       	adc	r27, r1
    2824:	ab bf       	out	0x3b, r26	; 59
    2826:	fc 01       	movw	r30, r24
    2828:	67 91       	elpm	r22, Z+
  if (num_timers > 0){
    282a:	66 23       	and	r22, r22
    282c:	29 f0       	breq	.+10     	; 0x2838
		//! If there is no memory to pre-allocate the requested timers
		if (timer_preallocate(h->pid, num_timers) < 0){
    282e:	8c 81       	ldd	r24, Y+4	; 0x04
    2830:	0e 94 c9 2d 	call	0x5b92
    2834:	88 23       	and	r24, r24
    2836:	04 f1       	brlt	.+64     	; 0x2878
			return -ENOMEM;
		}
  }

  // link the functions
  fntable_link(h);
    2838:	ce 01       	movw	r24, r28
    283a:	0e 94 e3 2b 	call	0x57c6
  ENTER_CRITICAL_SECTION();
    283e:	8f b7       	in	r24, 0x3f	; 63
    2840:	f8 94       	cli
  /**
   * here is critical section.
   * We need to prevent others to search this module
   */
  // add to the bin
  h->next = mod_bin[bins];
    2842:	ed 2d       	mov	r30, r13
    2844:	ff 27       	eor	r31, r31
    2846:	ee 0f       	add	r30, r30
    2848:	ff 1f       	adc	r31, r31
    284a:	ef 5f       	subi	r30, 0xFF	; 255
    284c:	f3 4f       	sbci	r31, 0xF3	; 243
    284e:	20 81       	ld	r18, Z
    2850:	31 81       	ldd	r19, Z+1	; 0x01
    2852:	28 83       	st	Y, r18
    2854:	39 83       	std	Y+1, r19	; 0x01
  mod_bin[bins] = h;
    2856:	c0 83       	st	Z, r28
    2858:	d1 83       	std	Z+1, r29	; 0x01
  LEAVE_CRITICAL_SECTION();
    285a:	8f bf       	out	0x3f, r24	; 63
  DEBUG("Register %d, Code ID %d,  Handle = %x\n", h->pid,
		  sos_read_header_byte(h, offsetof(mod_header_t, mod_id)),
		  (unsigned int)h);

  // send an init message to application
  // XXX : need to check the failure
  if(post_long(h->pid, KER_SCHED_PID, MSG_INIT, init_size, init, SOS_MSG_RELEASE | SOS_MSG_SYSTEM_PRIORITY) != SOS_OK) {
    285c:	84 e8       	ldi	r24, 0x84	; 132
    285e:	e8 2e       	mov	r14, r24
    2860:	f1 2c       	mov	r15, r1
    2862:	2c 2d       	mov	r18, r12
    2864:	40 e0       	ldi	r20, 0x00	; 0
    2866:	62 e0       	ldi	r22, 0x02	; 2
    2868:	8c 81       	ldd	r24, Y+4	; 0x04
    286a:	0e 94 c7 18 	call	0x318e
    286e:	88 23       	and	r24, r24
    2870:	31 f0       	breq	.+12     	; 0x287e
	  timer_remove_all(h->pid);
    2872:	8c 81       	ldd	r24, Y+4	; 0x04
    2874:	0e 94 4f 2d 	call	0x5a9e
	  return -ENOMEM;
    2878:	84 ef       	ldi	r24, 0xF4	; 244
    287a:	9f ef       	ldi	r25, 0xFF	; 255
    287c:	02 c0       	rjmp	.+4      	; 0x2882
  }
  return SOS_OK;
    287e:	80 e0       	ldi	r24, 0x00	; 0
    2880:	90 e0       	ldi	r25, 0x00	; 0
    2882:	df 91       	pop	r29
    2884:	cf 91       	pop	r28
    2886:	1f 91       	pop	r17
    2888:	0f 91       	pop	r16
    288a:	ff 90       	pop	r15
    288c:	ef 90       	pop	r14
    288e:	df 90       	pop	r13
    2890:	cf 90       	pop	r12
    2892:	08 95       	ret

00002894 <sched_register_kernel_module>:
}


sos_pid_t ker_spawn_module(mod_header_ptr h, void *init, uint8_t init_size, uint8_t flag)
{
	sos_module_t *handle;
	if(h == 0) return NULL_PID;
	// Allocate a memory block to hold the module list entry
	handle = (sos_module_t*)ker_slab_alloc( &sched_slab, KER_SCHED_PID);
	if (handle == NULL) {
		return NULL_PID;
	}
	if( do_register_module(h, handle, init, init_size, flag) != SOS_OK) {
		ker_slab_free( &sched_slab, handle);
		return NULL_PID;	
	}
	return handle->pid;
}


/**
 * @brief register new module
 * NOTE: this function cannot be called in the interrupt handler
 * That is, the function is not thread safe
 * NOTE: h is stored in program memory, which can be different from RAM
 * special access function is needed.
 */
int8_t ker_register_module(mod_header_ptr h)
{
	sos_module_t *handle;
	int8_t ret;
#ifdef SOS_USE_PREEMPTION
	uint8_t num_sub_func;
#endif

	if(h == 0) return -EINVAL;
	handle = (sos_module_t*)ker_slab_alloc( &sched_slab, KER_SCHED_PID);
	if (handle == NULL) {
		return -ENOMEM;
	}
	ret = do_register_module(h, handle, NULL, 0, 0);
#ifdef SOS_USE_PREEMPTION
	if(ret != SOS_OK) {
		ker_slab_free( &sched_slab, handle);
		return ret;
	}

	/**
	 *  The following block of code is used to get the dependencies due to
	 *  function calls
	 */
	handle->max_sub = 0;
	handle->num_sub = 0;
	// num of subscribed funcs
	num_sub_func = sos_read_header_byte(h, offsetof(mod_header_t, num_sub_func));

	if (num_sub_func > 0) {
		uint8_t i;
		uint8_t sub_list_index = 0;
		for(i = 0; i < num_sub_func; i++) {
			uint8_t j;
			uint8_t to_add = 0;
			uint8_t pub_pid = 
				sos_read_header_byte(h, offsetof(mod_header_t, funct[i].pid));

			// if its RUNTIME_PID just add it
			// only to max because num_sub is taken care of when the registration
			// with the actual function occurs
			if(pub_pid == RUNTIME_PID) {
				handle->max_sub++;
				continue;
			}
			// Find all unique pids
			for(j = 0; j < i; j++) {
				if (pub_pid == 
						sos_read_header_byte(h, offsetof(mod_header_t, funct[j].pid))) {

					to_add = 1;
					break;
				}
			}
			// Add it to max and num subscribed functions
			if (to_add == 0) { 
				handle->max_sub++;
				handle->num_sub++;
			}
		}

		// malloc enough space for all pids
		handle->sub_list = malloc(handle->max_sub * sizeof(sos_pid_t));
		// now iterate again, adding the unique pids to the list
		for(i = 0; i < num_sub_func; i++) {
			uint8_t j;
			uint8_t to_add = 0;
			uint8_t pub_pid = 
				sos_read_header_byte(h, offsetof(mod_header_t, funct[i].pid));

			// do not add RUNTIME_PID to the list
			if(pub_pid == RUNTIME_PID) continue;
			// add the other unique pids to the list
			for(j = 0; j < i; j++) {
				if (pub_pid == 
						sos_read_header_byte(h, offsetof(mod_header_t, funct[j].pid))) {
					to_add = 1;
					break;
				}
			}
			if (to_add == 0) handle->sub_list[sub_list_index++] = pub_pid;
		}
	}
#else
	if(ret != SOS_OK) {
		ker_slab_free( &sched_slab, handle);
	}
#endif
	return ret;
}

#ifndef SOS_USE_PREEMPTION
int8_t sched_register_kernel_module(sos_module_t *handle, mod_header_ptr h, void *state_ptr)
{
    2894:	cf 93       	push	r28
    2896:	df 93       	push	r29
    2898:	ec 01       	movw	r28, r24
  sos_pid_t pid;

  if(h == 0) return -EINVAL;
    289a:	61 15       	cp	r22, r1
    289c:	71 05       	cpc	r23, r1
    289e:	79 f0       	breq	.+30     	; 0x28be

  pid = sos_read_header_byte(h, offsetof(mod_header_t, mod_id));
    28a0:	cb 01       	movw	r24, r22
    28a2:	aa 27       	eor	r26, r26
    28a4:	bb 27       	eor	r27, r27
    28a6:	88 0f       	add	r24, r24
    28a8:	99 1f       	adc	r25, r25
    28aa:	aa 1f       	adc	r26, r26
    28ac:	bb 1f       	adc	r27, r27
    28ae:	02 96       	adiw	r24, 0x02	; 2
    28b0:	a1 1d       	adc	r26, r1
    28b2:	b1 1d       	adc	r27, r1
    28b4:	ab bf       	out	0x3b, r26	; 59
    28b6:	fc 01       	movw	r30, r24
    28b8:	87 91       	elpm	r24, Z+


  /*
   * Disallow the usage of thread ID
   */
  if(pid > APP_MOD_MAX_PID) return -EINVAL;
    28ba:	80 3e       	cpi	r24, 0xE0	; 224
    28bc:	18 f0       	brcs	.+6      	; 0x28c4
    28be:	8a ee       	ldi	r24, 0xEA	; 234
    28c0:	9f ef       	ldi	r25, 0xFF	; 255
    28c2:	12 c0       	rjmp	.+36     	; 0x28e8

  handle->handler_state = state_ptr;
    28c4:	4e 83       	std	Y+6, r20	; 0x06
    28c6:	5f 83       	std	Y+7, r21	; 0x07
  handle->pid = pid;
    28c8:	8c 83       	std	Y+4, r24	; 0x04
  handle->header = h;
    28ca:	6a 83       	std	Y+2, r22	; 0x02
    28cc:	7b 83       	std	Y+3, r23	; 0x03
  handle->flag = SOS_KER_STATIC_MODULE;
    28ce:	82 e0       	ldi	r24, 0x02	; 2
    28d0:	8d 83       	std	Y+5, r24	; 0x05
	handle->next = NULL;
    28d2:	18 82       	st	Y, r1
    28d4:	19 82       	std	Y+1, r1	; 0x01

  return sched_register_module(handle, h, NULL, 0);
    28d6:	20 e0       	ldi	r18, 0x00	; 0
    28d8:	40 e0       	ldi	r20, 0x00	; 0
    28da:	50 e0       	ldi	r21, 0x00	; 0
    28dc:	ce 01       	movw	r24, r28
    28de:	0e 94 f1 13 	call	0x27e2
    28e2:	99 27       	eor	r25, r25
    28e4:	87 fd       	sbrc	r24, 7
    28e6:	90 95       	com	r25
    28e8:	df 91       	pop	r29
    28ea:	cf 91       	pop	r28
    28ec:	08 95       	ret

000028ee <sched_init>:
    28ee:	0f 93       	push	r16
    28f0:	1f 93       	push	r17
    28f2:	81 ef       	ldi	r24, 0xF1	; 241
    28f4:	9b e0       	ldi	r25, 0x0B	; 11
    28f6:	0e 94 b9 19 	call	0x3372
    28fa:	13 e0       	ldi	r17, 0x03	; 3
    28fc:	e1 e0       	ldi	r30, 0x01	; 1
    28fe:	fc e0       	ldi	r31, 0x0C	; 12
    2900:	11 92       	st	Z+, r1
    2902:	11 92       	st	Z+, r1
    2904:	11 50       	subi	r17, 0x01	; 1
    2906:	17 ff       	sbrs	r17, 7
    2908:	fb cf       	rjmp	.-10     	; 0x2900
    290a:	ed ed       	ldi	r30, 0xDD	; 221
    290c:	f9 e0       	ldi	r31, 0x09	; 9
    290e:	13 e0       	ldi	r17, 0x03	; 3
    2910:	11 92       	st	Z+, r1
    2912:	11 50       	subi	r17, 0x01	; 1
    2914:	17 ff       	sbrs	r17, 7
    2916:	fc cf       	rjmp	.-8      	; 0x2910
    2918:	89 eb       	ldi	r24, 0xB9	; 185
    291a:	99 e0       	ldi	r25, 0x09	; 9
    291c:	90 93 ef 0b 	sts	0x0BEF, r25
    2920:	80 93 ee 0b 	sts	0x0BEE, r24
    2924:	85 ed       	ldi	r24, 0xD5	; 213
    2926:	99 e0       	ldi	r25, 0x09	; 9
    2928:	90 93 d2 09 	sts	0x09D2, r25
    292c:	80 93 d1 09 	sts	0x09D1, r24
    2930:	80 91 04 01 	lds	r24, 0x0104
    2934:	90 91 05 01 	lds	r25, 0x0105
    2938:	90 93 cc 09 	sts	0x09CC, r25
    293c:	80 93 cb 09 	sts	0x09CB, r24
    2940:	90 93 ce 09 	sts	0x09CE, r25
    2944:	80 93 cd 09 	sts	0x09CD, r24
    2948:	13 e0       	ldi	r17, 0x03	; 3
    294a:	10 93 d0 09 	sts	0x09D0, r17
    294e:	8c eb       	ldi	r24, 0xBC	; 188
    2950:	91 e0       	ldi	r25, 0x01	; 1
    2952:	aa 27       	eor	r26, r26
    2954:	97 fd       	sbrc	r25, 7
    2956:	a0 95       	com	r26
    2958:	ba 2f       	mov	r27, r26
    295a:	b6 95       	lsr	r27
    295c:	a7 95       	ror	r26
    295e:	97 95       	ror	r25
    2960:	87 95       	ror	r24
    2962:	41 e0       	ldi	r20, 0x01	; 1
    2964:	5c e0       	ldi	r21, 0x0C	; 12
    2966:	bc 01       	movw	r22, r24
    2968:	83 ea       	ldi	r24, 0xA3	; 163
    296a:	99 e0       	ldi	r25, 0x09	; 9
    296c:	0e 94 4a 14 	call	0x2894
    2970:	10 92 9f 09 	sts	0x099F, r1
    2974:	eb ea       	ldi	r30, 0xAB	; 171
    2976:	f9 e0       	ldi	r31, 0x09	; 9
    2978:	11 92       	st	Z+, r1
    297a:	11 92       	st	Z+, r1
    297c:	11 50       	subi	r17, 0x01	; 1
    297e:	17 ff       	sbrs	r17, 7
    2980:	fb cf       	rjmp	.-10     	; 0x2978
    2982:	14 e0       	ldi	r17, 0x04	; 4
    2984:	00 e8       	ldi	r16, 0x80	; 128
    2986:	21 2f       	mov	r18, r17
    2988:	48 e0       	ldi	r20, 0x08	; 8
    298a:	63 eb       	ldi	r22, 0xB3	; 179
    298c:	79 e0       	ldi	r23, 0x09	; 9
    298e:	82 e0       	ldi	r24, 0x02	; 2
    2990:	0e 94 3c 3d 	call	0x7a78
    2994:	1f 91       	pop	r17
    2996:	0f 91       	pop	r16
    2998:	08 95       	ret

0000299a <do_register_module>:
}
#endif

static int8_t do_register_module(mod_header_ptr h, sos_module_t *handle, 
																 void *init, uint8_t init_size, uint8_t flag)
{
    299a:	cf 92       	push	r12
    299c:	df 92       	push	r13
    299e:	ef 92       	push	r14
    29a0:	ff 92       	push	r15
    29a2:	0f 93       	push	r16
    29a4:	1f 93       	push	r17
    29a6:	cf 93       	push	r28
    29a8:	df 93       	push	r29
    29aa:	7c 01       	movw	r14, r24
    29ac:	eb 01       	movw	r28, r22
    29ae:	6a 01       	movw	r12, r20
    29b0:	12 2f       	mov	r17, r18
  sos_pid_t pid;
  uint16_t st_size;
  int8_t ret;

  // Disallow usage of NULL_PID
  if(flag == SOS_CREATE_THREAD) {
    29b2:	01 30       	cpi	r16, 0x01	; 1
    29b4:	11 f5       	brne	.+68     	; 0x29fa
    29b6:	60 e0       	ldi	r22, 0x00	; 0
    29b8:	76 2f       	mov	r23, r22
    29ba:	41 e0       	ldi	r20, 0x01	; 1
    29bc:	50 e0       	ldi	r21, 0x00	; 0
    29be:	27 2f       	mov	r18, r23
    29c0:	33 27       	eor	r19, r19
    29c2:	6f 31       	cpi	r22, 0x1F	; 31
    29c4:	79 f0       	breq	.+30     	; 0x29e4
    29c6:	f9 01       	movw	r30, r18
    29c8:	e3 52       	subi	r30, 0x23	; 35
    29ca:	f6 4f       	sbci	r31, 0xF6	; 246
    29cc:	90 81       	ld	r25, Z
    29ce:	84 2f       	mov	r24, r20
    29d0:	89 23       	and	r24, r25
    29d2:	71 f0       	breq	.+28     	; 0x29f0
    29d4:	5f 5f       	subi	r21, 0xFF	; 255
    29d6:	6f 5f       	subi	r22, 0xFF	; 255
    29d8:	44 0f       	add	r20, r20
    29da:	58 30       	cpi	r21, 0x08	; 8
    29dc:	90 f3       	brcs	.-28     	; 0x29c2
    29de:	7f 5f       	subi	r23, 0xFF	; 255
    29e0:	74 30       	cpi	r23, 0x04	; 4
    29e2:	58 f3       	brcs	.-42     	; 0x29ba
    29e4:	6f ef       	ldi	r22, 0xFF	; 255
    29e6:	70 e0       	ldi	r23, 0x00	; 0
    29e8:	06 2f       	mov	r16, r22
	  pid = sched_get_pid_from_pool();
	  if(pid == NULL_PID) return -ENOMEM;
    29ea:	6f 3f       	cpi	r22, 0xFF	; 255
    29ec:	c1 f4       	brne	.+48     	; 0x2a1e
    29ee:	2c c0       	rjmp	.+88     	; 0x2a48
    29f0:	94 2b       	or	r25, r20
    29f2:	90 83       	st	Z, r25
    29f4:	60 52       	subi	r22, 0x20	; 32
    29f6:	77 27       	eor	r23, r23
    29f8:	f7 cf       	rjmp	.-18     	; 0x29e8
  } else {
	  pid = sos_read_header_byte(h, offsetof(mod_header_t, mod_id));
    29fa:	c7 01       	movw	r24, r14
    29fc:	aa 27       	eor	r26, r26
    29fe:	bb 27       	eor	r27, r27
    2a00:	88 0f       	add	r24, r24
    2a02:	99 1f       	adc	r25, r25
    2a04:	aa 1f       	adc	r26, r26
    2a06:	bb 1f       	adc	r27, r27
    2a08:	02 96       	adiw	r24, 0x02	; 2
    2a0a:	a1 1d       	adc	r26, r1
    2a0c:	b1 1d       	adc	r27, r1
    2a0e:	ab bf       	out	0x3b, r26	; 59
    2a10:	fc 01       	movw	r30, r24
    2a12:	07 91       	elpm	r16, Z+
	  // Disallow the usage of thread ID
	  if(pid > APP_MOD_MAX_PID) return -EINVAL;
    2a14:	00 3e       	cpi	r16, 0xE0	; 224
    2a16:	18 f0       	brcs	.+6      	; 0x2a1e
    2a18:	8a ee       	ldi	r24, 0xEA	; 234
    2a1a:	9f ef       	ldi	r25, 0xFF	; 255
    2a1c:	35 c0       	rjmp	.+106    	; 0x2a88
  }

  // Read the state size and allocate a separate memory block for it
  st_size = sos_read_header_word(h, offsetof(mod_header_t, state_size));
    2a1e:	c7 01       	movw	r24, r14
    2a20:	aa 27       	eor	r26, r26
    2a22:	bb 27       	eor	r27, r27
    2a24:	88 0f       	add	r24, r24
    2a26:	99 1f       	adc	r25, r25
    2a28:	aa 1f       	adc	r26, r26
    2a2a:	bb 1f       	adc	r27, r27
    2a2c:	ab bf       	out	0x3b, r26	; 59
    2a2e:	fc 01       	movw	r30, r24
    2a30:	87 91       	elpm	r24, Z+
    2a32:	96 91       	elpm	r25, Z
	//DEBUG("registering module pid %d with size %d\n", pid, st_size);
  if (st_size){
    2a34:	00 97       	sbiw	r24, 0x00	; 0
    2a36:	59 f0       	breq	.+22     	; 0x2a4e
 * @warning this is used to allocate the memory for long time usage
 */
static inline void* malloc_longterm(uint16_t size, sos_pid_t id)
{
  return sos_blk_mem_longterm_alloc(size, id, true);
    2a38:	41 e0       	ldi	r20, 0x01	; 1
    2a3a:	60 2f       	mov	r22, r16
    2a3c:	0e 94 51 10 	call	0x20a2
    2a40:	8e 83       	std	Y+6, r24	; 0x06
    2a42:	9f 83       	std	Y+7, r25	; 0x07
		handle->handler_state = (uint8_t*)malloc_longterm(st_size, pid);
	// If there is no memory to store the state of the module
		if (handle->handler_state == NULL){
    2a44:	89 2b       	or	r24, r25
    2a46:	29 f4       	brne	.+10     	; 0x2a52
			return -ENOMEM;
    2a48:	84 ef       	ldi	r24, 0xF4	; 244
    2a4a:	9f ef       	ldi	r25, 0xFF	; 255
    2a4c:	1d c0       	rjmp	.+58     	; 0x2a88
		}
	} else {
		handle->handler_state = NULL;
    2a4e:	8e 83       	std	Y+6, r24	; 0x06
    2a50:	9f 83       	std	Y+7, r25	; 0x07
	}

	// Initialize the data structure
	handle->header = h;
    2a52:	ea 82       	std	Y+2, r14	; 0x02
    2a54:	fb 82       	std	Y+3, r15	; 0x03
	handle->pid = pid;
    2a56:	0c 83       	std	Y+4, r16	; 0x04
  handle->flag = 0;
    2a58:	1d 82       	std	Y+5, r1	; 0x05
	handle->next = NULL;
    2a5a:	18 82       	st	Y, r1
    2a5c:	19 82       	std	Y+1, r1	; 0x01
#ifdef SOS_USE_PREEMPTION
	// set the priority
	handle->priority = sos_read_header_byte(h, offsetof(mod_header_t, init_priority));
#endif

  // add to the bin
  ret = sched_register_module(handle, h, init, init_size);
    2a5e:	21 2f       	mov	r18, r17
    2a60:	a6 01       	movw	r20, r12
    2a62:	b7 01       	movw	r22, r14
    2a64:	ce 01       	movw	r24, r28
    2a66:	0e 94 f1 13 	call	0x27e2
    2a6a:	08 2f       	mov	r16, r24
  if(ret != SOS_OK) {
    2a6c:	88 23       	and	r24, r24
    2a6e:	51 f0       	breq	.+20     	; 0x2a84
 * @return void
 */
static inline void ker_free(void* ptr)
{
  sos_blk_mem_free(ptr, false);
    2a70:	60 e0       	ldi	r22, 0x00	; 0
    2a72:	8e 81       	ldd	r24, Y+6	; 0x06
    2a74:	9f 81       	ldd	r25, Y+7	; 0x07
    2a76:	0e 94 98 11 	call	0x2330
	 ker_free(handle->handler_state); //! Free the memory block to hold module state
	return ret;
    2a7a:	80 2f       	mov	r24, r16
    2a7c:	99 27       	eor	r25, r25
    2a7e:	87 fd       	sbrc	r24, 7
    2a80:	90 95       	com	r25
    2a82:	02 c0       	rjmp	.+4      	; 0x2a88
  }
  return SOS_OK;
    2a84:	80 e0       	ldi	r24, 0x00	; 0
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	df 91       	pop	r29
    2a8a:	cf 91       	pop	r28
    2a8c:	1f 91       	pop	r17
    2a8e:	0f 91       	pop	r16
    2a90:	ff 90       	pop	r15
    2a92:	ef 90       	pop	r14
    2a94:	df 90       	pop	r13
    2a96:	cf 90       	pop	r12
    2a98:	08 95       	ret

00002a9a <ker_spawn_module>:
    2a9a:	cf 92       	push	r12
    2a9c:	df 92       	push	r13
    2a9e:	ef 92       	push	r14
    2aa0:	ff 92       	push	r15
    2aa2:	0f 93       	push	r16
    2aa4:	1f 93       	push	r17
    2aa6:	cf 93       	push	r28
    2aa8:	df 93       	push	r29
    2aaa:	7c 01       	movw	r14, r24
    2aac:	6b 01       	movw	r12, r22
    2aae:	14 2f       	mov	r17, r20
    2ab0:	02 2f       	mov	r16, r18
    2ab2:	89 2b       	or	r24, r25
    2ab4:	a9 f0       	breq	.+42     	; 0x2ae0
    2ab6:	62 e0       	ldi	r22, 0x02	; 2
    2ab8:	83 eb       	ldi	r24, 0xB3	; 179
    2aba:	99 e0       	ldi	r25, 0x09	; 9
    2abc:	0e 94 80 3d 	call	0x7b00
    2ac0:	ec 01       	movw	r28, r24
    2ac2:	00 97       	sbiw	r24, 0x00	; 0
    2ac4:	69 f0       	breq	.+26     	; 0x2ae0
    2ac6:	21 2f       	mov	r18, r17
    2ac8:	a6 01       	movw	r20, r12
    2aca:	bc 01       	movw	r22, r24
    2acc:	c7 01       	movw	r24, r14
    2ace:	0e 94 cd 14 	call	0x299a
    2ad2:	88 23       	and	r24, r24
    2ad4:	41 f0       	breq	.+16     	; 0x2ae6
    2ad6:	be 01       	movw	r22, r28
    2ad8:	83 eb       	ldi	r24, 0xB3	; 179
    2ada:	99 e0       	ldi	r25, 0x09	; 9
    2adc:	0e 94 e0 3d 	call	0x7bc0
    2ae0:	8f ef       	ldi	r24, 0xFF	; 255
    2ae2:	90 e0       	ldi	r25, 0x00	; 0
    2ae4:	02 c0       	rjmp	.+4      	; 0x2aea
    2ae6:	8c 81       	ldd	r24, Y+4	; 0x04
    2ae8:	99 27       	eor	r25, r25
    2aea:	df 91       	pop	r29
    2aec:	cf 91       	pop	r28
    2aee:	1f 91       	pop	r17
    2af0:	0f 91       	pop	r16
    2af2:	ff 90       	pop	r15
    2af4:	ef 90       	pop	r14
    2af6:	df 90       	pop	r13
    2af8:	cf 90       	pop	r12
    2afa:	08 95       	ret

00002afc <ker_register_module>:
    2afc:	ef 92       	push	r14
    2afe:	ff 92       	push	r15
    2b00:	0f 93       	push	r16
    2b02:	cf 93       	push	r28
    2b04:	df 93       	push	r29
    2b06:	7c 01       	movw	r14, r24
    2b08:	89 2b       	or	r24, r25
    2b0a:	19 f4       	brne	.+6      	; 0x2b12
    2b0c:	8a ee       	ldi	r24, 0xEA	; 234
    2b0e:	9f ef       	ldi	r25, 0xFF	; 255
    2b10:	1f c0       	rjmp	.+62     	; 0x2b50
    2b12:	62 e0       	ldi	r22, 0x02	; 2
    2b14:	83 eb       	ldi	r24, 0xB3	; 179
    2b16:	99 e0       	ldi	r25, 0x09	; 9
    2b18:	0e 94 80 3d 	call	0x7b00
    2b1c:	ec 01       	movw	r28, r24
    2b1e:	00 97       	sbiw	r24, 0x00	; 0
    2b20:	19 f4       	brne	.+6      	; 0x2b28
    2b22:	84 ef       	ldi	r24, 0xF4	; 244
    2b24:	9f ef       	ldi	r25, 0xFF	; 255
    2b26:	14 c0       	rjmp	.+40     	; 0x2b50
    2b28:	00 e0       	ldi	r16, 0x00	; 0
    2b2a:	20 2f       	mov	r18, r16
    2b2c:	40 e0       	ldi	r20, 0x00	; 0
    2b2e:	50 e0       	ldi	r21, 0x00	; 0
    2b30:	bc 01       	movw	r22, r24
    2b32:	c7 01       	movw	r24, r14
    2b34:	0e 94 cd 14 	call	0x299a
    2b38:	08 2f       	mov	r16, r24
    2b3a:	88 23       	and	r24, r24
    2b3c:	29 f0       	breq	.+10     	; 0x2b48
    2b3e:	be 01       	movw	r22, r28
    2b40:	83 eb       	ldi	r24, 0xB3	; 179
    2b42:	99 e0       	ldi	r25, 0x09	; 9
    2b44:	0e 94 e0 3d 	call	0x7bc0
    2b48:	80 2f       	mov	r24, r16
    2b4a:	99 27       	eor	r25, r25
    2b4c:	87 fd       	sbrc	r24, 7
    2b4e:	90 95       	com	r25
    2b50:	df 91       	pop	r29
    2b52:	cf 91       	pop	r28
    2b54:	0f 91       	pop	r16
    2b56:	ff 90       	pop	r15
    2b58:	ef 90       	pop	r14
    2b5a:	08 95       	ret

00002b5c <ker_deregister_module>:
}

/**
 * @brief de-register a task (module)
 * @param pid task id to be removed
 * Note that this function cannot be used inside interrupt handler
 */
int8_t ker_deregister_module(sos_pid_t pid)
{
    2b5c:	af 92       	push	r10
    2b5e:	bf 92       	push	r11
    2b60:	cf 92       	push	r12
    2b62:	df 92       	push	r13
    2b64:	ef 92       	push	r14
    2b66:	ff 92       	push	r15
    2b68:	0f 93       	push	r16
    2b6a:	1f 93       	push	r17
    2b6c:	cf 93       	push	r28
    2b6e:	df 93       	push	r29
    2b70:	cd b7       	in	r28, 0x3d	; 61
    2b72:	de b7       	in	r29, 0x3e	; 62
    2b74:	64 97       	sbiw	r28, 0x14	; 20
    2b76:	0f b6       	in	r0, 0x3f	; 63
    2b78:	f8 94       	cli
    2b7a:	de bf       	out	0x3e, r29	; 62
    2b7c:	0f be       	out	0x3f, r0	; 63
    2b7e:	cd bf       	out	0x3d, r28	; 61
    2b80:	08 2f       	mov	r16, r24
#ifdef SOS_USE_PREEMPTION

/**
 * Making ker_deregister_module split phase for preemption. 
 * The msg_final is sent in the first phase and the other 
 * items are cleaned up in the second.
 * This is made split phase because it is possible the module 
 * is on the stack when the loader tries to remove it. 
 * This will cause the msg_final to get queued up and not delivered.
 */
	Message *msg;
	msg = msg_create();
	if(msg == NULL) {
		return ker_mod_panic(pid);
	}
	msg->did = pid;
	msg->sid = KER_SCHED_PID;
	msg->type = MSG_FINAL;
	msg->len = 0;
	msg->data = NULL;
	msg->flag = 0;
	// assign priority based on priority of id
	msg->priority = get_module_priority(pid);
	sched_msg_alloc(msg);
	return 0;

#else

  HAS_CRITICAL_SECTION;
  uint8_t bins = hash_pid(pid);
    2b82:	83 70       	andi	r24, 0x03	; 3
  sos_module_t *handle;
  sos_module_t *prev_handle = NULL;
    2b84:	aa 24       	eor	r10, r10
    2b86:	bb 24       	eor	r11, r11
  msg_handler_t handler;

  /**
   * Search the bins while save previous node
   * Once found the module, connect next module to previous one
   * put module back to freelist
   */
  handle = mod_bin[bins];
    2b88:	c8 2e       	mov	r12, r24
    2b8a:	dd 24       	eor	r13, r13
    2b8c:	f6 01       	movw	r30, r12
    2b8e:	ec 0d       	add	r30, r12
    2b90:	fd 1d       	adc	r31, r13
    2b92:	ef 5f       	subi	r30, 0xFF	; 255
    2b94:	f3 4f       	sbci	r31, 0xF3	; 243
    2b96:	e0 80       	ld	r14, Z
    2b98:	f1 80       	ldd	r15, Z+1	; 0x01
  while(handle != NULL) {
		if(handle->pid == pid) {
			break;
		} else {
			prev_handle = handle;
			handle = handle->next;
    2b9a:	e1 14       	cp	r14, r1
    2b9c:	f1 04       	cpc	r15, r1
    2b9e:	31 f0       	breq	.+12     	; 0x2bac
    2ba0:	f7 01       	movw	r30, r14
    2ba2:	84 81       	ldd	r24, Z+4	; 0x04
    2ba4:	80 17       	cp	r24, r16
    2ba6:	11 f0       	breq	.+4      	; 0x2bac
    2ba8:	57 01       	movw	r10, r14
    2baa:	f5 cf       	rjmp	.-22     	; 0x2b96
		}
	}
	if(handle == NULL) {
    2bac:	e1 14       	cp	r14, r1
    2bae:	f1 04       	cpc	r15, r1
    2bb0:	19 f4       	brne	.+6      	; 0x2bb8
		// unable to find the module
		return -EINVAL;
    2bb2:	8a ee       	ldi	r24, 0xEA	; 234
    2bb4:	9f ef       	ldi	r25, 0xFF	; 255
    2bb6:	79 c0       	rjmp	.+242    	; 0x2caa
	}
	handler = (msg_handler_t)sos_read_header_ptr(handle->header,
    2bb8:	f7 01       	movw	r30, r14
    2bba:	82 81       	ldd	r24, Z+2	; 0x02
    2bbc:	93 81       	ldd	r25, Z+3	; 0x03
    2bbe:	aa 27       	eor	r26, r26
    2bc0:	bb 27       	eor	r27, r27
    2bc2:	88 0f       	add	r24, r24
    2bc4:	99 1f       	adc	r25, r25
    2bc6:	aa 1f       	adc	r26, r26
    2bc8:	bb 1f       	adc	r27, r27
    2bca:	0e 96       	adiw	r24, 0x0e	; 14
    2bcc:	a1 1d       	adc	r26, r1
    2bce:	b1 1d       	adc	r27, r1
    2bd0:	ab bf       	out	0x3b, r26	; 59
    2bd2:	fc 01       	movw	r30, r24
    2bd4:	47 91       	elpm	r20, Z+
    2bd6:	56 91       	elpm	r21, Z
			offsetof(mod_header_t,
				module_handler));

	if(handler != NULL) {
    2bd8:	41 15       	cp	r20, r1
    2bda:	51 05       	cpc	r21, r1
    2bdc:	d9 f0       	breq	.+54     	; 0x2c14
		void *handler_state = handle->handler_state;
    2bde:	f7 01       	movw	r30, r14
    2be0:	26 81       	ldd	r18, Z+6	; 0x06
    2be2:	37 81       	ldd	r19, Z+7	; 0x07
		Message msg;
		sos_pid_t prev_pid = curr_pid;
    2be4:	10 91 ed 0b 	lds	r17, 0x0BED

		curr_pid = handle->pid;
    2be8:	84 81       	ldd	r24, Z+4	; 0x04
    2bea:	80 93 ed 0b 	sts	0x0BED, r24
		msg.did = handle->pid;
    2bee:	84 81       	ldd	r24, Z+4	; 0x04
    2bf0:	89 83       	std	Y+1, r24	; 0x01
		msg.sid = KER_SCHED_PID;
    2bf2:	82 e0       	ldi	r24, 0x02	; 2
    2bf4:	8a 83       	std	Y+2, r24	; 0x02
		msg.type = MSG_FINAL;
    2bf6:	86 e0       	ldi	r24, 0x06	; 6
    2bf8:	8f 83       	std	Y+7, r24	; 0x07
		msg.len = 0;
    2bfa:	18 86       	std	Y+8, r1	; 0x08
		msg.data = NULL;
    2bfc:	19 86       	std	Y+9, r1	; 0x09
    2bfe:	1a 86       	std	Y+10, r1	; 0x0a
		msg.flag = 0;
    2c00:	1b 86       	std	Y+11, r1	; 0x0b
    2c02:	1c 86       	std	Y+12, r1	; 0x0c

		// Ram - If the handler does not write to the message, all is fine
#ifdef SOS_SFI
		ker_cross_domain_call_mod_handler(handler_state, &msg, handler);
#else
		handler(handler_state, &msg);
    2c04:	be 01       	movw	r22, r28
    2c06:	6f 5f       	subi	r22, 0xFF	; 255
    2c08:	7f 4f       	sbci	r23, 0xFF	; 255
    2c0a:	c9 01       	movw	r24, r18
    2c0c:	fa 01       	movw	r30, r20
    2c0e:	09 95       	icall
#endif
		curr_pid = prev_pid;
    2c10:	10 93 ed 0b 	sts	0x0BED, r17
	}

	// First remove handler from the list.
	// link the bin back
	ENTER_CRITICAL_SECTION();
    2c14:	2f b7       	in	r18, 0x3f	; 63
    2c16:	f8 94       	cli
    2c18:	f7 01       	movw	r30, r14
    2c1a:	80 81       	ld	r24, Z
    2c1c:	91 81       	ldd	r25, Z+1	; 0x01
	if(prev_handle == NULL) {
    2c1e:	a1 14       	cp	r10, r1
    2c20:	b1 04       	cpc	r11, r1
    2c22:	41 f4       	brne	.+16     	; 0x2c34
		mod_bin[bins] = handle->next;
    2c24:	cc 0c       	add	r12, r12
    2c26:	dd 1c       	adc	r13, r13
    2c28:	41 e0       	ldi	r20, 0x01	; 1
    2c2a:	5c e0       	ldi	r21, 0x0C	; 12
    2c2c:	c4 0e       	add	r12, r20
    2c2e:	d5 1e       	adc	r13, r21
    2c30:	f6 01       	movw	r30, r12
    2c32:	01 c0       	rjmp	.+2      	; 0x2c36
	} else {
		prev_handle->next = handle->next;
    2c34:	f5 01       	movw	r30, r10
    2c36:	80 83       	st	Z, r24
    2c38:	91 83       	std	Z+1, r25	; 0x01
	}
	LEAVE_CRITICAL_SECTION();
    2c3a:	2f bf       	out	0x3f, r18	; 63

	// remove the thread pid allocation
	if(handle->pid >= SCHED_MIN_THREAD_PID) {
    2c3c:	f7 01       	movw	r30, r14
    2c3e:	24 81       	ldd	r18, Z+4	; 0x04
    2c40:	20 3e       	cpi	r18, 0xE0	; 224
    2c42:	b0 f0       	brcs	.+44     	; 0x2c70
		uint8_t i = handle->pid - SCHED_MIN_THREAD_PID;
    2c44:	20 5e       	subi	r18, 0xE0	; 224
		pid_pool[i/8] &= ~(1 << (i % 8));
    2c46:	82 2f       	mov	r24, r18
    2c48:	86 95       	lsr	r24
    2c4a:	86 95       	lsr	r24
    2c4c:	86 95       	lsr	r24
    2c4e:	e8 2f       	mov	r30, r24
    2c50:	ff 27       	eor	r31, r31
    2c52:	e3 52       	subi	r30, 0x23	; 35
    2c54:	f6 4f       	sbci	r31, 0xF6	; 246
    2c56:	27 70       	andi	r18, 0x07	; 7
    2c58:	81 e0       	ldi	r24, 0x01	; 1
    2c5a:	90 e0       	ldi	r25, 0x00	; 0
    2c5c:	02 c0       	rjmp	.+4      	; 0x2c62
    2c5e:	88 0f       	add	r24, r24
    2c60:	99 1f       	adc	r25, r25
    2c62:	2a 95       	dec	r18
    2c64:	e2 f7       	brpl	.-8      	; 0x2c5e
    2c66:	98 2f       	mov	r25, r24
    2c68:	90 95       	com	r25
    2c6a:	80 81       	ld	r24, Z
    2c6c:	89 23       	and	r24, r25
    2c6e:	80 83       	st	Z, r24
  }


  // remove system services
  timer_remove_all(pid);
    2c70:	80 2f       	mov	r24, r16
    2c72:	0e 94 4f 2d 	call	0x5a9e
  sensor_remove_all(pid);
    2c76:	80 2f       	mov	r24, r16
    2c78:	0e 94 61 39 	call	0x72c2
  ker_timestamp_deregister(pid);
    2c7c:	80 2f       	mov	r24, r16
    2c7e:	0e 94 a4 37 	call	0x6f48
	monitor_remove_all(pid);
    2c82:	80 2f       	mov	r24, r16
    2c84:	0e 94 64 34 	call	0x68c8
  fntable_remove_all(handle);
    2c88:	c7 01       	movw	r24, r14
    2c8a:	0e 94 12 2c 	call	0x5824

  // free up memory
  // NOTE: we can only free up memory at the last step
  // because fntable is using the state
  if((SOS_KER_STATIC_MODULE & (handle->flag)) == 0) {
    2c8e:	f7 01       	movw	r30, r14
    2c90:	85 81       	ldd	r24, Z+5	; 0x05
    2c92:	81 fd       	sbrc	r24, 1
    2c94:	05 c0       	rjmp	.+10     	; 0x2ca0
		ker_slab_free( &sched_slab, handle );
    2c96:	b7 01       	movw	r22, r14
    2c98:	83 eb       	ldi	r24, 0xB3	; 179
    2c9a:	99 e0       	ldi	r25, 0x09	; 9
    2c9c:	0e 94 e0 3d 	call	0x7bc0
  }
  mem_remove_all(pid);
    2ca0:	80 2f       	mov	r24, r16
    2ca2:	0e 94 ca 11 	call	0x2394
	
  return 0;
    2ca6:	80 e0       	ldi	r24, 0x00	; 0
    2ca8:	90 e0       	ldi	r25, 0x00	; 0
    2caa:	64 96       	adiw	r28, 0x14	; 20
    2cac:	0f b6       	in	r0, 0x3f	; 63
    2cae:	f8 94       	cli
    2cb0:	de bf       	out	0x3e, r29	; 62
    2cb2:	0f be       	out	0x3f, r0	; 63
    2cb4:	cd bf       	out	0x3d, r28	; 61
    2cb6:	df 91       	pop	r29
    2cb8:	cf 91       	pop	r28
    2cba:	1f 91       	pop	r17
    2cbc:	0f 91       	pop	r16
    2cbe:	ff 90       	pop	r15
    2cc0:	ef 90       	pop	r14
    2cc2:	df 90       	pop	r13
    2cc4:	cf 90       	pop	r12
    2cc6:	bf 90       	pop	r11
    2cc8:	af 90       	pop	r10
    2cca:	08 95       	ret

00002ccc <ker_killall>:
    2ccc:	0f 93       	push	r16
    2cce:	1f 93       	push	r17
    2cd0:	cf 93       	push	r28
    2cd2:	df 93       	push	r29
    2cd4:	8c 01       	movw	r16, r24
    2cd6:	30 e0       	ldi	r19, 0x00	; 0
    2cd8:	23 2f       	mov	r18, r19
    2cda:	41 e0       	ldi	r20, 0x01	; 1
    2cdc:	5c e0       	ldi	r21, 0x0C	; 12
    2cde:	fa 01       	movw	r30, r20
    2ce0:	c1 91       	ld	r28, Z+
    2ce2:	d1 91       	ld	r29, Z+
    2ce4:	af 01       	movw	r20, r30
    2ce6:	20 97       	sbiw	r28, 0x00	; 0
    2ce8:	d1 f0       	breq	.+52     	; 0x2d1e
    2cea:	8a 81       	ldd	r24, Y+2	; 0x02
    2cec:	9b 81       	ldd	r25, Y+3	; 0x03
    2cee:	aa 27       	eor	r26, r26
    2cf0:	bb 27       	eor	r27, r27
    2cf2:	88 0f       	add	r24, r24
    2cf4:	99 1f       	adc	r25, r25
    2cf6:	aa 1f       	adc	r26, r26
    2cf8:	bb 1f       	adc	r27, r27
    2cfa:	08 96       	adiw	r24, 0x08	; 8
    2cfc:	a1 1d       	adc	r26, r1
    2cfe:	b1 1d       	adc	r27, r1
    2d00:	ab bf       	out	0x3b, r26	; 59
    2d02:	fc 01       	movw	r30, r24
    2d04:	87 91       	elpm	r24, Z+
    2d06:	96 91       	elpm	r25, Z
    2d08:	80 17       	cp	r24, r16
    2d0a:	91 07       	cpc	r25, r17
    2d0c:	21 f4       	brne	.+8      	; 0x2d16
    2d0e:	8c 81       	ldd	r24, Y+4	; 0x04
    2d10:	0e 94 ae 15 	call	0x2b5c
    2d14:	e0 cf       	rjmp	.-64     	; 0x2cd6
    2d16:	09 90       	ld	r0, Y+
    2d18:	d8 81       	ld	r29, Y
    2d1a:	c0 2d       	mov	r28, r0
    2d1c:	e4 cf       	rjmp	.-56     	; 0x2ce6
    2d1e:	31 30       	cpi	r19, 0x01	; 1
    2d20:	19 f0       	breq	.+6      	; 0x2d28
    2d22:	2f 5f       	subi	r18, 0xFF	; 255
    2d24:	24 30       	cpi	r18, 0x04	; 4
    2d26:	d8 f2       	brcs	.-74     	; 0x2cde
    2d28:	31 30       	cpi	r19, 0x01	; 1
    2d2a:	a9 f2       	breq	.-86     	; 0x2cd6
    2d2c:	df 91       	pop	r29
    2d2e:	cf 91       	pop	r28
    2d30:	1f 91       	pop	r17
    2d32:	0f 91       	pop	r16
    2d34:	08 95       	ret

00002d36 <sched_dispatch_short_message>:
#endif
}

#ifdef SOS_USE_PREEMPTION
void ker_deregister_module_split(sos_pid_t pid)
{
	HAS_CRITICAL_SECTION;

  uint8_t bins = hash_pid(pid);
	sos_module_t *handle;
	sos_module_t *prev_handle = NULL;
	prev_handle = NULL;

  /**
   * Search the bins while save previous node
   * Once found the module, connect next module to previous one
   * put module back to freelist
   */
  handle = mod_bin[bins];
  while(handle != NULL) {
		if(handle->pid == pid) {
			break;
		} else {
			prev_handle = handle;
			handle = handle->next;
		}
	}
	if(handle == NULL) {
		// unable to find the module
		return;
	}

	// First remove handler from the list.
	// link the bin back
	ENTER_CRITICAL_SECTION();
	if(prev_handle == NULL) {
		mod_bin[bins] = handle->next;
	} else {
		prev_handle->next = handle->next;
	}
	LEAVE_CRITICAL_SECTION();

	// remove the thread pid allocation
	if(handle->pid >= SCHED_MIN_THREAD_PID) {
		uint8_t i = handle->pid - SCHED_MIN_THREAD_PID;
		pid_pool[i/8] &= ~(1 << (i % 8));
  }

  // remove system services
  timer_remove_all(pid);
  sensor_remove_all(pid);
  ker_timestamp_deregister(pid);
	monitor_remove_all(pid);
  fntable_remove_all(handle);

  // free up memory
  // NOTE: we can only free up memory at the last step
  // because fntable is using the state
  if((SOS_KER_STATIC_MODULE & (handle->flag)) == 0) {
		ker_slab_free( &sched_slab, handle );
  }
  mem_remove_all(pid);

}
#endif

#ifdef SOS_USE_EXCEPTION_HANDLING
static uint8_t do_setjmp( void )
{
	uint8_t r = setjmp(sched_jbuf);

	if( r != 0 ) {
		ker_deregister_module( (sos_pid_t) fault_pid );
	}
	return r;
}
#endif

/**
 * @brief dispatch short message
 * This is used by the callback that was register by interrupt handler
 */
void sched_dispatch_short_message(sos_pid_t dst, sos_pid_t src, uint8_t type, uint8_t byte,
																	uint16_t word, uint16_t flag)
{
    2d36:	af 92       	push	r10
    2d38:	bf 92       	push	r11
    2d3a:	cf 92       	push	r12
    2d3c:	df 92       	push	r13
    2d3e:	ef 92       	push	r14
    2d40:	ff 92       	push	r15
    2d42:	0f 93       	push	r16
    2d44:	1f 93       	push	r17
    2d46:	cf 93       	push	r28
    2d48:	df 93       	push	r29
    2d4a:	d8 2e       	mov	r13, r24
    2d4c:	c6 2e       	mov	r12, r22
    2d4e:	b4 2e       	mov	r11, r20
    2d50:	a2 2e       	mov	r10, r18
	sos_module_t *handle;
	msg_handler_t handler;
	void *handler_state;
	MsgParam *p;

	handle = ker_get_module(dst);
    2d52:	0e 94 9d 13 	call	0x273a
    2d56:	ec 01       	movw	r28, r24
	if( handle == NULL ) { return; }
    2d58:	89 2b       	or	r24, r25
    2d5a:	41 f1       	breq	.+80     	; 0x2dac

	handler = (msg_handler_t)sos_read_header_ptr(handle->header,
    2d5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d5e:	9b 81       	ldd	r25, Y+3	; 0x03
    2d60:	aa 27       	eor	r26, r26
    2d62:	bb 27       	eor	r27, r27
    2d64:	88 0f       	add	r24, r24
    2d66:	99 1f       	adc	r25, r25
    2d68:	aa 1f       	adc	r26, r26
    2d6a:	bb 1f       	adc	r27, r27
    2d6c:	0e 96       	adiw	r24, 0x0e	; 14
    2d6e:	a1 1d       	adc	r26, r1
    2d70:	b1 1d       	adc	r27, r1
    2d72:	ab bf       	out	0x3b, r26	; 59
    2d74:	fc 01       	movw	r30, r24
    2d76:	27 91       	elpm	r18, Z+
    2d78:	36 91       	elpm	r19, Z
				offsetof(mod_header_t,
				module_handler));
	handler_state = handle->handler_state;
    2d7a:	8e 81       	ldd	r24, Y+6	; 0x06
    2d7c:	9f 81       	ldd	r25, Y+7	; 0x07

	p = (MsgParam*)(short_msg.data);	
    2d7e:	e0 91 d1 09 	lds	r30, 0x09D1
    2d82:	f0 91 d2 09 	lds	r31, 0x09D2

	short_msg.did = dst;
    2d86:	d0 92 c9 09 	sts	0x09C9, r13
	short_msg.sid = src;
    2d8a:	c0 92 ca 09 	sts	0x09CA, r12
	short_msg.type = type;
    2d8e:	b0 92 cf 09 	sts	0x09CF, r11
	p->byte = byte;
    2d92:	a0 82       	st	Z, r10
	p->word = word;
    2d94:	01 83       	std	Z+1, r16	; 0x01
    2d96:	12 83       	std	Z+2, r17	; 0x02
	short_msg.flag = flag;
    2d98:	f0 92 d4 09 	sts	0x09D4, r15
    2d9c:	e0 92 d3 09 	sts	0x09D3, r14

#ifdef SOS_USE_PREEMPTION
	// push the old pid and priority
	*pid_sp++ = curr_pid;
	*pri_sp++ = curr_pri;
	// set the current priority
	curr_pri = get_module_priority(curr_pid);
#endif
	// Update current pid
	curr_pid = dst;
    2da0:	d0 92 ed 0b 	sts	0x0BED, r13

#ifdef SOS_USE_EXCEPTION_HANDLING
	if( do_setjmp() != 0 )
	{
		return;
	}
#endif
	ker_log( SOS_LOG_HANDLE_MSG, curr_pid, type );
#ifdef SOS_SFI
	ker_cross_domain_call_mod_handler(handler_state, &short_msg, handler);
#else
	handler(handler_state, &short_msg);
    2da4:	69 ec       	ldi	r22, 0xC9	; 201
    2da6:	79 e0       	ldi	r23, 0x09	; 9
    2da8:	f9 01       	movw	r30, r18
    2daa:	09 95       	icall
    2dac:	df 91       	pop	r29
    2dae:	cf 91       	pop	r28
    2db0:	1f 91       	pop	r17
    2db2:	0f 91       	pop	r16
    2db4:	ff 90       	pop	r15
    2db6:	ef 90       	pop	r14
    2db8:	df 90       	pop	r13
    2dba:	cf 90       	pop	r12
    2dbc:	bf 90       	pop	r11
    2dbe:	af 90       	pop	r10
    2dc0:	08 95       	ret

00002dc2 <ker_query_task>:
#endif
	ker_log( SOS_LOG_HANDLE_MSG_END, curr_pid, type );
#ifdef SOS_USE_PREEMPTION
	// pop the old pid and priority
	curr_pid = *(--pid_sp);
	curr_pri = *(--pri_sp);
#endif
}

/**
 * @brief    real dispatch function
 * We have to handle MSG_PKT_SENDDONE specially
 * In SENDDONE message, msg->data is pointing to the message just sent.
 */

#ifdef SOS_USE_PREEMPTION
static void do_dispatch(Message *e)
{
#else 
static void do_dispatch()
{
	Message *e;                                // Current message being dispatched
#endif
	sos_module_t *handle;                      // Pointer to the control block of the destination module
	Message *inner_msg = NULL;                 // Message sent as a payload in MSG_PKT_SENDDONE
	sos_pid_t senddone_dst_pid = NULL_PID;     // Destination module ID for the MSG_PKT_SENDDONE
	uint8_t senddone_flag = SOS_MSG_SEND_FAIL; // Status information for the MSG_PKT_SENDDONE

#ifndef SOS_USE_PREEMPTION
	SOS_MEASUREMENT_DEQUEUE_START();
	e = mq_dequeue(&schedpq);
	SOS_MEASUREMENT_DEQUEUE_END();
#endif

	if (e == NULL) return;

	handle = ker_get_module(e->did);
	// Destination module might muck around with the
	// type field. So we check type before dispatch
	if(e->type == MSG_PKT_SENDDONE) {
		inner_msg = (Message*)(e->data);
	}
	// Check for reliable message delivery
	if(flag_msg_reliable(e->flag)) {
		senddone_dst_pid = e->sid;	
	}
	// Deliver message to the monitor
	// Ram - Modules might access kernel domain here
	monitor_deliver_incoming_msg_to_monitor(e);

#ifdef SOS_USE_EXCEPTION_HANDLING
	fault_pid = 0;
#endif
	if(handle != NULL) {
		if(sched_message_filtered(handle, e) == false) {
			int8_t ret;
			msg_handler_t handler;
			void *handler_state;
			
			DEBUG("###################################################################\n");
			DEBUG("MESSAGE FROM %d TO %d OF TYPE %d\n", e->sid, e->did, e->type);
			DEBUG("###################################################################\n");
			
			
			// Get the function pointer to the message handler
			handler = (msg_handler_t)sos_read_header_ptr(handle->header,
																									 offsetof(mod_header_t,
																														module_handler));
			// Get the pointer to the module state
			handler_state = handle->handler_state;
			// Change ownership if the release flag is set
			// Ram - How to deal with memory blocks that are not released ?
			if(flag_msg_release(e->flag)){
				ker_change_own(e->data, e->did);
			}


			DEBUG("RUNNING HANDLER OF MODULE %d \n", handle->pid);
			
#ifdef SOS_USE_PREEMPTION
			// push the old pid and priority
			*pid_sp++ = curr_pid;
			*pri_sp++ = curr_pri;
			// set the current priority
			curr_pri = get_module_priority(handle->pid);
#endif
			// set the current pid
			curr_pid = handle->pid;
#ifdef SOS_USE_EXCEPTION_HANDLING
			if( do_setjmp() == 0 ) 
#endif
			{
				ker_log( SOS_LOG_HANDLE_MSG, curr_pid, e->type );
#ifdef SOS_SFI
				ret = ker_cross_domain_call_mod_handler(handler_state, e, handler);
#else
				ret = handler(handler_state, e);
#endif
#ifdef SOS_USE_PREEMPTION
				// pop the old pid and priority
				curr_pid = *(--pid_sp);
				curr_pri = *(--pri_sp);
				
				// if final msg, call the split phase
				if(e->type == MSG_FINAL) {
					ker_deregister_module_split(e->did);
				}
#endif
				ker_log( SOS_LOG_HANDLE_MSG_END, curr_pid, e->type );
				DEBUG("FINISHED HANDLER OF MODULE %d \n", handle->pid);
			
				if (ret == SOS_OK) senddone_flag = 0;
			}
		}
	} 
	else {
#if 0
		// TODO...
		//! take care MSG_FETCHER_DONE
		//! need to make sure that fetcher has completed its request
		if(e->type == MSG_FETCHER_DONE) {
			fetcher_state_t *fstat = (fetcher_state_t*)e->data;
			fetcher_commit(fstat, false);
		}
#endif
		//XXX no error notification for now.
		DEBUG("Scheduler: Unable to find module\n");
	}
	if(inner_msg != NULL) {
		//! this is SENDDONE message
		msg_dispose(inner_msg);
		msg_dispose(e);
	} else {
		if(senddone_dst_pid != NULL_PID) {
			if(post_long(senddone_dst_pid,
						KER_SCHED_PID,
						MSG_PKT_SENDDONE,
						sizeof(Message), e,
						senddone_flag) < 0) {
				msg_dispose(e);
			}
		} else {
			//! return message back to the pool
			msg_dispose(e);
		}
	}
}

/**
 * @brief query the existence of task
 * @param pid module id
 * @return 0 for exist, -EINVAL otherwise
 *
 */
int8_t ker_query_task(uint8_t pid)
{
  sos_module_t *handle = ker_get_module(pid);
    2dc2:	0e 94 9d 13 	call	0x273a
  if(handle == NULL){
    2dc6:	89 2b       	or	r24, r25
    2dc8:	19 f4       	brne	.+6      	; 0x2dd0
	return -EINVAL;
    2dca:	8a ee       	ldi	r24, 0xEA	; 234
    2dcc:	9f ef       	ldi	r25, 0xFF	; 255
    2dce:	08 95       	ret
  }
  return 0;
    2dd0:	80 e0       	ldi	r24, 0x00	; 0
    2dd2:	90 e0       	ldi	r25, 0x00	; 0
}
    2dd4:	08 95       	ret
    2dd6:	08 95       	ret

00002dd8 <sched_msg_alloc>:


/**
 * When preemption is enabled. This function should not be called with
 * a NULL Message. 
 */

void sched_msg_alloc(Message *m)
{
    2dd8:	cf 93       	push	r28
    2dda:	df 93       	push	r29
    2ddc:	ec 01       	movw	r28, r24
#ifdef SOS_USE_PREEMPTION
	HAS_CRITICAL_SECTION;
#endif

	DEBUG("sched_msg_alloc\n");
  if(flag_msg_release(m->flag)){
    2dde:	8a 85       	ldd	r24, Y+10	; 0x0a
    2de0:	9b 85       	ldd	r25, Y+11	; 0x0b
    2de2:	82 ff       	sbrs	r24, 2
    2de4:	06 c0       	rjmp	.+12     	; 0x2df2
 * Add check to prevent a change of ownership to the 'null' user.
 */
static inline int8_t ker_change_own(void* ptr, sos_pid_t id)
{
  return sos_blk_mem_change_own(ptr, id, false);
    2de6:	40 e0       	ldi	r20, 0x00	; 0
    2de8:	62 e0       	ldi	r22, 0x02	; 2
    2dea:	88 85       	ldd	r24, Y+8	; 0x08
    2dec:	99 85       	ldd	r25, Y+9	; 0x09
    2dee:	0e 94 ee 0f 	call	0x1fdc
		ker_change_own(m->data, KER_SCHED_PID);
  }

#ifdef SOS_USE_PREEMPTION
	// If preemption is disabled, simply queue the msg
	if (GET_PREEMPTION_STATUS() == DISABLED) {
		mq_enqueue(&schedpq, m);
		return;
	}

	// dispatch msg if of higher priority and no race conditions
	if ((m->priority > curr_pri) && (preemption_point(m->did) == 1)) {
		do_dispatch(m);

		ENTER_CRITICAL_SECTION();
		// if dispatched msg, need to check the queue for any other high priority msgs
		while((schedpq.head != NULL) && (schedpq.head->priority > curr_pri) &&
					(preemption_point(schedpq.head->did) == 1)) {
			Message *q_msg = mq_dequeue(&schedpq);
			LEAVE_CRITICAL_SECTION();
			do_dispatch(q_msg);
			ENTER_CRITICAL_SECTION();
		}
		LEAVE_CRITICAL_SECTION();
	}
	else {
		// if msg is not higher priority, queue up and return
		mq_enqueue(&schedpq, m);
	}
#else
  mq_enqueue(&schedpq, m);
    2df2:	be 01       	movw	r22, r28
    2df4:	81 ef       	ldi	r24, 0xF1	; 241
    2df6:	9b e0       	ldi	r25, 0x0B	; 11
    2df8:	0e 94 cb 19 	call	0x3396
    2dfc:	df 91       	pop	r29
    2dfe:	cf 91       	pop	r28
    2e00:	08 95       	ret

00002e02 <sched_msg_remove>:
#endif
}

#ifdef SOS_USE_PREEMPTION
/**
 * Used when enabling preemption
 */
void sched_queue(Message *m) 
{
	if ((m != NULL) && (m->priority > curr_pri) && (preemption_point(m->did) == 1)) {
		do_dispatch(m);
	}	
	else {
		if(m != NULL) mq_enqueue(&schedpq, m);
	}	
	while((schedpq.head != NULL) && (schedpq.head->priority > curr_pri) &&
				(preemption_point(schedpq.head->did) == 1)) {
		do_dispatch(mq_dequeue(&schedpq));
	}
}

/**
 * Checks if the msg can preempt current module
 * based on conflicts due to function_calls.
 * Returns 1 if can preempt or else returns 0
 */
uint8_t preemption_point (sos_pid_t pid)
{
	uint8_t i;
	sos_module_t *module = ker_get_module(pid);

	if((module == NULL) || (module->num_sub == 0)) return 1;

	// iterate through the subscribed funcs checking for conflict
	for(i = 0; i < module->num_sub; i++) {
		sos_pid_t* j;
		// check against curr_pid
		if(module->sub_list[i] == curr_pid) return 0;
		// check against pid_stack
		for(j = pid_stack; j < pid_sp; j++) {
			if(module->sub_list[i] == *j) return 0;
		}
	}
	return 1;
}
#endif

void sched_msg_remove(Message *m)
{
    2e02:	cf 93       	push	r28
    2e04:	df 93       	push	r29
    2e06:	ec 01       	movw	r28, r24
  Message *tmp;
  while(1) {
		tmp = mq_get(&schedpq, m);
    2e08:	be 01       	movw	r22, r28
    2e0a:	81 ef       	ldi	r24, 0xF1	; 241
    2e0c:	9b e0       	ldi	r25, 0x0B	; 11
    2e0e:	0e 94 d6 1a 	call	0x35ac
		if(tmp) {
    2e12:	00 97       	sbiw	r24, 0x00	; 0
    2e14:	19 f0       	breq	.+6      	; 0x2e1c
			msg_dispose(tmp);
    2e16:	0e 94 a3 1b 	call	0x3746
    2e1a:	f6 cf       	rjmp	.-20     	; 0x2e08
    2e1c:	df 91       	pop	r29
    2e1e:	cf 91       	pop	r28
    2e20:	08 95       	ret

00002e22 <sched_gc>:
		} else {
			break;
		}
  }
}

void sched_gc( void )
{
    2e22:	ef 92       	push	r14
    2e24:	ff 92       	push	r15
    2e26:	1f 93       	push	r17
    2e28:	cf 93       	push	r28
    2e2a:	df 93       	push	r29
	register uint8_t i = 0;
	//
	// Mark message payload
	//
	mq_gc_mark_payload( &schedpq, KER_SCHED_PID );
    2e2c:	62 e0       	ldi	r22, 0x02	; 2
    2e2e:	81 ef       	ldi	r24, 0xF1	; 241
    2e30:	9b e0       	ldi	r25, 0x0B	; 11
    2e32:	0e 94 0b 1b 	call	0x3616
    2e36:	13 e0       	ldi	r17, 0x03	; 3
    2e38:	e1 e0       	ldi	r30, 0x01	; 1
    2e3a:	ee 2e       	mov	r14, r30
    2e3c:	ec e0       	ldi	r30, 0x0C	; 12
    2e3e:	fe 2e       	mov	r15, r30
	
	//
	// Mark slab for module control blocks
	//
	for( i = 0; i < SCHED_NUMBER_BINS; i++ ) {
		sos_module_t *itr = mod_bin[i];
    2e40:	f7 01       	movw	r30, r14
    2e42:	c1 91       	ld	r28, Z+
    2e44:	d1 91       	ld	r29, Z+
    2e46:	7f 01       	movw	r14, r30
		while( itr != NULL ) {
			slab_gc_mark( &sched_slab, itr );
			itr = itr->next;
    2e48:	20 97       	sbiw	r28, 0x00	; 0
    2e4a:	49 f0       	breq	.+18     	; 0x2e5e
    2e4c:	be 01       	movw	r22, r28
    2e4e:	83 eb       	ldi	r24, 0xB3	; 179
    2e50:	99 e0       	ldi	r25, 0x09	; 9
    2e52:	0e 94 2a 3e 	call	0x7c54
    2e56:	09 90       	ld	r0, Y+
    2e58:	d8 81       	ld	r29, Y
    2e5a:	c0 2d       	mov	r28, r0
    2e5c:	f5 cf       	rjmp	.-22     	; 0x2e48
    2e5e:	11 50       	subi	r17, 0x01	; 1
    2e60:	17 ff       	sbrs	r17, 7
    2e62:	ee cf       	rjmp	.-36     	; 0x2e40
		}
	}
	slab_gc( &sched_slab, KER_SCHED_PID );
    2e64:	62 e0       	ldi	r22, 0x02	; 2
    2e66:	83 eb       	ldi	r24, 0xB3	; 179
    2e68:	99 e0       	ldi	r25, 0x09	; 9
    2e6a:	0e 94 6e 3e 	call	0x7cdc
	malloc_gc( KER_SCHED_PID );
    2e6e:	82 e0       	ldi	r24, 0x02	; 2
    2e70:	0e 94 db 12 	call	0x25b6
    2e74:	df 91       	pop	r29
    2e76:	cf 91       	pop	r28
    2e78:	1f 91       	pop	r17
    2e7a:	ff 90       	pop	r15
    2e7c:	ef 90       	pop	r14
    2e7e:	08 95       	ret

00002e80 <sched_msg_gc>:
}

void sched_msg_gc( void )
{
	mq_gc_mark_hdr( &schedpq, KER_SCHED_PID );
    2e80:	62 e0       	ldi	r22, 0x02	; 2
    2e82:	81 ef       	ldi	r24, 0xF1	; 241
    2e84:	9b e0       	ldi	r25, 0x0B	; 11
    2e86:	0e 94 4f 1b 	call	0x369e
    2e8a:	08 95       	ret

00002e8c <ker_msg_change_rules>:
}
/**
 * @brief Message filtering rules interface
 * @param rules_in  new rule
 */
int8_t ker_msg_change_rules(sos_pid_t sid, uint8_t rules_in)
{
    2e8c:	cf 93       	push	r28
    2e8e:	c6 2f       	mov	r28, r22
  sos_module_t *handle = ker_get_module(sid);
    2e90:	0e 94 9d 13 	call	0x273a
    2e94:	fc 01       	movw	r30, r24
  if(handle == NULL) return -EINVAL;
    2e96:	89 2b       	or	r24, r25
    2e98:	19 f4       	brne	.+6      	; 0x2ea0
    2e9a:	8a ee       	ldi	r24, 0xEA	; 234
    2e9c:	9f ef       	ldi	r25, 0xFF	; 255
    2e9e:	07 c0       	rjmp	.+14     	; 0x2eae
  //! keep kernel state
  handle->flag &= 0x0F;
    2ea0:	85 81       	ldd	r24, Z+5	; 0x05
    2ea2:	8f 70       	andi	r24, 0x0F	; 15

  handle->flag |= (rules_in & 0xF0);
    2ea4:	c0 7f       	andi	r28, 0xF0	; 240
    2ea6:	8c 2b       	or	r24, r28
    2ea8:	85 83       	std	Z+5, r24	; 0x05
  return 0;
    2eaa:	80 e0       	ldi	r24, 0x00	; 0
    2eac:	90 e0       	ldi	r25, 0x00	; 0
    2eae:	cf 91       	pop	r28
    2eb0:	08 95       	ret

00002eb2 <sched_get_msg_rule>:
}

/**
 * @brief get message rules
 */
int8_t sched_get_msg_rule(sos_pid_t pid, sos_ker_flag_t *rules)
{
    2eb2:	cf 93       	push	r28
    2eb4:	df 93       	push	r29
    2eb6:	eb 01       	movw	r28, r22
  sos_module_t *handle = ker_get_module(pid);
    2eb8:	0e 94 9d 13 	call	0x273a
    2ebc:	fc 01       	movw	r30, r24
  if(handle == NULL) return -EINVAL;
    2ebe:	89 2b       	or	r24, r25
    2ec0:	19 f4       	brne	.+6      	; 0x2ec8
    2ec2:	8a ee       	ldi	r24, 0xEA	; 234
    2ec4:	9f ef       	ldi	r25, 0xFF	; 255
    2ec6:	05 c0       	rjmp	.+10     	; 0x2ed2
  *rules = handle->flag & 0xF0;
    2ec8:	85 81       	ldd	r24, Z+5	; 0x05
    2eca:	80 7f       	andi	r24, 0xF0	; 240
    2ecc:	88 83       	st	Y, r24
  return 0;
    2ece:	80 e0       	ldi	r24, 0x00	; 0
    2ed0:	90 e0       	ldi	r25, 0x00	; 0
    2ed2:	df 91       	pop	r29
    2ed4:	cf 91       	pop	r28
    2ed6:	08 95       	ret

00002ed8 <sched>:
}

/**
 * @brief post crash check up
 */
#if 0
void sched_post_crash_checkup()
{
  sos_pid_t failed_pid;
  mod_handle_t h;

  while((failed_pid = mem_check_memory()) != NULL_PID) {
	// we probably need to report failure here
	h = sched_get_mod_handle(failed_pid);
	if(h >= 0) {
	  module_list[h].flag |= SOS_KER_MEM_FAILED;

	}
  }
  // Other crash testing goes here
}
#endif

#if 0
static void sched_send_crash_report()
{
  if(crash_report != NULL) {
	post_net(KER_SCHED_PID, KER_SCHED_PID, MSG_SCHED_CRASH_REPORT,
			 crash_report_len, crash_report, SOS_MSG_RELEASE, BCAST_ADDRESS);
  }
}
#endif

/**
 * @brief Message filter.
 * Check for promiscuous mode request in the destination module
 * @return true for message shoud be filtered out, false for message is valid
 */
static inline bool sched_message_filtered(sos_module_t *h, Message *m)
{
  sos_ker_flag_t rules;
  // check if it is from network
  if(flag_msg_from_network(m->flag) == 0) return false;
  rules = h->flag;

  // check for promiscuous mode
  if((rules & SOS_MSG_RULES_PROMISCUOUS) == 0){
	// module request to have no promiscuous message
	if(m->daddr != node_address && m->daddr != BCAST_ADDRESS){
	  DEBUG("filtered\n");
	  return true;
	}
  }
  return false;
}

void sched(void)
{
    2ed8:	8f 92       	push	r8
    2eda:	9f 92       	push	r9
    2edc:	af 92       	push	r10
    2ede:	bf 92       	push	r11
    2ee0:	cf 92       	push	r12
    2ee2:	df 92       	push	r13
    2ee4:	ef 92       	push	r14
    2ee6:	ff 92       	push	r15
    2ee8:	0f 93       	push	r16
    2eea:	1f 93       	push	r17
    2eec:	cf 93       	push	r28
    2eee:	df 93       	push	r29
	ENABLE_GLOBAL_INTERRUPTS();
    2ef0:	78 94       	sei

	ker_log_start();
	for(;;){
		SOS_MEASUREMENT_IDLE_END();
#ifdef SOS_USE_PREEMPTION
		// Send the msgs on the queue
		if(schedpq.head != NULL) {
			do_dispatch(mq_dequeue(&schedpq));
#else
	DISABLE_GLOBAL_INTERRUPTS();
    2ef2:	f8 94       	cli
	
	if (int_ready != 0) {
    2ef4:	80 91 a0 09 	lds	r24, 0x09A0
    2ef8:	88 23       	and	r24, r24
    2efa:	b1 f0       	breq	.+44     	; 0x2f28
		ENABLE_GLOBAL_INTERRUPTS();
    2efc:	78 94       	sei
		if (true == sched_stalled) continue;
    2efe:	80 91 9f 09 	lds	r24, 0x099F
    2f02:	81 30       	cpi	r24, 0x01	; 1
    2f04:	b1 f3       	breq	.-20     	; 0x2ef2
    2f06:	10 92 a0 09 	sts	0x09A0, r1
    2f0a:	13 e0       	ldi	r17, 0x03	; 3
    2f0c:	cb ea       	ldi	r28, 0xAB	; 171
    2f0e:	d9 e0       	ldi	r29, 0x09	; 9
    2f10:	e8 81       	ld	r30, Y
    2f12:	f9 81       	ldd	r31, Y+1	; 0x01
    2f14:	30 97       	sbiw	r30, 0x00	; 0
    2f16:	19 f0       	breq	.+6      	; 0x2f1e
    2f18:	18 82       	st	Y, r1
    2f1a:	19 82       	std	Y+1, r1	; 0x01
    2f1c:	09 95       	icall
    2f1e:	11 50       	subi	r17, 0x01	; 1
    2f20:	22 96       	adiw	r28, 0x02	; 2
    2f22:	17 ff       	sbrs	r17, 7
    2f24:	f5 cf       	rjmp	.-22     	; 0x2f10
    2f26:	99 c0       	rjmp	.+306    	; 0x305a
		handle_callback();
	} else if( schedpq.msg_cnt != 0 ) {
    2f28:	80 91 f1 0b 	lds	r24, 0x0BF1
    2f2c:	88 23       	and	r24, r24
    2f2e:	09 f4       	brne	.+2      	; 0x2f32
    2f30:	8d c0       	rjmp	.+282    	; 0x304c
		ENABLE_GLOBAL_INTERRUPTS();
    2f32:	78 94       	sei
		if (true == sched_stalled) continue;
    2f34:	80 91 9f 09 	lds	r24, 0x099F
    2f38:	81 30       	cpi	r24, 0x01	; 1
    2f3a:	d9 f2       	breq	.-74     	; 0x2ef2
    2f3c:	aa 24       	eor	r10, r10
    2f3e:	bb 24       	eor	r11, r11
    2f40:	1f ef       	ldi	r17, 0xFF	; 255
    2f42:	91 2e       	mov	r9, r17
    2f44:	c2 e0       	ldi	r28, 0x02	; 2
    2f46:	8c 2e       	mov	r8, r28
    2f48:	81 ef       	ldi	r24, 0xF1	; 241
    2f4a:	9b e0       	ldi	r25, 0x0B	; 11
    2f4c:	0e 94 21 1a 	call	0x3442
    2f50:	ec 01       	movw	r28, r24
    2f52:	89 2b       	or	r24, r25
    2f54:	09 f4       	brne	.+2      	; 0x2f58
    2f56:	81 c0       	rjmp	.+258    	; 0x305a
    2f58:	88 81       	ld	r24, Y
    2f5a:	0e 94 9d 13 	call	0x273a
    2f5e:	8c 01       	movw	r16, r24
    2f60:	8e 81       	ldd	r24, Y+6	; 0x06
    2f62:	83 30       	cpi	r24, 0x03	; 3
    2f64:	11 f4       	brne	.+4      	; 0x2f6a
    2f66:	a8 84       	ldd	r10, Y+8	; 0x08
    2f68:	b9 84       	ldd	r11, Y+9	; 0x09
    2f6a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f6c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f6e:	83 fd       	sbrc	r24, 3
    2f70:	99 80       	ldd	r9, Y+1	; 0x01
    2f72:	ce 01       	movw	r24, r28
    2f74:	0e 94 8d 34 	call	0x691a
    2f78:	01 15       	cp	r16, r1
    2f7a:	11 05       	cpc	r17, r1
    2f7c:	09 f4       	brne	.+2      	; 0x2f80
    2f7e:	4c c0       	rjmp	.+152    	; 0x3018
    2f80:	6a 85       	ldd	r22, Y+10	; 0x0a
    2f82:	7b 85       	ldd	r23, Y+11	; 0x0b
    2f84:	87 2f       	mov	r24, r23
    2f86:	99 27       	eor	r25, r25
    2f88:	21 e0       	ldi	r18, 0x01	; 1
    2f8a:	30 e0       	ldi	r19, 0x00	; 0
    2f8c:	82 23       	and	r24, r18
    2f8e:	93 23       	and	r25, r19
    2f90:	82 17       	cp	r24, r18
    2f92:	93 07       	cpc	r25, r19
    2f94:	c9 f4       	brne	.+50     	; 0x2fc8
    2f96:	f8 01       	movw	r30, r16
    2f98:	85 81       	ldd	r24, Z+5	; 0x05
    2f9a:	99 27       	eor	r25, r25
    2f9c:	a6 e0       	ldi	r26, 0x06	; 6
    2f9e:	96 95       	lsr	r25
    2fa0:	87 95       	ror	r24
    2fa2:	aa 95       	dec	r26
    2fa4:	e1 f7       	brne	.-8      	; 0x2f9e
    2fa6:	81 70       	andi	r24, 0x01	; 1
    2fa8:	90 70       	andi	r25, 0x00	; 0
    2faa:	82 17       	cp	r24, r18
    2fac:	93 07       	cpc	r25, r19
    2fae:	61 f0       	breq	.+24     	; 0x2fc8
    2fb0:	2a 81       	ldd	r18, Y+2	; 0x02
    2fb2:	3b 81       	ldd	r19, Y+3	; 0x03
    2fb4:	80 91 04 01 	lds	r24, 0x0104
    2fb8:	90 91 05 01 	lds	r25, 0x0105
    2fbc:	28 17       	cp	r18, r24
    2fbe:	39 07       	cpc	r19, r25
    2fc0:	19 f0       	breq	.+6      	; 0x2fc8
    2fc2:	2f 5f       	subi	r18, 0xFF	; 255
    2fc4:	3f 4f       	sbci	r19, 0xFF	; 255
    2fc6:	41 f5       	brne	.+80     	; 0x3018
    2fc8:	40 e0       	ldi	r20, 0x00	; 0
    2fca:	50 e0       	ldi	r21, 0x00	; 0
    2fcc:	f8 01       	movw	r30, r16
    2fce:	82 81       	ldd	r24, Z+2	; 0x02
    2fd0:	93 81       	ldd	r25, Z+3	; 0x03
    2fd2:	aa 27       	eor	r26, r26
    2fd4:	bb 27       	eor	r27, r27
    2fd6:	88 0f       	add	r24, r24
    2fd8:	99 1f       	adc	r25, r25
    2fda:	aa 1f       	adc	r26, r26
    2fdc:	bb 1f       	adc	r27, r27
    2fde:	0e 96       	adiw	r24, 0x0e	; 14
    2fe0:	a1 1d       	adc	r26, r1
    2fe2:	b1 1d       	adc	r27, r1
    2fe4:	ab bf       	out	0x3b, r26	; 59
    2fe6:	fc 01       	movw	r30, r24
    2fe8:	c7 90       	elpm	r12, Z+
    2fea:	d6 90       	elpm	r13, Z
    2fec:	f8 01       	movw	r30, r16
    2fee:	e6 80       	ldd	r14, Z+6	; 0x06
    2ff0:	f7 80       	ldd	r15, Z+7	; 0x07
    2ff2:	62 ff       	sbrs	r22, 2
    2ff4:	06 c0       	rjmp	.+12     	; 0x3002
 * @return SOS_OK or error code upon fail
 * Add check to prevent a change of ownership to the 'null' user.
 */
static inline int8_t ker_change_own(void* ptr, sos_pid_t id)
{
    2ff6:	88 81       	ld	r24, Y
  return sos_blk_mem_change_own(ptr, id, false);
    2ff8:	68 2f       	mov	r22, r24
    2ffa:	88 85       	ldd	r24, Y+8	; 0x08
    2ffc:	99 85       	ldd	r25, Y+9	; 0x09
    2ffe:	0e 94 ee 0f 	call	0x1fdc
    3002:	f8 01       	movw	r30, r16
    3004:	84 81       	ldd	r24, Z+4	; 0x04
    3006:	80 93 ed 0b 	sts	0x0BED, r24
    300a:	be 01       	movw	r22, r28
    300c:	c7 01       	movw	r24, r14
    300e:	f6 01       	movw	r30, r12
    3010:	09 95       	icall
    3012:	88 23       	and	r24, r24
    3014:	09 f4       	brne	.+2      	; 0x3018
    3016:	88 2e       	mov	r8, r24
    3018:	a1 14       	cp	r10, r1
    301a:	b1 04       	cpc	r11, r1
    301c:	21 f0       	breq	.+8      	; 0x3026
    301e:	c5 01       	movw	r24, r10
    3020:	0e 94 a3 1b 	call	0x3746
    3024:	0f c0       	rjmp	.+30     	; 0x3044
    3026:	ff ef       	ldi	r31, 0xFF	; 255
    3028:	9f 16       	cp	r9, r31
    302a:	61 f0       	breq	.+24     	; 0x3044
    302c:	88 2d       	mov	r24, r8
    302e:	99 27       	eor	r25, r25
    3030:	7c 01       	movw	r14, r24
    3032:	8e 01       	movw	r16, r28
    3034:	24 e1       	ldi	r18, 0x14	; 20
    3036:	43 e0       	ldi	r20, 0x03	; 3
    3038:	62 e0       	ldi	r22, 0x02	; 2
    303a:	89 2d       	mov	r24, r9
    303c:	0e 94 c7 18 	call	0x318e
    3040:	87 ff       	sbrs	r24, 7
    3042:	0b c0       	rjmp	.+22     	; 0x305a
    3044:	ce 01       	movw	r24, r28
    3046:	0e 94 a3 1b 	call	0x3746
    304a:	07 c0       	rjmp	.+14     	; 0x305a
		do_dispatch();
#endif
		}
		else {
			SOS_MEASUREMENT_IDLE_START();
			// ENABLE_INTERRUPT() is done inside atomic_hardware_sleep()
			ker_log_flush();
			atomic_hardware_sleep();
    304c:	85 b7       	in	r24, 0x35	; 53
    304e:	80 62       	ori	r24, 0x20	; 32
    3050:	85 bf       	out	0x35, r24	; 53
    3052:	78 94       	sei
    3054:	88 95       	sleep
    3056:	00 00       	nop
    3058:	00 00       	nop
		}
		watchdog_reset();
    305a:	a8 95       	wdr
    305c:	4a cf       	rjmp	.-364    	; 0x2ef2

0000305e <ker_panic>:
	}
}


/**
 * Use by SYS API to notify module's panic
 */
int8_t ker_mod_panic(sos_pid_t pid)
{   
#ifdef SOS_USE_EXCEPTION_HANDLING
	fault_pid = pid;
  longjmp( sched_jbuf, 1 );
#else
  return ker_panic();
#endif
} 
  
/**
 * Used by the kernel to notify kernel component panic
 */
int8_t ker_panic(void)
{
    305e:	cf 93       	push	r28
    3060:	df 93       	push	r29
  uint16_t val;
  LED_DBG(LED_RED_ON);
    3062:	81 e0       	ldi	r24, 0x01	; 1
    3064:	0e 94 bc 3e 	call	0x7d78
  LED_DBG(LED_GREEN_ON);
    3068:	82 e0       	ldi	r24, 0x02	; 2
    306a:	0e 94 bc 3e 	call	0x7d78
  LED_DBG(LED_YELLOW_ON);
    306e:	83 e0       	ldi	r24, 0x03	; 3
    3070:	0e 94 bc 3e 	call	0x7d78
  val = 0xffff;
    3074:	cf ef       	ldi	r28, 0xFF	; 255
    3076:	df ef       	ldi	r29, 0xFF	; 255
#ifdef SOS_SIM
		printf("kernel panic\n");
		printf("Possible faulting module = %d\n", ker_get_current_pid());
    exit(1);
    return -EINVAL;
#else
  while (1){
#ifndef DISABLE_WDT
    watchdog_reset();
    3078:	a8 95       	wdr
#endif
    if (val == 0){
    307a:	20 97       	sbiw	r28, 0x00	; 0
    307c:	49 f4       	brne	.+18     	; 0x3090
      LED_DBG(LED_RED_TOGGLE);
    307e:	87 e0       	ldi	r24, 0x07	; 7
    3080:	0e 94 bc 3e 	call	0x7d78
      LED_DBG(LED_GREEN_TOGGLE);
    3084:	88 e0       	ldi	r24, 0x08	; 8
    3086:	0e 94 bc 3e 	call	0x7d78
      LED_DBG(LED_YELLOW_TOGGLE);
    308a:	89 e0       	ldi	r24, 0x09	; 9
    308c:	0e 94 bc 3e 	call	0x7d78
#ifdef SOS_SIM
      DEBUG("Malloc_Exception");
#endif
    }
    val--;
    3090:	21 97       	sbiw	r28, 0x01	; 1
    3092:	f2 cf       	rjmp	.-28     	; 0x3078

00003094 <ker_mod_panic>:
    3094:	0e 94 2f 18 	call	0x305e
    3098:	99 27       	eor	r25, r25
    309a:	87 fd       	sbrc	r24, 7
    309c:	90 95       	com	r25
    309e:	08 95       	ret

000030a0 <post_short>:
//----------------------------------------------------------------------------
// Post a message with no payload
int8_t post_short(sos_pid_t did, sos_pid_t sid, uint8_t type, uint8_t byte,
				  uint16_t word, uint16_t flag)
{
    30a0:	bf 92       	push	r11
    30a2:	cf 92       	push	r12
    30a4:	df 92       	push	r13
    30a6:	ef 92       	push	r14
    30a8:	ff 92       	push	r15
    30aa:	0f 93       	push	r16
    30ac:	1f 93       	push	r17
    30ae:	cf 93       	push	r28
    30b0:	d8 2e       	mov	r13, r24
    30b2:	c6 2e       	mov	r12, r22
    30b4:	c4 2f       	mov	r28, r20
    30b6:	b2 2e       	mov	r11, r18
  Message *m = msg_create();
    30b8:	0e 94 8b 1b 	call	0x3716
    30bc:	fc 01       	movw	r30, r24
  MsgParam *p;
  if(m == NULL){
    30be:	89 2b       	or	r24, r25
    30c0:	19 f4       	brne	.+6      	; 0x30c8
	return -ENOMEM;
    30c2:	84 ef       	ldi	r24, 0xF4	; 244
    30c4:	9f ef       	ldi	r25, 0xFF	; 255
    30c6:	1e c0       	rjmp	.+60     	; 0x3104
  }
  m->daddr = node_address;
    30c8:	80 91 04 01 	lds	r24, 0x0104
    30cc:	90 91 05 01 	lds	r25, 0x0105
    30d0:	82 83       	std	Z+2, r24	; 0x02
    30d2:	93 83       	std	Z+3, r25	; 0x03
  m->did = did;
    30d4:	d0 82       	st	Z, r13
  m->type = type;
    30d6:	c6 83       	std	Z+6, r28	; 0x06
  m->saddr = node_address;
    30d8:	80 91 04 01 	lds	r24, 0x0104
    30dc:	90 91 05 01 	lds	r25, 0x0105
    30e0:	84 83       	std	Z+4, r24	; 0x04
    30e2:	95 83       	std	Z+5, r25	; 0x05
  m->sid = sid;
    30e4:	c1 82       	std	Z+1, r12	; 0x01
  m->len = 3;
    30e6:	83 e0       	ldi	r24, 0x03	; 3
    30e8:	87 83       	std	Z+7, r24	; 0x07
#ifdef SOS_USE_PREEMPTION
  // assign priority based on did
  m->priority = get_module_priority(did);
#endif
  p = (MsgParam*)(m->payload);
  p->byte = byte;
    30ea:	b4 86       	std	Z+12, r11	; 0x0c
  p->word = word;
    30ec:	05 87       	std	Z+13, r16	; 0x0d
    30ee:	16 87       	std	Z+14, r17	; 0x0e
  m->flag = flag & ((sos_ker_flag_t)(~SOS_MSG_RELEASE));
    30f0:	8b ef       	ldi	r24, 0xFB	; 251
    30f2:	e8 22       	and	r14, r24
    30f4:	ff 24       	eor	r15, r15
    30f6:	e2 86       	std	Z+10, r14	; 0x0a
    30f8:	f3 86       	std	Z+11, r15	; 0x0b
  sched_msg_alloc(m);
    30fa:	cf 01       	movw	r24, r30
    30fc:	0e 94 ec 16 	call	0x2dd8
  ker_log( SOS_LOG_POST_SHORT, sid, did ); 
  return SOS_OK;
    3100:	80 e0       	ldi	r24, 0x00	; 0
    3102:	90 e0       	ldi	r25, 0x00	; 0
    3104:	cf 91       	pop	r28
    3106:	1f 91       	pop	r17
    3108:	0f 91       	pop	r16
    310a:	ff 90       	pop	r15
    310c:	ef 90       	pop	r14
    310e:	df 90       	pop	r13
    3110:	cf 90       	pop	r12
    3112:	bf 90       	pop	r11
    3114:	08 95       	ret

00003116 <post_longer>:
}

// Post a message with payload and source address
int8_t post_longer(sos_pid_t did, sos_pid_t sid, uint8_t type, uint8_t len,
				   void *data, uint16_t flag, uint16_t saddr)
{
    3116:	9f 92       	push	r9
    3118:	af 92       	push	r10
    311a:	bf 92       	push	r11
    311c:	cf 92       	push	r12
    311e:	df 92       	push	r13
    3120:	ef 92       	push	r14
    3122:	ff 92       	push	r15
    3124:	0f 93       	push	r16
    3126:	1f 93       	push	r17
    3128:	cf 93       	push	r28
    312a:	b8 2e       	mov	r11, r24
    312c:	96 2e       	mov	r9, r22
    312e:	c4 2f       	mov	r28, r20
    3130:	a2 2e       	mov	r10, r18
  Message *m = msg_create();
    3132:	0e 94 8b 1b 	call	0x3716
    3136:	fc 01       	movw	r30, r24
  if(m == NULL){
    3138:	89 2b       	or	r24, r25
    313a:	49 f4       	brne	.+18     	; 0x314e
	if(flag_msg_release(flag)){
    313c:	e2 fe       	sbrs	r14, 2
    313e:	04 c0       	rjmp	.+8      	; 0x3148
 * @return void
 */
static inline void ker_free(void* ptr)
{
  sos_blk_mem_free(ptr, false);
    3140:	60 e0       	ldi	r22, 0x00	; 0
    3142:	c8 01       	movw	r24, r16
    3144:	0e 94 98 11 	call	0x2330
	  ker_free(data);
	}
	return -ENOMEM;
    3148:	84 ef       	ldi	r24, 0xF4	; 244
    314a:	9f ef       	ldi	r25, 0xFF	; 255
    314c:	15 c0       	rjmp	.+42     	; 0x3178
  }
  m->daddr = node_address;
    314e:	80 91 04 01 	lds	r24, 0x0104
    3152:	90 91 05 01 	lds	r25, 0x0105
    3156:	82 83       	std	Z+2, r24	; 0x02
    3158:	93 83       	std	Z+3, r25	; 0x03
  m->did = did;
    315a:	b0 82       	st	Z, r11
  m->type = type;
    315c:	c6 83       	std	Z+6, r28	; 0x06
  m->saddr = saddr;
    315e:	c4 82       	std	Z+4, r12	; 0x04
    3160:	d5 82       	std	Z+5, r13	; 0x05
  m->sid = sid;
    3162:	91 82       	std	Z+1, r9	; 0x01
  m->len = len;
    3164:	a7 82       	std	Z+7, r10	; 0x07
  m->data = (uint8_t*)data;
    3166:	00 87       	std	Z+8, r16	; 0x08
    3168:	11 87       	std	Z+9, r17	; 0x09
#ifdef SOS_USE_PREEMPTION
  // assign priority based on priority of id
  m->priority = get_module_priority(did);
#endif
  m->flag = flag;
    316a:	e2 86       	std	Z+10, r14	; 0x0a
    316c:	f3 86       	std	Z+11, r15	; 0x0b
  sched_msg_alloc(m);
    316e:	cf 01       	movw	r24, r30
    3170:	0e 94 ec 16 	call	0x2dd8
  ker_log( SOS_LOG_POST_LONG, sid, did ); 
  return SOS_OK;
    3174:	80 e0       	ldi	r24, 0x00	; 0
    3176:	90 e0       	ldi	r25, 0x00	; 0
    3178:	cf 91       	pop	r28
    317a:	1f 91       	pop	r17
    317c:	0f 91       	pop	r16
    317e:	ff 90       	pop	r15
    3180:	ef 90       	pop	r14
    3182:	df 90       	pop	r13
    3184:	cf 90       	pop	r12
    3186:	bf 90       	pop	r11
    3188:	af 90       	pop	r10
    318a:	9f 90       	pop	r9
    318c:	08 95       	ret

0000318e <post_long>:
}

// Post a message with payload
int8_t post_long(sos_pid_t did, sos_pid_t sid, uint8_t type, uint8_t len,
				 void *data, uint16_t flag)
{
    318e:	cf 92       	push	r12
    3190:	df 92       	push	r13
    3192:	ef 92       	push	r14
    3194:	ff 92       	push	r15
    3196:	0f 93       	push	r16
    3198:	1f 93       	push	r17
    319a:	76 2f       	mov	r23, r22
    319c:	64 2f       	mov	r22, r20
    319e:	92 2f       	mov	r25, r18
    return post_longer(did, sid,
    31a0:	c0 90 04 01 	lds	r12, 0x0104
    31a4:	d0 90 05 01 	lds	r13, 0x0105
    31a8:	29 2f       	mov	r18, r25
    31aa:	46 2f       	mov	r20, r22
    31ac:	67 2f       	mov	r22, r23
    31ae:	0e 94 8b 18 	call	0x3116
					   type, len,
					   data, flag,
					   node_address);
}
    31b2:	99 27       	eor	r25, r25
    31b4:	87 fd       	sbrc	r24, 7
    31b6:	90 95       	com	r25
    31b8:	1f 91       	pop	r17
    31ba:	0f 91       	pop	r16
    31bc:	ff 90       	pop	r15
    31be:	ef 90       	pop	r14
    31c0:	df 90       	pop	r13
    31c2:	cf 90       	pop	r12
    31c4:	08 95       	ret

000031c6 <ker_sys_post>:

int8_t ker_sys_post(sos_pid_t did, uint8_t type, uint8_t size, void *data, 
		uint16_t flag)
{
    31c6:	9f 92       	push	r9
    31c8:	af 92       	push	r10
    31ca:	bf 92       	push	r11
    31cc:	cf 92       	push	r12
    31ce:	df 92       	push	r13
    31d0:	ef 92       	push	r14
    31d2:	ff 92       	push	r15
    31d4:	0f 93       	push	r16
    31d6:	1f 93       	push	r17
    31d8:	cf 93       	push	r28
    31da:	98 2e       	mov	r9, r24
    31dc:	a6 2e       	mov	r10, r22
    31de:	b4 2e       	mov	r11, r20
    31e0:	69 01       	movw	r12, r18
	sos_pid_t my_id = ker_get_current_pid();
    31e2:	0e 94 e2 13 	call	0x27c4
    31e6:	c8 2f       	mov	r28, r24
	if(post_long(did, my_id, type, size, data, flag) != SOS_OK )
    31e8:	78 01       	movw	r14, r16
    31ea:	86 01       	movw	r16, r12
    31ec:	2b 2d       	mov	r18, r11
    31ee:	4a 2d       	mov	r20, r10
    31f0:	68 2f       	mov	r22, r24
    31f2:	89 2d       	mov	r24, r9
    31f4:	0e 94 c7 18 	call	0x318e
    31f8:	88 23       	and	r24, r24
    31fa:	39 f0       	breq	.+14     	; 0x320a
	{
		return ker_mod_panic(my_id);
    31fc:	8c 2f       	mov	r24, r28
    31fe:	0e 94 4a 18 	call	0x3094
    3202:	99 27       	eor	r25, r25
    3204:	87 fd       	sbrc	r24, 7
    3206:	90 95       	com	r25
    3208:	02 c0       	rjmp	.+4      	; 0x320e
	}
	return SOS_OK;
    320a:	80 e0       	ldi	r24, 0x00	; 0
    320c:	90 e0       	ldi	r25, 0x00	; 0
    320e:	cf 91       	pop	r28
    3210:	1f 91       	pop	r17
    3212:	0f 91       	pop	r16
    3214:	ff 90       	pop	r15
    3216:	ef 90       	pop	r14
    3218:	df 90       	pop	r13
    321a:	cf 90       	pop	r12
    321c:	bf 90       	pop	r11
    321e:	af 90       	pop	r10
    3220:	9f 90       	pop	r9
    3222:	08 95       	ret

00003224 <ker_msg_take_data>:
}


uint8_t *ker_msg_take_data(sos_pid_t pid, Message *msg_in)
{
    3224:	0f 93       	push	r16
    3226:	1f 93       	push	r17
    3228:	cf 93       	push	r28
    322a:	df 93       	push	r29
    322c:	28 2f       	mov	r18, r24
    322e:	fb 01       	movw	r30, r22
  uint8_t *ret;
  Message *msg;   //!< message we will be taking data out

  if(msg_in->type == MSG_PKT_SENDDONE) {
    3230:	86 81       	ldd	r24, Z+6	; 0x06
    3232:	83 30       	cpi	r24, 0x03	; 3
    3234:	19 f4       	brne	.+6      	; 0x323c
	msg = (Message*) (msg_in->data);
    3236:	c0 85       	ldd	r28, Z+8	; 0x08
    3238:	d1 85       	ldd	r29, Z+9	; 0x09
    323a:	01 c0       	rjmp	.+2      	; 0x323e
  } else {
	msg = msg_in;
    323c:	eb 01       	movw	r28, r22
  }
  if(flag_msg_release(msg->flag)) {
    323e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3240:	9b 85       	ldd	r25, Y+11	; 0x0b
    3242:	82 ff       	sbrs	r24, 2
    3244:	11 c0       	rjmp	.+34     	; 0x3268
 * Add check to prevent a change of ownership to the 'null' user.
 */
static inline int8_t ker_change_own(void* ptr, sos_pid_t id)
{
  return sos_blk_mem_change_own(ptr, id, false);
    3246:	40 e0       	ldi	r20, 0x00	; 0
    3248:	62 2f       	mov	r22, r18
    324a:	88 85       	ldd	r24, Y+8	; 0x08
    324c:	99 85       	ldd	r25, Y+9	; 0x09
    324e:	0e 94 ee 0f 	call	0x1fdc
	ker_change_own((void*)msg->data, pid);
	ret = msg->data;
    3252:	08 85       	ldd	r16, Y+8	; 0x08
    3254:	19 85       	ldd	r17, Y+9	; 0x09
	msg->len = 0;
    3256:	1f 82       	std	Y+7, r1	; 0x07
	msg->data = NULL;
    3258:	18 86       	std	Y+8, r1	; 0x08
    325a:	19 86       	std	Y+9, r1	; 0x09
	msg->flag &= ~(SOS_MSG_RELEASE);
    325c:	8a 85       	ldd	r24, Y+10	; 0x0a
    325e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3260:	8b 7f       	andi	r24, 0xFB	; 251
    3262:	8a 87       	std	Y+10, r24	; 0x0a
    3264:	9b 87       	std	Y+11, r25	; 0x0b
    3266:	12 c0       	rjmp	.+36     	; 0x328c
 * @return Returns a pointer to the allocated memory.
 * Will return a NULL pointer if the call to sys_malloc fails.
 */
static inline void *ker_malloc(uint16_t size, sos_pid_t id)
{
    3268:	8f 81       	ldd	r24, Y+7	; 0x07
  return sos_blk_mem_alloc(size, id, false);
    326a:	40 e0       	ldi	r20, 0x00	; 0
    326c:	62 2f       	mov	r22, r18
    326e:	99 27       	eor	r25, r25
    3270:	0e 94 14 11 	call	0x2228
    3274:	8c 01       	movw	r16, r24
	return ret;
  } else {
	ret = (uint8_t*)ker_malloc(msg->len, pid);
	if(ret == NULL) return NULL;
    3276:	89 2b       	or	r24, r25
    3278:	49 f0       	breq	.+18     	; 0x328c
	memcpy(ret, msg->data, msg->len);
    327a:	8f 81       	ldd	r24, Y+7	; 0x07
    327c:	99 27       	eor	r25, r25
    327e:	28 85       	ldd	r18, Y+8	; 0x08
    3280:	39 85       	ldd	r19, Y+9	; 0x09
    3282:	ac 01       	movw	r20, r24
    3284:	b9 01       	movw	r22, r18
    3286:	c8 01       	movw	r24, r16
    3288:	0e 94 56 59 	call	0xb2ac
	return ret;
    328c:	c8 01       	movw	r24, r16
    328e:	df 91       	pop	r29
    3290:	cf 91       	pop	r28
    3292:	1f 91       	pop	r17
    3294:	0f 91       	pop	r16
    3296:	08 95       	ret

00003298 <ker_sys_msg_take_data>:
  }
}

void* ker_sys_msg_take_data(Message *msg)
{
    3298:	ff 92       	push	r15
    329a:	0f 93       	push	r16
    329c:	1f 93       	push	r17
    329e:	cf 93       	push	r28
    32a0:	df 93       	push	r29
    32a2:	8c 01       	movw	r16, r24
	sos_pid_t my_id = ker_get_current_pid();
    32a4:	0e 94 e2 13 	call	0x27c4
    32a8:	f8 2e       	mov	r15, r24
	void *ret = ker_msg_take_data(my_id, msg);
    32aa:	b8 01       	movw	r22, r16
    32ac:	0e 94 12 19 	call	0x3224
    32b0:	ec 01       	movw	r28, r24
	if( ret != NULL ) {
    32b2:	89 2b       	or	r24, r25
    32b4:	19 f4       	brne	.+6      	; 0x32bc
		return ret;
	}
#ifndef SOS_TEST_SUITE
	ker_mod_panic(my_id);
    32b6:	8f 2d       	mov	r24, r15
    32b8:	0e 94 4a 18 	call	0x3094
#endif
	return NULL;
    32bc:	ce 01       	movw	r24, r28
    32be:	df 91       	pop	r29
    32c0:	cf 91       	pop	r28
    32c2:	1f 91       	pop	r17
    32c4:	0f 91       	pop	r16
    32c6:	ff 90       	pop	r15
    32c8:	08 95       	ret

000032ca <ker_sys_post_value>:
}


int8_t ker_sys_post_value(sos_pid_t dst_mod_id,                
		                uint8_t type, uint32_t data, uint16_t flag)
{
    32ca:	af 92       	push	r10
    32cc:	bf 92       	push	r11
    32ce:	cf 92       	push	r12
    32d0:	df 92       	push	r13
    32d2:	ef 92       	push	r14
    32d4:	ff 92       	push	r15
    32d6:	0f 93       	push	r16
    32d8:	1f 93       	push	r17
    32da:	cf 93       	push	r28
    32dc:	df 93       	push	r29
    32de:	b8 2e       	mov	r11, r24
    32e0:	a6 2e       	mov	r10, r22
    32e2:	69 01       	movw	r12, r18
    32e4:	7a 01       	movw	r14, r20
	Message *m = msg_create();
    32e6:	0e 94 8b 1b 	call	0x3716
    32ea:	ec 01       	movw	r28, r24
	sos_pid_t my_id = ker_get_current_pid();
    32ec:	0e 94 e2 13 	call	0x27c4
    32f0:	28 2f       	mov	r18, r24
	if(m == NULL){ 
    32f2:	20 97       	sbiw	r28, 0x00	; 0
    32f4:	31 f4       	brne	.+12     	; 0x3302
		return ker_mod_panic(my_id);
    32f6:	0e 94 4a 18 	call	0x3094
    32fa:	99 27       	eor	r25, r25
    32fc:	87 fd       	sbrc	r24, 7
    32fe:	90 95       	com	r25
    3300:	20 c0       	rjmp	.+64     	; 0x3342
	}
	m->daddr = node_address;
    3302:	80 91 04 01 	lds	r24, 0x0104
    3306:	90 91 05 01 	lds	r25, 0x0105
    330a:	8a 83       	std	Y+2, r24	; 0x02
    330c:	9b 83       	std	Y+3, r25	; 0x03
	m->did = dst_mod_id;
    330e:	b8 82       	st	Y, r11
	m->type = type;
    3310:	ae 82       	std	Y+6, r10	; 0x06
	m->saddr = node_address;
    3312:	80 91 04 01 	lds	r24, 0x0104
    3316:	90 91 05 01 	lds	r25, 0x0105
    331a:	8c 83       	std	Y+4, r24	; 0x04
    331c:	9d 83       	std	Y+5, r25	; 0x05
	m->sid = my_id;
    331e:	29 83       	std	Y+1, r18	; 0x01
	m->len = 4;
    3320:	84 e0       	ldi	r24, 0x04	; 4
    3322:	8f 83       	std	Y+7, r24	; 0x07
	*((uint32_t*)(m->data)) = data;
    3324:	e8 85       	ldd	r30, Y+8	; 0x08
    3326:	f9 85       	ldd	r31, Y+9	; 0x09
    3328:	c0 82       	st	Z, r12
    332a:	d1 82       	std	Z+1, r13	; 0x01
    332c:	e2 82       	std	Z+2, r14	; 0x02
    332e:	f3 82       	std	Z+3, r15	; 0x03
#ifdef SOS_USE_PREEMPTION
	// assign priority based on did
	m->priority = get_module_priority(dst_mod_id);
#endif
	m->flag = flag & ((sos_ker_flag_t)(~SOS_MSG_RELEASE));
    3330:	0b 7f       	andi	r16, 0xFB	; 251
    3332:	10 70       	andi	r17, 0x00	; 0
    3334:	0a 87       	std	Y+10, r16	; 0x0a
    3336:	1b 87       	std	Y+11, r17	; 0x0b
	sched_msg_alloc(m);
    3338:	ce 01       	movw	r24, r28
    333a:	0e 94 ec 16 	call	0x2dd8

	return SOS_OK;
    333e:	80 e0       	ldi	r24, 0x00	; 0
    3340:	90 e0       	ldi	r25, 0x00	; 0
    3342:	df 91       	pop	r29
    3344:	cf 91       	pop	r28
    3346:	1f 91       	pop	r17
    3348:	0f 91       	pop	r16
    334a:	ff 90       	pop	r15
    334c:	ef 90       	pop	r14
    334e:	df 90       	pop	r13
    3350:	cf 90       	pop	r12
    3352:	bf 90       	pop	r11
    3354:	af 90       	pop	r10
    3356:	08 95       	ret

00003358 <msg_queue_init>:
//----------------------------------------------------------------------------
//  Funcation declarations
//----------------------------------------------------------------------------
int8_t msg_queue_init()
{
    3358:	0f 93       	push	r16
	ker_slab_init( MSG_QUEUE_PID, &msg_slab, sizeof(Message), 
    335a:	00 e0       	ldi	r16, 0x00	; 0
    335c:	24 e0       	ldi	r18, 0x04	; 4
    335e:	44 e1       	ldi	r20, 0x14	; 20
    3360:	61 ee       	ldi	r22, 0xE1	; 225
    3362:	79 e0       	ldi	r23, 0x09	; 9
    3364:	8b e0       	ldi	r24, 0x0B	; 11
    3366:	0e 94 3c 3d 	call	0x7a78
			MSG_QUEUE_NUM_ITEMS, 0 );
    return 0;
}
    336a:	80 e0       	ldi	r24, 0x00	; 0
    336c:	90 e0       	ldi	r25, 0x00	; 0
    336e:	0f 91       	pop	r16
    3370:	08 95       	ret

00003372 <mq_init>:

/**
 * @brief initialize the message queue
 */
void mq_init(mq_t *q)
{
    3372:	fc 01       	movw	r30, r24
#ifdef SOS_USE_PREEMPTION
  q->head = NULL;
  q->msg_cnt = 0;
#else 
  q->msg_cnt = 0;
    3374:	10 82       	st	Z, r1
  q->hm_cnt = 0;
    3376:	13 82       	std	Z+3, r1	; 0x03
  q->sm_cnt = 0;
    3378:	12 82       	std	Z+2, r1	; 0x02
  q->lm_cnt = 0;
    337a:	11 82       	std	Z+1, r1	; 0x01
  q->hq_head = NULL;
    337c:	14 82       	std	Z+4, r1	; 0x04
    337e:	15 82       	std	Z+5, r1	; 0x05
  q->hq_tail = NULL;
    3380:	16 82       	std	Z+6, r1	; 0x06
    3382:	17 82       	std	Z+7, r1	; 0x07
  q->sq_head = NULL;
    3384:	10 86       	std	Z+8, r1	; 0x08
    3386:	11 86       	std	Z+9, r1	; 0x09
  q->sq_tail = NULL;
    3388:	12 86       	std	Z+10, r1	; 0x0a
    338a:	13 86       	std	Z+11, r1	; 0x0b
  q->lq_head = NULL;
    338c:	14 86       	std	Z+12, r1	; 0x0c
    338e:	15 86       	std	Z+13, r1	; 0x0d
  q->lq_tail = NULL;
    3390:	16 86       	std	Z+14, r1	; 0x0e
    3392:	17 86       	std	Z+15, r1	; 0x0f
    3394:	08 95       	ret

00003396 <mq_enqueue>:
#endif
}

/**
 * @brief enqueue message to message queue
 * We enqueue the message based on the flag in the message
 */
void mq_enqueue(mq_t *q, Message *m)
{
    3396:	cf 93       	push	r28
    3398:	df 93       	push	r29
    339a:	dc 01       	movw	r26, r24
    339c:	eb 01       	movw	r28, r22
  HAS_CRITICAL_SECTION;

#ifdef SOS_USE_PREEMPTION
  Message *cur;
  Message *prev;
  ENTER_CRITICAL_SECTION();

  // If head is empty, insert here
  if(q->head == NULL) {
	q->head = m;
	m->next = NULL;
	q->msg_cnt++;
	LEAVE_CRITICAL_SECTION();
	return;
  }

  // Insertion at the head of the list
  if(q->head->priority < m->priority) {
	m->next = q->head;
	q->head = m;
	q->msg_cnt++;
	LEAVE_CRITICAL_SECTION();
	return;
  }

  // Traverse through the list looking for the 
  // right insertion point based on priority
  cur = q->head->next;
  prev = q->head;
  while(cur != NULL) {
	if(cur->priority < m->priority) {
	  m->next = cur;
	  prev->next = m;
	  q->msg_cnt++;
	  LEAVE_CRITICAL_SECTION();
	  return;
	}
	prev = cur;
	cur = cur->next;
  }
  // End of list, insert at last point
  m->next = NULL;
  prev->next = m;
  q->msg_cnt++;

#else
  ENTER_CRITICAL_SECTION();
    339e:	2f b7       	in	r18, 0x3f	; 63
    33a0:	f8 94       	cli
  
  m->next = NULL;
    33a2:	1a 8a       	std	Y+18, r1	; 0x12
    33a4:	1b 8a       	std	Y+19, r1	; 0x13
  
  if(flag_high_priority(m->flag)){
    33a6:	8a 85       	ldd	r24, Y+10	; 0x0a
    33a8:	9b 85       	ldd	r25, Y+11	; 0x0b
    33aa:	86 ff       	sbrs	r24, 6
    33ac:	16 c0       	rjmp	.+44     	; 0x33da
	  //! high priority message
	  if(q->hq_head == NULL) {
    33ae:	fd 01       	movw	r30, r26
    33b0:	84 81       	ldd	r24, Z+4	; 0x04
    33b2:	95 81       	ldd	r25, Z+5	; 0x05
    33b4:	89 2b       	or	r24, r25
    33b6:	19 f4       	brne	.+6      	; 0x33be
		  //! empty head
		  q->hq_head = m;	
    33b8:	64 83       	std	Z+4, r22	; 0x04
    33ba:	75 83       	std	Z+5, r23	; 0x05
    33bc:	07 c0       	rjmp	.+14     	; 0x33cc
		  q->hq_tail = m;
	  } else {
		  //! insert to tail
		  q->hq_tail->next = m;
    33be:	fd 01       	movw	r30, r26
    33c0:	86 81       	ldd	r24, Z+6	; 0x06
    33c2:	97 81       	ldd	r25, Z+7	; 0x07
    33c4:	fc 01       	movw	r30, r24
    33c6:	62 8b       	std	Z+18, r22	; 0x12
    33c8:	73 8b       	std	Z+19, r23	; 0x13
		  q->hq_tail = m;
    33ca:	fd 01       	movw	r30, r26
    33cc:	c6 83       	std	Z+6, r28	; 0x06
    33ce:	d7 83       	std	Z+7, r29	; 0x07
	  }
	  q->hm_cnt++;
    33d0:	fd 01       	movw	r30, r26
    33d2:	83 81       	ldd	r24, Z+3	; 0x03
    33d4:	8f 5f       	subi	r24, 0xFF	; 255
    33d6:	83 83       	std	Z+3, r24	; 0x03
    33d8:	2d c0       	rjmp	.+90     	; 0x3434
  } else if(flag_system(m->flag)){
    33da:	87 ff       	sbrs	r24, 7
    33dc:	16 c0       	rjmp	.+44     	; 0x340a
	  //! system msgs
	  if(q->sq_head == NULL) {
    33de:	fd 01       	movw	r30, r26
    33e0:	80 85       	ldd	r24, Z+8	; 0x08
    33e2:	91 85       	ldd	r25, Z+9	; 0x09
    33e4:	89 2b       	or	r24, r25
    33e6:	19 f4       	brne	.+6      	; 0x33ee
		  //! empty head
		  q->sq_head = m;	
    33e8:	60 87       	std	Z+8, r22	; 0x08
    33ea:	71 87       	std	Z+9, r23	; 0x09
    33ec:	07 c0       	rjmp	.+14     	; 0x33fc
		  q->sq_tail = m;
	  } else {
		  //! insert to tail
		  q->sq_tail->next = m;
    33ee:	fd 01       	movw	r30, r26
    33f0:	82 85       	ldd	r24, Z+10	; 0x0a
    33f2:	93 85       	ldd	r25, Z+11	; 0x0b
    33f4:	fc 01       	movw	r30, r24
    33f6:	62 8b       	std	Z+18, r22	; 0x12
    33f8:	73 8b       	std	Z+19, r23	; 0x13
		  q->sq_tail = m;
    33fa:	fd 01       	movw	r30, r26
    33fc:	c2 87       	std	Z+10, r28	; 0x0a
    33fe:	d3 87       	std	Z+11, r29	; 0x0b
	  }
	  q->sm_cnt++;
    3400:	fd 01       	movw	r30, r26
    3402:	82 81       	ldd	r24, Z+2	; 0x02
    3404:	8f 5f       	subi	r24, 0xFF	; 255
    3406:	82 83       	std	Z+2, r24	; 0x02
    3408:	15 c0       	rjmp	.+42     	; 0x3434
  } else {
	  //! low priority message
	  if(q->lq_head == NULL) {
    340a:	fd 01       	movw	r30, r26
    340c:	84 85       	ldd	r24, Z+12	; 0x0c
    340e:	95 85       	ldd	r25, Z+13	; 0x0d
    3410:	89 2b       	or	r24, r25
    3412:	19 f4       	brne	.+6      	; 0x341a
		  //! empty head
		  q->lq_head = m;	
    3414:	64 87       	std	Z+12, r22	; 0x0c
    3416:	75 87       	std	Z+13, r23	; 0x0d
    3418:	07 c0       	rjmp	.+14     	; 0x3428
		  q->lq_tail = m;
	  } else {
		  //! insert to tail
		  q->lq_tail->next = m;
    341a:	fd 01       	movw	r30, r26
    341c:	86 85       	ldd	r24, Z+14	; 0x0e
    341e:	97 85       	ldd	r25, Z+15	; 0x0f
    3420:	fc 01       	movw	r30, r24
    3422:	62 8b       	std	Z+18, r22	; 0x12
    3424:	73 8b       	std	Z+19, r23	; 0x13
		  q->lq_tail = m;
    3426:	fd 01       	movw	r30, r26
    3428:	c6 87       	std	Z+14, r28	; 0x0e
    342a:	d7 87       	std	Z+15, r29	; 0x0f
	  }
	  q->lm_cnt++;
    342c:	fd 01       	movw	r30, r26
    342e:	81 81       	ldd	r24, Z+1	; 0x01
    3430:	8f 5f       	subi	r24, 0xFF	; 255
    3432:	81 83       	std	Z+1, r24	; 0x01
  }
  q->msg_cnt++;
    3434:	8c 91       	ld	r24, X
    3436:	8f 5f       	subi	r24, 0xFF	; 255
    3438:	8c 93       	st	X, r24
#endif
  LEAVE_CRITICAL_SECTION();
    343a:	2f bf       	out	0x3f, r18	; 63
    343c:	df 91       	pop	r29
    343e:	cf 91       	pop	r28
    3440:	08 95       	ret

00003442 <mq_dequeue>:
}

/**
 * @brief dequeue message
 * @return pointer to message, or NULL for empty queue
 * First we check high priority queue.
 * if it is empty, we check for low priority queue
 */
Message *mq_dequeue(mq_t *q)
{
    3442:	cf 93       	push	r28
    3444:	df 93       	push	r29
    3446:	fc 01       	movw	r30, r24
	HAS_CRITICAL_SECTION;
	Message *tmp = NULL;

	ENTER_CRITICAL_SECTION();
    3448:	2f b7       	in	r18, 0x3f	; 63
    344a:	f8 94       	cli

#ifdef SOS_USE_PREEMPTION
	if((tmp = q->head) != NULL) {
	  q->head = tmp->next;
	  q->msg_cnt--;	  
	}
	LEAVE_CRITICAL_SECTION();
#else
	if ((tmp = q->hq_head) != NULL) { 
    344c:	a4 81       	ldd	r26, Z+4	; 0x04
    344e:	b5 81       	ldd	r27, Z+5	; 0x05
    3450:	10 97       	sbiw	r26, 0x00	; 0
    3452:	49 f0       	breq	.+18     	; 0x3466
	//! high priority message
		q->hq_head = tmp->next;
    3454:	ed 01       	movw	r28, r26
    3456:	8a 89       	ldd	r24, Y+18	; 0x12
    3458:	9b 89       	ldd	r25, Y+19	; 0x13
    345a:	84 83       	std	Z+4, r24	; 0x04
    345c:	95 83       	std	Z+5, r25	; 0x05
		q->hm_cnt--;
    345e:	83 81       	ldd	r24, Z+3	; 0x03
    3460:	81 50       	subi	r24, 0x01	; 1
    3462:	83 83       	std	Z+3, r24	; 0x03
    3464:	1e c0       	rjmp	.+60     	; 0x34a2
	//! system msgs
	} else if ((tmp = q->sq_head) != NULL) {
    3466:	a0 85       	ldd	r26, Z+8	; 0x08
    3468:	b1 85       	ldd	r27, Z+9	; 0x09
    346a:	10 97       	sbiw	r26, 0x00	; 0
    346c:	49 f0       	breq	.+18     	; 0x3480
		q->sq_head = tmp->next;
    346e:	ed 01       	movw	r28, r26
    3470:	8a 89       	ldd	r24, Y+18	; 0x12
    3472:	9b 89       	ldd	r25, Y+19	; 0x13
    3474:	80 87       	std	Z+8, r24	; 0x08
    3476:	91 87       	std	Z+9, r25	; 0x09
		q->sm_cnt--;
    3478:	82 81       	ldd	r24, Z+2	; 0x02
    347a:	81 50       	subi	r24, 0x01	; 1
    347c:	82 83       	std	Z+2, r24	; 0x02
    347e:	11 c0       	rjmp	.+34     	; 0x34a2
	} else if ((tmp = q->lq_head) != NULL) { 
    3480:	a4 85       	ldd	r26, Z+12	; 0x0c
    3482:	b5 85       	ldd	r27, Z+13	; 0x0d
    3484:	10 97       	sbiw	r26, 0x00	; 0
    3486:	49 f0       	breq	.+18     	; 0x349a
	//! low priority message
		q->lq_head = tmp->next;
    3488:	ed 01       	movw	r28, r26
    348a:	8a 89       	ldd	r24, Y+18	; 0x12
    348c:	9b 89       	ldd	r25, Y+19	; 0x13
    348e:	84 87       	std	Z+12, r24	; 0x0c
    3490:	95 87       	std	Z+13, r25	; 0x0d
		q->lm_cnt--;
    3492:	81 81       	ldd	r24, Z+1	; 0x01
    3494:	81 50       	subi	r24, 0x01	; 1
    3496:	81 83       	std	Z+1, r24	; 0x01
    3498:	04 c0       	rjmp	.+8      	; 0x34a2
	} else {
		LEAVE_CRITICAL_SECTION();
    349a:	2f bf       	out	0x3f, r18	; 63
		return NULL;
    349c:	80 e0       	ldi	r24, 0x00	; 0
    349e:	90 e0       	ldi	r25, 0x00	; 0
    34a0:	05 c0       	rjmp	.+10     	; 0x34ac
	}
	q->msg_cnt--;
    34a2:	80 81       	ld	r24, Z
    34a4:	81 50       	subi	r24, 0x01	; 1
    34a6:	80 83       	st	Z, r24
#endif
	LEAVE_CRITICAL_SECTION();
    34a8:	2f bf       	out	0x3f, r18	; 63
	return tmp;
    34aa:	cd 01       	movw	r24, r26
    34ac:	df 91       	pop	r29
    34ae:	cf 91       	pop	r28
    34b0:	08 95       	ret

000034b2 <mq_real_get>:
}

#ifdef SOS_USE_PREEMPTION
static Message *mq_real_get(Message **head, Message *m)
#else
static Message *mq_real_get(Message **head, Message **tail, Message *m)
#endif
{
    34b2:	af 92       	push	r10
    34b4:	bf 92       	push	r11
    34b6:	cf 92       	push	r12
    34b8:	df 92       	push	r13
    34ba:	ef 92       	push	r14
    34bc:	ff 92       	push	r15
    34be:	0f 93       	push	r16
    34c0:	1f 93       	push	r17
    34c2:	cf 93       	push	r28
    34c4:	df 93       	push	r29
    34c6:	7c 01       	movw	r14, r24
    34c8:	8b 01       	movw	r16, r22
    34ca:	da 01       	movw	r26, r20
  Message *prev;
  Message *curr;

  prev = *head;
    34cc:	ec 01       	movw	r28, r24
    34ce:	e8 81       	ld	r30, Y
    34d0:	f9 81       	ldd	r31, Y+1	; 0x01
    34d2:	6f 01       	movw	r12, r30
  curr = *head;
    34d4:	bf 01       	movw	r22, r30

  // Traverse through the queue
  while(curr != NULL) {
	// Try to match the header
	if(m->did == curr->did &&
	   m->sid == curr->sid &&
	   m->daddr == curr->daddr &&
	   m->saddr == curr->saddr &&
	   m->type == curr->type  &&
	   m->len == curr->len ) {
	  uint8_t i = 0;
	  Message *ret = curr;
	  bool msg_matched = true;
	  // Try to match the data
	  for(i = 0; i < m->len; i++) {
		if(m->data[i] != curr->data[i]) {
		  msg_matched = false;
		  break;
		}	
	  }
	  // A match is found
	  if(msg_matched == true) {
		// The match is at the head
		if(ret == (*head)) {
		  *head = curr->next;
#ifndef SOS_USE_PREEMPTION
		  if( (*head) == NULL ) {
			*tail = NULL;
		  } 
		} else if(ret == (*tail)) {
		  prev->next = NULL;
		  *tail = prev;
#endif
		} else {
		  // The match is not at the head
		  prev->next = curr->next;
		}
		return ret;
	  }
	}
	// increment the pointers
	prev = curr;
	curr = curr->next;
    34d6:	30 97       	sbiw	r30, 0x00	; 0
    34d8:	09 f4       	brne	.+2      	; 0x34dc
    34da:	5b c0       	rjmp	.+182    	; 0x3592
    34dc:	9c 91       	ld	r25, X
    34de:	80 81       	ld	r24, Z
    34e0:	98 17       	cp	r25, r24
    34e2:	09 f0       	breq	.+2      	; 0x34e6
    34e4:	51 c0       	rjmp	.+162    	; 0x3588
    34e6:	ed 01       	movw	r28, r26
    34e8:	99 81       	ldd	r25, Y+1	; 0x01
    34ea:	81 81       	ldd	r24, Z+1	; 0x01
    34ec:	98 17       	cp	r25, r24
    34ee:	09 f0       	breq	.+2      	; 0x34f2
    34f0:	4b c0       	rjmp	.+150    	; 0x3588
    34f2:	2a 81       	ldd	r18, Y+2	; 0x02
    34f4:	3b 81       	ldd	r19, Y+3	; 0x03
    34f6:	82 81       	ldd	r24, Z+2	; 0x02
    34f8:	93 81       	ldd	r25, Z+3	; 0x03
    34fa:	28 17       	cp	r18, r24
    34fc:	39 07       	cpc	r19, r25
    34fe:	09 f0       	breq	.+2      	; 0x3502
    3500:	43 c0       	rjmp	.+134    	; 0x3588
    3502:	2c 81       	ldd	r18, Y+4	; 0x04
    3504:	3d 81       	ldd	r19, Y+5	; 0x05
    3506:	84 81       	ldd	r24, Z+4	; 0x04
    3508:	95 81       	ldd	r25, Z+5	; 0x05
    350a:	28 17       	cp	r18, r24
    350c:	39 07       	cpc	r19, r25
    350e:	e1 f5       	brne	.+120    	; 0x3588
    3510:	9e 81       	ldd	r25, Y+6	; 0x06
    3512:	86 81       	ldd	r24, Z+6	; 0x06
    3514:	98 17       	cp	r25, r24
    3516:	c1 f5       	brne	.+112    	; 0x3588
    3518:	4f 81       	ldd	r20, Y+7	; 0x07
    351a:	87 81       	ldd	r24, Z+7	; 0x07
    351c:	48 17       	cp	r20, r24
    351e:	a1 f5       	brne	.+104    	; 0x3588
    3520:	50 e0       	ldi	r21, 0x00	; 0
    3522:	54 17       	cp	r21, r20
    3524:	78 f4       	brcc	.+30     	; 0x3544
    3526:	20 85       	ldd	r18, Z+8	; 0x08
    3528:	31 85       	ldd	r19, Z+9	; 0x09
    352a:	a8 84       	ldd	r10, Y+8	; 0x08
    352c:	b9 84       	ldd	r11, Y+9	; 0x09
    352e:	e5 01       	movw	r28, r10
    3530:	99 91       	ld	r25, Y+
    3532:	5e 01       	movw	r10, r28
    3534:	e9 01       	movw	r28, r18
    3536:	89 91       	ld	r24, Y+
    3538:	9e 01       	movw	r18, r28
    353a:	98 17       	cp	r25, r24
    353c:	29 f5       	brne	.+74     	; 0x3588
    353e:	5f 5f       	subi	r21, 0xFF	; 255
    3540:	54 17       	cp	r21, r20
    3542:	a8 f3       	brcs	.-22     	; 0x352e
    3544:	ec 15       	cp	r30, r12
    3546:	fd 05       	cpc	r31, r13
    3548:	59 f4       	brne	.+22     	; 0x3560
    354a:	82 89       	ldd	r24, Z+18	; 0x12
    354c:	93 89       	ldd	r25, Z+19	; 0x13
    354e:	d7 01       	movw	r26, r14
    3550:	8d 93       	st	X+, r24
    3552:	9c 93       	st	X, r25
    3554:	00 97       	sbiw	r24, 0x00	; 0
    3556:	b1 f4       	brne	.+44     	; 0x3584
    3558:	e8 01       	movw	r28, r16
    355a:	88 83       	st	Y, r24
    355c:	99 83       	std	Y+1, r25	; 0x01
    355e:	12 c0       	rjmp	.+36     	; 0x3584
    3560:	d8 01       	movw	r26, r16
    3562:	8d 91       	ld	r24, X+
    3564:	9c 91       	ld	r25, X
    3566:	11 97       	sbiw	r26, 0x01	; 1
    3568:	e8 17       	cp	r30, r24
    356a:	f9 07       	cpc	r31, r25
    356c:	31 f4       	brne	.+12     	; 0x357a
    356e:	eb 01       	movw	r28, r22
    3570:	1a 8a       	std	Y+18, r1	; 0x12
    3572:	1b 8a       	std	Y+19, r1	; 0x13
    3574:	6d 93       	st	X+, r22
    3576:	7c 93       	st	X, r23
    3578:	05 c0       	rjmp	.+10     	; 0x3584
    357a:	82 89       	ldd	r24, Z+18	; 0x12
    357c:	93 89       	ldd	r25, Z+19	; 0x13
    357e:	eb 01       	movw	r28, r22
    3580:	8a 8b       	std	Y+18, r24	; 0x12
    3582:	9b 8b       	std	Y+19, r25	; 0x13
    3584:	cf 01       	movw	r24, r30
    3586:	07 c0       	rjmp	.+14     	; 0x3596
    3588:	bf 01       	movw	r22, r30
    358a:	02 88       	ldd	r0, Z+18	; 0x12
    358c:	f3 89       	ldd	r31, Z+19	; 0x13
    358e:	e0 2d       	mov	r30, r0
    3590:	a2 cf       	rjmp	.-188    	; 0x34d6
  }
  return NULL;
    3592:	80 e0       	ldi	r24, 0x00	; 0
    3594:	90 e0       	ldi	r25, 0x00	; 0
    3596:	df 91       	pop	r29
    3598:	cf 91       	pop	r28
    359a:	1f 91       	pop	r17
    359c:	0f 91       	pop	r16
    359e:	ff 90       	pop	r15
    35a0:	ef 90       	pop	r14
    35a2:	df 90       	pop	r13
    35a4:	cf 90       	pop	r12
    35a6:	bf 90       	pop	r11
    35a8:	af 90       	pop	r10
    35aa:	08 95       	ret

000035ac <mq_get>:
}

/**
 * @brief get message that matches the header in the queue
 *
 * NOTE it matches only daddr, saddr, did, sid, type
 * NOTE it only gets the first that matches the description
 */
Message *mq_get(mq_t *q, Message *m)
{
    35ac:	ff 92       	push	r15
    35ae:	0f 93       	push	r16
    35b0:	1f 93       	push	r17
    35b2:	cf 93       	push	r28
    35b4:	df 93       	push	r29
    35b6:	ec 01       	movw	r28, r24
    35b8:	8b 01       	movw	r16, r22
  HAS_CRITICAL_SECTION;
  Message *ret;

#ifdef SOS_USE_PREEMPTION
  if(q->head == NULL) return NULL;
  ENTER_CRITICAL_SECTION();

  // Search the queue
  ret = mq_real_get(&(q->head), m);
#else
  if(q->msg_cnt == 0) return NULL;
    35ba:	88 81       	ld	r24, Y
    35bc:	88 23       	and	r24, r24
    35be:	19 f4       	brne	.+6      	; 0x35c6
    35c0:	80 e0       	ldi	r24, 0x00	; 0
    35c2:	90 e0       	ldi	r25, 0x00	; 0
    35c4:	22 c0       	rjmp	.+68     	; 0x360a
  ENTER_CRITICAL_SECTION();
    35c6:	ff b6       	in	r15, 0x3f	; 63
    35c8:	f8 94       	cli
	
  //! first search high priority queue
  ret = mq_real_get(&(q->hq_head), &(q->hq_tail), m);
    35ca:	ce 01       	movw	r24, r28
    35cc:	06 96       	adiw	r24, 0x06	; 6
    35ce:	ab 01       	movw	r20, r22
    35d0:	bc 01       	movw	r22, r24
    35d2:	ce 01       	movw	r24, r28
    35d4:	04 96       	adiw	r24, 0x04	; 4
    35d6:	0e 94 59 1a 	call	0x34b2
    35da:	9c 01       	movw	r18, r24

  if(ret) {
    35dc:	89 2b       	or	r24, r25
    35de:	29 f0       	breq	.+10     	; 0x35ea
	q->msg_cnt--;
    35e0:	88 81       	ld	r24, Y
    35e2:	81 50       	subi	r24, 0x01	; 1
    35e4:	88 83       	st	Y, r24
	LEAVE_CRITICAL_SECTION();
    35e6:	ff be       	out	0x3f, r15	; 63
    35e8:	0f c0       	rjmp	.+30     	; 0x3608
	return ret;
  }
  //! search low priority queue
  ret = mq_real_get(&(q->lq_head), &(q->lq_tail), m);
    35ea:	ce 01       	movw	r24, r28
    35ec:	0e 96       	adiw	r24, 0x0e	; 14
    35ee:	a8 01       	movw	r20, r16
    35f0:	bc 01       	movw	r22, r24
    35f2:	ce 01       	movw	r24, r28
    35f4:	0c 96       	adiw	r24, 0x0c	; 12
    35f6:	0e 94 59 1a 	call	0x34b2
    35fa:	9c 01       	movw	r18, r24
  if(ret) {
    35fc:	89 2b       	or	r24, r25
    35fe:	19 f0       	breq	.+6      	; 0x3606
	q->msg_cnt--;
    3600:	88 81       	ld	r24, Y
    3602:	81 50       	subi	r24, 0x01	; 1
    3604:	88 83       	st	Y, r24
  }
#endif
  LEAVE_CRITICAL_SECTION();
    3606:	ff be       	out	0x3f, r15	; 63
  return ret;
    3608:	c9 01       	movw	r24, r18
    360a:	df 91       	pop	r29
    360c:	cf 91       	pop	r28
    360e:	1f 91       	pop	r17
    3610:	0f 91       	pop	r16
    3612:	ff 90       	pop	r15
    3614:	08 95       	ret

00003616 <mq_gc_mark_payload>:
}

//
// mark memory in the message
//
void mq_gc_mark_payload( mq_t *q, sos_pid_t pid )
{
    3616:	ff 92       	push	r15
    3618:	0f 93       	push	r16
    361a:	1f 93       	push	r17
    361c:	cf 93       	push	r28
    361e:	df 93       	push	r29
    3620:	8c 01       	movw	r16, r24
    3622:	f6 2e       	mov	r15, r22
	Message *m;

#ifdef SOS_USE_PREEMPTION
	for( m = q->head; m != NULL; m = m->next ) {
	  if( flag_msg_release( m->flag ) ) {
		ker_gc_mark( pid, m->data );
	  }
	}
#else
	for( m = q->hq_head; m != NULL; m = m->next ) {
    3624:	fc 01       	movw	r30, r24
    3626:	c4 81       	ldd	r28, Z+4	; 0x04
    3628:	d5 81       	ldd	r29, Z+5	; 0x05
    362a:	20 97       	sbiw	r28, 0x00	; 0
    362c:	69 f0       	breq	.+26     	; 0x3648
		if( flag_msg_release( m->flag ) ) {
    362e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3630:	9b 85       	ldd	r25, Y+11	; 0x0b
    3632:	82 ff       	sbrs	r24, 2
    3634:	05 c0       	rjmp	.+10     	; 0x3640
			ker_gc_mark( pid, m->data );
    3636:	68 85       	ldd	r22, Y+8	; 0x08
    3638:	79 85       	ldd	r23, Y+9	; 0x09
    363a:	8f 2d       	mov	r24, r15
    363c:	0e 94 9b 12 	call	0x2536
    3640:	0a 88       	ldd	r0, Y+18	; 0x12
    3642:	db 89       	ldd	r29, Y+19	; 0x13
    3644:	c0 2d       	mov	r28, r0
    3646:	f1 cf       	rjmp	.-30     	; 0x362a
		}
	}
	
	for( m = q->sq_head; m != NULL; m = m->next ) {
    3648:	f8 01       	movw	r30, r16
    364a:	c0 85       	ldd	r28, Z+8	; 0x08
    364c:	d1 85       	ldd	r29, Z+9	; 0x09
    364e:	20 97       	sbiw	r28, 0x00	; 0
    3650:	69 f0       	breq	.+26     	; 0x366c
		if( flag_msg_release( m->flag ) ) {
    3652:	8a 85       	ldd	r24, Y+10	; 0x0a
    3654:	9b 85       	ldd	r25, Y+11	; 0x0b
    3656:	82 ff       	sbrs	r24, 2
    3658:	05 c0       	rjmp	.+10     	; 0x3664
			ker_gc_mark( pid, m->data );
    365a:	68 85       	ldd	r22, Y+8	; 0x08
    365c:	79 85       	ldd	r23, Y+9	; 0x09
    365e:	8f 2d       	mov	r24, r15
    3660:	0e 94 9b 12 	call	0x2536
    3664:	0a 88       	ldd	r0, Y+18	; 0x12
    3666:	db 89       	ldd	r29, Y+19	; 0x13
    3668:	c0 2d       	mov	r28, r0
    366a:	f1 cf       	rjmp	.-30     	; 0x364e
		}
	}
	
	for( m = q->lq_head; m != NULL; m = m->next ) {
    366c:	f8 01       	movw	r30, r16
    366e:	c4 85       	ldd	r28, Z+12	; 0x0c
    3670:	d5 85       	ldd	r29, Z+13	; 0x0d
    3672:	20 97       	sbiw	r28, 0x00	; 0
    3674:	71 f0       	breq	.+28     	; 0x3692
		if( flag_msg_release( m->flag ) ) {
    3676:	8a 85       	ldd	r24, Y+10	; 0x0a
    3678:	9b 85       	ldd	r25, Y+11	; 0x0b
    367a:	82 ff       	sbrs	r24, 2
    367c:	05 c0       	rjmp	.+10     	; 0x3688
			ker_gc_mark( pid, m->data );
    367e:	68 85       	ldd	r22, Y+8	; 0x08
    3680:	79 85       	ldd	r23, Y+9	; 0x09
    3682:	8f 2d       	mov	r24, r15
    3684:	0e 94 9b 12 	call	0x2536
    3688:	0a 88       	ldd	r0, Y+18	; 0x12
    368a:	db 89       	ldd	r29, Y+19	; 0x13
    368c:	c0 2d       	mov	r28, r0
    368e:	20 97       	sbiw	r28, 0x00	; 0
    3690:	91 f7       	brne	.-28     	; 0x3676
    3692:	df 91       	pop	r29
    3694:	cf 91       	pop	r28
    3696:	1f 91       	pop	r17
    3698:	0f 91       	pop	r16
    369a:	ff 90       	pop	r15
    369c:	08 95       	ret

0000369e <mq_gc_mark_hdr>:
		}
	}
#endif
}

//
// mark the message header to slab
//
void mq_gc_mark_hdr( mq_t *q, sos_pid_t pid )
{
    369e:	0f 93       	push	r16
    36a0:	1f 93       	push	r17
    36a2:	cf 93       	push	r28
    36a4:	df 93       	push	r29
    36a6:	8c 01       	movw	r16, r24
	Message *m;

#ifdef SOS_USE_PREEMPTION
	for( m = q->head; m != NULL; m = m->next ) {
		slab_gc_mark( &msg_slab, m );
	}
#else
	for( m = q->hq_head; m != NULL; m = m->next ) {
    36a8:	fc 01       	movw	r30, r24
    36aa:	c4 81       	ldd	r28, Z+4	; 0x04
    36ac:	d5 81       	ldd	r29, Z+5	; 0x05
    36ae:	20 97       	sbiw	r28, 0x00	; 0
    36b0:	49 f0       	breq	.+18     	; 0x36c4
		slab_gc_mark( &msg_slab, m );
    36b2:	be 01       	movw	r22, r28
    36b4:	81 ee       	ldi	r24, 0xE1	; 225
    36b6:	99 e0       	ldi	r25, 0x09	; 9
    36b8:	0e 94 2a 3e 	call	0x7c54
    36bc:	0a 88       	ldd	r0, Y+18	; 0x12
    36be:	db 89       	ldd	r29, Y+19	; 0x13
    36c0:	c0 2d       	mov	r28, r0
    36c2:	f5 cf       	rjmp	.-22     	; 0x36ae
	}
	
	for( m = q->sq_head; m != NULL; m = m->next ) {
    36c4:	f8 01       	movw	r30, r16
    36c6:	c0 85       	ldd	r28, Z+8	; 0x08
    36c8:	d1 85       	ldd	r29, Z+9	; 0x09
    36ca:	20 97       	sbiw	r28, 0x00	; 0
    36cc:	49 f0       	breq	.+18     	; 0x36e0
		slab_gc_mark( &msg_slab, m );
    36ce:	be 01       	movw	r22, r28
    36d0:	81 ee       	ldi	r24, 0xE1	; 225
    36d2:	99 e0       	ldi	r25, 0x09	; 9
    36d4:	0e 94 2a 3e 	call	0x7c54
    36d8:	0a 88       	ldd	r0, Y+18	; 0x12
    36da:	db 89       	ldd	r29, Y+19	; 0x13
    36dc:	c0 2d       	mov	r28, r0
    36de:	f5 cf       	rjmp	.-22     	; 0x36ca
	}
	
	for( m = q->lq_head; m != NULL; m = m->next ) {
    36e0:	f8 01       	movw	r30, r16
    36e2:	c4 85       	ldd	r28, Z+12	; 0x0c
    36e4:	d5 85       	ldd	r29, Z+13	; 0x0d
    36e6:	20 97       	sbiw	r28, 0x00	; 0
    36e8:	51 f0       	breq	.+20     	; 0x36fe
		slab_gc_mark( &msg_slab, m );
    36ea:	be 01       	movw	r22, r28
    36ec:	81 ee       	ldi	r24, 0xE1	; 225
    36ee:	99 e0       	ldi	r25, 0x09	; 9
    36f0:	0e 94 2a 3e 	call	0x7c54
    36f4:	0a 88       	ldd	r0, Y+18	; 0x12
    36f6:	db 89       	ldd	r29, Y+19	; 0x13
    36f8:	c0 2d       	mov	r28, r0
    36fa:	20 97       	sbiw	r28, 0x00	; 0
    36fc:	b1 f7       	brne	.-20     	; 0x36ea
    36fe:	df 91       	pop	r29
    3700:	cf 91       	pop	r28
    3702:	1f 91       	pop	r17
    3704:	0f 91       	pop	r16
    3706:	08 95       	ret

00003708 <mq_gc_mark_one_hdr>:
	}
#endif
}

void mq_gc_mark_one_hdr( Message *msg )
{
	slab_gc_mark( &msg_slab, msg );
    3708:	bc 01       	movw	r22, r24
    370a:	81 ee       	ldi	r24, 0xE1	; 225
    370c:	99 e0       	ldi	r25, 0x09	; 9
    370e:	0e 94 2a 3e 	call	0x7c54
    3712:	08 95       	ret

00003714 <mq_gc>:
}

//
// GC on all message queues
//
void mq_gc( void )
{
    3714:	08 95       	ret

00003716 <msg_create>:
	// TODO: call all message queues
#ifdef SOS_USE_GC
	sched_msg_gc();
#ifdef SOS_RADIO_CHANNEL
	radio_msg_gc();
#endif

#ifdef SOS_UART_CHANNEL
	uart_msg_gc();
#endif
	slab_gc( &msg_slab, MSG_QUEUE_PID );
	malloc_gc( MSG_QUEUE_PID );
#endif
}

/**
 * @brief create message
 * @return pointer to message, or NULL for fail
 * get new message header from message repositary
 * msg->data is pointing to payload
 */
Message *msg_create()
{
    3716:	cf 93       	push	r28
	HAS_CRITICAL_SECTION;
	Message *tmp = NULL;
	//
	// Get from msg_pool
	//
	ENTER_CRITICAL_SECTION();
    3718:	cf b7       	in	r28, 0x3f	; 63
    371a:	f8 94       	cli
	tmp = ker_slab_alloc( &msg_slab, MSG_QUEUE_PID );
    371c:	6b e0       	ldi	r22, 0x0B	; 11
    371e:	81 ee       	ldi	r24, 0xE1	; 225
    3720:	99 e0       	ldi	r25, 0x09	; 9
    3722:	0e 94 80 3d 	call	0x7b00
    3726:	fc 01       	movw	r30, r24
	if( tmp == NULL ) {
    3728:	00 97       	sbiw	r24, 0x00	; 0
    372a:	21 f4       	brne	.+8      	; 0x3734
		LEAVE_CRITICAL_SECTION();
    372c:	cf bf       	out	0x3f, r28	; 63
		return NULL;
    372e:	80 e0       	ldi	r24, 0x00	; 0
    3730:	90 e0       	ldi	r25, 0x00	; 0
    3732:	07 c0       	rjmp	.+14     	; 0x3742
	}
	
	LEAVE_CRITICAL_SECTION();
    3734:	cf bf       	out	0x3f, r28	; 63
  	tmp->data = tmp->payload;
    3736:	0c 96       	adiw	r24, 0x0c	; 12
    3738:	80 87       	std	Z+8, r24	; 0x08
    373a:	91 87       	std	Z+9, r25	; 0x09
	tmp->flag = 0;
    373c:	12 86       	std	Z+10, r1	; 0x0a
    373e:	13 86       	std	Z+11, r1	; 0x0b
  
	return tmp;
    3740:	cf 01       	movw	r24, r30
    3742:	cf 91       	pop	r28
    3744:	08 95       	ret

00003746 <msg_dispose>:
}

/**
 * @brief dispose message
 * return message header back to message repostitary
 */
void msg_dispose(Message *m)
{
    3746:	1f 93       	push	r17
    3748:	cf 93       	push	r28
    374a:	df 93       	push	r29
    374c:	ec 01       	movw	r28, r24
	HAS_CRITICAL_SECTION;
	
	if(flag_msg_release(m->flag)) { 
    374e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3750:	9b 85       	ldd	r25, Y+11	; 0x0b
    3752:	82 ff       	sbrs	r24, 2
    3754:	05 c0       	rjmp	.+10     	; 0x3760
 * @return void
 */
static inline void ker_free(void* ptr)
{
  sos_blk_mem_free(ptr, false);
    3756:	60 e0       	ldi	r22, 0x00	; 0
    3758:	88 85       	ldd	r24, Y+8	; 0x08
    375a:	99 85       	ldd	r25, Y+9	; 0x09
    375c:	0e 94 98 11 	call	0x2330
		ker_free(m->data); 
	}

	ENTER_CRITICAL_SECTION();
    3760:	1f b7       	in	r17, 0x3f	; 63
    3762:	f8 94       	cli
	ker_slab_free( &msg_slab, m );
    3764:	be 01       	movw	r22, r28
    3766:	81 ee       	ldi	r24, 0xE1	; 225
    3768:	99 e0       	ldi	r25, 0x09	; 9
    376a:	0e 94 e0 3d 	call	0x7bc0
	
	LEAVE_CRITICAL_SECTION();
    376e:	1f bf       	out	0x3f, r17	; 63
    3770:	df 91       	pop	r29
    3772:	cf 91       	pop	r28
    3774:	1f 91       	pop	r17
    3776:	08 95       	ret

00003778 <msg_send_senddone>:
}

/**
 * @brief handle the process of creating senddone message
 * @param msg_sent  the Message just sent or delivered
 * @param succ      is the delivery successful?
 * @param msg_owner the owner of the message 
 * NOTE the implementation will need to improve
 */
void msg_send_senddone(Message *msg_sent, bool succ, sos_pid_t msg_owner)
{
    3778:	df 92       	push	r13
    377a:	ef 92       	push	r14
    377c:	ff 92       	push	r15
    377e:	0f 93       	push	r16
    3780:	1f 93       	push	r17
    3782:	cf 93       	push	r28
    3784:	df 93       	push	r29
    3786:	ec 01       	movw	r28, r24
    3788:	f6 2e       	mov	r15, r22
    378a:	d4 2e       	mov	r13, r20
  uint8_t flag;
  
  if(flag_msg_reliable(msg_sent->flag) == 0) {
    378c:	2a 85       	ldd	r18, Y+10	; 0x0a
    378e:	3b 85       	ldd	r19, Y+11	; 0x0b
    3790:	c9 01       	movw	r24, r18
    3792:	33 e0       	ldi	r19, 0x03	; 3
    3794:	96 95       	lsr	r25
    3796:	87 95       	ror	r24
    3798:	3a 95       	dec	r19
    379a:	e1 f7       	brne	.-8      	; 0x3794
    379c:	80 95       	com	r24
    379e:	90 95       	com	r25
    37a0:	8c 01       	movw	r16, r24
    37a2:	01 70       	andi	r16, 0x01	; 1
    37a4:	10 70       	andi	r17, 0x00	; 0
    37a6:	80 fd       	sbrc	r24, 0
    37a8:	1e c0       	rjmp	.+60     	; 0x37e6
	msg_dispose(msg_sent);
	return;
  }
  
  /*
   * Release the memory 
   */
  if(flag_msg_release(msg_sent->flag)){
    37aa:	22 ff       	sbrs	r18, 2
    37ac:	0c c0       	rjmp	.+24     	; 0x37c6
 * @return void
 */
static inline void ker_free(void* ptr)
{
  sos_blk_mem_free(ptr, false);
    37ae:	60 e0       	ldi	r22, 0x00	; 0
    37b0:	88 85       	ldd	r24, Y+8	; 0x08
    37b2:	99 85       	ldd	r25, Y+9	; 0x09
    37b4:	0e 94 98 11 	call	0x2330
	ker_free(msg_sent->data);
	msg_sent->flag &= ~(SOS_MSG_RELEASE);
    37b8:	8a 85       	ldd	r24, Y+10	; 0x0a
    37ba:	9b 85       	ldd	r25, Y+11	; 0x0b
    37bc:	8b 7f       	andi	r24, 0xFB	; 251
    37be:	8a 87       	std	Y+10, r24	; 0x0a
    37c0:	9b 87       	std	Y+11, r25	; 0x0b
	msg_sent->data = NULL;
    37c2:	08 87       	std	Y+8, r16	; 0x08
    37c4:	19 87       	std	Y+9, r17	; 0x09
  }

  if(succ == false) {
    37c6:	ff 20       	and	r15, r15
    37c8:	11 f4       	brne	.+4      	; 0x37ce
	flag = SOS_MSG_SEND_FAIL; 
    37ca:	82 e0       	ldi	r24, 0x02	; 2
    37cc:	01 c0       	rjmp	.+2      	; 0x37d0
  } else {
	flag = 0;
    37ce:	80 e0       	ldi	r24, 0x00	; 0
  }
  if(post_long(msg_sent->sid, msg_owner, MSG_PKT_SENDDONE, 
    37d0:	99 27       	eor	r25, r25
    37d2:	7c 01       	movw	r14, r24
    37d4:	8e 01       	movw	r16, r28
    37d6:	24 e1       	ldi	r18, 0x14	; 20
    37d8:	43 e0       	ldi	r20, 0x03	; 3
    37da:	6d 2d       	mov	r22, r13
    37dc:	89 81       	ldd	r24, Y+1	; 0x01
    37de:	0e 94 c7 18 	call	0x318e
    37e2:	87 ff       	sbrs	r24, 7
    37e4:	03 c0       	rjmp	.+6      	; 0x37ec
			   sizeof(Message), msg_sent, flag) < 0) {
	msg_dispose(msg_sent);
    37e6:	ce 01       	movw	r24, r28
    37e8:	0e 94 a3 1b 	call	0x3746
    37ec:	df 91       	pop	r29
    37ee:	cf 91       	pop	r28
    37f0:	1f 91       	pop	r17
    37f2:	0f 91       	pop	r16
    37f4:	ff 90       	pop	r15
    37f6:	ef 90       	pop	r14
    37f8:	df 90       	pop	r13
    37fa:	08 95       	ret

000037fc <no_router>:

static int8_t no_router(func_cb_ptr p, Message *msg)
{
	return -1;
}
    37fc:	8f ef       	ldi	r24, 0xFF	; 255
    37fe:	9f ef       	ldi	r25, 0xFF	; 255
    3800:	08 95       	ret

00003802 <routing_handler>:
static int8_t routing_handler(void *state, Message *msg)
{
	return -EINVAL;
} 
    3802:	8a ee       	ldi	r24, 0xEA	; 234
    3804:	9f ef       	ldi	r25, 0xFF	; 255
    3806:	08 95       	ret

00003808 <sos_msg_find_right_link>:

//-------------------------------------------------------------------------------
// FUNCTION IMPLEMENTATIONS
//-------------------------------------------------------------------------------
// Fix the endian-ness of the message header
static inline void msg_change_endian(Message* e){
  e->daddr = ehtons(e->daddr);
  e->saddr = ehtons(e->saddr);
}

// Create a deep copy of the message

#if defined(SOS_UART_CHANNEL) || defined(SOS_I2C_CHANNEL) || defined(SOS_SPI_CHANNEL)
static Message* msg_duplicate(Message* m){
  Message* mcopy;
	uint8_t* d;
  mcopy = msg_create();
  if (NULL == mcopy) return NULL;
  d = (uint8_t*)ker_malloc(m->len, KER_SCHED_PID);
  if ((NULL == d) && (0 != m->len)){
    msg_dispose(mcopy);
    return NULL;
  }
	memcpy(mcopy, m, sizeof(Message));
	mcopy->data = d;
	mcopy->flag |= SOS_MSG_RELEASE;
  memcpy(mcopy->data, m->data, m->len);
  return mcopy;
}
#endif

// NULL Link - Simply free the message
static void null_link_msg_alloc(Message* m){
  msg_dispose(m);
}



//-------------------------------------------------------------------------------
// POST
//-------------------------------------------------------------------------------
// Copies message header and sends out the message
int8_t post(Message *e){
  Message *m = msg_create();
  if(m == NULL){ 
	if(flag_msg_release(e->flag)) {
	  ker_free(e->data);
		e->data = NULL;
		e->len = 0;
	}
	return -ENOMEM;
  }
  // deep copy the header
  *m = *e;

	// Transfer the memory
	e->len = 0;
	e->data = NULL;
	e->flag &= ~SOS_MSG_RELEASE;
		
  
  // Dispatch Message
  return sos_msg_dispatch(m);
}

//-------------------------------------------------------------------------------
// POST LINK
//-------------------------------------------------------------------------------
// Post a message over any link as specified by the flag
int8_t post_link(sos_pid_t did, sos_pid_t sid, 
		uint8_t type, uint8_t len, 
		void *data, uint16_t flag, 
		uint16_t daddr)
{
  // Create a message
  Message *m = msg_create();
  if (NULL == m){
    if (flag_msg_release(flag)){
      ker_free(data);
    }
    return -ENOMEM;
  }

  // Fill out message header
  m->daddr = daddr;
  m->did = did;
  m->type = type;
  m->saddr = node_address;
  m->sid = sid;
  m->len = len;
  m->data = (uint8_t*)data;
  m->flag = flag;
#ifdef SOS_USE_PREEMPTION
  // assign priority based on did
  m->priority = get_module_priority(did);
#endif

  // Dispatch Message
  return sos_msg_dispatch(m);
}


//-----------------------------------------------------------------------------
// SOS Find Right link
//-----------------------------------------------------------------------------
static bool sos_msg_find_right_link(Message *m)
{
    3808:	1f 93       	push	r17
    380a:	cf 93       	push	r28
    380c:	df 93       	push	r29
    380e:	ec 01       	movw	r28, r24
		bool link_found = false;
    3810:	10 e0       	ldi	r17, 0x00	; 0
		
		// try to figure out the right link
#ifdef SOS_UART_CHANNEL
		if (check_uart_address(m->daddr) == SOS_OK) {
    3812:	8a 81       	ldd	r24, Y+2	; 0x02
    3814:	9b 81       	ldd	r25, Y+3	; 0x03
    3816:	0e 94 1b 40 	call	0x8036
    381a:	2a 85       	ldd	r18, Y+10	; 0x0a
    381c:	3b 85       	ldd	r19, Y+11	; 0x0b
    381e:	88 23       	and	r24, r24
    3820:	29 f4       	brne	.+10     	; 0x382c
			m->flag |= SOS_MSG_UART_IO;	
    3822:	38 60       	ori	r19, 0x08	; 8
    3824:	2a 87       	std	Y+10, r18	; 0x0a
    3826:	3b 87       	std	Y+11, r19	; 0x0b
			link_found = true;
    3828:	11 e0       	ldi	r17, 0x01	; 1
    382a:	03 c0       	rjmp	.+6      	; 0x3832
		} else {
			m->flag &= ~SOS_MSG_UART_IO;	
    382c:	37 7f       	andi	r19, 0xF7	; 247
    382e:	2a 87       	std	Y+10, r18	; 0x0a
    3830:	3b 87       	std	Y+11, r19	; 0x0b
		}
#else
		m->flag &= ~SOS_MSG_UART_IO;	
#endif
		
#ifdef SOS_I2C_CHANNEL
		if (check_i2c_address(m->daddr) == SOS_OK) {
			m->flag |= SOS_MSG_I2C_IO;	
			link_found = true;
		} else {
			m->flag &= ~SOS_MSG_I2C_IO;	
		}
#else
		m->flag &= ~SOS_MSG_I2C_IO;	
    3832:	2a 85       	ldd	r18, Y+10	; 0x0a
    3834:	3b 85       	ldd	r19, Y+11	; 0x0b
    3836:	c9 01       	movw	r24, r18
    3838:	9b 7f       	andi	r25, 0xFB	; 251
    383a:	8a 87       	std	Y+10, r24	; 0x0a
    383c:	9b 87       	std	Y+11, r25	; 0x0b
#endif

		if(link_found == false) {
    383e:	11 23       	and	r17, r17
    3840:	21 f4       	brne	.+8      	; 0x384a
			m->flag |= SOS_MSG_RADIO_IO;	
    3842:	92 60       	ori	r25, 0x02	; 2
    3844:	8a 87       	std	Y+10, r24	; 0x0a
    3846:	9b 87       	std	Y+11, r25	; 0x0b
    3848:	03 c0       	rjmp	.+6      	; 0x3850
		} else {
			m->flag &= ~SOS_MSG_RADIO_IO;	
    384a:	39 7f       	andi	r19, 0xF9	; 249
    384c:	2a 87       	std	Y+10, r18	; 0x0a
    384e:	3b 87       	std	Y+11, r19	; 0x0b
		}
		return link_found;
}
    3850:	81 2f       	mov	r24, r17
    3852:	99 27       	eor	r25, r25
    3854:	df 91       	pop	r29
    3856:	cf 91       	pop	r28
    3858:	1f 91       	pop	r17
    385a:	08 95       	ret

0000385c <sos_msg_dispatch>:

//--------------------------------------------------------------------------------
// SOS Message Dispatcher
//--------------------------------------------------------------------------------
static int8_t sos_msg_dispatch(Message* m)
{
    385c:	af 92       	push	r10
    385e:	bf 92       	push	r11
    3860:	cf 92       	push	r12
    3862:	df 92       	push	r13
    3864:	ef 92       	push	r14
    3866:	ff 92       	push	r15
    3868:	0f 93       	push	r16
    386a:	1f 93       	push	r17
    386c:	cf 93       	push	r28
    386e:	df 93       	push	r29
    3870:	cd b7       	in	r28, 0x3d	; 61
    3872:	de b7       	in	r29, 0x3e	; 62
    3874:	28 97       	sbiw	r28, 0x08	; 8
    3876:	0f b6       	in	r0, 0x3f	; 63
    3878:	f8 94       	cli
    387a:	de bf       	out	0x3e, r29	; 62
    387c:	0f be       	out	0x3f, r0	; 63
    387e:	cd bf       	out	0x3d, r28	; 61
    3880:	7c 01       	movw	r14, r24
#if defined(SOS_RADIO_CHANNEL) || defined(SOS_UART_CHANNEL) || defined(SOS_I2C_CHANNEL) || defined(SOS_SPI_CHANNEL)
	Message* mcopy[NUM_IO_LINKS] = {NULL};
    3882:	5e 01       	movw	r10, r28
    3884:	08 94       	sec
    3886:	a1 1c       	adc	r10, r1
    3888:	b1 1c       	adc	r11, r1
    388a:	88 e0       	ldi	r24, 0x08	; 8
    388c:	d5 01       	movw	r26, r10
    388e:	1d 92       	st	X+, r1
    3890:	8a 95       	dec	r24
    3892:	e9 f7       	brne	.-6      	; 0x388e
	uint8_t msg_count = 0;
    3894:	dd 24       	eor	r13, r13
#endif

  // Local Dispatch
  if (node_address == m->daddr){
    3896:	80 91 04 01 	lds	r24, 0x0104
    389a:	90 91 05 01 	lds	r25, 0x0105
    389e:	f7 01       	movw	r30, r14
    38a0:	22 81       	ldd	r18, Z+2	; 0x02
    38a2:	33 81       	ldd	r19, Z+3	; 0x03
    38a4:	82 17       	cp	r24, r18
    38a6:	93 07       	cpc	r25, r19
    38a8:	21 f4       	brne	.+8      	; 0x38b2
    sched_msg_alloc(m);
    38aa:	c7 01       	movw	r24, r14
    38ac:	0e 94 ec 16 	call	0x2dd8
    38b0:	a8 c0       	rjmp	.+336    	; 0x3a02
		ker_log( SOS_LOG_POST_NET, m->sid, m->daddr );
    return SOS_OK;
  }

#if !defined(SOS_UART_CHANNEL) && !defined(SOS_I2C_CHANNEL) && !defined(SOS_RADIO_CHANNEL) && !defined(SOS_SPI_CHANNEL)
	null_link_msg_alloc(m);
	return -EINVAL;
#endif

	if( m->daddr != BCAST_ADDRESS && flag_msg_raw(m->flag) == 0 ) {
    38b2:	2f 5f       	subi	r18, 0xFF	; 255
    38b4:	3f 4f       	sbci	r19, 0xFF	; 255
    38b6:	21 f1       	breq	.+72     	; 0x3900
    38b8:	f7 01       	movw	r30, r14
    38ba:	82 85       	ldd	r24, Z+10	; 0x0a
    38bc:	93 85       	ldd	r25, Z+11	; 0x0b
    38be:	84 e0       	ldi	r24, 0x04	; 4
    38c0:	98 9f       	mul	r25, r24
    38c2:	81 2d       	mov	r24, r1
    38c4:	99 27       	eor	r25, r25
    38c6:	11 24       	eor	r1, r1
    38c8:	80 fd       	sbrc	r24, 0
    38ca:	1a c0       	rjmp	.+52     	; 0x3900
		int8_t ret;
		// Not using raw message, send to the routing layer first
		if( sos_msg_find_right_link(m) == false ) {
    38cc:	c7 01       	movw	r24, r14
    38ce:	0e 94 04 1c 	call	0x3808
    38d2:	88 23       	and	r24, r24
    38d4:	a9 f4       	brne	.+42     	; 0x3900
			ret = SOS_CALL(routing_func_ptr[0], routing_func_t, m);
    38d6:	b7 01       	movw	r22, r14
    38d8:	80 91 ef 09 	lds	r24, 0x09EF
    38dc:	90 91 f0 09 	lds	r25, 0x09F0
    38e0:	0e 94 46 00 	call	0x8c
			if( ret == ( SOS_OK + 1 )) {
    38e4:	81 30       	cpi	r24, 0x01	; 1
    38e6:	21 f4       	brne	.+8      	; 0x38f0
				// Forward to the link layer (don't generate senddone)
				msg_dispose(m);
    38e8:	c7 01       	movw	r24, r14
    38ea:	0e 94 a3 1b 	call	0x3746
    38ee:	89 c0       	rjmp	.+274    	; 0x3a02
				return SOS_OK;
			} else if( ret == SOS_OK ) {
    38f0:	88 23       	and	r24, r24
    38f2:	31 f4       	brne	.+12     	; 0x3900
				// generate senddone
				msg_send_senddone( m, true, KER_ROUTING_PID );
    38f4:	44 e1       	ldi	r20, 0x14	; 20
    38f6:	61 e0       	ldi	r22, 0x01	; 1
    38f8:	c7 01       	movw	r24, r14
    38fa:	0e 94 bc 1b 	call	0x3778
    38fe:	81 c0       	rjmp	.+258    	; 0x3a02
				return SOS_OK;
			}
		}
	}

	if (flag_msg_link_auto(m->flag) && m->daddr != BCAST_ADDRESS) {
    3900:	f7 01       	movw	r30, r14
    3902:	82 85       	ldd	r24, Z+10	; 0x0a
    3904:	93 85       	ldd	r25, Z+11	; 0x0b
    3906:	89 2f       	mov	r24, r25
    3908:	99 27       	eor	r25, r25
    390a:	82 95       	swap	r24
    390c:	86 95       	lsr	r24
    390e:	87 70       	andi	r24, 0x07	; 7
    3910:	80 ff       	sbrs	r24, 0
    3912:	08 c0       	rjmp	.+16     	; 0x3924
    3914:	82 81       	ldd	r24, Z+2	; 0x02
    3916:	93 81       	ldd	r25, Z+3	; 0x03
    3918:	8f 5f       	subi	r24, 0xFF	; 255
    391a:	9f 4f       	sbci	r25, 0xFF	; 255
    391c:	19 f0       	breq	.+6      	; 0x3924
		sos_msg_find_right_link(m);
    391e:	c7 01       	movw	r24, r14
    3920:	0e 94 04 1c 	call	0x3808
	}

	if ((m->flag & SOS_MSG_ALL_LINK_IO) == 0) {
    3924:	f7 01       	movw	r30, r14
    3926:	22 85       	ldd	r18, Z+10	; 0x0a
    3928:	33 85       	ldd	r19, Z+11	; 0x0b
    392a:	89 01       	movw	r16, r18
    392c:	00 70       	andi	r16, 0x00	; 0
    392e:	1e 71       	andi	r17, 0x1E	; 30
    3930:	01 15       	cp	r16, r1
    3932:	11 05       	cpc	r17, r1
    3934:	29 f4       	brne	.+10     	; 0x3940
    3936:	c7 01       	movw	r24, r14
    3938:	0e 94 a3 1b 	call	0x3746
		null_link_msg_alloc(m);
		return SOS_OK;
    393c:	c8 01       	movw	r24, r16
    393e:	74 c0       	rjmp	.+232    	; 0x3a28
	}

	// Pre-allocate the message copies to allow for
	// an atomic NOMEM failure
#ifdef SOS_RADIO_CHANNEL
	if (flag_msg_from_radio(m->flag)){
    3940:	c9 01       	movw	r24, r18
    3942:	89 2f       	mov	r24, r25
    3944:	99 27       	eor	r25, r25
    3946:	86 95       	lsr	r24
    3948:	80 ff       	sbrs	r24, 0
    394a:	04 c0       	rjmp	.+8      	; 0x3954
		mcopy[SOS_RADIO_LINK_ID] = m;
    394c:	e9 82       	std	Y+1, r14	; 0x01
    394e:	fa 82       	std	Y+2, r15	; 0x02
		msg_count ++;
    3950:	41 e0       	ldi	r20, 0x01	; 1
    3952:	d4 2e       	mov	r13, r20
	}
#endif
	
#ifdef SOS_UART_CHANNEL
	if( flag_msg_from_uart(m->flag) ) {
    3954:	c9 01       	movw	r24, r18
    3956:	89 2f       	mov	r24, r25
    3958:	99 27       	eor	r25, r25
    395a:	86 95       	lsr	r24
    395c:	86 95       	lsr	r24
    395e:	86 95       	lsr	r24
    3960:	80 ff       	sbrs	r24, 0
    3962:	40 c0       	rjmp	.+128    	; 0x39e4
		if (msg_count == 0){
    3964:	dd 20       	and	r13, r13
    3966:	19 f4       	brne	.+6      	; 0x396e
			mcopy[SOS_UART_LINK_ID] = m;
    3968:	ed 82       	std	Y+5, r14	; 0x05
    396a:	fe 82       	std	Y+6, r15	; 0x06
    396c:	3b c0       	rjmp	.+118    	; 0x39e4
    396e:	0e 94 8b 1b 	call	0x3716
    3972:	8c 01       	movw	r16, r24
    3974:	89 2b       	or	r24, r25
    3976:	61 f1       	breq	.+88     	; 0x39d0
 * @return Returns a pointer to the allocated memory.
 * Will return a NULL pointer if the call to sys_malloc fails.
 */
static inline void *ker_malloc(uint16_t size, sos_pid_t id)
{
    3978:	f7 01       	movw	r30, r14
    397a:	87 81       	ldd	r24, Z+7	; 0x07
  return sos_blk_mem_alloc(size, id, false);
    397c:	40 e0       	ldi	r20, 0x00	; 0
    397e:	62 e0       	ldi	r22, 0x02	; 2
    3980:	99 27       	eor	r25, r25
    3982:	0e 94 14 11 	call	0x2228
    3986:	6c 01       	movw	r12, r24
    3988:	89 2b       	or	r24, r25
    398a:	49 f4       	brne	.+18     	; 0x399e
    398c:	f7 01       	movw	r30, r14
    398e:	87 81       	ldd	r24, Z+7	; 0x07
    3990:	88 23       	and	r24, r24
    3992:	29 f0       	breq	.+10     	; 0x399e
    3994:	c8 01       	movw	r24, r16
    3996:	0e 94 a3 1b 	call	0x3746
    399a:	f6 01       	movw	r30, r12
    399c:	1a c0       	rjmp	.+52     	; 0x39d2
    399e:	84 e1       	ldi	r24, 0x14	; 20
    39a0:	d8 01       	movw	r26, r16
    39a2:	f7 01       	movw	r30, r14
    39a4:	01 90       	ld	r0, Z+
    39a6:	0d 92       	st	X+, r0
    39a8:	8a 95       	dec	r24
    39aa:	e1 f7       	brne	.-8      	; 0x39a4
    39ac:	f8 01       	movw	r30, r16
    39ae:	c0 86       	std	Z+8, r12	; 0x08
    39b0:	d1 86       	std	Z+9, r13	; 0x09
    39b2:	82 85       	ldd	r24, Z+10	; 0x0a
    39b4:	93 85       	ldd	r25, Z+11	; 0x0b
    39b6:	84 60       	ori	r24, 0x04	; 4
    39b8:	82 87       	std	Z+10, r24	; 0x0a
    39ba:	93 87       	std	Z+11, r25	; 0x0b
    39bc:	f7 01       	movw	r30, r14
    39be:	87 81       	ldd	r24, Z+7	; 0x07
    39c0:	99 27       	eor	r25, r25
    39c2:	20 85       	ldd	r18, Z+8	; 0x08
    39c4:	31 85       	ldd	r19, Z+9	; 0x09
    39c6:	ac 01       	movw	r20, r24
    39c8:	b9 01       	movw	r22, r18
    39ca:	c6 01       	movw	r24, r12
    39cc:	0e 94 56 59 	call	0xb2ac
    39d0:	f8 01       	movw	r30, r16
    39d2:	ed 83       	std	Y+5, r30	; 0x05
    39d4:	fe 83       	std	Y+6, r31	; 0x06
		} else {
			mcopy[SOS_UART_LINK_ID] = msg_duplicate(m);
			if (NULL == mcopy[SOS_UART_LINK_ID]) goto dispatch_cleanup;
    39d6:	30 97       	sbiw	r30, 0x00	; 0
    39d8:	b9 f0       	breq	.+46     	; 0x3a08
			mcopy[SOS_UART_LINK_ID]->flag &= ~SOS_MSG_RELIABLE;
    39da:	82 85       	ldd	r24, Z+10	; 0x0a
    39dc:	93 85       	ldd	r25, Z+11	; 0x0b
    39de:	87 7f       	andi	r24, 0xF7	; 247
    39e0:	82 87       	std	Z+10, r24	; 0x0a
    39e2:	93 87       	std	Z+11, r25	; 0x0b
		}
		msg_count++;
	}
#endif

#ifdef SOS_I2C_CHANNEL
	if (flag_msg_from_i2c(m->flag)) {
		if (msg_count == 0){
			mcopy[SOS_I2C_LINK_ID] = m;
		} else {
			mcopy[SOS_I2C_LINK_ID] = msg_duplicate(m);
			if (NULL == mcopy[SOS_I2C_LINK_ID]) goto dispatch_cleanup;
			mcopy[SOS_I2C_LINK_ID]->flag &= ~SOS_MSG_RELIABLE;
		}
		msg_count++;
	}
#endif

#ifdef SOS_SPI_CHANNEL                                        
	if (flag_msg_from_spi(m->flag)) {      
		if (msg_count == 0){
			mcopy[SOS_SPI_LINK_ID] = m;
		} else {
			mcopy[SOS_SPI_LINK_ID] = msg_duplicate(m);
			if (NULL == mcopy[SOS_SPI_LINK_ID]) goto dispatch_cleanup;
			mcopy[SOS_SPI_LINK_ID]->flag &= ~SOS_MSG_RELIABLE;
		}
		msg_count++;
	}
#endif

	// Deliver to monitor only once
	monitor_deliver_outgoing_msg_to_monitor(m);
    39e4:	c7 01       	movw	r24, r14
    39e6:	0e 94 de 34 	call	0x69bc

  // Radio Dispatch
#ifdef SOS_RADIO_CHANNEL
	if (NULL != mcopy[SOS_RADIO_LINK_ID]){
    39ea:	89 81       	ldd	r24, Y+1	; 0x01
    39ec:	9a 81       	ldd	r25, Y+2	; 0x02
    39ee:	00 97       	sbiw	r24, 0x00	; 0
    39f0:	11 f0       	breq	.+4      	; 0x39f6
		msg_change_endian(mcopy[SOS_RADIO_LINK_ID]);
		SOS_RADIO_LINK_DISPATCH(mcopy[SOS_RADIO_LINK_ID]);
    39f2:	0e 94 46 0a 	call	0x148c
		ker_log( SOS_LOG_POST_NET, mcopy[SOS_RADIO_LINK_ID]->sid, mcopy[SOS_RADIO_LINK_ID]->daddr );
	}
#endif

  // UART Dispatch
#ifdef SOS_UART_CHANNEL
	if (NULL != mcopy[SOS_UART_LINK_ID]){
    39f6:	8d 81       	ldd	r24, Y+5	; 0x05
    39f8:	9e 81       	ldd	r25, Y+6	; 0x06
    39fa:	00 97       	sbiw	r24, 0x00	; 0
    39fc:	11 f0       	breq	.+4      	; 0x3a02
		msg_change_endian(mcopy[SOS_UART_LINK_ID]);
		SOS_UART_LINK_DISPATCH(mcopy[SOS_UART_LINK_ID]);
    39fe:	0e 94 3d 3f 	call	0x7e7a
	}
#endif

  // I2C Dispatch 
#ifdef SOS_I2C_CHANNEL
	if (NULL != mcopy[SOS_I2C_LINK_ID]){
		msg_change_endian(mcopy[SOS_I2C_LINK_ID]);
		SOS_I2C_LINK_DISPATCH(mcopy[SOS_I2C_LINK_ID]);
	}
#endif

	// SPI Dispatch
#ifdef SOS_SPI_CHANNEL
	if (NULL != mcopy[SOS_SPI_LINK_ID]){
		msg_change_endian(mcopy[SOS_SPI_LINK_ID]);
		SOS_SPI_LINK_DISPATCH(mcopy[SOS_SPI_LINK_ID]);
	}
#endif

	return SOS_OK;
    3a02:	80 e0       	ldi	r24, 0x00	; 0
    3a04:	90 e0       	ldi	r25, 0x00	; 0
    3a06:	10 c0       	rjmp	.+32     	; 0x3a28
    3a08:	83 e0       	ldi	r24, 0x03	; 3
    3a0a:	f8 2e       	mov	r15, r24
    3a0c:	85 01       	movw	r16, r10

#if defined(SOS_UART_CHANNEL) || defined(SOS_I2C_CHANNEL) || defined(SOS_SPI_CHANNEL)
dispatch_cleanup:
	{
		uint8_t i;
		for (i = 0 ; i < NUM_IO_LINKS; i++){
			if (NULL != mcopy[i]){
    3a0e:	d8 01       	movw	r26, r16
    3a10:	8d 91       	ld	r24, X+
    3a12:	9d 91       	ld	r25, X+
    3a14:	8d 01       	movw	r16, r26
    3a16:	00 97       	sbiw	r24, 0x00	; 0
    3a18:	11 f0       	breq	.+4      	; 0x3a1e
				msg_dispose(mcopy[i]);
    3a1a:	0e 94 a3 1b 	call	0x3746
    3a1e:	fa 94       	dec	r15
    3a20:	f7 fe       	sbrs	r15, 7
    3a22:	f5 cf       	rjmp	.-22     	; 0x3a0e
			}
		}
		DEBUG("----------------Cleaning up-----------\n");
	}
	return -ENOMEM;
    3a24:	84 ef       	ldi	r24, 0xF4	; 244
    3a26:	9f ef       	ldi	r25, 0xFF	; 255
    3a28:	28 96       	adiw	r28, 0x08	; 8
    3a2a:	0f b6       	in	r0, 0x3f	; 63
    3a2c:	f8 94       	cli
    3a2e:	de bf       	out	0x3e, r29	; 62
    3a30:	0f be       	out	0x3f, r0	; 63
    3a32:	cd bf       	out	0x3d, r28	; 61
    3a34:	df 91       	pop	r29
    3a36:	cf 91       	pop	r28
    3a38:	1f 91       	pop	r17
    3a3a:	0f 91       	pop	r16
    3a3c:	ff 90       	pop	r15
    3a3e:	ef 90       	pop	r14
    3a40:	df 90       	pop	r13
    3a42:	cf 90       	pop	r12
    3a44:	bf 90       	pop	r11
    3a46:	af 90       	pop	r10
    3a48:	08 95       	ret

00003a4a <post_link>:
    3a4a:	9f 92       	push	r9
    3a4c:	af 92       	push	r10
    3a4e:	bf 92       	push	r11
    3a50:	cf 92       	push	r12
    3a52:	df 92       	push	r13
    3a54:	ef 92       	push	r14
    3a56:	ff 92       	push	r15
    3a58:	0f 93       	push	r16
    3a5a:	1f 93       	push	r17
    3a5c:	cf 93       	push	r28
    3a5e:	b8 2e       	mov	r11, r24
    3a60:	96 2e       	mov	r9, r22
    3a62:	c4 2f       	mov	r28, r20
    3a64:	a2 2e       	mov	r10, r18
    3a66:	0e 94 8b 1b 	call	0x3716
    3a6a:	fc 01       	movw	r30, r24
    3a6c:	89 2b       	or	r24, r25
    3a6e:	49 f4       	brne	.+18     	; 0x3a82
    3a70:	e2 fe       	sbrs	r14, 2
    3a72:	04 c0       	rjmp	.+8      	; 0x3a7c
 * @return void
 */
static inline void ker_free(void* ptr)
{
  sos_blk_mem_free(ptr, false);
    3a74:	60 e0       	ldi	r22, 0x00	; 0
    3a76:	c8 01       	movw	r24, r16
    3a78:	0e 94 98 11 	call	0x2330
    3a7c:	84 ef       	ldi	r24, 0xF4	; 244
    3a7e:	9f ef       	ldi	r25, 0xFF	; 255
    3a80:	16 c0       	rjmp	.+44     	; 0x3aae
    3a82:	c2 82       	std	Z+2, r12	; 0x02
    3a84:	d3 82       	std	Z+3, r13	; 0x03
    3a86:	b0 82       	st	Z, r11
    3a88:	c6 83       	std	Z+6, r28	; 0x06
    3a8a:	80 91 04 01 	lds	r24, 0x0104
    3a8e:	90 91 05 01 	lds	r25, 0x0105
    3a92:	84 83       	std	Z+4, r24	; 0x04
    3a94:	95 83       	std	Z+5, r25	; 0x05
    3a96:	91 82       	std	Z+1, r9	; 0x01
    3a98:	a7 82       	std	Z+7, r10	; 0x07
    3a9a:	00 87       	std	Z+8, r16	; 0x08
    3a9c:	11 87       	std	Z+9, r17	; 0x09
    3a9e:	e2 86       	std	Z+10, r14	; 0x0a
    3aa0:	f3 86       	std	Z+11, r15	; 0x0b
    3aa2:	cf 01       	movw	r24, r30
    3aa4:	0e 94 2e 1c 	call	0x385c
    3aa8:	99 27       	eor	r25, r25
    3aaa:	87 fd       	sbrc	r24, 7
    3aac:	90 95       	com	r25
    3aae:	cf 91       	pop	r28
    3ab0:	1f 91       	pop	r17
    3ab2:	0f 91       	pop	r16
    3ab4:	ff 90       	pop	r15
    3ab6:	ef 90       	pop	r14
    3ab8:	df 90       	pop	r13
    3aba:	cf 90       	pop	r12
    3abc:	bf 90       	pop	r11
    3abe:	af 90       	pop	r10
    3ac0:	9f 90       	pop	r9
    3ac2:	08 95       	ret

00003ac4 <post>:
    3ac4:	0f 93       	push	r16
    3ac6:	1f 93       	push	r17
    3ac8:	cf 93       	push	r28
    3aca:	df 93       	push	r29
    3acc:	ec 01       	movw	r28, r24
    3ace:	0e 94 8b 1b 	call	0x3716
    3ad2:	8c 01       	movw	r16, r24
    3ad4:	89 2b       	or	r24, r25
    3ad6:	79 f4       	brne	.+30     	; 0x3af6
    3ad8:	8a 85       	ldd	r24, Y+10	; 0x0a
    3ada:	9b 85       	ldd	r25, Y+11	; 0x0b
    3adc:	82 ff       	sbrs	r24, 2
    3ade:	08 c0       	rjmp	.+16     	; 0x3af0
 * @return void
 */
static inline void ker_free(void* ptr)
{
  sos_blk_mem_free(ptr, false);
    3ae0:	60 e0       	ldi	r22, 0x00	; 0
    3ae2:	88 85       	ldd	r24, Y+8	; 0x08
    3ae4:	99 85       	ldd	r25, Y+9	; 0x09
    3ae6:	0e 94 98 11 	call	0x2330
    3aea:	08 87       	std	Y+8, r16	; 0x08
    3aec:	19 87       	std	Y+9, r17	; 0x09
    3aee:	1f 82       	std	Y+7, r1	; 0x07
    3af0:	84 ef       	ldi	r24, 0xF4	; 244
    3af2:	9f ef       	ldi	r25, 0xFF	; 255
    3af4:	15 c0       	rjmp	.+42     	; 0x3b20
    3af6:	84 e1       	ldi	r24, 0x14	; 20
    3af8:	d8 01       	movw	r26, r16
    3afa:	fe 01       	movw	r30, r28
    3afc:	01 90       	ld	r0, Z+
    3afe:	0d 92       	st	X+, r0
    3b00:	8a 95       	dec	r24
    3b02:	e1 f7       	brne	.-8      	; 0x3afc
    3b04:	1f 82       	std	Y+7, r1	; 0x07
    3b06:	18 86       	std	Y+8, r1	; 0x08
    3b08:	19 86       	std	Y+9, r1	; 0x09
    3b0a:	8a 85       	ldd	r24, Y+10	; 0x0a
    3b0c:	9b 85       	ldd	r25, Y+11	; 0x0b
    3b0e:	8b 7f       	andi	r24, 0xFB	; 251
    3b10:	8a 87       	std	Y+10, r24	; 0x0a
    3b12:	9b 87       	std	Y+11, r25	; 0x0b
    3b14:	c8 01       	movw	r24, r16
    3b16:	0e 94 2e 1c 	call	0x385c
    3b1a:	99 27       	eor	r25, r25
    3b1c:	87 fd       	sbrc	r24, 7
    3b1e:	90 95       	com	r25
    3b20:	df 91       	pop	r29
    3b22:	cf 91       	pop	r28
    3b24:	1f 91       	pop	r17
    3b26:	0f 91       	pop	r16
    3b28:	08 95       	ret

00003b2a <ker_sys_post_link>:
#endif
}

//============================================================================
// sys APIs
//============================================================================

int8_t ker_sys_post_link(sos_pid_t dst_mod_id, uint8_t type,
		uint8_t size, void *data, uint16_t flag, uint16_t dst_node_addr)
{
    3b2a:	5f 92       	push	r5
    3b2c:	6f 92       	push	r6
    3b2e:	7f 92       	push	r7
    3b30:	8f 92       	push	r8
    3b32:	9f 92       	push	r9
    3b34:	af 92       	push	r10
    3b36:	bf 92       	push	r11
    3b38:	cf 92       	push	r12
    3b3a:	df 92       	push	r13
    3b3c:	ef 92       	push	r14
    3b3e:	ff 92       	push	r15
    3b40:	0f 93       	push	r16
    3b42:	1f 93       	push	r17
    3b44:	cf 93       	push	r28
    3b46:	58 2e       	mov	r5, r24
    3b48:	66 2e       	mov	r6, r22
    3b4a:	74 2e       	mov	r7, r20
    3b4c:	49 01       	movw	r8, r18
    3b4e:	58 01       	movw	r10, r16
	sos_pid_t my_id = ker_get_current_pid();
    3b50:	0e 94 e2 13 	call	0x27c4
    3b54:	c8 2f       	mov	r28, r24
	
	if( post_link(dst_mod_id, my_id, type, size, data, flag, dst_node_addr) != SOS_OK) {
    3b56:	67 01       	movw	r12, r14
    3b58:	75 01       	movw	r14, r10
    3b5a:	84 01       	movw	r16, r8
    3b5c:	27 2d       	mov	r18, r7
    3b5e:	46 2d       	mov	r20, r6
    3b60:	68 2f       	mov	r22, r24
    3b62:	85 2d       	mov	r24, r5
    3b64:	0e 94 25 1d 	call	0x3a4a
    3b68:	88 23       	and	r24, r24
    3b6a:	39 f0       	breq	.+14     	; 0x3b7a
		return ker_mod_panic(my_id);
    3b6c:	8c 2f       	mov	r24, r28
    3b6e:	0e 94 4a 18 	call	0x3094
    3b72:	99 27       	eor	r25, r25
    3b74:	87 fd       	sbrc	r24, 7
    3b76:	90 95       	com	r25
    3b78:	02 c0       	rjmp	.+4      	; 0x3b7e
	}
	return SOS_OK;
    3b7a:	80 e0       	ldi	r24, 0x00	; 0
    3b7c:	90 e0       	ldi	r25, 0x00	; 0
    3b7e:	cf 91       	pop	r28
    3b80:	1f 91       	pop	r17
    3b82:	0f 91       	pop	r16
    3b84:	ff 90       	pop	r15
    3b86:	ef 90       	pop	r14
    3b88:	df 90       	pop	r13
    3b8a:	cf 90       	pop	r12
    3b8c:	bf 90       	pop	r11
    3b8e:	af 90       	pop	r10
    3b90:	9f 90       	pop	r9
    3b92:	8f 90       	pop	r8
    3b94:	7f 90       	pop	r7
    3b96:	6f 90       	pop	r6
    3b98:	5f 90       	pop	r5
    3b9a:	08 95       	ret

00003b9c <ker_sys_routing_register>:
}

int8_t ker_sys_routing_register( uint8_t fid )
{
    3b9c:	1f 93       	push	r17
    3b9e:	18 2f       	mov	r17, r24
	sos_pid_t sub_id = ker_get_current_pid();
    3ba0:	0e 94 e2 13 	call	0x27c4
	
	if(ker_fntable_subscribe(KER_ROUTING_PID, sub_id, fid, 0) != SOS_OK) {
    3ba4:	20 e0       	ldi	r18, 0x00	; 0
    3ba6:	41 2f       	mov	r20, r17
    3ba8:	68 2f       	mov	r22, r24
    3baa:	84 e1       	ldi	r24, 0x14	; 20
    3bac:	0e 94 26 29 	call	0x524c
    3bb0:	88 23       	and	r24, r24
    3bb2:	19 f0       	breq	.+6      	; 0x3bba
		return -EINVAL;
    3bb4:	8a ee       	ldi	r24, 0xEA	; 234
    3bb6:	9f ef       	ldi	r25, 0xFF	; 255
    3bb8:	02 c0       	rjmp	.+4      	; 0x3bbe
	}
	return SOS_OK;
    3bba:	80 e0       	ldi	r24, 0x00	; 0
    3bbc:	90 e0       	ldi	r25, 0x00	; 0
    3bbe:	1f 91       	pop	r17
    3bc0:	08 95       	ret

00003bc2 <routing_init>:
}

void routing_init( void )
{
#ifdef SOS_USE_PREEMPTION
	ker_register_module(sos_get_header_address(mod_header));
	routing_func_ptr = ker_get_module_state(KER_SENSOR_PID);
#else
	sched_register_kernel_module( &routing_module, sos_get_header_address(mod_header), routing_func_ptr);
    3bc2:	8c ec       	ldi	r24, 0xCC	; 204
    3bc4:	91 e0       	ldi	r25, 0x01	; 1
    3bc6:	aa 27       	eor	r26, r26
    3bc8:	97 fd       	sbrc	r25, 7
    3bca:	a0 95       	com	r26
    3bcc:	ba 2f       	mov	r27, r26
    3bce:	b6 95       	lsr	r27
    3bd0:	a7 95       	ror	r26
    3bd2:	97 95       	ror	r25
    3bd4:	87 95       	ror	r24
    3bd6:	4f ee       	ldi	r20, 0xEF	; 239
    3bd8:	59 e0       	ldi	r21, 0x09	; 9
    3bda:	bc 01       	movw	r22, r24
    3bdc:	87 ee       	ldi	r24, 0xE7	; 231
    3bde:	99 e0       	ldi	r25, 0x09	; 9
    3be0:	0e 94 4a 14 	call	0x2894
    3be4:	08 95       	ret

00003be6 <check_codemem_t>:
// Internal Helper Routines
//
static bool check_codemem_t( codemem_t cm )
{
	uint8_t real_h = (uint8_t)( cm & 0x00ff );
    3be6:	e8 2f       	mov	r30, r24
	uint8_t salt   = (uint8_t)( cm >> 8 );
    3be8:	89 2f       	mov	r24, r25
    3bea:	99 27       	eor	r25, r25
    3bec:	98 2f       	mov	r25, r24
	
	if( real_h > CODEMEM_MAX_LOADABLE_MODULES ) {
    3bee:	e1 31       	cpi	r30, 0x11	; 17
    3bf0:	78 f4       	brcc	.+30     	; 0x3c10
		DEBUG("check_codemem_t: CODEMEM_MAX_LOADABLE_MODULES\n");
		return false;
	}
	
	if( codemem_handle_list[ real_h ] == NULL ) {
    3bf2:	ff 27       	eor	r31, r31
    3bf4:	ee 0f       	add	r30, r30
    3bf6:	ff 1f       	adc	r31, r31
    3bf8:	e5 5e       	subi	r30, 0xE5	; 229
    3bfa:	f5 4f       	sbci	r31, 0xF5	; 245
    3bfc:	01 90       	ld	r0, Z+
    3bfe:	f0 81       	ld	r31, Z
    3c00:	e0 2d       	mov	r30, r0
    3c02:	30 97       	sbiw	r30, 0x00	; 0
    3c04:	11 f4       	brne	.+4      	; 0x3c0a
		DEBUG("check_codemem_t: codemem_handle_list[ real_h ] == NULL\n");
		return false;
    3c06:	cf 01       	movw	r24, r30
    3c08:	08 95       	ret
	}
	
	if( (codemem_handle_list[ real_h ]->salt) != salt ) {
    3c0a:	86 81       	ldd	r24, Z+6	; 0x06
    3c0c:	89 17       	cp	r24, r25
    3c0e:	19 f0       	breq	.+6      	; 0x3c16
		DEBUG("codemem_handle_list[ real_h ]->salt) != salt\n");
		return false;
    3c10:	80 e0       	ldi	r24, 0x00	; 0
    3c12:	90 e0       	ldi	r25, 0x00	; 0
    3c14:	08 95       	ret
	}
	return true;
    3c16:	81 e0       	ldi	r24, 0x01	; 1
    3c18:	90 e0       	ldi	r25, 0x00	; 0
}
    3c1a:	08 95       	ret
    3c1c:	08 95       	ret

00003c1e <flash_setbitmap>:

static void codemem_do_killall( codemem_t h )
{
  mod_header_ptr p;
  sos_code_id_t  cid;
	
  p = ker_codemem_get_header_address( h );
  if( p == 0 ) return;
  cid = sos_read_header_word(p, offsetof(mod_header_t, code_id));
  cid = entohs(cid);
  ker_killall(cid);

#ifdef SOS_SIM
  //
  // Close the file in simulation
  //
  delete_module_image( cid );
#endif
}


static mod_header_ptr match_cid(uint32_t addr, sos_code_id_t cid)
{
  mod_header_ptr modptr;
  sos_code_id_t  mod_cid;

  modptr = (mod_header_ptr)FlashGetProgmem( addr );
  mod_cid = sos_read_header_word(modptr, offsetof(mod_header_t, code_id));
  mod_cid = entohs(mod_cid);

  if(mod_cid == cid) {
    return modptr;
  }
  return 0;

}

static void flash_setbitmap(uint16_t start, uint16_t length, bool val)
{
    3c1e:	cf 93       	push	r28
    3c20:	c4 2f       	mov	r28, r20
	uint8_t i;
	uint8_t j;
	register uint8_t shift = 1;
	
	i = start / 8;
    3c22:	9c 01       	movw	r18, r24
    3c24:	43 e0       	ldi	r20, 0x03	; 3
    3c26:	36 95       	lsr	r19
    3c28:	27 95       	ror	r18
    3c2a:	4a 95       	dec	r20
    3c2c:	e1 f7       	brne	.-8      	; 0x3c26
	j = start % 8;
    3c2e:	58 2f       	mov	r21, r24
    3c30:	57 70       	andi	r21, 0x07	; 7
	
	shift = 1 << j;
    3c32:	81 e0       	ldi	r24, 0x01	; 1
    3c34:	90 e0       	ldi	r25, 0x00	; 0
    3c36:	98 2f       	mov	r25, r24
    3c38:	05 2e       	mov	r0, r21
    3c3a:	01 c0       	rjmp	.+2      	; 0x3c3e
    3c3c:	99 0f       	add	r25, r25
    3c3e:	0a 94       	dec	r0
    3c40:	ea f7       	brpl	.-6      	; 0x3c3c
	
	for( ; j < 8 && length > 0; j++, shift <<= 1, length-- ) {
    3c42:	58 30       	cpi	r21, 0x08	; 8
    3c44:	18 f5       	brcc	.+70     	; 0x3c8c
    3c46:	61 15       	cp	r22, r1
    3c48:	71 05       	cpc	r23, r1
    3c4a:	01 f1       	breq	.+64     	; 0x3c8c
    3c4c:	a2 2f       	mov	r26, r18
    3c4e:	bb 27       	eor	r27, r27
    3c50:	e0 91 16 0a 	lds	r30, 0x0A16
    3c54:	f0 91 17 0a 	lds	r31, 0x0A17
    3c58:	35 2f       	mov	r19, r21
    3c5a:	3f 5f       	subi	r19, 0xFF	; 255
    3c5c:	49 2f       	mov	r20, r25
    3c5e:	44 0f       	add	r20, r20
    3c60:	61 50       	subi	r22, 0x01	; 1
    3c62:	70 40       	sbci	r23, 0x00	; 0
		if( val ) {
    3c64:	cc 23       	and	r28, r28
    3c66:	29 f0       	breq	.+10     	; 0x3c72
			flash_alloc_bitmap[i] |= shift;
    3c68:	ea 0f       	add	r30, r26
    3c6a:	fb 1f       	adc	r31, r27
    3c6c:	80 81       	ld	r24, Z
    3c6e:	89 2b       	or	r24, r25
    3c70:	05 c0       	rjmp	.+10     	; 0x3c7c
		} else {
			flash_alloc_bitmap[i] &= ~shift;
    3c72:	ea 0f       	add	r30, r26
    3c74:	fb 1f       	adc	r31, r27
    3c76:	90 95       	com	r25
    3c78:	80 81       	ld	r24, Z
    3c7a:	89 23       	and	r24, r25
    3c7c:	80 83       	st	Z, r24
    3c7e:	53 2f       	mov	r21, r19
    3c80:	94 2f       	mov	r25, r20
    3c82:	38 30       	cpi	r19, 0x08	; 8
    3c84:	18 f4       	brcc	.+6      	; 0x3c8c
    3c86:	61 15       	cp	r22, r1
    3c88:	71 05       	cpc	r23, r1
    3c8a:	11 f7       	brne	.-60     	; 0x3c50
		}
	}
	i++;
    3c8c:	2f 5f       	subi	r18, 0xFF	; 255
	
	for( ; i < flash_bitmap_length && length > 0; i++ ) {
    3c8e:	80 91 18 0a 	lds	r24, 0x0A18
    3c92:	28 17       	cp	r18, r24
    3c94:	80 f5       	brcc	.+96     	; 0x3cf6
    3c96:	61 15       	cp	r22, r1
    3c98:	71 05       	cpc	r23, r1
    3c9a:	69 f1       	breq	.+90     	; 0x3cf6
		shift = 1;
    3c9c:	91 e0       	ldi	r25, 0x01	; 1
		for( j = 0; j < 8 && length > 0; j++, shift <<= 1, length-- ) {
    3c9e:	50 e0       	ldi	r21, 0x00	; 0
    3ca0:	61 15       	cp	r22, r1
    3ca2:	71 05       	cpc	r23, r1
    3ca4:	01 f1       	breq	.+64     	; 0x3ce6
    3ca6:	a2 2f       	mov	r26, r18
    3ca8:	bb 27       	eor	r27, r27
    3caa:	e0 91 16 0a 	lds	r30, 0x0A16
    3cae:	f0 91 17 0a 	lds	r31, 0x0A17
    3cb2:	35 2f       	mov	r19, r21
    3cb4:	3f 5f       	subi	r19, 0xFF	; 255
    3cb6:	49 2f       	mov	r20, r25
    3cb8:	44 0f       	add	r20, r20
    3cba:	61 50       	subi	r22, 0x01	; 1
    3cbc:	70 40       	sbci	r23, 0x00	; 0
			if( val ) {
    3cbe:	cc 23       	and	r28, r28
    3cc0:	29 f0       	breq	.+10     	; 0x3ccc
				flash_alloc_bitmap[i] |= shift;
    3cc2:	ea 0f       	add	r30, r26
    3cc4:	fb 1f       	adc	r31, r27
    3cc6:	80 81       	ld	r24, Z
    3cc8:	89 2b       	or	r24, r25
    3cca:	05 c0       	rjmp	.+10     	; 0x3cd6
			} else {
				flash_alloc_bitmap[i] &= ~shift;
    3ccc:	ea 0f       	add	r30, r26
    3cce:	fb 1f       	adc	r31, r27
    3cd0:	90 95       	com	r25
    3cd2:	80 81       	ld	r24, Z
    3cd4:	89 23       	and	r24, r25
    3cd6:	80 83       	st	Z, r24
    3cd8:	53 2f       	mov	r21, r19
    3cda:	94 2f       	mov	r25, r20
    3cdc:	38 30       	cpi	r19, 0x08	; 8
    3cde:	18 f4       	brcc	.+6      	; 0x3ce6
    3ce0:	61 15       	cp	r22, r1
    3ce2:	71 05       	cpc	r23, r1
    3ce4:	11 f7       	brne	.-60     	; 0x3caa
    3ce6:	2f 5f       	subi	r18, 0xFF	; 255
    3ce8:	80 91 18 0a 	lds	r24, 0x0A18
    3cec:	28 17       	cp	r18, r24
    3cee:	18 f4       	brcc	.+6      	; 0x3cf6
    3cf0:	61 15       	cp	r22, r1
    3cf2:	71 05       	cpc	r23, r1
    3cf4:	99 f6       	brne	.-90     	; 0x3c9c
    3cf6:	cf 91       	pop	r28
    3cf8:	08 95       	ret

00003cfa <codemem_cache_alloc>:
			}
		}
	}
}

static int8_t codemem_cache_alloc( void )
{	
	if( flash_cache_page == NULL ) {
    3cfa:	80 91 3c 0a 	lds	r24, 0x0A3C
    3cfe:	90 91 3d 0a 	lds	r25, 0x0A3D
    3d02:	89 2b       	or	r24, r25
    3d04:	b9 f4       	brne	.+46     	; 0x3d34
 * Will return a NULL pointer if the call to sys_malloc fails.
 */
static inline void *ker_malloc(uint16_t size, sos_pid_t id)
{
  return sos_blk_mem_alloc(size, id, false);
    3d06:	40 e0       	ldi	r20, 0x00	; 0
    3d08:	6f e0       	ldi	r22, 0x0F	; 15
    3d0a:	80 e0       	ldi	r24, 0x00	; 0
    3d0c:	91 e0       	ldi	r25, 0x01	; 1
    3d0e:	0e 94 14 11 	call	0x2228
    3d12:	90 93 3d 0a 	sts	0x0A3D, r25
    3d16:	80 93 3c 0a 	sts	0x0A3C, r24
		flash_cache_page = ker_malloc( FLASHMEM_PAGE_SIZE, KER_CODEMEM_PID );
		if( flash_cache_page == NULL ) {
    3d1a:	89 2b       	or	r24, r25
    3d1c:	19 f4       	brne	.+6      	; 0x3d24
			return -ENOMEM;
    3d1e:	84 ef       	ldi	r24, 0xF4	; 244
    3d20:	9f ef       	ldi	r25, 0xFF	; 255
    3d22:	08 95       	ret
		}
		flash_cache_addr = 0;
    3d24:	10 92 3e 0a 	sts	0x0A3E, r1
    3d28:	10 92 3f 0a 	sts	0x0A3F, r1
    3d2c:	10 92 40 0a 	sts	0x0A40, r1
    3d30:	10 92 41 0a 	sts	0x0A41, r1
	}
	return SOS_OK;
    3d34:	80 e0       	ldi	r24, 0x00	; 0
    3d36:	90 e0       	ldi	r25, 0x00	; 0
}
    3d38:	08 95       	ret
    3d3a:	08 95       	ret

00003d3c <codemem_cache_write>:

static inline void codemem_cache_flush( )
{
	if( flash_cache_page != NULL ) {
		flash_erase( flash_cache_addr, FLASHMEM_PAGE_SIZE );
		flash_write( flash_cache_addr, flash_cache_page, FLASHMEM_PAGE_SIZE );
		ker_free( flash_cache_page );
		flash_cache_page = NULL;
		flash_cache_addr = 0;
	}
}


//
// Get the starting page address.  If the cache does not exist, allocate it.  
// If the page address is the same as 
// flash_cache_addr, write to the cache.  If the page address is different 
// from flash_cache_addr, perform the following.
// 1. store current page
// 2. load new page
// 3. save the content
// WARNING: this rountine does not handle writes across page boundary.
// WARNING: this rountine assumes the cache is already allocated.
//
static void codemem_cache_write( uint32_t addr, uint8_t* buf, uint16_t nbytes )
{
    3d3c:	af 92       	push	r10
    3d3e:	bf 92       	push	r11
    3d40:	cf 92       	push	r12
    3d42:	df 92       	push	r13
    3d44:	ef 92       	push	r14
    3d46:	ff 92       	push	r15
    3d48:	0f 93       	push	r16
    3d4a:	1f 93       	push	r17
    3d4c:	cf 93       	push	r28
    3d4e:	df 93       	push	r29
    3d50:	dc 01       	movw	r26, r24
    3d52:	cb 01       	movw	r24, r22
    3d54:	5a 01       	movw	r10, r20
    3d56:	69 01       	movw	r12, r18
	uint16_t i;
	uint32_t start_addr = addr & ~((uint32_t)(FLASHMEM_PAGE_SIZE - 1));
    3d58:	e1 2c       	mov	r14, r1
    3d5a:	5f ef       	ldi	r21, 0xFF	; 255
    3d5c:	f5 2e       	mov	r15, r21
    3d5e:	5f ef       	ldi	r21, 0xFF	; 255
    3d60:	05 2f       	mov	r16, r21
    3d62:	5f ef       	ldi	r21, 0xFF	; 255
    3d64:	15 2f       	mov	r17, r21
    3d66:	e8 22       	and	r14, r24
    3d68:	f9 22       	and	r15, r25
    3d6a:	0a 23       	and	r16, r26
    3d6c:	1b 23       	and	r17, r27
	uint16_t offset = addr % FLASHMEM_PAGE_SIZE;
    3d6e:	90 70       	andi	r25, 0x00	; 0
    3d70:	a0 70       	andi	r26, 0x00	; 0
    3d72:	b0 70       	andi	r27, 0x00	; 0
    3d74:	ec 01       	movw	r28, r24
	
	if( flash_cache_addr != start_addr ) {
    3d76:	60 91 3e 0a 	lds	r22, 0x0A3E
    3d7a:	70 91 3f 0a 	lds	r23, 0x0A3F
    3d7e:	80 91 40 0a 	lds	r24, 0x0A40
    3d82:	90 91 41 0a 	lds	r25, 0x0A41
    3d86:	6e 15       	cp	r22, r14
    3d88:	7f 05       	cpc	r23, r15
    3d8a:	80 07       	cpc	r24, r16
    3d8c:	91 07       	cpc	r25, r17
    3d8e:	69 f1       	breq	.+90     	; 0x3dea
		if( flash_cache_addr != 0 ) {
    3d90:	61 15       	cp	r22, r1
    3d92:	71 05       	cpc	r23, r1
    3d94:	81 05       	cpc	r24, r1
    3d96:	91 05       	cpc	r25, r1
    3d98:	b1 f0       	breq	.+44     	; 0x3dc6
			flash_erase( flash_cache_addr, FLASHMEM_PAGE_SIZE );
    3d9a:	40 e0       	ldi	r20, 0x00	; 0
    3d9c:	51 e0       	ldi	r21, 0x01	; 1
    3d9e:	0e 94 00 fe 	call	0x1fc00
			flash_write( flash_cache_addr, flash_cache_page, FLASHMEM_PAGE_SIZE );
    3da2:	80 91 3e 0a 	lds	r24, 0x0A3E
    3da6:	90 91 3f 0a 	lds	r25, 0x0A3F
    3daa:	a0 91 40 0a 	lds	r26, 0x0A40
    3dae:	b0 91 41 0a 	lds	r27, 0x0A41
    3db2:	20 e0       	ldi	r18, 0x00	; 0
    3db4:	31 e0       	ldi	r19, 0x01	; 1
    3db6:	40 91 3c 0a 	lds	r20, 0x0A3C
    3dba:	50 91 3d 0a 	lds	r21, 0x0A3D
    3dbe:	bc 01       	movw	r22, r24
    3dc0:	cd 01       	movw	r24, r26
    3dc2:	0e 94 01 fe 	call	0x1fc02
		}
		flash_cache_addr = start_addr;
    3dc6:	e0 92 3e 0a 	sts	0x0A3E, r14
    3dca:	f0 92 3f 0a 	sts	0x0A3F, r15
    3dce:	00 93 40 0a 	sts	0x0A40, r16
    3dd2:	10 93 41 0a 	sts	0x0A41, r17
		flash_read( start_addr, flash_cache_page, FLASHMEM_PAGE_SIZE );
    3dd6:	20 e0       	ldi	r18, 0x00	; 0
    3dd8:	31 e0       	ldi	r19, 0x01	; 1
    3dda:	40 91 3c 0a 	lds	r20, 0x0A3C
    3dde:	50 91 3d 0a 	lds	r21, 0x0A3D
    3de2:	c8 01       	movw	r24, r16
    3de4:	b7 01       	movw	r22, r14
    3de6:	0e 94 c0 54 	call	0xa980
	}
	
	for( i = 0; i < nbytes; i++, offset++ ) {
    3dea:	c1 14       	cp	r12, r1
    3dec:	d1 04       	cpc	r13, r1
    3dee:	81 f0       	breq	.+32     	; 0x3e10
    3df0:	d5 01       	movw	r26, r10
    3df2:	96 01       	movw	r18, r12
		flash_cache_page[offset] = buf[i];
    3df4:	e0 91 3c 0a 	lds	r30, 0x0A3C
    3df8:	f0 91 3d 0a 	lds	r31, 0x0A3D
    3dfc:	ec 0f       	add	r30, r28
    3dfe:	fd 1f       	adc	r31, r29
    3e00:	8d 91       	ld	r24, X+
    3e02:	80 83       	st	Z, r24
    3e04:	21 50       	subi	r18, 0x01	; 1
    3e06:	30 40       	sbci	r19, 0x00	; 0
    3e08:	21 96       	adiw	r28, 0x01	; 1
    3e0a:	21 15       	cp	r18, r1
    3e0c:	31 05       	cpc	r19, r1
    3e0e:	91 f7       	brne	.-28     	; 0x3df4
    3e10:	df 91       	pop	r29
    3e12:	cf 91       	pop	r28
    3e14:	1f 91       	pop	r17
    3e16:	0f 91       	pop	r16
    3e18:	ff 90       	pop	r15
    3e1a:	ef 90       	pop	r14
    3e1c:	df 90       	pop	r13
    3e1e:	cf 90       	pop	r12
    3e20:	bf 90       	pop	r11
    3e22:	af 90       	pop	r10
    3e24:	08 95       	ret

00003e26 <ker_codemem_alloc>:
	}
}

static void codemem_cache_read( uint32_t addr, uint8_t* buf, uint16_t nbytes )
{
	uint16_t i = 0;
	uint32_t start_addr = addr & ~((uint32_t)(FLASHMEM_PAGE_SIZE - 1));
	uint16_t offset = addr % FLASHMEM_PAGE_SIZE;
	
	if( flash_cache_addr == start_addr ) {
		uint16_t tmp = (FLASHMEM_PAGE_SIZE - offset);
		for( i = 0; (i < tmp) && (nbytes != 0); i++, offset++ ) {
			*buf = flash_cache_page[offset];
			buf++;
			nbytes--;
			addr++;
		}
	}
	if( nbytes == 0 ) {
		return;
	}
	flash_read( addr, buf, nbytes );
	return;
}

//
// Allocate flash memory according to the size
// \return the address to the flash
// \return zero for failure
//
static uint32_t flash_alloc( uint16_t size )
{
	uint8_t i, j;
	uint8_t num_blocks;
	uint8_t free_blocks = 0; 
	uint32_t addr;
	
	if( codemem_cache_alloc() != SOS_OK ) {
		return -ENOMEM;
	}
	
	num_blocks = (uint8_t)((size + (FLASHMEM_PAGE_SIZE - 1)) / FLASHMEM_PAGE_SIZE);
	
	//
	// Address-ordered first fit
	// Search from the beginning and find 
	//
	for( i = 0; i < flash_bitmap_length; i++ ) {
		register uint8_t shift = 1;
		register uint8_t tmp = flash_alloc_bitmap[i];
		for( j = 0; j < 8; j++, shift <<= 1 ) {
			if( tmp & shift ) {
				free_blocks = 0;
			} else {
				free_blocks++;
			}
			if( free_blocks == num_blocks ) {
				//
				// set the bit map
				//
				flash_setbitmap(i*8 + j + 1 - num_blocks, num_blocks, true);
				addr = flash_start_page_addr + ((i*8 + j + 1 - num_blocks) * FLASHMEM_PAGE_SIZE);
				return addr;
			}
		}
	}
	return 0;
}

static void flash_free( uint32_t addr, uint16_t size )
{
	uint16_t b = (addr - flash_start_page_addr) / FLASHMEM_PAGE_SIZE;
	uint8_t num_blocks = (uint8_t)((size + FLASHMEM_PAGE_SIZE - 1) / FLASHMEM_PAGE_SIZE);
	 
	//
	// Unset the bit map
	//
	flash_setbitmap(b, num_blocks, false);
	flash_erase( addr, size );
}


// ================================================================================
// Public Routines
//
codemem_t ker_codemem_alloc(uint16_t size, codemem_type_t type)
{
    3e26:	df 92       	push	r13
    3e28:	ef 92       	push	r14
    3e2a:	ff 92       	push	r15
    3e2c:	0f 93       	push	r16
    3e2e:	1f 93       	push	r17
    3e30:	cf 93       	push	r28
    3e32:	df 93       	push	r29
    3e34:	7c 01       	movw	r14, r24
	uint8_t i;
	codemem_hdr_t *hdr;
	codemem_t      ret;
	//
	// Allocate meta data  
	//
	
	for( i = 0; i < CODEMEM_MAX_LOADABLE_MODULES; i++ ) {
    3e36:	dd 24       	eor	r13, r13
    3e38:	eb e1       	ldi	r30, 0x1B	; 27
    3e3a:	fa e0       	ldi	r31, 0x0A	; 10
		if( codemem_handle_list[i] == NULL ) {
    3e3c:	81 91       	ld	r24, Z+
    3e3e:	91 91       	ld	r25, Z+
    3e40:	89 2b       	or	r24, r25
    3e42:	21 f0       	breq	.+8      	; 0x3e4c
    3e44:	d3 94       	inc	r13
    3e46:	8f e0       	ldi	r24, 0x0F	; 15
    3e48:	8d 15       	cp	r24, r13
    3e4a:	c0 f7       	brcc	.-16     	; 0x3e3c
			break;
		}
	}
	
	if( i == CODEMEM_MAX_LOADABLE_MODULES ) {
    3e4c:	80 e1       	ldi	r24, 0x10	; 16
    3e4e:	d8 16       	cp	r13, r24
    3e50:	09 f4       	brne	.+2      	; 0x3e54
    3e52:	7b c0       	rjmp	.+246    	; 0x3f4a
 * @warning this is used to allocate the memory for long time usage
 */
static inline void* malloc_longterm(uint16_t size, sos_pid_t id)
{
  return sos_blk_mem_longterm_alloc(size, id, true);
    3e54:	41 e0       	ldi	r20, 0x01	; 1
    3e56:	6f e0       	ldi	r22, 0x0F	; 15
    3e58:	88 e0       	ldi	r24, 0x08	; 8
    3e5a:	90 e0       	ldi	r25, 0x00	; 0
    3e5c:	0e 94 51 10 	call	0x20a2
    3e60:	ec 01       	movw	r28, r24
		//
		// Maximum file reached...
		//
		return CODEMEM_INVALID;
	}
	
	hdr = malloc_longterm( sizeof(codemem_hdr_t), KER_CODEMEM_PID );
	
	if( hdr == NULL ) {
    3e62:	89 2b       	or	r24, r25
    3e64:	09 f4       	brne	.+2      	; 0x3e68
    3e66:	71 c0       	rjmp	.+226    	; 0x3f4a
    3e68:	00 e0       	ldi	r16, 0x00	; 0
    3e6a:	0e 94 7d 1e 	call	0x3cfa
    3e6e:	88 23       	and	r24, r24
    3e70:	71 f1       	breq	.+92     	; 0x3ece
    3e72:	24 ef       	ldi	r18, 0xF4	; 244
    3e74:	3f ef       	ldi	r19, 0xFF	; 255
    3e76:	4f ef       	ldi	r20, 0xFF	; 255
    3e78:	5f ef       	ldi	r21, 0xFF	; 255
    3e7a:	5a c0       	rjmp	.+180    	; 0x3f30
    3e7c:	80 2f       	mov	r24, r16
    3e7e:	99 27       	eor	r25, r25
    3e80:	89 01       	movw	r16, r18
    3e82:	f3 e0       	ldi	r31, 0x03	; 3
    3e84:	00 0f       	add	r16, r16
    3e86:	11 1f       	adc	r17, r17
    3e88:	fa 95       	dec	r31
    3e8a:	e1 f7       	brne	.-8      	; 0x3e84
    3e8c:	04 0f       	add	r16, r20
    3e8e:	11 1d       	adc	r17, r1
    3e90:	08 1b       	sub	r16, r24
    3e92:	19 0b       	sbc	r17, r25
    3e94:	0f 5f       	subi	r16, 0xFF	; 255
    3e96:	1f 4f       	sbci	r17, 0xFF	; 255
    3e98:	41 e0       	ldi	r20, 0x01	; 1
    3e9a:	bc 01       	movw	r22, r24
    3e9c:	c8 01       	movw	r24, r16
    3e9e:	0e 94 0f 1e 	call	0x3c1e
    3ea2:	c8 01       	movw	r24, r16
    3ea4:	aa 27       	eor	r26, r26
    3ea6:	97 fd       	sbrc	r25, 7
    3ea8:	a0 95       	com	r26
    3eaa:	ba 2f       	mov	r27, r26
    3eac:	ba 2f       	mov	r27, r26
    3eae:	a9 2f       	mov	r26, r25
    3eb0:	98 2f       	mov	r25, r24
    3eb2:	88 27       	eor	r24, r24
    3eb4:	20 91 12 0a 	lds	r18, 0x0A12
    3eb8:	30 91 13 0a 	lds	r19, 0x0A13
    3ebc:	40 91 14 0a 	lds	r20, 0x0A14
    3ec0:	50 91 15 0a 	lds	r21, 0x0A15
    3ec4:	28 0f       	add	r18, r24
    3ec6:	39 1f       	adc	r19, r25
    3ec8:	4a 1f       	adc	r20, r26
    3eca:	5b 1f       	adc	r21, r27
    3ecc:	31 c0       	rjmp	.+98     	; 0x3f30
    3ece:	c7 01       	movw	r24, r14
    3ed0:	aa 27       	eor	r26, r26
    3ed2:	bb 27       	eor	r27, r27
    3ed4:	81 50       	subi	r24, 0x01	; 1
    3ed6:	9f 4f       	sbci	r25, 0xFF	; 255
    3ed8:	af 4f       	sbci	r26, 0xFF	; 255
    3eda:	bf 4f       	sbci	r27, 0xFF	; 255
    3edc:	89 2f       	mov	r24, r25
    3ede:	9a 2f       	mov	r25, r26
    3ee0:	ab 2f       	mov	r26, r27
    3ee2:	bb 27       	eor	r27, r27
    3ee4:	98 2f       	mov	r25, r24
    3ee6:	50 2f       	mov	r21, r16
    3ee8:	70 91 18 0a 	lds	r23, 0x0A18
    3eec:	07 17       	cp	r16, r23
    3eee:	e0 f4       	brcc	.+56     	; 0x3f28
    3ef0:	a0 91 16 0a 	lds	r26, 0x0A16
    3ef4:	b0 91 17 0a 	lds	r27, 0x0A17
    3ef8:	61 e0       	ldi	r22, 0x01	; 1
    3efa:	25 2f       	mov	r18, r21
    3efc:	33 27       	eor	r19, r19
    3efe:	fd 01       	movw	r30, r26
    3f00:	e2 0f       	add	r30, r18
    3f02:	f3 1f       	adc	r31, r19
    3f04:	e0 81       	ld	r30, Z
    3f06:	40 e0       	ldi	r20, 0x00	; 0
    3f08:	8e 2f       	mov	r24, r30
    3f0a:	86 23       	and	r24, r22
    3f0c:	11 f0       	breq	.+4      	; 0x3f12
    3f0e:	00 e0       	ldi	r16, 0x00	; 0
    3f10:	01 c0       	rjmp	.+2      	; 0x3f14
    3f12:	0f 5f       	subi	r16, 0xFF	; 255
    3f14:	09 17       	cp	r16, r25
    3f16:	09 f4       	brne	.+2      	; 0x3f1a
    3f18:	b1 cf       	rjmp	.-158    	; 0x3e7c
    3f1a:	4f 5f       	subi	r20, 0xFF	; 255
    3f1c:	66 0f       	add	r22, r22
    3f1e:	48 30       	cpi	r20, 0x08	; 8
    3f20:	98 f3       	brcs	.-26     	; 0x3f08
    3f22:	5f 5f       	subi	r21, 0xFF	; 255
    3f24:	57 17       	cp	r21, r23
    3f26:	40 f3       	brcs	.-48     	; 0x3ef8
    3f28:	20 e0       	ldi	r18, 0x00	; 0
    3f2a:	30 e0       	ldi	r19, 0x00	; 0
    3f2c:	40 e0       	ldi	r20, 0x00	; 0
    3f2e:	50 e0       	ldi	r21, 0x00	; 0
    3f30:	28 83       	st	Y, r18
    3f32:	39 83       	std	Y+1, r19	; 0x01
    3f34:	4a 83       	std	Y+2, r20	; 0x02
    3f36:	5b 83       	std	Y+3, r21	; 0x03
		return CODEMEM_INVALID;
	}
	
	hdr->start_addr = flash_alloc( size );

	//post_uart(KER_CODEMEM_PID, KER_CODEMEM_PID, 100, 4, &(hdr->start_addr), 0, BCAST_ADDRESS);
	if( hdr->start_addr == 0 ) {
    3f38:	21 15       	cp	r18, r1
    3f3a:	31 05       	cpc	r19, r1
    3f3c:	41 05       	cpc	r20, r1
    3f3e:	51 05       	cpc	r21, r1
    3f40:	39 f4       	brne	.+14     	; 0x3f50
 * @return void
 */
static inline void ker_free(void* ptr)
{
  sos_blk_mem_free(ptr, false);
    3f42:	60 e0       	ldi	r22, 0x00	; 0
    3f44:	ce 01       	movw	r24, r28
    3f46:	0e 94 98 11 	call	0x2330
		ker_free( hdr );
		return CODEMEM_INVALID;
    3f4a:	8f ef       	ldi	r24, 0xFF	; 255
    3f4c:	9f ef       	ldi	r25, 0xFF	; 255
    3f4e:	19 c0       	rjmp	.+50     	; 0x3f82
	}
	hdr->size = size;
    3f50:	ec 82       	std	Y+4, r14	; 0x04
    3f52:	fd 82       	std	Y+5, r15	; 0x05
	codemem_handle_list[i] = hdr;
    3f54:	2d 2d       	mov	r18, r13
    3f56:	33 27       	eor	r19, r19
    3f58:	f9 01       	movw	r30, r18
    3f5a:	e2 0f       	add	r30, r18
    3f5c:	f3 1f       	adc	r31, r19
    3f5e:	e5 5e       	subi	r30, 0xE5	; 229
    3f60:	f5 4f       	sbci	r31, 0xF5	; 245
    3f62:	c0 83       	st	Z, r28
    3f64:	d1 83       	std	Z+1, r29	; 0x01
	
	codemem_salt++;
    3f66:	80 91 3b 0a 	lds	r24, 0x0A3B
    3f6a:	8f 5f       	subi	r24, 0xFF	; 255
    3f6c:	80 93 3b 0a 	sts	0x0A3B, r24
	hdr->salt = codemem_salt;
    3f70:	8e 83       	std	Y+6, r24	; 0x06
	hdr->flag = 0;
    3f72:	1f 82       	std	Y+7, r1	; 0x07
	ret = ((uint16_t)i) | (((uint16_t)codemem_salt) << 8);
    3f74:	80 91 3b 0a 	lds	r24, 0x0A3B
    3f78:	99 27       	eor	r25, r25
    3f7a:	98 2f       	mov	r25, r24
    3f7c:	88 27       	eor	r24, r24
    3f7e:	82 2b       	or	r24, r18
    3f80:	93 2b       	or	r25, r19
    3f82:	df 91       	pop	r29
    3f84:	cf 91       	pop	r28
    3f86:	1f 91       	pop	r17
    3f88:	0f 91       	pop	r16
    3f8a:	ff 90       	pop	r15
    3f8c:	ef 90       	pop	r14
    3f8e:	df 90       	pop	r13
    3f90:	08 95       	ret

00003f92 <ker_codemem_direct_write>:
	//flash_erase( hdr->start_addr , size );

	ker_log( SOS_LOG_CMEM_ALLOC, ker_get_current_pid(), size );	
	return ret;
}

int8_t ker_codemem_write(codemem_t h, sos_pid_t pid, void *buf, uint16_t nbytes, uint16_t offset)
{
	uint8_t cmt = (uint8_t)(h & 0x00ff);
	codemem_hdr_t *hdr;
	
	DEBUG("ker_codemem_write: h = 0x%x nbytes = %d, offset = %d\n", h, nbytes, offset);
	if( check_codemem_t( h ) == false ) {
		return -ENOENT;
	}
	
	hdr = codemem_handle_list[cmt];
	DEBUG("ker_codemem_write: hdr = 0x%p \n", hdr);

	return ker_codemem_direct_write(hdr->start_addr, pid, buf, nbytes, offset);

}	

int8_t ker_codemem_direct_write(uint32_t start_addr, sos_pid_t pid, void *buf, uint16_t nbytes, uint16_t offset)
{
    3f92:	8f 92       	push	r8
    3f94:	9f 92       	push	r9
    3f96:	af 92       	push	r10
    3f98:	bf 92       	push	r11
    3f9a:	cf 92       	push	r12
    3f9c:	df 92       	push	r13
    3f9e:	ef 92       	push	r14
    3fa0:	ff 92       	push	r15
    3fa2:	0f 93       	push	r16
    3fa4:	1f 93       	push	r17
    3fa6:	cf 93       	push	r28
    3fa8:	df 93       	push	r29
    3faa:	5b 01       	movw	r10, r22
    3fac:	6c 01       	movw	r12, r24
    3fae:	48 01       	movw	r8, r16
	uint8_t *b = buf;
    3fb0:	e9 01       	movw	r28, r18
	uint16_t size_written;
	uint16_t remaining_size;
	
	if( codemem_cache_alloc() != SOS_OK ) {
    3fb2:	0e 94 7d 1e 	call	0x3cfa
    3fb6:	88 23       	and	r24, r24
    3fb8:	19 f0       	breq	.+6      	; 0x3fc0
		return -ENOMEM;
    3fba:	84 ef       	ldi	r24, 0xF4	; 244
    3fbc:	9f ef       	ldi	r25, 0xFF	; 255
    3fbe:	4f c0       	rjmp	.+158    	; 0x405e
	}
	
	DEBUG("ker_codemem_write: start_addr = 0x%x nbytes = %d, offset = %d\n", start_addr, nbytes, offset);

	start_addr += offset;
    3fc0:	c7 01       	movw	r24, r14
    3fc2:	aa 27       	eor	r26, r26
    3fc4:	bb 27       	eor	r27, r27
    3fc6:	a8 0e       	add	r10, r24
    3fc8:	b9 1e       	adc	r11, r25
    3fca:	ca 1e       	adc	r12, r26
    3fcc:	db 1e       	adc	r13, r27
	size_written = 0;
    3fce:	ee 24       	eor	r14, r14
    3fd0:	ff 24       	eor	r15, r15
	//
	// Remaining size in the page
	// FLASHMEM_PAGE_SIZE - (start_addr % FLASHMEM_PAGE_SIZE) 
	//
	remaining_size = FLASHMEM_PAGE_SIZE - (start_addr % FLASHMEM_PAGE_SIZE);
    3fd2:	d6 01       	movw	r26, r12
    3fd4:	c5 01       	movw	r24, r10
    3fd6:	90 70       	andi	r25, 0x00	; 0
    3fd8:	a0 70       	andi	r26, 0x00	; 0
    3fda:	b0 70       	andi	r27, 0x00	; 0
    3fdc:	00 e0       	ldi	r16, 0x00	; 0
    3fde:	11 e0       	ldi	r17, 0x01	; 1
    3fe0:	08 1b       	sub	r16, r24
    3fe2:	19 0b       	sbc	r17, r25
	if( remaining_size < nbytes ) {
    3fe4:	08 15       	cp	r16, r8
    3fe6:	19 05       	cpc	r17, r9
    3fe8:	80 f4       	brcc	.+32     	; 0x400a
		codemem_cache_write( start_addr, b, remaining_size );
    3fea:	98 01       	movw	r18, r16
    3fec:	ae 01       	movw	r20, r28
    3fee:	c6 01       	movw	r24, r12
    3ff0:	b5 01       	movw	r22, r10
    3ff2:	0e 94 9e 1e 	call	0x3d3c
		size_written = remaining_size;
    3ff6:	78 01       	movw	r14, r16
		start_addr += remaining_size;
    3ff8:	c8 01       	movw	r24, r16
    3ffa:	aa 27       	eor	r26, r26
    3ffc:	bb 27       	eor	r27, r27
    3ffe:	a8 0e       	add	r10, r24
    4000:	b9 1e       	adc	r11, r25
    4002:	ca 1e       	adc	r12, r26
    4004:	db 1e       	adc	r13, r27
		b += remaining_size;
    4006:	c0 0f       	add	r28, r16
    4008:	d1 1f       	adc	r29, r17
    400a:	84 01       	movw	r16, r8
    400c:	0e 19       	sub	r16, r14
    400e:	1f 09       	sbc	r17, r15
	}  
	
	while( 1 ) {
		if( (nbytes - size_written) > FLASHMEM_PAGE_SIZE ) {
    4010:	81 e0       	ldi	r24, 0x01	; 1
    4012:	01 30       	cpi	r16, 0x01	; 1
    4014:	18 07       	cpc	r17, r24
    4016:	c0 f0       	brcs	.+48     	; 0x4048
			codemem_cache_write( start_addr, b, FLASHMEM_PAGE_SIZE );
    4018:	20 e0       	ldi	r18, 0x00	; 0
    401a:	31 e0       	ldi	r19, 0x01	; 1
    401c:	ae 01       	movw	r20, r28
    401e:	c6 01       	movw	r24, r12
    4020:	b5 01       	movw	r22, r10
    4022:	0e 94 9e 1e 	call	0x3d3c
			size_written +=  FLASHMEM_PAGE_SIZE;
    4026:	a0 e0       	ldi	r26, 0x00	; 0
    4028:	b1 e0       	ldi	r27, 0x01	; 1
    402a:	ea 0e       	add	r14, r26
    402c:	fb 1e       	adc	r15, r27
    402e:	00 50       	subi	r16, 0x00	; 0
    4030:	11 40       	sbci	r17, 0x01	; 1
			start_addr += FLASHMEM_PAGE_SIZE;
    4032:	80 e0       	ldi	r24, 0x00	; 0
    4034:	91 e0       	ldi	r25, 0x01	; 1
    4036:	a0 e0       	ldi	r26, 0x00	; 0
    4038:	b0 e0       	ldi	r27, 0x00	; 0
    403a:	a8 0e       	add	r10, r24
    403c:	b9 1e       	adc	r11, r25
    403e:	ca 1e       	adc	r12, r26
    4040:	db 1e       	adc	r13, r27
			b += FLASHMEM_PAGE_SIZE;
    4042:	c0 50       	subi	r28, 0x00	; 0
    4044:	df 4f       	sbci	r29, 0xFF	; 255
    4046:	e4 cf       	rjmp	.-56     	; 0x4010
		} else {
			if( (nbytes - size_written) != 0 ) {
    4048:	8e 14       	cp	r8, r14
    404a:	9f 04       	cpc	r9, r15
    404c:	31 f0       	breq	.+12     	; 0x405a
				codemem_cache_write( start_addr, b, nbytes - size_written );
    404e:	98 01       	movw	r18, r16
    4050:	ae 01       	movw	r20, r28
    4052:	c6 01       	movw	r24, r12
    4054:	b5 01       	movw	r22, r10
    4056:	0e 94 9e 1e 	call	0x3d3c
			}
			break;
		}
	}

	ker_log( SOS_LOG_CMEM_WRITE, pid, nbytes );	
	return SOS_OK;
    405a:	80 e0       	ldi	r24, 0x00	; 0
    405c:	90 e0       	ldi	r25, 0x00	; 0
    405e:	df 91       	pop	r29
    4060:	cf 91       	pop	r28
    4062:	1f 91       	pop	r17
    4064:	0f 91       	pop	r16
    4066:	ff 90       	pop	r15
    4068:	ef 90       	pop	r14
    406a:	df 90       	pop	r13
    406c:	cf 90       	pop	r12
    406e:	bf 90       	pop	r11
    4070:	af 90       	pop	r10
    4072:	9f 90       	pop	r9
    4074:	8f 90       	pop	r8
    4076:	08 95       	ret

00004078 <ker_codemem_write>:
    4078:	bf 92       	push	r11
    407a:	cf 92       	push	r12
    407c:	df 92       	push	r13
    407e:	ef 92       	push	r14
    4080:	ff 92       	push	r15
    4082:	0f 93       	push	r16
    4084:	1f 93       	push	r17
    4086:	cf 93       	push	r28
    4088:	df 93       	push	r29
    408a:	b6 2e       	mov	r11, r22
    408c:	6a 01       	movw	r12, r20
    408e:	e9 01       	movw	r28, r18
    4090:	78 01       	movw	r14, r16
    4092:	18 2f       	mov	r17, r24
    4094:	0e 94 f3 1d 	call	0x3be6
    4098:	88 23       	and	r24, r24
    409a:	19 f4       	brne	.+6      	; 0x40a2
    409c:	8e ef       	ldi	r24, 0xFE	; 254
    409e:	9f ef       	ldi	r25, 0xFF	; 255
    40a0:	15 c0       	rjmp	.+42     	; 0x40cc
    40a2:	e1 2f       	mov	r30, r17
    40a4:	ff 27       	eor	r31, r31
    40a6:	ee 0f       	add	r30, r30
    40a8:	ff 1f       	adc	r31, r31
    40aa:	e5 5e       	subi	r30, 0xE5	; 229
    40ac:	f5 4f       	sbci	r31, 0xF5	; 245
    40ae:	01 90       	ld	r0, Z+
    40b0:	f0 81       	ld	r31, Z
    40b2:	e0 2d       	mov	r30, r0
    40b4:	8e 01       	movw	r16, r28
    40b6:	96 01       	movw	r18, r12
    40b8:	4b 2d       	mov	r20, r11
    40ba:	60 81       	ld	r22, Z
    40bc:	71 81       	ldd	r23, Z+1	; 0x01
    40be:	82 81       	ldd	r24, Z+2	; 0x02
    40c0:	93 81       	ldd	r25, Z+3	; 0x03
    40c2:	0e 94 c9 1f 	call	0x3f92
    40c6:	99 27       	eor	r25, r25
    40c8:	87 fd       	sbrc	r24, 7
    40ca:	90 95       	com	r25
    40cc:	df 91       	pop	r29
    40ce:	cf 91       	pop	r28
    40d0:	1f 91       	pop	r17
    40d2:	0f 91       	pop	r16
    40d4:	ff 90       	pop	r15
    40d6:	ef 90       	pop	r14
    40d8:	df 90       	pop	r13
    40da:	cf 90       	pop	r12
    40dc:	bf 90       	pop	r11
    40de:	08 95       	ret

000040e0 <ker_codemem_direct_read>:
}	

int8_t ker_codemem_read(codemem_t h, sos_pid_t pid, void *buf, uint16_t nbytes, uint16_t offset) {
	uint8_t cmt = (uint8_t)(h & 0x00ff);
	codemem_hdr_t *hdr; 

	if( check_codemem_t( h ) == false ) {
			return -ENOENT;
	}

	hdr = codemem_handle_list[cmt];

	return ker_codemem_direct_read(hdr->start_addr, pid, buf, nbytes, offset);
}


int8_t ker_codemem_direct_read(uint32_t start_addr, sos_pid_t pid, void *buf, uint16_t nbytes, uint16_t offset)
{
    40e0:	af 92       	push	r10
    40e2:	bf 92       	push	r11
    40e4:	cf 92       	push	r12
    40e6:	df 92       	push	r13
    40e8:	ef 92       	push	r14
    40ea:	ff 92       	push	r15
    40ec:	0f 93       	push	r16
    40ee:	1f 93       	push	r17
    40f0:	cf 93       	push	r28
    40f2:	df 93       	push	r29
    40f4:	5b 01       	movw	r10, r22
    40f6:	6c 01       	movw	r12, r24
    40f8:	c7 01       	movw	r24, r14
    40fa:	aa 27       	eor	r26, r26
    40fc:	bb 27       	eor	r27, r27
    40fe:	a8 0e       	add	r10, r24
    4100:	b9 1e       	adc	r11, r25
    4102:	ca 1e       	adc	r12, r26
    4104:	db 1e       	adc	r13, r27
    4106:	e9 01       	movw	r28, r18
    4108:	b8 01       	movw	r22, r16
    410a:	ee 24       	eor	r14, r14
    410c:	ff 24       	eor	r15, r15
    410e:	a6 01       	movw	r20, r12
    4110:	95 01       	movw	r18, r10
    4112:	20 70       	andi	r18, 0x00	; 0
    4114:	d6 01       	movw	r26, r12
    4116:	c5 01       	movw	r24, r10
    4118:	90 70       	andi	r25, 0x00	; 0
    411a:	a0 70       	andi	r26, 0x00	; 0
    411c:	b0 70       	andi	r27, 0x00	; 0
    411e:	8c 01       	movw	r16, r24
    4120:	80 91 3e 0a 	lds	r24, 0x0A3E
    4124:	90 91 3f 0a 	lds	r25, 0x0A3F
    4128:	a0 91 40 0a 	lds	r26, 0x0A40
    412c:	b0 91 41 0a 	lds	r27, 0x0A41
    4130:	82 17       	cp	r24, r18
    4132:	93 07       	cpc	r25, r19
    4134:	a4 07       	cpc	r26, r20
    4136:	b5 07       	cpc	r27, r21
    4138:	f9 f4       	brne	.+62     	; 0x4178
    413a:	20 e0       	ldi	r18, 0x00	; 0
    413c:	31 e0       	ldi	r19, 0x01	; 1
    413e:	20 1b       	sub	r18, r16
    4140:	31 0b       	sbc	r19, r17
    4142:	17 c0       	rjmp	.+46     	; 0x4172
    4144:	61 15       	cp	r22, r1
    4146:	71 05       	cpc	r23, r1
    4148:	b9 f0       	breq	.+46     	; 0x4178
    414a:	e0 91 3c 0a 	lds	r30, 0x0A3C
    414e:	f0 91 3d 0a 	lds	r31, 0x0A3D
    4152:	e0 0f       	add	r30, r16
    4154:	f1 1f       	adc	r31, r17
    4156:	80 81       	ld	r24, Z
    4158:	89 93       	st	Y+, r24
    415a:	61 50       	subi	r22, 0x01	; 1
    415c:	70 40       	sbci	r23, 0x00	; 0
    415e:	08 94       	sec
    4160:	a1 1c       	adc	r10, r1
    4162:	b1 1c       	adc	r11, r1
    4164:	c1 1c       	adc	r12, r1
    4166:	d1 1c       	adc	r13, r1
    4168:	08 94       	sec
    416a:	e1 1c       	adc	r14, r1
    416c:	f1 1c       	adc	r15, r1
    416e:	0f 5f       	subi	r16, 0xFF	; 255
    4170:	1f 4f       	sbci	r17, 0xFF	; 255
    4172:	e2 16       	cp	r14, r18
    4174:	f3 06       	cpc	r15, r19
    4176:	30 f3       	brcs	.-52     	; 0x4144
    4178:	61 15       	cp	r22, r1
    417a:	71 05       	cpc	r23, r1
    417c:	31 f0       	breq	.+12     	; 0x418a
    417e:	9b 01       	movw	r18, r22
    4180:	ae 01       	movw	r20, r28
    4182:	c6 01       	movw	r24, r12
    4184:	b5 01       	movw	r22, r10
    4186:	0e 94 c0 54 	call	0xa980
	codemem_cache_read( start_addr + offset, buf, nbytes );

	ker_log( SOS_LOG_CMEM_READ, pid, nbytes );	
	return SOS_OK;
}
    418a:	80 e0       	ldi	r24, 0x00	; 0
    418c:	90 e0       	ldi	r25, 0x00	; 0
    418e:	df 91       	pop	r29
    4190:	cf 91       	pop	r28
    4192:	1f 91       	pop	r17
    4194:	0f 91       	pop	r16
    4196:	ff 90       	pop	r15
    4198:	ef 90       	pop	r14
    419a:	df 90       	pop	r13
    419c:	cf 90       	pop	r12
    419e:	bf 90       	pop	r11
    41a0:	af 90       	pop	r10
    41a2:	08 95       	ret

000041a4 <ker_codemem_read>:
    41a4:	bf 92       	push	r11
    41a6:	cf 92       	push	r12
    41a8:	df 92       	push	r13
    41aa:	ef 92       	push	r14
    41ac:	ff 92       	push	r15
    41ae:	0f 93       	push	r16
    41b0:	1f 93       	push	r17
    41b2:	cf 93       	push	r28
    41b4:	df 93       	push	r29
    41b6:	b6 2e       	mov	r11, r22
    41b8:	6a 01       	movw	r12, r20
    41ba:	e9 01       	movw	r28, r18
    41bc:	78 01       	movw	r14, r16
    41be:	18 2f       	mov	r17, r24
    41c0:	0e 94 f3 1d 	call	0x3be6
    41c4:	88 23       	and	r24, r24
    41c6:	19 f4       	brne	.+6      	; 0x41ce
    41c8:	8e ef       	ldi	r24, 0xFE	; 254
    41ca:	9f ef       	ldi	r25, 0xFF	; 255
    41cc:	15 c0       	rjmp	.+42     	; 0x41f8
    41ce:	e1 2f       	mov	r30, r17
    41d0:	ff 27       	eor	r31, r31
    41d2:	ee 0f       	add	r30, r30
    41d4:	ff 1f       	adc	r31, r31
    41d6:	e5 5e       	subi	r30, 0xE5	; 229
    41d8:	f5 4f       	sbci	r31, 0xF5	; 245
    41da:	01 90       	ld	r0, Z+
    41dc:	f0 81       	ld	r31, Z
    41de:	e0 2d       	mov	r30, r0
    41e0:	8e 01       	movw	r16, r28
    41e2:	96 01       	movw	r18, r12
    41e4:	4b 2d       	mov	r20, r11
    41e6:	60 81       	ld	r22, Z
    41e8:	71 81       	ldd	r23, Z+1	; 0x01
    41ea:	82 81       	ldd	r24, Z+2	; 0x02
    41ec:	93 81       	ldd	r25, Z+3	; 0x03
    41ee:	0e 94 70 20 	call	0x40e0
    41f2:	99 27       	eor	r25, r25
    41f4:	87 fd       	sbrc	r24, 7
    41f6:	90 95       	com	r25
    41f8:	df 91       	pop	r29
    41fa:	cf 91       	pop	r28
    41fc:	1f 91       	pop	r17
    41fe:	0f 91       	pop	r16
    4200:	ff 90       	pop	r15
    4202:	ef 90       	pop	r14
    4204:	df 90       	pop	r13
    4206:	cf 90       	pop	r12
    4208:	bf 90       	pop	r11
    420a:	08 95       	ret

0000420c <ker_codemem_flush>:
    420c:	80 91 3c 0a 	lds	r24, 0x0A3C
    4210:	90 91 3d 0a 	lds	r25, 0x0A3D
    4214:	89 2b       	or	r24, r25
    4216:	99 f1       	breq	.+102    	; 0x427e
    4218:	80 91 3e 0a 	lds	r24, 0x0A3E
    421c:	90 91 3f 0a 	lds	r25, 0x0A3F
    4220:	a0 91 40 0a 	lds	r26, 0x0A40
    4224:	b0 91 41 0a 	lds	r27, 0x0A41
    4228:	40 e0       	ldi	r20, 0x00	; 0
    422a:	51 e0       	ldi	r21, 0x01	; 1
    422c:	bc 01       	movw	r22, r24
    422e:	cd 01       	movw	r24, r26
    4230:	0e 94 00 fe 	call	0x1fc00
    4234:	80 91 3e 0a 	lds	r24, 0x0A3E
    4238:	90 91 3f 0a 	lds	r25, 0x0A3F
    423c:	a0 91 40 0a 	lds	r26, 0x0A40
    4240:	b0 91 41 0a 	lds	r27, 0x0A41
    4244:	20 e0       	ldi	r18, 0x00	; 0
    4246:	31 e0       	ldi	r19, 0x01	; 1
    4248:	40 91 3c 0a 	lds	r20, 0x0A3C
    424c:	50 91 3d 0a 	lds	r21, 0x0A3D
    4250:	bc 01       	movw	r22, r24
    4252:	cd 01       	movw	r24, r26
    4254:	0e 94 01 fe 	call	0x1fc02
 * @return void
 */
static inline void ker_free(void* ptr)
{
  sos_blk_mem_free(ptr, false);
    4258:	60 e0       	ldi	r22, 0x00	; 0
    425a:	80 91 3c 0a 	lds	r24, 0x0A3C
    425e:	90 91 3d 0a 	lds	r25, 0x0A3D
    4262:	0e 94 98 11 	call	0x2330
    4266:	10 92 3d 0a 	sts	0x0A3D, r1
    426a:	10 92 3c 0a 	sts	0x0A3C, r1
    426e:	10 92 3e 0a 	sts	0x0A3E, r1
    4272:	10 92 3f 0a 	sts	0x0A3F, r1
    4276:	10 92 40 0a 	sts	0x0A40, r1
    427a:	10 92 41 0a 	sts	0x0A41, r1


int8_t ker_codemem_free(codemem_t h)
{
	uint8_t cmt = (uint8_t)(h & 0x00ff);
	codemem_hdr_t *hdr;
	
	if( check_codemem_t( h ) == false ) {
		return -ENOENT;
	}
	
	hdr = codemem_handle_list[cmt];
	
	if( hdr->flag & CODEMEM_EXECUTABLE_FLAG ) {
		codemem_do_killall(h);
	}
	
	flash_free( hdr->start_addr, hdr->size );
	
	codemem_handle_list[cmt] = NULL;
	
	ker_log( SOS_LOG_CMEM_FREE, ker_get_current_pid(), hdr->size );	
	ker_free( hdr );
	return SOS_OK;
}

//
// 
//
int8_t ker_codemem_flush(codemem_t h, sos_pid_t pid)
{
	codemem_cache_flush();
	return SOS_OK;
}
    427e:	80 e0       	ldi	r24, 0x00	; 0
    4280:	90 e0       	ldi	r25, 0x00	; 0
    4282:	08 95       	ret

00004284 <codemem_register_module>:


int8_t codemem_register_module( mod_header_ptr h )
{
  if (compiled_header_ptr >= NUM_COMPILED_MODULES) return -EINVAL;
    4284:	20 91 11 0a 	lds	r18, 0x0A11
    4288:	20 31       	cpi	r18, 0x10	; 16
    428a:	18 f0       	brcs	.+6      	; 0x4292
    428c:	8a ee       	ldi	r24, 0xEA	; 234
    428e:	9f ef       	ldi	r25, 0xFF	; 255
    4290:	08 95       	ret

  compiled_modules[compiled_header_ptr++] = h;
    4292:	e2 2f       	mov	r30, r18
    4294:	ff 27       	eor	r31, r31
    4296:	ee 0f       	add	r30, r30
    4298:	ff 1f       	adc	r31, r31
    429a:	ef 50       	subi	r30, 0x0F	; 15
    429c:	f6 4f       	sbci	r31, 0xF6	; 246
    429e:	80 83       	st	Z, r24
    42a0:	91 83       	std	Z+1, r25	; 0x01
    42a2:	2f 5f       	subi	r18, 0xFF	; 255
    42a4:	20 93 11 0a 	sts	0x0A11, r18

  return SOS_OK;
    42a8:	80 e0       	ldi	r24, 0x00	; 0
    42aa:	90 e0       	ldi	r25, 0x00	; 0
}
    42ac:	08 95       	ret
    42ae:	08 95       	ret

000042b0 <ker_codemem_get_header_from_code_id>:

mod_header_ptr ker_codemem_get_header_from_code_id( sos_code_id_t cid )
{
    42b0:	0f 93       	push	r16
    42b2:	1f 93       	push	r17
    42b4:	cf 93       	push	r28
    42b6:	df 93       	push	r29
    42b8:	8c 01       	movw	r16, r24
  uint8_t i;
  mod_header_ptr ret;
  
  for( i = 0; i < CODEMEM_MAX_LOADABLE_MODULES; i++ ) {
    42ba:	60 e0       	ldi	r22, 0x00	; 0
    42bc:	cb e1       	ldi	r28, 0x1B	; 27
    42be:	da e0       	ldi	r29, 0x0A	; 10
	if( (codemem_handle_list[i] != NULL) && 
    42c0:	e9 91       	ld	r30, Y+
    42c2:	f9 91       	ld	r31, Y+
    42c4:	30 97       	sbiw	r30, 0x00	; 0
    42c6:	19 f1       	breq	.+70     	; 0x430e
    42c8:	87 81       	ldd	r24, Z+7	; 0x07
    42ca:	80 ff       	sbrs	r24, 0
    42cc:	20 c0       	rjmp	.+64     	; 0x430e
    42ce:	20 81       	ld	r18, Z
    42d0:	31 81       	ldd	r19, Z+1	; 0x01
    42d2:	42 81       	ldd	r20, Z+2	; 0x02
    42d4:	53 81       	ldd	r21, Z+3	; 0x03
    42d6:	56 95       	lsr	r21
    42d8:	47 95       	ror	r20
    42da:	37 95       	ror	r19
    42dc:	27 95       	ror	r18
    42de:	c9 01       	movw	r24, r18
    42e0:	aa 27       	eor	r26, r26
    42e2:	bb 27       	eor	r27, r27
    42e4:	88 0f       	add	r24, r24
    42e6:	99 1f       	adc	r25, r25
    42e8:	aa 1f       	adc	r26, r26
    42ea:	bb 1f       	adc	r27, r27
    42ec:	08 96       	adiw	r24, 0x08	; 8
    42ee:	a1 1d       	adc	r26, r1
    42f0:	b1 1d       	adc	r27, r1
    42f2:	ab bf       	out	0x3b, r26	; 59
    42f4:	fc 01       	movw	r30, r24
    42f6:	87 91       	elpm	r24, Z+
    42f8:	96 91       	elpm	r25, Z
    42fa:	80 17       	cp	r24, r16
    42fc:	91 07       	cpc	r25, r17
    42fe:	11 f4       	brne	.+4      	; 0x4304
    4300:	c9 01       	movw	r24, r18
    4302:	02 c0       	rjmp	.+4      	; 0x4308
    4304:	80 e0       	ldi	r24, 0x00	; 0
    4306:	90 e0       	ldi	r25, 0x00	; 0
    4308:	9c 01       	movw	r18, r24
		(codemem_handle_list[i]->flag & CODEMEM_EXECUTABLE_FLAG) ) {
		ret = match_cid( codemem_handle_list[i]->start_addr, cid ); 
		if( ret != 0 ) {
    430a:	89 2b       	or	r24, r25
    430c:	e9 f4       	brne	.+58     	; 0x4348
    430e:	6f 5f       	subi	r22, 0xFF	; 255
    4310:	60 31       	cpi	r22, 0x10	; 16
    4312:	b0 f2       	brcs	.-84     	; 0x42c0
    4314:	60 e0       	ldi	r22, 0x00	; 0
#ifndef SOS_SIM
			return ret;
#else
			return get_header_from_sim( cid );
#endif
      }
	}
  }
  	
  for (i = 0; i < compiled_header_ptr; i++) {
    4316:	40 91 11 0a 	lds	r20, 0x0A11
    431a:	64 17       	cp	r22, r20
    431c:	d0 f4       	brcc	.+52     	; 0x4352
    431e:	c1 ef       	ldi	r28, 0xF1	; 241
    4320:	d9 e0       	ldi	r29, 0x09	; 9
    sos_code_id_t code_id;
    ret = compiled_modules[i];
    4322:	29 91       	ld	r18, Y+
    4324:	39 91       	ld	r19, Y+
    code_id = sos_read_header_word(ret, offsetof(mod_header_t, code_id));
    4326:	c9 01       	movw	r24, r18
    4328:	aa 27       	eor	r26, r26
    432a:	bb 27       	eor	r27, r27
    432c:	88 0f       	add	r24, r24
    432e:	99 1f       	adc	r25, r25
    4330:	aa 1f       	adc	r26, r26
    4332:	bb 1f       	adc	r27, r27
    4334:	08 96       	adiw	r24, 0x08	; 8
    4336:	a1 1d       	adc	r26, r1
    4338:	b1 1d       	adc	r27, r1
    433a:	ab bf       	out	0x3b, r26	; 59
    433c:	fc 01       	movw	r30, r24
    433e:	87 91       	elpm	r24, Z+
    4340:	96 91       	elpm	r25, Z
    code_id = entohs( code_id );
    if(cid == code_id){
    4342:	08 17       	cp	r16, r24
    4344:	19 07       	cpc	r17, r25
    4346:	11 f4       	brne	.+4      	; 0x434c
      return ret;
    4348:	c9 01       	movw	r24, r18
    434a:	05 c0       	rjmp	.+10     	; 0x4356
    434c:	6f 5f       	subi	r22, 0xFF	; 255
    434e:	64 17       	cp	r22, r20
    4350:	40 f3       	brcs	.-48     	; 0x4322
    }
  }
	
  return 0;
    4352:	80 e0       	ldi	r24, 0x00	; 0
    4354:	90 e0       	ldi	r25, 0x00	; 0
    4356:	df 91       	pop	r29
    4358:	cf 91       	pop	r28
    435a:	1f 91       	pop	r17
    435c:	0f 91       	pop	r16
    435e:	08 95       	ret

00004360 <ker_codemem_mark_executable>:
}

int8_t ker_codemem_mark_executable(codemem_t h)
{
    4360:	cf 93       	push	r28
	uint8_t cmt = (uint8_t)(h & 0x00ff);
    4362:	c8 2f       	mov	r28, r24
	codemem_hdr_t *hdr;
	
	if( check_codemem_t( h ) == false ) {
    4364:	0e 94 f3 1d 	call	0x3be6
    4368:	88 23       	and	r24, r24
    436a:	19 f4       	brne	.+6      	; 0x4372
		return -ENOENT;
    436c:	8e ef       	ldi	r24, 0xFE	; 254
    436e:	9f ef       	ldi	r25, 0xFF	; 255
    4370:	0e c0       	rjmp	.+28     	; 0x438e
	}
	
	hdr = codemem_handle_list[cmt];
    4372:	ec 2f       	mov	r30, r28
    4374:	ff 27       	eor	r31, r31
    4376:	ee 0f       	add	r30, r30
    4378:	ff 1f       	adc	r31, r31
    437a:	e5 5e       	subi	r30, 0xE5	; 229
    437c:	f5 4f       	sbci	r31, 0xF5	; 245
    437e:	01 90       	ld	r0, Z+
    4380:	f0 81       	ld	r31, Z
    4382:	e0 2d       	mov	r30, r0
	hdr->flag |= CODEMEM_EXECUTABLE_FLAG;
    4384:	87 81       	ldd	r24, Z+7	; 0x07
    4386:	81 60       	ori	r24, 0x01	; 1
    4388:	87 83       	std	Z+7, r24	; 0x07
	return SOS_OK;
    438a:	80 e0       	ldi	r24, 0x00	; 0
    438c:	90 e0       	ldi	r25, 0x00	; 0
    438e:	cf 91       	pop	r28
    4390:	08 95       	ret

00004392 <ker_codemem_get_start_address>:
}

uint32_t ker_codemem_get_start_address( codemem_t h )
{
    4392:	cf 93       	push	r28
	uint8_t cmt = (uint8_t)(h & 0x00ff);
    4394:	c8 2f       	mov	r28, r24
	codemem_hdr_t *hdr;
	
	if( check_codemem_t( h ) == false ) {
    4396:	0e 94 f3 1d 	call	0x3be6
    439a:	88 23       	and	r24, r24
    439c:	29 f4       	brne	.+10     	; 0x43a8
		return (uint32_t)0;
    439e:	60 e0       	ldi	r22, 0x00	; 0
    43a0:	70 e0       	ldi	r23, 0x00	; 0
    43a2:	80 e0       	ldi	r24, 0x00	; 0
    43a4:	90 e0       	ldi	r25, 0x00	; 0
    43a6:	0d c0       	rjmp	.+26     	; 0x43c2
	}

	hdr = codemem_handle_list[cmt];
    43a8:	ec 2f       	mov	r30, r28
    43aa:	ff 27       	eor	r31, r31
    43ac:	ee 0f       	add	r30, r30
    43ae:	ff 1f       	adc	r31, r31
    43b0:	e5 5e       	subi	r30, 0xE5	; 229
    43b2:	f5 4f       	sbci	r31, 0xF5	; 245
    43b4:	01 90       	ld	r0, Z+
    43b6:	f0 81       	ld	r31, Z
    43b8:	e0 2d       	mov	r30, r0
	return hdr->start_addr;	
    43ba:	60 81       	ld	r22, Z
    43bc:	71 81       	ldd	r23, Z+1	; 0x01
    43be:	82 81       	ldd	r24, Z+2	; 0x02
    43c0:	93 81       	ldd	r25, Z+3	; 0x03
    43c2:	cf 91       	pop	r28
    43c4:	08 95       	ret

000043c6 <ker_codemem_get_header_address>:
}

mod_header_ptr ker_codemem_get_header_address( codemem_t h)
{
#ifndef SOS_SIM
	return melf_get_header_address( h );
    43c6:	0e 94 d6 57 	call	0xafac
    43ca:	08 95       	ret

000043cc <ker_codemem_free>:
    43cc:	8f 92       	push	r8
    43ce:	9f 92       	push	r9
    43d0:	af 92       	push	r10
    43d2:	bf 92       	push	r11
    43d4:	cf 92       	push	r12
    43d6:	df 92       	push	r13
    43d8:	ef 92       	push	r14
    43da:	ff 92       	push	r15
    43dc:	0f 93       	push	r16
    43de:	1f 93       	push	r17
    43e0:	cf 93       	push	r28
    43e2:	df 93       	push	r29
    43e4:	8c 01       	movw	r16, r24
    43e6:	c8 2f       	mov	r28, r24
    43e8:	0e 94 f3 1d 	call	0x3be6
    43ec:	88 23       	and	r24, r24
    43ee:	19 f4       	brne	.+6      	; 0x43f6
    43f0:	8e ef       	ldi	r24, 0xFE	; 254
    43f2:	9f ef       	ldi	r25, 0xFF	; 255
    43f4:	5b c0       	rjmp	.+182    	; 0x44ac
    43f6:	dd 27       	eor	r29, r29
    43f8:	fe 01       	movw	r30, r28
    43fa:	ec 0f       	add	r30, r28
    43fc:	fd 1f       	adc	r31, r29
    43fe:	e5 5e       	subi	r30, 0xE5	; 229
    4400:	f5 4f       	sbci	r31, 0xF5	; 245
    4402:	80 80       	ld	r8, Z
    4404:	91 80       	ldd	r9, Z+1	; 0x01
    4406:	f4 01       	movw	r30, r8
    4408:	87 81       	ldd	r24, Z+7	; 0x07
    440a:	80 ff       	sbrs	r24, 0
    440c:	14 c0       	rjmp	.+40     	; 0x4436
    440e:	c8 01       	movw	r24, r16
    4410:	0e 94 e3 21 	call	0x43c6
    4414:	00 97       	sbiw	r24, 0x00	; 0
    4416:	79 f0       	breq	.+30     	; 0x4436
    4418:	aa 27       	eor	r26, r26
    441a:	bb 27       	eor	r27, r27
    441c:	88 0f       	add	r24, r24
    441e:	99 1f       	adc	r25, r25
    4420:	aa 1f       	adc	r26, r26
    4422:	bb 1f       	adc	r27, r27
    4424:	08 96       	adiw	r24, 0x08	; 8
    4426:	a1 1d       	adc	r26, r1
    4428:	b1 1d       	adc	r27, r1
    442a:	ab bf       	out	0x3b, r26	; 59
    442c:	fc 01       	movw	r30, r24
    442e:	87 91       	elpm	r24, Z+
    4430:	96 91       	elpm	r25, Z
    4432:	0e 94 66 16 	call	0x2ccc
    4436:	f4 01       	movw	r30, r8
    4438:	c0 80       	ld	r12, Z
    443a:	d1 80       	ldd	r13, Z+1	; 0x01
    443c:	e2 80       	ldd	r14, Z+2	; 0x02
    443e:	f3 80       	ldd	r15, Z+3	; 0x03
    4440:	a4 80       	ldd	r10, Z+4	; 0x04
    4442:	b5 80       	ldd	r11, Z+5	; 0x05
    4444:	80 91 12 0a 	lds	r24, 0x0A12
    4448:	90 91 13 0a 	lds	r25, 0x0A13
    444c:	a0 91 14 0a 	lds	r26, 0x0A14
    4450:	b0 91 15 0a 	lds	r27, 0x0A15
    4454:	a7 01       	movw	r20, r14
    4456:	96 01       	movw	r18, r12
    4458:	28 1b       	sub	r18, r24
    445a:	39 0b       	sbc	r19, r25
    445c:	4a 0b       	sbc	r20, r26
    445e:	5b 0b       	sbc	r21, r27
    4460:	03 2f       	mov	r16, r19
    4462:	14 2f       	mov	r17, r20
    4464:	25 2f       	mov	r18, r21
    4466:	33 27       	eor	r19, r19
    4468:	c5 01       	movw	r24, r10
    446a:	aa 27       	eor	r26, r26
    446c:	bb 27       	eor	r27, r27
    446e:	81 50       	subi	r24, 0x01	; 1
    4470:	9f 4f       	sbci	r25, 0xFF	; 255
    4472:	af 4f       	sbci	r26, 0xFF	; 255
    4474:	bf 4f       	sbci	r27, 0xFF	; 255
    4476:	89 2f       	mov	r24, r25
    4478:	9a 2f       	mov	r25, r26
    447a:	ab 2f       	mov	r26, r27
    447c:	bb 27       	eor	r27, r27
    447e:	99 27       	eor	r25, r25
    4480:	40 e0       	ldi	r20, 0x00	; 0
    4482:	bc 01       	movw	r22, r24
    4484:	c8 01       	movw	r24, r16
    4486:	0e 94 0f 1e 	call	0x3c1e
    448a:	a5 01       	movw	r20, r10
    448c:	c7 01       	movw	r24, r14
    448e:	b6 01       	movw	r22, r12
    4490:	0e 94 00 fe 	call	0x1fc00
    4494:	cc 0f       	add	r28, r28
    4496:	dd 1f       	adc	r29, r29
    4498:	c5 5e       	subi	r28, 0xE5	; 229
    449a:	d5 4f       	sbci	r29, 0xF5	; 245
    449c:	18 82       	st	Y, r1
    449e:	19 82       	std	Y+1, r1	; 0x01
 * @return void
 */
static inline void ker_free(void* ptr)
{
  sos_blk_mem_free(ptr, false);
    44a0:	60 e0       	ldi	r22, 0x00	; 0
    44a2:	c4 01       	movw	r24, r8
    44a4:	0e 94 98 11 	call	0x2330
    44a8:	80 e0       	ldi	r24, 0x00	; 0
    44aa:	90 e0       	ldi	r25, 0x00	; 0
    44ac:	df 91       	pop	r29
    44ae:	cf 91       	pop	r28
    44b0:	1f 91       	pop	r17
    44b2:	0f 91       	pop	r16
    44b4:	ff 90       	pop	r15
    44b6:	ef 90       	pop	r14
    44b8:	df 90       	pop	r13
    44ba:	cf 90       	pop	r12
    44bc:	bf 90       	pop	r11
    44be:	af 90       	pop	r10
    44c0:	9f 90       	pop	r9
    44c2:	8f 90       	pop	r8
    44c4:	08 95       	ret

000044c6 <codemem_init>:
#else
	mod_header_ptr p = melf_get_header_address( h );

	sos_code_id_t cid =                                         
		      sos_read_header_word( p, offsetof(mod_header_t, code_id) );
	cid = entohs(cid);                                          
	return get_header_from_sim( cid );        
#endif
}

void codemem_init(void)
{
	uint8_t i;
	
	//
	// Compute the starting page for programming
	//
	flash_start_page_addr = flash_init();
    44c6:	0e 94 91 54 	call	0xa922
    44ca:	9b 01       	movw	r18, r22
    44cc:	ac 01       	movw	r20, r24
    44ce:	60 93 12 0a 	sts	0x0A12, r22
    44d2:	70 93 13 0a 	sts	0x0A13, r23
    44d6:	80 93 14 0a 	sts	0x0A14, r24
    44da:	90 93 15 0a 	sts	0x0A15, r25

#ifndef PC_PLATFORM
	flash_num_pages = (FLASHMEM_SIZE - flash_start_page_addr) / FLASHMEM_PAGE_SIZE;
    44de:	80 e0       	ldi	r24, 0x00	; 0
    44e0:	90 ee       	ldi	r25, 0xE0	; 224
    44e2:	a1 e0       	ldi	r26, 0x01	; 1
    44e4:	b0 e0       	ldi	r27, 0x00	; 0
    44e6:	82 1b       	sub	r24, r18
    44e8:	93 0b       	sbc	r25, r19
    44ea:	a4 0b       	sbc	r26, r20
    44ec:	b5 0b       	sbc	r27, r21
    44ee:	89 2f       	mov	r24, r25
    44f0:	9a 2f       	mov	r25, r26
    44f2:	ab 2f       	mov	r26, r27
    44f4:	bb 27       	eor	r27, r27
    44f6:	90 93 1a 0a 	sts	0x0A1A, r25
    44fa:	80 93 19 0a 	sts	0x0A19, r24
#else
	flash_num_pages = FLASHMEM_SIZE / FLASHMEM_PAGE_SIZE;
#endif

	flash_bitmap_length = (uint8_t)((flash_num_pages + 7) / 8);
    44fe:	07 96       	adiw	r24, 0x07	; 7
    4500:	23 e0       	ldi	r18, 0x03	; 3
    4502:	96 95       	lsr	r25
    4504:	87 95       	ror	r24
    4506:	2a 95       	dec	r18
    4508:	e1 f7       	brne	.-8      	; 0x4502
    450a:	80 93 18 0a 	sts	0x0A18, r24
 * @warning this is used to allocate the memory for long time usage
 */
static inline void* malloc_longterm(uint16_t size, sos_pid_t id)
{
  return sos_blk_mem_longterm_alloc(size, id, true);
    450e:	41 e0       	ldi	r20, 0x01	; 1
    4510:	6f e0       	ldi	r22, 0x0F	; 15
    4512:	99 27       	eor	r25, r25
    4514:	0e 94 51 10 	call	0x20a2
    4518:	90 93 17 0a 	sts	0x0A17, r25
    451c:	80 93 16 0a 	sts	0x0A16, r24
	//
	// Allocate memory for bitmap
	//
	flash_alloc_bitmap = malloc_longterm( flash_bitmap_length, KER_CODEMEM_PID );
	
	//
	// Initialize bitmap
	//
	for( i = 0; i < flash_bitmap_length; i++ ) {
    4520:	90 e0       	ldi	r25, 0x00	; 0
    4522:	80 91 18 0a 	lds	r24, 0x0A18
    4526:	98 17       	cp	r25, r24
    4528:	48 f4       	brcc	.+18     	; 0x453c
		flash_alloc_bitmap[i] = 0;
    452a:	e0 91 16 0a 	lds	r30, 0x0A16
    452e:	f0 91 17 0a 	lds	r31, 0x0A17
    4532:	e9 0f       	add	r30, r25
    4534:	f1 1d       	adc	r31, r1
    4536:	10 82       	st	Z, r1
    4538:	9f 5f       	subi	r25, 0xFF	; 255
    453a:	f3 cf       	rjmp	.-26     	; 0x4522
    453c:	9f e0       	ldi	r25, 0x0F	; 15
    453e:	eb e1       	ldi	r30, 0x1B	; 27
    4540:	fa e0       	ldi	r31, 0x0A	; 10
	}
	
	for( i = 0; i < CODEMEM_MAX_LOADABLE_MODULES; i++ ) {
		codemem_handle_list[i] = NULL;
    4542:	11 92       	st	Z+, r1
    4544:	11 92       	st	Z+, r1
    4546:	91 50       	subi	r25, 0x01	; 1
    4548:	97 ff       	sbrs	r25, 7
    454a:	fb cf       	rjmp	.-10     	; 0x4542
	}
	
	codemem_salt = 0;
    454c:	10 92 3b 0a 	sts	0x0A3B, r1
	
	flash_cache_page = NULL;
    4550:	10 92 3d 0a 	sts	0x0A3D, r1
    4554:	10 92 3c 0a 	sts	0x0A3C, r1
	flash_cache_addr = 0;
    4558:	10 92 3e 0a 	sts	0x0A3E, r1
    455c:	10 92 3f 0a 	sts	0x0A3F, r1
    4560:	10 92 40 0a 	sts	0x0A40, r1
    4564:	10 92 41 0a 	sts	0x0A41, r1
    4568:	08 95       	ret

0000456a <ker_sys_codemem_read>:
}

#ifdef SOS_USE_PREEMPTION
int8_t ker_sys_codemem_read(codemem_t h, void *buf, uint16_t nbytes, uint16_t offset)
{
  HAS_ATOMIC_PREEMPTION_SECTION;
  sos_pid_t my_pid = ker_get_current_pid();
  int8_t ret;
  ATOMIC_DISABLE_PREEMPTION();
  ret = ker_codemem_read(h, my_pid, buf, nbytes, offset);
  ATOMIC_ENABLE_PREEMPTION();
return ret;
}
#else
int8_t ker_sys_codemem_read(codemem_t h, void *buf, uint16_t nbytes, uint16_t offset)
{
    456a:	af 92       	push	r10
    456c:	bf 92       	push	r11
    456e:	cf 92       	push	r12
    4570:	df 92       	push	r13
    4572:	ef 92       	push	r14
    4574:	ff 92       	push	r15
    4576:	0f 93       	push	r16
    4578:	1f 93       	push	r17
    457a:	5c 01       	movw	r10, r24
    457c:	6b 01       	movw	r12, r22
    457e:	7a 01       	movw	r14, r20
    4580:	89 01       	movw	r16, r18
  sos_pid_t my_pid = ker_get_current_pid();
    4582:	0e 94 e2 13 	call	0x27c4
  return ker_codemem_read(h, my_pid, buf, nbytes, offset);
    4586:	97 01       	movw	r18, r14
    4588:	a6 01       	movw	r20, r12
    458a:	68 2f       	mov	r22, r24
    458c:	c5 01       	movw	r24, r10
    458e:	0e 94 d2 20 	call	0x41a4
}
    4592:	99 27       	eor	r25, r25
    4594:	87 fd       	sbrc	r24, 7
    4596:	90 95       	com	r25
    4598:	1f 91       	pop	r17
    459a:	0f 91       	pop	r16
    459c:	ff 90       	pop	r15
    459e:	ef 90       	pop	r14
    45a0:	df 90       	pop	r13
    45a2:	cf 90       	pop	r12
    45a4:	bf 90       	pop	r11
    45a6:	af 90       	pop	r10
    45a8:	08 95       	ret

000045aa <fetcher_request>:
 */
static bool no_mem_retry = false;

int8_t fetcher_request(sos_pid_t req_id, sos_shm_t key, uint16_t size, uint16_t src)
{
    45aa:	6f 92       	push	r6
    45ac:	7f 92       	push	r7
    45ae:	8f 92       	push	r8
    45b0:	9f 92       	push	r9
    45b2:	af 92       	push	r10
    45b4:	bf 92       	push	r11
    45b6:	cf 92       	push	r12
    45b8:	df 92       	push	r13
    45ba:	ef 92       	push	r14
    45bc:	ff 92       	push	r15
    45be:	0f 93       	push	r16
    45c0:	1f 93       	push	r17
    45c2:	cf 93       	push	r28
    45c4:	df 93       	push	r29
    45c6:	68 2e       	mov	r6, r24
    45c8:	5b 01       	movw	r10, r22
    45ca:	ea 01       	movw	r28, r20
    45cc:	49 01       	movw	r8, r18
    uint8_t bitmap_size;   //! size of the bitmap in bytes
    uint16_t num_fragments;
    uint8_t i;
    fetcher_state_t *f;
	fetcher_cam_t *cam;
	
	cam = (fetcher_cam_t *) ker_shm_get( KER_FETCHER_PID, key);
    45ce:	80 e1       	ldi	r24, 0x10	; 16
    45d0:	0e 94 c9 3b 	call	0x7792
    45d4:	6c 01       	movw	r12, r24
	if( cam == NULL ) return -EINVAL;
    45d6:	89 2b       	or	r24, r25
    45d8:	19 f4       	brne	.+6      	; 0x45e0
    45da:	8a ee       	ldi	r24, 0xEA	; 234
    45dc:	9f ef       	ldi	r25, 0xFF	; 255
    45de:	78 c0       	rjmp	.+240    	; 0x46d0

    //if(fst != NULL) return -EBUSY;
    DEBUG_PID(KER_FETCHER_PID, "fetcher_request, req_id = %d, size = %d, src = %d\n", req_id, size, src);

    num_fragments = ((size + (FETCHER_FRAGMENT_SIZE - 1))/ FETCHER_FRAGMENT_SIZE);
    45e0:	ef 96       	adiw	r28, 0x3f	; 63
    45e2:	46 e0       	ldi	r20, 0x06	; 6
    45e4:	d6 95       	lsr	r29
    45e6:	c7 95       	ror	r28
    45e8:	4a 95       	dec	r20
    45ea:	e1 f7       	brne	.-8      	; 0x45e4
    bitmap_size = (uint8_t)((num_fragments + 7)/ 8);
    45ec:	27 96       	adiw	r28, 0x07	; 7
    45ee:	8e 01       	movw	r16, r28
    45f0:	33 e0       	ldi	r19, 0x03	; 3
    45f2:	16 95       	lsr	r17
    45f4:	07 95       	ror	r16
    45f6:	3a 95       	dec	r19
    45f8:	e1 f7       	brne	.-8      	; 0x45f2
    45fa:	27 97       	sbiw	r28, 0x07	; 7
 * @return Returns a pointer to the allocated memory.
 * Will return a NULL pointer if the call to sys_malloc fails.
 */
static inline void *ker_malloc(uint16_t size, sos_pid_t id)
{
    45fc:	e0 2e       	mov	r14, r16
    45fe:	ff 24       	eor	r15, r15
  return sos_blk_mem_alloc(size, id, false);
    4600:	40 e0       	ldi	r20, 0x00	; 0
    4602:	60 e1       	ldi	r22, 0x10	; 16
    4604:	c7 01       	movw	r24, r14
    4606:	0c 96       	adiw	r24, 0x0c	; 12
    4608:	0e 94 14 11 	call	0x2228
    460c:	dc 01       	movw	r26, r24

    //DEBUG("size = %d\n", sizeof(fetcher_state_t) + bitmap_size);
    f = ker_malloc(sizeof(fetcher_state_t) + bitmap_size, KER_FETCHER_PID);
    if(f == NULL) {
    460e:	00 97       	sbiw	r24, 0x00	; 0
    4610:	19 f4       	brne	.+6      	; 0x4618
        return -ENOMEM;
    4612:	84 ef       	ldi	r24, 0xF4	; 244
    4614:	9f ef       	ldi	r25, 0xFF	; 255
    4616:	5c c0       	rjmp	.+184    	; 0x46d0
    }
    //DEBUG("num_fragments = %d, bitmap_zie = %d\n", num_fragments, bitmap_size);
    f->requester       = req_id;
    4618:	fc 01       	movw	r30, r24
    461a:	62 82       	std	Z+2, r6	; 0x02
    f->map.key         = key;
    461c:	a1 86       	std	Z+9, r10	; 0x09
    461e:	b2 86       	std	Z+10, r11	; 0x0a
    f->map.bitmap_size = bitmap_size;
    4620:	03 87       	std	Z+11, r16	; 0x0b
    f->src_addr        = src;
    4622:	8d 92       	st	X+, r8
    4624:	9c 92       	st	X, r9
    4626:	11 97       	sbiw	r26, 0x01	; 1
	f->num_funcs       = 0;
    4628:	14 82       	std	Z+4, r1	; 0x04
    f->next            = NULL;
    462a:	17 82       	std	Z+7, r1	; 0x07
    462c:	10 86       	std	Z+8, r1	; 0x08
	f->cm              = cam->cm;
    462e:	f6 01       	movw	r30, r12
    4630:	80 81       	ld	r24, Z
    4632:	91 81       	ldd	r25, Z+1	; 0x01
    4634:	fd 01       	movw	r30, r26
    4636:	85 83       	std	Z+5, r24	; 0x05
    4638:	96 83       	std	Z+6, r25	; 0x06

    for(i = 0; i < bitmap_size; i++) {
    463a:	84 81       	ldd	r24, Z+4	; 0x04
    463c:	80 17       	cp	r24, r16
    463e:	30 f4       	brcc	.+12     	; 0x464c
    4640:	9f ef       	ldi	r25, 0xFF	; 255
    4642:	3c 96       	adiw	r30, 0x0c	; 12
    4644:	80 2f       	mov	r24, r16
        f->map.bitmap[i] = 0xff;
    4646:	91 93       	st	Z+, r25
    4648:	81 50       	subi	r24, 0x01	; 1
    464a:	e9 f7       	brne	.-6      	; 0x4646
    }
    if((num_fragments) % 8) {
    464c:	ae 01       	movw	r20, r28
    464e:	47 70       	andi	r20, 0x07	; 7
    4650:	50 70       	andi	r21, 0x00	; 0
    4652:	41 15       	cp	r20, r1
    4654:	51 05       	cpc	r21, r1
    4656:	61 f0       	breq	.+24     	; 0x4670
        f->map.bitmap[bitmap_size - 1] =
    4658:	ea 0e       	add	r14, r26
    465a:	fb 1e       	adc	r15, r27
    465c:	81 e0       	ldi	r24, 0x01	; 1
    465e:	90 e0       	ldi	r25, 0x00	; 0
    4660:	02 c0       	rjmp	.+4      	; 0x4666
    4662:	88 0f       	add	r24, r24
    4664:	99 1f       	adc	r25, r25
    4666:	4a 95       	dec	r20
    4668:	e2 f7       	brpl	.-8      	; 0x4662
    466a:	81 50       	subi	r24, 0x01	; 1
    466c:	e7 01       	movw	r28, r14
    466e:	8b 87       	std	Y+11, r24	; 0x0b
            (1 << (num_fragments % 8)) - 1;
    }
    print_bitmap(&f->map);

    //! backoff first!!!
    f->retx = 0;
    4670:	fd 01       	movw	r30, r26
    4672:	13 82       	std	Z+3, r1	; 0x03
    if(fst != NULL) {
    4674:	c0 91 43 0a 	lds	r28, 0x0A43
    4678:	d0 91 44 0a 	lds	r29, 0x0A44
    467c:	20 97       	sbiw	r28, 0x00	; 0
    467e:	89 f0       	breq	.+34     	; 0x46a2
        fetcher_state_t *tmp = fst;
    4680:	fe 01       	movw	r30, r28
		cam->status = FETCHING_QUEUED;
    4682:	82 e0       	ldi	r24, 0x02	; 2
    4684:	e6 01       	movw	r28, r12
    4686:	8b 83       	std	Y+3, r24	; 0x03

        while(tmp->next != NULL) { tmp = tmp->next; }
    4688:	87 81       	ldd	r24, Z+7	; 0x07
    468a:	90 85       	ldd	r25, Z+8	; 0x08
    468c:	89 2b       	or	r24, r25
    468e:	21 f0       	breq	.+8      	; 0x4698
    4690:	07 80       	ldd	r0, Z+7	; 0x07
    4692:	f0 85       	ldd	r31, Z+8	; 0x08
    4694:	e0 2d       	mov	r30, r0
    4696:	f8 cf       	rjmp	.-16     	; 0x4688
        tmp->next = f;
    4698:	a7 83       	std	Z+7, r26	; 0x07
    469a:	b0 87       	std	Z+8, r27	; 0x08
        return SOS_OK;
    469c:	80 e0       	ldi	r24, 0x00	; 0
    469e:	90 e0       	ldi	r25, 0x00	; 0
    46a0:	17 c0       	rjmp	.+46     	; 0x46d0
    }
	cam->status = FETCHING_STARTED;
    46a2:	f6 01       	movw	r30, r12
    46a4:	13 82       	std	Z+3, r1	; 0x03
    fst = f;
    46a6:	b0 93 44 0a 	sts	0x0A44, r27
    46aa:	a0 93 43 0a 	sts	0x0A43, r26
    //! setup timer
    ker_timer_start(KER_FETCHER_PID,
    46ae:	0e 94 cb 36 	call	0x6d96
    46b2:	87 70       	andi	r24, 0x07	; 7
    46b4:	90 70       	andi	r25, 0x00	; 0
    46b6:	98 2f       	mov	r25, r24
    46b8:	88 27       	eor	r24, r24
    46ba:	80 50       	subi	r24, 0x00	; 0
    46bc:	9f 4f       	sbci	r25, 0xFF	; 255
    46be:	aa 27       	eor	r26, r26
    46c0:	bb 27       	eor	r27, r27
    46c2:	9c 01       	movw	r18, r24
    46c4:	ad 01       	movw	r20, r26
    46c6:	61 e0       	ldi	r22, 0x01	; 1
    46c8:	80 e1       	ldi	r24, 0x10	; 16
    46ca:	0e 94 2a 31 	call	0x6254
            FETCHER_REQUEST_TID,
            FETCHER_REQUEST_BACKOFF_SLOT * ((ker_rand() % FETCHER_REQUEST_MAX_SLOT) + 1));
    //DEBUG("request ret = %d\n", ret);
    return SOS_OK;
    46ce:	ce 01       	movw	r24, r28
    46d0:	df 91       	pop	r29
    46d2:	cf 91       	pop	r28
    46d4:	1f 91       	pop	r17
    46d6:	0f 91       	pop	r16
    46d8:	ff 90       	pop	r15
    46da:	ef 90       	pop	r14
    46dc:	df 90       	pop	r13
    46de:	cf 90       	pop	r12
    46e0:	bf 90       	pop	r11
    46e2:	af 90       	pop	r10
    46e4:	9f 90       	pop	r9
    46e6:	8f 90       	pop	r8
    46e8:	7f 90       	pop	r7
    46ea:	6f 90       	pop	r6
    46ec:	08 95       	ret

000046ee <start_new_fetch>:
}

int8_t fetcher_cancel(sos_pid_t req_id, sos_shm_t key)
{
    fetcher_state_t *tmp;
    fetcher_state_t *prev;
    if( fst == NULL ) return -EINVAL;
    if( fst->map.key == key ) {	
        tmp = fst;
        start_new_fetch();
        ker_free( tmp );
		/*
		 * Cancel sender as well
		 */
		if( (send_state.map != NULL) && (send_state.map->key == key)) {
			free_send_state_map();
		}
        return SOS_OK;
    }
    prev = fst;
    tmp = fst->next;
    while(tmp != NULL) {
        if( tmp->map.key == key ) {	
            prev->next = tmp->next;
            ker_free( tmp );
            return SOS_OK;	
        }
        prev = tmp;
        tmp = tmp->next;
    }
    return -EINVAL;
}

void fetcher_restart(fetcher_state_t *s, uint16_t src)
{
	fetcher_cam_t *cam;
	cam = ker_shm_get( KER_FETCHER_PID,  s->map.key );
    s->src_addr = src;
    s->retx = 0;
	s->next = NULL;
    if(fst != NULL) {
        fetcher_state_t *tmp = fst;
		cam->status = FETCHING_QUEUED;

        while(tmp->next != NULL) { tmp = tmp->next; }
        tmp->next = s;
        return;
    }
    fst = s;
	cam->status = FETCHING_STARTED;
    ker_timer_start(KER_FETCHER_PID,
            FETCHER_REQUEST_TID,
            FETCHER_REQUEST_BACKOFF_SLOT * ((ker_rand() % FETCHER_REQUEST_MAX_SLOT) + 1));
}

void fetcher_commit(fetcher_state_t *s, bool commit)
{
	fetcher_cam_t *cam;
	cam = (fetcher_cam_t *) ker_shm_get( KER_FETCHER_PID, s->map.key);
	if( cam == NULL ) return;
	if( commit == true ) {
		ker_codemem_flush( cam->cm, KER_FETCHER_PID );
	} else {
		ker_codemem_free( cam->cm );
	}
}

static void free_send_state_map()
{
	ker_free(send_state.map);
	send_state.map = NULL;
	ker_timer_stop(KER_FETCHER_PID, FETCHER_TRANSMIT_TID);
}


static int8_t fetcher_handler(void *state, Message *msg)
{
    switch (msg->type) {
        case MSG_FETCHER_FRAGMENT:
        {
			fetcher_fragment_t *f;
			f = (fetcher_fragment_t*)msg->data;
			f->key = entohs( f->key );
			f->frag_id = entohs(f->frag_id);

			DEBUG_PID(KER_FETCHER_PID,"MSG_FETCHER_FRAGMENT:\n");
			handle_overheard_fragment(msg);
			if(fst == NULL) {
				DEBUG_PID(KER_FETCHER_PID, "NO Request!!!\n");
				return SOS_OK;  //!< no request
			}
			//DEBUG_PID(KER_FETCHER_PID,"calling restart_request_timer()\n");
			restart_request_timer();
			fst->retx = 0;
			//DEBUG_PID(KER_FETCHER_PID,"calling handle_data()\n");
			return handle_data(msg);
		}
		case MSG_FETCHER_REQUEST:
		{
			fetcher_bitmap_t *bmap =
				(fetcher_bitmap_t *) msg->data;
			bmap->key = entohs( bmap->key );

			//! received request from neighbors
			DEBUG("handling request to %d from %d\n", msg->daddr, msg->saddr);
			if(msg->daddr == ker_id()) {
				return handle_request(msg);
			}
			if(fst == NULL) return SOS_OK;  //!< no request
			restart_request_timer();
			fst->retx = 0;
			return SOS_OK;
		}
		case MSG_TIMER_TIMEOUT:
		{
			MsgParam *params = (MsgParam*)(msg->data);
			if(params->byte == FETCHER_REQUEST_TID) {
				//DEBUG("request timeout\n");
				if( no_mem_retry ) {
					send_fetcher_done();
					return SOS_OK;
				}
				handle_request_timeout();
			} else if(params->byte == FETCHER_TRANSMIT_TID) {
				//DEBUG("send fragment timeout\n");
				if( send_state.num_msg_in_queue < FETCHER_MAX_MSG_IN_QUEUE ) {
					send_fragment();
				}
			}
			return SOS_OK;
		}
		case MSG_PKT_SENDDONE:
		{
			if( send_state.num_msg_in_queue > 0 ) {
				send_state.num_msg_in_queue--;
			}
			return SOS_OK;
		}
#ifdef SOS_HAS_EXFLASH
		case MSG_EXFLASH_WRITEDONE:
		{
			ker_free(send_state.fragr);
			send_state.fragr = NULL;
			check_map_and_post();
			return SOS_OK;
		}
		case MSG_EXFLASH_READDONE:
		{

			post_auto(KER_FETCHER_PID,
					KER_FETCHER_PID,
					MSG_FETCHER_FRAGMENT,
					sizeof(fetcher_fragment_t),
					send_state.frag,
					SOS_MSG_RELEASE,
					send_state.dest);
			send_state.frag = NULL;
			return SOS_OK;
		}
#endif
		case MSG_INIT:
		{
			send_state.map = NULL;
			send_state.frag = NULL;
			send_state.fragr = NULL;
			send_state.num_msg_in_queue = 0;	
			ker_msg_change_rules(KER_FETCHER_PID, SOS_MSG_RULES_PROMISCUOUS);
			ker_permanent_timer_init(&(send_state.timer), KER_FETCHER_PID, FETCHER_TRANSMIT_TID, TIMER_REPEAT);
			ker_timer_init(KER_FETCHER_PID, FETCHER_REQUEST_TID, TIMER_ONE_SHOT);
			return SOS_OK;
		}

	}
	return -EINVAL;
}

static inline void restart_request_timer()
{
	ker_timer_restart(KER_FETCHER_PID,
			FETCHER_REQUEST_TID,
			FETCHER_REQUEST_WATCHDOG + (FETCHER_REQUEST_BACKOFF_SLOT * ((ker_rand() % FETCHER_REQUEST_MAX_SLOT) + 1)));
}

static inline void handle_request_timeout()
{
	if(fst == NULL) {
		return;
	}
	//sos_assert(fst != NULL);
	//DEBUG("handle request timeout, retx = %d\n", fst->retx);
	fst->retx++;
	if(fst->retx <= FETCHER_REQUEST_MAX_RETX) {
		fetcher_bitmap_t *m;
		uint8_t size = sizeof(fetcher_bitmap_t) + fst->map.bitmap_size;

		DEBUG_PID(KER_FETCHER_PID,"send request to %d\n", fst->src_addr);
		print_bitmap(&fst->map);

		m = (fetcher_bitmap_t *) ker_malloc( size, KER_FETCHER_PID);
		if( m != NULL ) {
			memcpy(m, &(fst->map), size);
			m->key = ehtons( m->key );
			post_auto(KER_FETCHER_PID,
					KER_FETCHER_PID,
					MSG_FETCHER_REQUEST,
					size,
					m,
					SOS_MSG_RELEASE,
					fst->src_addr);
		}
		restart_request_timer();
	} else {
		DEBUG_PID(KER_FETCHER_PID, "request failed!!!\n");
		//codemem_close(&fst->cm, false);
		send_fetcher_done();
	}
}

static inline void handle_overheard_fragment(Message *msg)
{
	fetcher_fragment_t *f;

	if ( send_state.map == NULL ) {
		return;
	}
	f = (fetcher_fragment_t*)msg->data;
	if( (send_state.map->key != f->key) ) {
		return;
	}	
	DEBUG_PID(KER_FETCHER_PID, "Surpress %d\n", (f->frag_id));
	send_state.map->bitmap[(f->frag_id) / 8] &= ~(1 << ((f->frag_id) % 8));
}

static inline void send_fragment()
{
	uint16_t frag_id;
	uint8_t i, j;
	uint8_t mask = 1;
	uint8_t ret;
	fetcher_fragment_t *out_pkt;
	fetcher_cam_t *cam;

	if ( send_state.map == NULL ) {
		ker_timer_stop(KER_FETCHER_PID, FETCHER_TRANSMIT_TID);
		return;
	}

	cam = (fetcher_cam_t *) ker_shm_get( KER_FETCHER_PID, send_state.map->key);

	if ( cam == NULL ) {
		// file got deleted. give up!
		free_send_state_map();
		return;
	}

	if ( send_state.frag != NULL) {
		//! timer fires faster than data reading.  Highly unlikely...
		//! but we still handle it.
		return;
	}

	//! search map and find one fragment to send
	for(i = 0; i < send_state.map->bitmap_size; i++) {
		//! for each byte
		if(send_state.map->bitmap[i] != 0) {
			break;
		}
	}
	if(i == send_state.map->bitmap_size) {
		/*
		 * Did not find any block...
		 */
		free_send_state_map();
		return;
	}

	//sos_assert(i < send_state.map->bitmap_size);

	frag_id = i * 8;
	mask = 1;
	for(j = 0; j < 8; j++, mask = mask << 1) {
		if(mask & (send_state.map->bitmap[i])) {
			send_state.map->bitmap[i] &= ~(mask);
			break;
		}
	}
	//sos_assert(j < 8);
	frag_id += j;
	print_bitmap(send_state.map);
	out_pkt = (fetcher_fragment_t*)ker_malloc(sizeof(fetcher_fragment_t), KER_FETCHER_PID);
	if(out_pkt == NULL){
		DEBUG_PID(KER_FETCHER_PID,"malloc fetcher_fragment_t failed\n");
		goto send_fragment_postproc;
	}
	out_pkt->frag_id = ehtons(frag_id);
	out_pkt->key = ehtons(send_state.map->key);

	ret = ker_codemem_read(cam->cm, KER_FETCHER_PID,
			out_pkt->fragment, FETCHER_FRAGMENT_SIZE,
			frag_id * (code_addr_t)FETCHER_FRAGMENT_SIZE);
	if(ret == SOS_SPLIT) {
		send_state.frag = out_pkt;
	} else if(ret != SOS_OK){
		DEBUG_PID(KER_FETCHER_PID, "codemem_read failed\n");
		ker_free(out_pkt);
		goto send_fragment_postproc;
	}


	//DEBUG("out_pkt has addr %x\n", (int)out_pkt);
	DEBUG_PID(KER_FETCHER_PID, "send_fragment: frag_id = %d to %d\n", frag_id, send_state.dest);
	ret = post_auto(KER_FETCHER_PID,
			KER_FETCHER_PID,
			MSG_FETCHER_FRAGMENT,
			sizeof(fetcher_fragment_t),
			out_pkt,
			SOS_MSG_RELEASE | SOS_MSG_RELIABLE,
			send_state.dest);
	if( ret == SOS_OK ) {
		send_state.num_msg_in_queue++;	
	}
send_fragment_postproc:
	if(check_map(send_state.map)) {
		//! no more fragment to send
		free_send_state_map();
	}
}

static inline int8_t set_num_funcs_in_send_state(sos_shm_t key)
{
	fetcher_cam_t *cam;
	mod_header_t hdr;
	cam = (fetcher_cam_t *) ker_shm_get( KER_FETCHER_PID, key);

	if( cam == NULL ) {
		// We don't have the module, give up
		return -EINVAL;
	}

	if( cam->fetchtype != FETCHTYPE_MODULE ) {
		// not module
		return SOS_OK;
	}
	// if we are currently fetching the same module
	if( fst != NULL && (fst->map.key == key) ) {
		if( (fst->map.bitmap[0] & 0x01) != 0 ) {
			// number func is not available
			return -EINVAL;
		}
	}
	// read module header from flash and set it
	if( ker_codemem_read(cam->cm, KER_FETCHER_PID, 
				&hdr, sizeof(mod_header_t), 0) != SOS_OK ) {
		return -EINVAL;
	}
	send_state.num_funcs = hdr.num_sub_func + hdr.num_prov_func;
	return SOS_OK;
}

static int8_t handle_request(Message *msg)
{
	int8_t ret;
	//! setup a periodic timer to send fragments
	if(send_state.map == NULL) {
		fetcher_bitmap_t *b = (fetcher_bitmap_t*) msg->data;
		ret = set_num_funcs_in_send_state(b->key);
		if( ret != SOS_OK ) {
			// cannot find num funcs, give up
			return SOS_OK;
		}
		ret = ker_timer_restart(KER_FETCHER_PID,
				FETCHER_TRANSMIT_TID,
				FETCHER_SENDING_FRAGMENT_INTERVAL);
		if(ret == SOS_OK) {
			send_state.map = (fetcher_bitmap_t*)ker_msg_take_data(KER_FETCHER_PID, msg);
			send_state.dest = msg->saddr;
			DEBUG_PID(KER_FETCHER_PID,"send_state.map = 0x%x send_state.dest = 0x%x\n", (int)send_state.map, send_state.dest);
		} else {
			return -ENOMEM;
		}
	} else {
		fetcher_bitmap_t *map = (fetcher_bitmap_t*)msg->data;

		//! XXX change to broadcast
		//send_state.dest = BCAST_ADDRESS;
		DEBUG_PID(KER_FETCHER_PID,"else send_state.dest = %x\n", send_state.dest);
		//! merge wanted list
		if((send_state.map->key == map->key)) {
			uint8_t i;
			for(i = 0; i < send_state.map->bitmap_size &&
					i < map->bitmap_size; i++) {
				send_state.map->bitmap[i] |= map->bitmap[i];
			}

		}
	}

	if( fst != NULL && (fst->map.key == send_state.map->key) ) {
		//! send only those we have
		uint8_t i;
		for(i = 0; i < send_state.map->bitmap_size; i++ ) {
			uint8_t tmp;
			//! this is the fragment that has been requested but we dont have
			tmp = send_state.map->bitmap[i] & fst->map.bitmap[i];
			send_state.map->bitmap[i] &= ~tmp;
		}
	}
	return SOS_OK;
}

static int8_t handle_data(Message *msg)
{
	fetcher_fragment_t *f;
	int8_t ret = -EINVAL;
	fetcher_cam_t *cam;

	f = (fetcher_fragment_t*)msg->data;

	DEBUG_PID(KER_FETCHER_PID, "fetcher: get data, key = %d, frag_id = %d\n", f->key, f->frag_id);
	//msg_print(msg);

	if(f->key != fst->map.key) {
		DEBUG_PID(KER_FETCHER_PID,"version mis-match\n");
		return SOS_OK;
	}

	cam = (fetcher_cam_t *) ker_shm_get( KER_FETCHER_PID, f->key);
	if( cam == NULL ) {
		// XXX cannot find CAM...
		// TODO: need to inform upper layer...
		return -EINVAL;
	}
	if( (fst->map.bitmap[(f->frag_id) / 8] & (1 << ((f->frag_id) % 8))) == 0 ) {
		// we already have the fragment...
		return SOS_OK;
	}

	if((f->frag_id != 0) && ((fst->map.bitmap[0] & 0x01) != 0)
		&& (cam->fetchtype == FETCHTYPE_MODULE)) {
		// if the first fragment is not available, we drop the packet
		return SOS_OK;
	}

	ret = ker_codemem_write(cam->cm, KER_FETCHER_PID,
			f->fragment, FETCHER_FRAGMENT_SIZE,
			(code_addr_t)FETCHER_FRAGMENT_SIZE * f->frag_id);
	if(ret == SOS_SPLIT) {
		send_state.fragr = (fetcher_fragment_t*) ker_msg_take_data(KER_FETCHER_PID, msg);	
		f = send_state.fragr;
	} else if(ret != SOS_OK) {
		//DEBUG("codemem_write failed\n");
		return SOS_OK;
	}

	fst->map.bitmap[(f->frag_id) / 8] &= ~(1 << ((f->frag_id) % 8));
	check_map_and_post();
	return SOS_OK;
}

static void check_map_and_post()
{
	if(fst == NULL) {
		return;
	}
	if(check_map(&fst->map)) {
		fst->retx = 0;
#ifdef SOS_SIM
		/*
		 * We update module version here
		 */
		// TODO: figure out the right place...
		//set_version_to_sim(fst->map.mod_id, fst->map.version);
#endif
		DEBUG_PID(KER_FETCHER_PID, "Request Done!!!\n");
		ker_timer_stop(KER_FETCHER_PID, FETCHER_REQUEST_TID);
		send_fetcher_done();
	}
}

static void start_new_fetch(void)
{
	fst = fst->next;
    46ee:	e0 91 43 0a 	lds	r30, 0x0A43
    46f2:	f0 91 44 0a 	lds	r31, 0x0A44
    46f6:	07 80       	ldd	r0, Z+7	; 0x07
    46f8:	f0 85       	ldd	r31, Z+8	; 0x08
    46fa:	e0 2d       	mov	r30, r0
    46fc:	f0 93 44 0a 	sts	0x0A44, r31
    4700:	e0 93 43 0a 	sts	0x0A43, r30
	if (fst) {
    4704:	30 97       	sbiw	r30, 0x00	; 0
    4706:	b9 f0       	breq	.+46     	; 0x4736
		fetcher_cam_t *cam;
		cam = ker_shm_get( KER_FETCHER_PID,  fst->map.key );
    4708:	61 85       	ldd	r22, Z+9	; 0x09
    470a:	72 85       	ldd	r23, Z+10	; 0x0a
    470c:	80 e1       	ldi	r24, 0x10	; 16
    470e:	0e 94 c9 3b 	call	0x7792
		cam->status = FETCHING_STARTED;
    4712:	fc 01       	movw	r30, r24
    4714:	13 82       	std	Z+3, r1	; 0x03
		ker_timer_start(KER_FETCHER_PID,
    4716:	0e 94 cb 36 	call	0x6d96
    471a:	87 70       	andi	r24, 0x07	; 7
    471c:	90 70       	andi	r25, 0x00	; 0
    471e:	98 2f       	mov	r25, r24
    4720:	88 27       	eor	r24, r24
    4722:	80 50       	subi	r24, 0x00	; 0
    4724:	9f 4f       	sbci	r25, 0xFF	; 255
    4726:	aa 27       	eor	r26, r26
    4728:	bb 27       	eor	r27, r27
    472a:	9c 01       	movw	r18, r24
    472c:	ad 01       	movw	r20, r26
    472e:	61 e0       	ldi	r22, 0x01	; 1
    4730:	80 e1       	ldi	r24, 0x10	; 16
    4732:	0e 94 2a 31 	call	0x6254
    4736:	08 95       	ret

00004738 <fetcher_restart>:
    4738:	0f 93       	push	r16
    473a:	1f 93       	push	r17
    473c:	cf 93       	push	r28
    473e:	df 93       	push	r29
    4740:	ec 01       	movw	r28, r24
    4742:	8b 01       	movw	r16, r22
    4744:	69 85       	ldd	r22, Y+9	; 0x09
    4746:	7a 85       	ldd	r23, Y+10	; 0x0a
    4748:	80 e1       	ldi	r24, 0x10	; 16
    474a:	0e 94 c9 3b 	call	0x7792
    474e:	dc 01       	movw	r26, r24
    4750:	08 83       	st	Y, r16
    4752:	19 83       	std	Y+1, r17	; 0x01
    4754:	1b 82       	std	Y+3, r1	; 0x03
    4756:	1f 82       	std	Y+7, r1	; 0x07
    4758:	18 86       	std	Y+8, r1	; 0x08
    475a:	80 91 43 0a 	lds	r24, 0x0A43
    475e:	90 91 44 0a 	lds	r25, 0x0A44
    4762:	00 97       	sbiw	r24, 0x00	; 0
    4764:	89 f0       	breq	.+34     	; 0x4788
    4766:	9c 01       	movw	r18, r24
    4768:	82 e0       	ldi	r24, 0x02	; 2
    476a:	fd 01       	movw	r30, r26
    476c:	83 83       	std	Z+3, r24	; 0x03
    476e:	f9 01       	movw	r30, r18
    4770:	87 81       	ldd	r24, Z+7	; 0x07
    4772:	90 85       	ldd	r25, Z+8	; 0x08
    4774:	89 2b       	or	r24, r25
    4776:	21 f0       	breq	.+8      	; 0x4780
    4778:	f9 01       	movw	r30, r18
    477a:	27 81       	ldd	r18, Z+7	; 0x07
    477c:	30 85       	ldd	r19, Z+8	; 0x08
    477e:	f7 cf       	rjmp	.-18     	; 0x476e
    4780:	f9 01       	movw	r30, r18
    4782:	c7 83       	std	Z+7, r28	; 0x07
    4784:	d0 87       	std	Z+8, r29	; 0x08
    4786:	16 c0       	rjmp	.+44     	; 0x47b4
    4788:	d0 93 44 0a 	sts	0x0A44, r29
    478c:	c0 93 43 0a 	sts	0x0A43, r28
    4790:	fd 01       	movw	r30, r26
    4792:	13 82       	std	Z+3, r1	; 0x03
    4794:	0e 94 cb 36 	call	0x6d96
    4798:	87 70       	andi	r24, 0x07	; 7
    479a:	90 70       	andi	r25, 0x00	; 0
    479c:	98 2f       	mov	r25, r24
    479e:	88 27       	eor	r24, r24
    47a0:	80 50       	subi	r24, 0x00	; 0
    47a2:	9f 4f       	sbci	r25, 0xFF	; 255
    47a4:	aa 27       	eor	r26, r26
    47a6:	bb 27       	eor	r27, r27
    47a8:	9c 01       	movw	r18, r24
    47aa:	ad 01       	movw	r20, r26
    47ac:	61 e0       	ldi	r22, 0x01	; 1
    47ae:	80 e1       	ldi	r24, 0x10	; 16
    47b0:	0e 94 2a 31 	call	0x6254
    47b4:	df 91       	pop	r29
    47b6:	cf 91       	pop	r28
    47b8:	1f 91       	pop	r17
    47ba:	0f 91       	pop	r16
    47bc:	08 95       	ret

000047be <fetcher_commit>:
    47be:	cf 93       	push	r28
    47c0:	c6 2f       	mov	r28, r22
    47c2:	fc 01       	movw	r30, r24
    47c4:	61 85       	ldd	r22, Z+9	; 0x09
    47c6:	72 85       	ldd	r23, Z+10	; 0x0a
    47c8:	80 e1       	ldi	r24, 0x10	; 16
    47ca:	0e 94 c9 3b 	call	0x7792
    47ce:	fc 01       	movw	r30, r24
    47d0:	89 2b       	or	r24, r25
    47d2:	61 f0       	breq	.+24     	; 0x47ec
    47d4:	c1 30       	cpi	r28, 0x01	; 1
    47d6:	31 f4       	brne	.+12     	; 0x47e4
    47d8:	60 e1       	ldi	r22, 0x10	; 16
    47da:	80 81       	ld	r24, Z
    47dc:	91 81       	ldd	r25, Z+1	; 0x01
    47de:	0e 94 06 21 	call	0x420c
    47e2:	04 c0       	rjmp	.+8      	; 0x47ec
    47e4:	80 81       	ld	r24, Z
    47e6:	91 81       	ldd	r25, Z+1	; 0x01
    47e8:	0e 94 e6 21 	call	0x43cc
    47ec:	cf 91       	pop	r28
    47ee:	08 95       	ret

000047f0 <free_send_state_map>:
 * @return void
 */
static inline void ker_free(void* ptr)
{
  sos_blk_mem_free(ptr, false);
    47f0:	60 e0       	ldi	r22, 0x00	; 0
    47f2:	80 91 53 0a 	lds	r24, 0x0A53
    47f6:	90 91 54 0a 	lds	r25, 0x0A54
    47fa:	0e 94 98 11 	call	0x2330
    47fe:	10 92 54 0a 	sts	0x0A54, r1
    4802:	10 92 53 0a 	sts	0x0A53, r1
    4806:	62 e0       	ldi	r22, 0x02	; 2
    4808:	80 e1       	ldi	r24, 0x10	; 16
    480a:	0e 94 40 30 	call	0x6080
    480e:	08 95       	ret

00004810 <fetcher_cancel>:
    4810:	0f 93       	push	r16
    4812:	1f 93       	push	r17
    4814:	cf 93       	push	r28
    4816:	df 93       	push	r29
    4818:	8b 01       	movw	r16, r22
    481a:	e0 91 43 0a 	lds	r30, 0x0A43
    481e:	f0 91 44 0a 	lds	r31, 0x0A44
    4822:	30 97       	sbiw	r30, 0x00	; 0
    4824:	89 f1       	breq	.+98     	; 0x4888
    4826:	81 85       	ldd	r24, Z+9	; 0x09
    4828:	92 85       	ldd	r25, Z+10	; 0x0a
    482a:	86 17       	cp	r24, r22
    482c:	97 07       	cpc	r25, r23
    482e:	f1 f4       	brne	.+60     	; 0x486c
    4830:	ef 01       	movw	r28, r30
    4832:	0e 94 77 23 	call	0x46ee
 * @return void
 */
static inline void ker_free(void* ptr)
{
  sos_blk_mem_free(ptr, false);
    4836:	60 e0       	ldi	r22, 0x00	; 0
    4838:	ce 01       	movw	r24, r28
    483a:	0e 94 98 11 	call	0x2330
    483e:	e0 91 53 0a 	lds	r30, 0x0A53
    4842:	f0 91 54 0a 	lds	r31, 0x0A54
    4846:	30 97       	sbiw	r30, 0x00	; 0
    4848:	71 f0       	breq	.+28     	; 0x4866
    484a:	80 81       	ld	r24, Z
    484c:	91 81       	ldd	r25, Z+1	; 0x01
    484e:	80 17       	cp	r24, r16
    4850:	91 07       	cpc	r25, r17
    4852:	49 f4       	brne	.+18     	; 0x4866
    4854:	0e 94 f8 23 	call	0x47f0
    4858:	06 c0       	rjmp	.+12     	; 0x4866
    485a:	27 83       	std	Z+7, r18	; 0x07
    485c:	30 87       	std	Z+8, r19	; 0x08
 * @return void
 */
static inline void ker_free(void* ptr)
{
  sos_blk_mem_free(ptr, false);
    485e:	60 e0       	ldi	r22, 0x00	; 0
    4860:	ce 01       	movw	r24, r28
    4862:	0e 94 98 11 	call	0x2330
    4866:	80 e0       	ldi	r24, 0x00	; 0
    4868:	90 e0       	ldi	r25, 0x00	; 0
    486a:	10 c0       	rjmp	.+32     	; 0x488c
    486c:	c7 81       	ldd	r28, Z+7	; 0x07
    486e:	d0 85       	ldd	r29, Z+8	; 0x08
    4870:	20 97       	sbiw	r28, 0x00	; 0
    4872:	51 f0       	breq	.+20     	; 0x4888
    4874:	89 85       	ldd	r24, Y+9	; 0x09
    4876:	9a 85       	ldd	r25, Y+10	; 0x0a
    4878:	2f 81       	ldd	r18, Y+7	; 0x07
    487a:	38 85       	ldd	r19, Y+8	; 0x08
    487c:	80 17       	cp	r24, r16
    487e:	91 07       	cpc	r25, r17
    4880:	61 f3       	breq	.-40     	; 0x485a
    4882:	fe 01       	movw	r30, r28
    4884:	e9 01       	movw	r28, r18
    4886:	f4 cf       	rjmp	.-24     	; 0x4870
    4888:	8a ee       	ldi	r24, 0xEA	; 234
    488a:	9f ef       	ldi	r25, 0xFF	; 255
    488c:	df 91       	pop	r29
    488e:	cf 91       	pop	r28
    4890:	1f 91       	pop	r17
    4892:	0f 91       	pop	r16
    4894:	08 95       	ret

00004896 <check_map>:
				FETCHER_REQUEST_TID,
				FETCHER_REQUEST_BACKOFF_SLOT *
				((ker_rand() % FETCHER_REQUEST_MAX_SLOT) + 1));
	}	
}

static void send_fetcher_done()
{
	fetcher_cam_t *cam;
	DEBUG_PID(KER_FETCHER_PID,"Fetcher Done!\n");
	if( post_long(fst->requester, KER_FETCHER_PID, MSG_FETCHER_DONE, sizeof(fetcher_state_t), fst, SOS_MSG_RELEASE) != SOS_OK ) {

		no_mem_retry = true;
		ker_timer_start(KER_FETCHER_PID,
				FETCHER_REQUEST_TID,
				1024);
		return;
	}
	cam = ker_shm_get( KER_FETCHER_PID,  fst->map.key );
	cam->status = FETCHING_DONE;
	no_mem_retry = false;
	start_new_fetch();
}

//! check whether we have completed the fragment map
static bool check_map(fetcher_bitmap_t *m)
{
    4896:	fc 01       	movw	r30, r24
	uint8_t i;
	for(i = 0; i < m->bitmap_size; i++) {
    4898:	90 e0       	ldi	r25, 0x00	; 0
    489a:	22 81       	ldd	r18, Z+2	; 0x02
    489c:	92 17       	cp	r25, r18
    489e:	50 f4       	brcc	.+20     	; 0x48b4
    48a0:	33 96       	adiw	r30, 0x03	; 3
		if(m->bitmap[i] != 0) {
    48a2:	81 91       	ld	r24, Z+
    48a4:	88 23       	and	r24, r24
    48a6:	19 f0       	breq	.+6      	; 0x48ae
			return false;
    48a8:	80 e0       	ldi	r24, 0x00	; 0
    48aa:	90 e0       	ldi	r25, 0x00	; 0
    48ac:	08 95       	ret
    48ae:	9f 5f       	subi	r25, 0xFF	; 255
    48b0:	92 17       	cp	r25, r18
    48b2:	b8 f3       	brcs	.-18     	; 0x48a2
		}
	}
	return true;
    48b4:	81 e0       	ldi	r24, 0x01	; 1
    48b6:	90 e0       	ldi	r25, 0x00	; 0
}
    48b8:	08 95       	ret
    48ba:	08 95       	ret

000048bc <send_fetcher_done>:
    48bc:	ef 92       	push	r14
    48be:	ff 92       	push	r15
    48c0:	0f 93       	push	r16
    48c2:	1f 93       	push	r17
    48c4:	e0 91 43 0a 	lds	r30, 0x0A43
    48c8:	f0 91 44 0a 	lds	r31, 0x0A44
    48cc:	74 e0       	ldi	r23, 0x04	; 4
    48ce:	e7 2e       	mov	r14, r23
    48d0:	f1 2c       	mov	r15, r1
    48d2:	8f 01       	movw	r16, r30
    48d4:	2c e0       	ldi	r18, 0x0C	; 12
    48d6:	42 2f       	mov	r20, r18
    48d8:	60 e1       	ldi	r22, 0x10	; 16
    48da:	82 81       	ldd	r24, Z+2	; 0x02
    48dc:	0e 94 c7 18 	call	0x318e
    48e0:	18 2f       	mov	r17, r24
    48e2:	88 23       	and	r24, r24
    48e4:	61 f0       	breq	.+24     	; 0x48fe
    48e6:	81 e0       	ldi	r24, 0x01	; 1
    48e8:	80 93 42 0a 	sts	0x0A42, r24
    48ec:	20 e0       	ldi	r18, 0x00	; 0
    48ee:	34 e0       	ldi	r19, 0x04	; 4
    48f0:	40 e0       	ldi	r20, 0x00	; 0
    48f2:	50 e0       	ldi	r21, 0x00	; 0
    48f4:	68 2f       	mov	r22, r24
    48f6:	80 e1       	ldi	r24, 0x10	; 16
    48f8:	0e 94 2a 31 	call	0x6254
    48fc:	10 c0       	rjmp	.+32     	; 0x491e
    48fe:	e0 91 43 0a 	lds	r30, 0x0A43
    4902:	f0 91 44 0a 	lds	r31, 0x0A44
    4906:	61 85       	ldd	r22, Z+9	; 0x09
    4908:	72 85       	ldd	r23, Z+10	; 0x0a
    490a:	80 e1       	ldi	r24, 0x10	; 16
    490c:	0e 94 c9 3b 	call	0x7792
    4910:	21 e0       	ldi	r18, 0x01	; 1
    4912:	fc 01       	movw	r30, r24
    4914:	23 83       	std	Z+3, r18	; 0x03
    4916:	10 93 42 0a 	sts	0x0A42, r17
    491a:	0e 94 77 23 	call	0x46ee
    491e:	1f 91       	pop	r17
    4920:	0f 91       	pop	r16
    4922:	ff 90       	pop	r15
    4924:	ef 90       	pop	r14
    4926:	08 95       	ret

00004928 <fetcher_handler>:
    4928:	af 92       	push	r10
    492a:	bf 92       	push	r11
    492c:	cf 92       	push	r12
    492e:	df 92       	push	r13
    4930:	ef 92       	push	r14
    4932:	ff 92       	push	r15
    4934:	0f 93       	push	r16
    4936:	1f 93       	push	r17
    4938:	cf 93       	push	r28
    493a:	df 93       	push	r29
    493c:	cd b7       	in	r28, 0x3d	; 61
    493e:	de b7       	in	r29, 0x3e	; 62
    4940:	60 97       	sbiw	r28, 0x10	; 16
    4942:	0f b6       	in	r0, 0x3f	; 63
    4944:	f8 94       	cli
    4946:	de bf       	out	0x3e, r29	; 62
    4948:	0f be       	out	0x3f, r0	; 63
    494a:	cd bf       	out	0x3d, r28	; 61
    494c:	6b 01       	movw	r12, r22
    494e:	fb 01       	movw	r30, r22
    4950:	86 81       	ldd	r24, Z+6	; 0x06
    4952:	08 2f       	mov	r16, r24
    4954:	11 27       	eor	r17, r17
    4956:	03 30       	cpi	r16, 0x03	; 3
    4958:	11 05       	cpc	r17, r1
    495a:	09 f4       	brne	.+2      	; 0x495e
    495c:	db c2       	rjmp	.+1462   	; 0x4f14
    495e:	04 30       	cpi	r16, 0x04	; 4
    4960:	11 05       	cpc	r17, r1
    4962:	4c f4       	brge	.+18     	; 0x4976
    4964:	01 15       	cp	r16, r1
    4966:	11 05       	cpc	r17, r1
    4968:	09 f4       	brne	.+2      	; 0x496c
    496a:	de c2       	rjmp	.+1468   	; 0x4f28
    496c:	02 30       	cpi	r16, 0x02	; 2
    496e:	11 05       	cpc	r17, r1
    4970:	09 f4       	brne	.+2      	; 0x4974
    4972:	ce c1       	rjmp	.+924    	; 0x4d10
    4974:	f9 c2       	rjmp	.+1522   	; 0x4f68
    4976:	00 32       	cpi	r16, 0x20	; 32
    4978:	11 05       	cpc	r17, r1
    497a:	09 f4       	brne	.+2      	; 0x497e
    497c:	e5 c0       	rjmp	.+458    	; 0x4b48
    497e:	01 32       	cpi	r16, 0x21	; 33
    4980:	11 05       	cpc	r17, r1
    4982:	09 f0       	breq	.+2      	; 0x4986
    4984:	f1 c2       	rjmp	.+1506   	; 0x4f68
    4986:	a0 91 53 0a 	lds	r26, 0x0A53
    498a:	b0 91 54 0a 	lds	r27, 0x0A54
    498e:	10 97       	sbiw	r26, 0x00	; 0
    4990:	21 f1       	breq	.+72     	; 0x49da
    4992:	fb 01       	movw	r30, r22
    4994:	40 85       	ldd	r20, Z+8	; 0x08
    4996:	51 85       	ldd	r21, Z+9	; 0x09
    4998:	2d 91       	ld	r18, X+
    499a:	3c 91       	ld	r19, X
    499c:	11 97       	sbiw	r26, 0x01	; 1
    499e:	fa 01       	movw	r30, r20
    49a0:	82 81       	ldd	r24, Z+2	; 0x02
    49a2:	93 81       	ldd	r25, Z+3	; 0x03
    49a4:	28 17       	cp	r18, r24
    49a6:	39 07       	cpc	r19, r25
    49a8:	c1 f4       	brne	.+48     	; 0x49da
    49aa:	20 81       	ld	r18, Z
    49ac:	31 81       	ldd	r19, Z+1	; 0x01
    49ae:	f9 01       	movw	r30, r18
    49b0:	13 e0       	ldi	r17, 0x03	; 3
    49b2:	f6 95       	lsr	r31
    49b4:	e7 95       	ror	r30
    49b6:	1a 95       	dec	r17
    49b8:	e1 f7       	brne	.-8      	; 0x49b2
    49ba:	ea 0f       	add	r30, r26
    49bc:	fb 1f       	adc	r31, r27
    49be:	27 70       	andi	r18, 0x07	; 7
    49c0:	30 70       	andi	r19, 0x00	; 0
    49c2:	81 e0       	ldi	r24, 0x01	; 1
    49c4:	90 e0       	ldi	r25, 0x00	; 0
    49c6:	02 c0       	rjmp	.+4      	; 0x49cc
    49c8:	88 0f       	add	r24, r24
    49ca:	99 1f       	adc	r25, r25
    49cc:	2a 95       	dec	r18
    49ce:	e2 f7       	brpl	.-8      	; 0x49c8
    49d0:	98 2f       	mov	r25, r24
    49d2:	90 95       	com	r25
    49d4:	83 81       	ldd	r24, Z+3	; 0x03
    49d6:	89 23       	and	r24, r25
    49d8:	83 83       	std	Z+3, r24	; 0x03
    49da:	80 91 43 0a 	lds	r24, 0x0A43
    49de:	90 91 44 0a 	lds	r25, 0x0A44
    49e2:	00 97       	sbiw	r24, 0x00	; 0
    49e4:	09 f4       	brne	.+2      	; 0x49e8
    49e6:	c2 c2       	rjmp	.+1412   	; 0x4f6c
    49e8:	0e 94 cb 36 	call	0x6d96
    49ec:	87 70       	andi	r24, 0x07	; 7
    49ee:	90 70       	andi	r25, 0x00	; 0
    49f0:	98 2f       	mov	r25, r24
    49f2:	88 27       	eor	r24, r24
    49f4:	80 50       	subi	r24, 0x00	; 0
    49f6:	9b 4e       	sbci	r25, 0xEB	; 235
    49f8:	aa 27       	eor	r26, r26
    49fa:	bb 27       	eor	r27, r27
    49fc:	9c 01       	movw	r18, r24
    49fe:	ad 01       	movw	r20, r26
    4a00:	61 e0       	ldi	r22, 0x01	; 1
    4a02:	80 e1       	ldi	r24, 0x10	; 16
    4a04:	0e 94 63 31 	call	0x62c6
    4a08:	e0 91 43 0a 	lds	r30, 0x0A43
    4a0c:	f0 91 44 0a 	lds	r31, 0x0A44
    4a10:	13 82       	std	Z+3, r1	; 0x03
    4a12:	f6 01       	movw	r30, r12
    4a14:	e0 84       	ldd	r14, Z+8	; 0x08
    4a16:	f1 84       	ldd	r15, Z+9	; 0x09
    4a18:	a0 91 43 0a 	lds	r26, 0x0A43
    4a1c:	b0 91 44 0a 	lds	r27, 0x0A44
    4a20:	f7 01       	movw	r30, r14
    4a22:	62 81       	ldd	r22, Z+2	; 0x02
    4a24:	73 81       	ldd	r23, Z+3	; 0x03
    4a26:	fd 01       	movw	r30, r26
    4a28:	81 85       	ldd	r24, Z+9	; 0x09
    4a2a:	92 85       	ldd	r25, Z+10	; 0x0a
    4a2c:	68 17       	cp	r22, r24
    4a2e:	79 07       	cpc	r23, r25
    4a30:	09 f0       	breq	.+2      	; 0x4a34
    4a32:	4b c1       	rjmp	.+662    	; 0x4cca
    4a34:	80 e1       	ldi	r24, 0x10	; 16
    4a36:	0e 94 c9 3b 	call	0x7792
    4a3a:	dc 01       	movw	r26, r24
    4a3c:	89 2b       	or	r24, r25
    4a3e:	19 f4       	brne	.+6      	; 0x4a46
    4a40:	8a ee       	ldi	r24, 0xEA	; 234
    4a42:	9f ef       	ldi	r25, 0xFF	; 255
    4a44:	44 c1       	rjmp	.+648    	; 0x4cce
    4a46:	40 91 43 0a 	lds	r20, 0x0A43
    4a4a:	50 91 44 0a 	lds	r21, 0x0A44
    4a4e:	f7 01       	movw	r30, r14
    4a50:	00 81       	ld	r16, Z
    4a52:	11 81       	ldd	r17, Z+1	; 0x01
    4a54:	f8 01       	movw	r30, r16
    4a56:	63 e0       	ldi	r22, 0x03	; 3
    4a58:	f6 95       	lsr	r31
    4a5a:	e7 95       	ror	r30
    4a5c:	6a 95       	dec	r22
    4a5e:	e1 f7       	brne	.-8      	; 0x4a58
    4a60:	e4 0f       	add	r30, r20
    4a62:	f5 1f       	adc	r31, r21
    4a64:	84 85       	ldd	r24, Z+12	; 0x0c
    4a66:	99 27       	eor	r25, r25
    4a68:	98 01       	movw	r18, r16
    4a6a:	27 70       	andi	r18, 0x07	; 7
    4a6c:	30 70       	andi	r19, 0x00	; 0
    4a6e:	02 c0       	rjmp	.+4      	; 0x4a74
    4a70:	95 95       	asr	r25
    4a72:	87 95       	ror	r24
    4a74:	2a 95       	dec	r18
    4a76:	e2 f7       	brpl	.-8      	; 0x4a70
    4a78:	80 95       	com	r24
    4a7a:	90 95       	com	r25
    4a7c:	9c 01       	movw	r18, r24
    4a7e:	21 70       	andi	r18, 0x01	; 1
    4a80:	30 70       	andi	r19, 0x00	; 0
    4a82:	80 fd       	sbrc	r24, 0
    4a84:	22 c1       	rjmp	.+580    	; 0x4cca
    4a86:	01 15       	cp	r16, r1
    4a88:	11 05       	cpc	r17, r1
    4a8a:	51 f0       	breq	.+20     	; 0x4aa0
    4a8c:	fa 01       	movw	r30, r20
    4a8e:	84 85       	ldd	r24, Z+12	; 0x0c
    4a90:	80 ff       	sbrs	r24, 0
    4a92:	06 c0       	rjmp	.+12     	; 0x4aa0
    4a94:	fd 01       	movw	r30, r26
    4a96:	82 81       	ldd	r24, Z+2	; 0x02
    4a98:	88 23       	and	r24, r24
    4a9a:	11 f4       	brne	.+4      	; 0x4aa0
    4a9c:	c9 01       	movw	r24, r18
    4a9e:	17 c1       	rjmp	.+558    	; 0x4cce
    4aa0:	56 e0       	ldi	r21, 0x06	; 6
    4aa2:	00 0f       	add	r16, r16
    4aa4:	11 1f       	adc	r17, r17
    4aa6:	5a 95       	dec	r21
    4aa8:	e1 f7       	brne	.-8      	; 0x4aa2
    4aaa:	c7 01       	movw	r24, r14
    4aac:	04 96       	adiw	r24, 0x04	; 4
    4aae:	20 e4       	ldi	r18, 0x40	; 64
    4ab0:	30 e0       	ldi	r19, 0x00	; 0
    4ab2:	ac 01       	movw	r20, r24
    4ab4:	60 e1       	ldi	r22, 0x10	; 16
    4ab6:	8d 91       	ld	r24, X+
    4ab8:	9c 91       	ld	r25, X
    4aba:	0e 94 3c 20 	call	0x4078
    4abe:	81 30       	cpi	r24, 0x01	; 1
    4ac0:	51 f4       	brne	.+20     	; 0x4ad6
    4ac2:	b6 01       	movw	r22, r12
    4ac4:	80 e1       	ldi	r24, 0x10	; 16
    4ac6:	0e 94 12 19 	call	0x3224
    4aca:	90 93 50 0a 	sts	0x0A50, r25
    4ace:	80 93 4f 0a 	sts	0x0A4F, r24
    4ad2:	7c 01       	movw	r14, r24
    4ad4:	03 c0       	rjmp	.+6      	; 0x4adc
    4ad6:	88 23       	and	r24, r24
    4ad8:	09 f0       	breq	.+2      	; 0x4adc
    4ada:	f7 c0       	rjmp	.+494    	; 0x4cca
    4adc:	80 91 43 0a 	lds	r24, 0x0A43
    4ae0:	90 91 44 0a 	lds	r25, 0x0A44
    4ae4:	f7 01       	movw	r30, r14
    4ae6:	20 81       	ld	r18, Z
    4ae8:	31 81       	ldd	r19, Z+1	; 0x01
    4aea:	f9 01       	movw	r30, r18
    4aec:	43 e0       	ldi	r20, 0x03	; 3
    4aee:	f6 95       	lsr	r31
    4af0:	e7 95       	ror	r30
    4af2:	4a 95       	dec	r20
    4af4:	e1 f7       	brne	.-8      	; 0x4aee
    4af6:	e8 0f       	add	r30, r24
    4af8:	f9 1f       	adc	r31, r25
    4afa:	27 70       	andi	r18, 0x07	; 7
    4afc:	30 70       	andi	r19, 0x00	; 0
    4afe:	81 e0       	ldi	r24, 0x01	; 1
    4b00:	90 e0       	ldi	r25, 0x00	; 0
    4b02:	02 c0       	rjmp	.+4      	; 0x4b08
    4b04:	88 0f       	add	r24, r24
    4b06:	99 1f       	adc	r25, r25
    4b08:	2a 95       	dec	r18
    4b0a:	e2 f7       	brpl	.-8      	; 0x4b04
    4b0c:	98 2f       	mov	r25, r24
    4b0e:	90 95       	com	r25
    4b10:	84 85       	ldd	r24, Z+12	; 0x0c
    4b12:	89 23       	and	r24, r25
    4b14:	84 87       	std	Z+12, r24	; 0x0c
    4b16:	80 91 43 0a 	lds	r24, 0x0A43
    4b1a:	90 91 44 0a 	lds	r25, 0x0A44
    4b1e:	00 97       	sbiw	r24, 0x00	; 0
    4b20:	09 f4       	brne	.+2      	; 0x4b24
    4b22:	d3 c0       	rjmp	.+422    	; 0x4cca
    4b24:	09 96       	adiw	r24, 0x09	; 9
    4b26:	0e 94 4b 24 	call	0x4896
    4b2a:	88 23       	and	r24, r24
    4b2c:	09 f4       	brne	.+2      	; 0x4b30
    4b2e:	cd c0       	rjmp	.+410    	; 0x4cca
    4b30:	e0 91 43 0a 	lds	r30, 0x0A43
    4b34:	f0 91 44 0a 	lds	r31, 0x0A44
    4b38:	13 82       	std	Z+3, r1	; 0x03
    4b3a:	61 e0       	ldi	r22, 0x01	; 1
    4b3c:	80 e1       	ldi	r24, 0x10	; 16
    4b3e:	0e 94 40 30 	call	0x6080
    4b42:	0e 94 5e 24 	call	0x48bc
    4b46:	c1 c0       	rjmp	.+386    	; 0x4cca
    4b48:	0e 94 8c 35 	call	0x6b18
    4b4c:	f6 01       	movw	r30, r12
    4b4e:	22 81       	ldd	r18, Z+2	; 0x02
    4b50:	33 81       	ldd	r19, Z+3	; 0x03
    4b52:	28 17       	cp	r18, r24
    4b54:	39 07       	cpc	r19, r25
    4b56:	09 f0       	breq	.+2      	; 0x4b5a
    4b58:	be c0       	rjmp	.+380    	; 0x4cd6
    4b5a:	00 91 53 0a 	lds	r16, 0x0A53
    4b5e:	10 91 54 0a 	lds	r17, 0x0A54
    4b62:	a0 85       	ldd	r26, Z+8	; 0x08
    4b64:	b1 85       	ldd	r27, Z+9	; 0x09
    4b66:	01 15       	cp	r16, r1
    4b68:	11 05       	cpc	r17, r1
    4b6a:	09 f0       	breq	.+2      	; 0x4b6e
    4b6c:	55 c0       	rjmp	.+170    	; 0x4c18
    4b6e:	ed 90       	ld	r14, X+
    4b70:	fc 90       	ld	r15, X
    4b72:	b7 01       	movw	r22, r14
    4b74:	80 e1       	ldi	r24, 0x10	; 16
    4b76:	0e 94 c9 3b 	call	0x7792
    4b7a:	dc 01       	movw	r26, r24
    4b7c:	00 97       	sbiw	r24, 0x00	; 0
    4b7e:	11 f1       	breq	.+68     	; 0x4bc4
    4b80:	fc 01       	movw	r30, r24
    4b82:	82 81       	ldd	r24, Z+2	; 0x02
    4b84:	88 23       	and	r24, r24
    4b86:	11 f0       	breq	.+4      	; 0x4b8c
    4b88:	98 01       	movw	r18, r16
    4b8a:	26 c0       	rjmp	.+76     	; 0x4bd8
    4b8c:	e0 91 43 0a 	lds	r30, 0x0A43
    4b90:	f0 91 44 0a 	lds	r31, 0x0A44
    4b94:	30 97       	sbiw	r30, 0x00	; 0
    4b96:	41 f0       	breq	.+16     	; 0x4ba8
    4b98:	81 85       	ldd	r24, Z+9	; 0x09
    4b9a:	92 85       	ldd	r25, Z+10	; 0x0a
    4b9c:	8e 15       	cp	r24, r14
    4b9e:	9f 05       	cpc	r25, r15
    4ba0:	19 f4       	brne	.+6      	; 0x4ba8
    4ba2:	84 85       	ldd	r24, Z+12	; 0x0c
    4ba4:	80 fd       	sbrc	r24, 0
    4ba6:	0e c0       	rjmp	.+28     	; 0x4bc4
    4ba8:	00 e0       	ldi	r16, 0x00	; 0
    4baa:	10 e0       	ldi	r17, 0x00	; 0
    4bac:	20 e1       	ldi	r18, 0x10	; 16
    4bae:	30 e0       	ldi	r19, 0x00	; 0
    4bb0:	ae 01       	movw	r20, r28
    4bb2:	4f 5f       	subi	r20, 0xFF	; 255
    4bb4:	5f 4f       	sbci	r21, 0xFF	; 255
    4bb6:	60 e1       	ldi	r22, 0x10	; 16
    4bb8:	8d 91       	ld	r24, X+
    4bba:	9c 91       	ld	r25, X
    4bbc:	0e 94 d2 20 	call	0x41a4
    4bc0:	88 23       	and	r24, r24
    4bc2:	19 f0       	breq	.+6      	; 0x4bca
    4bc4:	2a ee       	ldi	r18, 0xEA	; 234
    4bc6:	3f ef       	ldi	r19, 0xFF	; 255
    4bc8:	07 c0       	rjmp	.+14     	; 0x4bd8
    4bca:	8d 81       	ldd	r24, Y+5	; 0x05
    4bcc:	9e 81       	ldd	r25, Y+6	; 0x06
    4bce:	89 0f       	add	r24, r25
    4bd0:	80 93 65 0a 	sts	0x0A65, r24
    4bd4:	20 e0       	ldi	r18, 0x00	; 0
    4bd6:	30 e0       	ldi	r19, 0x00	; 0
    4bd8:	22 23       	and	r18, r18
    4bda:	09 f0       	breq	.+2      	; 0x4bde
    4bdc:	76 c0       	rjmp	.+236    	; 0x4cca
    4bde:	20 e0       	ldi	r18, 0x00	; 0
    4be0:	32 e0       	ldi	r19, 0x02	; 2
    4be2:	40 e0       	ldi	r20, 0x00	; 0
    4be4:	50 e0       	ldi	r21, 0x00	; 0
    4be6:	62 e0       	ldi	r22, 0x02	; 2
    4be8:	80 e1       	ldi	r24, 0x10	; 16
    4bea:	0e 94 63 31 	call	0x62c6
    4bee:	88 23       	and	r24, r24
    4bf0:	81 f4       	brne	.+32     	; 0x4c12
    4bf2:	b6 01       	movw	r22, r12
    4bf4:	80 e1       	ldi	r24, 0x10	; 16
    4bf6:	0e 94 12 19 	call	0x3224
    4bfa:	90 93 54 0a 	sts	0x0A54, r25
    4bfe:	80 93 53 0a 	sts	0x0A53, r24
    4c02:	f6 01       	movw	r30, r12
    4c04:	84 81       	ldd	r24, Z+4	; 0x04
    4c06:	95 81       	ldd	r25, Z+5	; 0x05
    4c08:	90 93 4e 0a 	sts	0x0A4E, r25
    4c0c:	80 93 4d 0a 	sts	0x0A4D, r24
    4c10:	2d c0       	rjmp	.+90     	; 0x4c6c
    4c12:	84 ef       	ldi	r24, 0xF4	; 244
    4c14:	9f ef       	ldi	r25, 0xFF	; 255
    4c16:	5b c0       	rjmp	.+182    	; 0x4cce
    4c18:	f8 01       	movw	r30, r16
    4c1a:	20 81       	ld	r18, Z
    4c1c:	31 81       	ldd	r19, Z+1	; 0x01
    4c1e:	8d 91       	ld	r24, X+
    4c20:	9c 91       	ld	r25, X
    4c22:	11 97       	sbiw	r26, 0x01	; 1
    4c24:	28 17       	cp	r18, r24
    4c26:	39 07       	cpc	r19, r25
    4c28:	09 f5       	brne	.+66     	; 0x4c6c
    4c2a:	40 e0       	ldi	r20, 0x00	; 0
    4c2c:	82 81       	ldd	r24, Z+2	; 0x02
    4c2e:	48 17       	cp	r20, r24
    4c30:	e8 f4       	brcc	.+58     	; 0x4c6c
    4c32:	fd 01       	movw	r30, r26
    4c34:	52 81       	ldd	r21, Z+2	; 0x02
    4c36:	45 17       	cp	r20, r21
    4c38:	c8 f4       	brcc	.+50     	; 0x4c6c
    4c3a:	13 96       	adiw	r26, 0x03	; 3
    4c3c:	20 e0       	ldi	r18, 0x00	; 0
    4c3e:	30 e0       	ldi	r19, 0x00	; 0
    4c40:	e0 91 53 0a 	lds	r30, 0x0A53
    4c44:	f0 91 54 0a 	lds	r31, 0x0A54
    4c48:	e2 0f       	add	r30, r18
    4c4a:	f3 1f       	adc	r31, r19
    4c4c:	83 81       	ldd	r24, Z+3	; 0x03
    4c4e:	9d 91       	ld	r25, X+
    4c50:	89 2b       	or	r24, r25
    4c52:	83 83       	std	Z+3, r24	; 0x03
    4c54:	4f 5f       	subi	r20, 0xFF	; 255
    4c56:	2f 5f       	subi	r18, 0xFF	; 255
    4c58:	3f 4f       	sbci	r19, 0xFF	; 255
    4c5a:	e0 91 53 0a 	lds	r30, 0x0A53
    4c5e:	f0 91 54 0a 	lds	r31, 0x0A54
    4c62:	82 81       	ldd	r24, Z+2	; 0x02
    4c64:	48 17       	cp	r20, r24
    4c66:	10 f4       	brcc	.+4      	; 0x4c6c
    4c68:	45 17       	cp	r20, r21
    4c6a:	50 f3       	brcs	.-44     	; 0x4c40
    4c6c:	e0 91 43 0a 	lds	r30, 0x0A43
    4c70:	f0 91 44 0a 	lds	r31, 0x0A44
    4c74:	30 97       	sbiw	r30, 0x00	; 0
    4c76:	49 f1       	breq	.+82     	; 0x4cca
    4c78:	a0 91 53 0a 	lds	r26, 0x0A53
    4c7c:	b0 91 54 0a 	lds	r27, 0x0A54
    4c80:	21 85       	ldd	r18, Z+9	; 0x09
    4c82:	32 85       	ldd	r19, Z+10	; 0x0a
    4c84:	8d 91       	ld	r24, X+
    4c86:	9c 91       	ld	r25, X
    4c88:	11 97       	sbiw	r26, 0x01	; 1
    4c8a:	28 17       	cp	r18, r24
    4c8c:	39 07       	cpc	r19, r25
    4c8e:	e9 f4       	brne	.+58     	; 0x4cca
    4c90:	20 e0       	ldi	r18, 0x00	; 0
    4c92:	fd 01       	movw	r30, r26
    4c94:	82 81       	ldd	r24, Z+2	; 0x02
    4c96:	28 17       	cp	r18, r24
    4c98:	c0 f4       	brcc	.+48     	; 0x4cca
    4c9a:	42 2f       	mov	r20, r18
    4c9c:	55 27       	eor	r21, r21
    4c9e:	a4 0f       	add	r26, r20
    4ca0:	b5 1f       	adc	r27, r21
    4ca2:	80 91 43 0a 	lds	r24, 0x0A43
    4ca6:	90 91 44 0a 	lds	r25, 0x0A44
    4caa:	48 0f       	add	r20, r24
    4cac:	59 1f       	adc	r21, r25
    4cae:	fd 01       	movw	r30, r26
    4cb0:	93 81       	ldd	r25, Z+3	; 0x03
    4cb2:	fa 01       	movw	r30, r20
    4cb4:	84 85       	ldd	r24, Z+12	; 0x0c
    4cb6:	80 95       	com	r24
    4cb8:	89 23       	and	r24, r25
    4cba:	fd 01       	movw	r30, r26
    4cbc:	83 83       	std	Z+3, r24	; 0x03
    4cbe:	2f 5f       	subi	r18, 0xFF	; 255
    4cc0:	a0 91 53 0a 	lds	r26, 0x0A53
    4cc4:	b0 91 54 0a 	lds	r27, 0x0A54
    4cc8:	e4 cf       	rjmp	.-56     	; 0x4c92
    4cca:	80 e0       	ldi	r24, 0x00	; 0
    4ccc:	90 e0       	ldi	r25, 0x00	; 0
    4cce:	99 27       	eor	r25, r25
    4cd0:	87 fd       	sbrc	r24, 7
    4cd2:	90 95       	com	r25
    4cd4:	4b c1       	rjmp	.+662    	; 0x4f6c
    4cd6:	80 91 43 0a 	lds	r24, 0x0A43
    4cda:	90 91 44 0a 	lds	r25, 0x0A44
    4cde:	00 97       	sbiw	r24, 0x00	; 0
    4ce0:	09 f4       	brne	.+2      	; 0x4ce4
    4ce2:	44 c1       	rjmp	.+648    	; 0x4f6c
    4ce4:	0e 94 cb 36 	call	0x6d96
    4ce8:	87 70       	andi	r24, 0x07	; 7
    4cea:	90 70       	andi	r25, 0x00	; 0
    4cec:	98 2f       	mov	r25, r24
    4cee:	88 27       	eor	r24, r24
    4cf0:	80 50       	subi	r24, 0x00	; 0
    4cf2:	9b 4e       	sbci	r25, 0xEB	; 235
    4cf4:	aa 27       	eor	r26, r26
    4cf6:	bb 27       	eor	r27, r27
    4cf8:	9c 01       	movw	r18, r24
    4cfa:	ad 01       	movw	r20, r26
    4cfc:	61 e0       	ldi	r22, 0x01	; 1
    4cfe:	80 e1       	ldi	r24, 0x10	; 16
    4d00:	0e 94 63 31 	call	0x62c6
    4d04:	e0 91 43 0a 	lds	r30, 0x0A43
    4d08:	f0 91 44 0a 	lds	r31, 0x0A44
    4d0c:	13 82       	std	Z+3, r1	; 0x03
    4d0e:	09 c1       	rjmp	.+530    	; 0x4f22
    4d10:	fb 01       	movw	r30, r22
    4d12:	a0 85       	ldd	r26, Z+8	; 0x08
    4d14:	b1 85       	ldd	r27, Z+9	; 0x09
    4d16:	ac 90       	ld	r10, X
    4d18:	f1 e0       	ldi	r31, 0x01	; 1
    4d1a:	af 16       	cp	r10, r31
    4d1c:	09 f0       	breq	.+2      	; 0x4d20
    4d1e:	51 c0       	rjmp	.+162    	; 0x4dc2
    4d20:	40 91 42 0a 	lds	r20, 0x0A42
    4d24:	44 23       	and	r20, r20
    4d26:	09 f0       	breq	.+2      	; 0x4d2a
    4d28:	49 c0       	rjmp	.+146    	; 0x4dbc
    4d2a:	e0 91 43 0a 	lds	r30, 0x0A43
    4d2e:	f0 91 44 0a 	lds	r31, 0x0A44
    4d32:	30 97       	sbiw	r30, 0x00	; 0
    4d34:	09 f4       	brne	.+2      	; 0x4d38
    4d36:	f5 c0       	rjmp	.+490    	; 0x4f22
    4d38:	83 81       	ldd	r24, Z+3	; 0x03
    4d3a:	8f 5f       	subi	r24, 0xFF	; 255
    4d3c:	83 83       	std	Z+3, r24	; 0x03
    4d3e:	e0 91 43 0a 	lds	r30, 0x0A43
    4d42:	f0 91 44 0a 	lds	r31, 0x0A44
    4d46:	83 81       	ldd	r24, Z+3	; 0x03
    4d48:	84 30       	cpi	r24, 0x04	; 4
    4d4a:	c0 f5       	brcc	.+112    	; 0x4dbc
    4d4c:	b3 84       	ldd	r11, Z+11	; 0x0b
    4d4e:	83 e0       	ldi	r24, 0x03	; 3
    4d50:	b8 0e       	add	r11, r24
 * @return Returns a pointer to the allocated memory.
 * Will return a NULL pointer if the call to sys_malloc fails.
 */
static inline void *ker_malloc(uint16_t size, sos_pid_t id)
{
    4d52:	eb 2c       	mov	r14, r11
    4d54:	ff 24       	eor	r15, r15
  return sos_blk_mem_alloc(size, id, false);
    4d56:	60 e1       	ldi	r22, 0x10	; 16
    4d58:	c7 01       	movw	r24, r14
    4d5a:	0e 94 14 11 	call	0x2228
    4d5e:	8c 01       	movw	r16, r24
    4d60:	89 2b       	or	r24, r25
    4d62:	d9 f0       	breq	.+54     	; 0x4d9a
    4d64:	80 91 43 0a 	lds	r24, 0x0A43
    4d68:	90 91 44 0a 	lds	r25, 0x0A44
    4d6c:	09 96       	adiw	r24, 0x09	; 9
    4d6e:	a7 01       	movw	r20, r14
    4d70:	bc 01       	movw	r22, r24
    4d72:	c8 01       	movw	r24, r16
    4d74:	0e 94 56 59 	call	0xb2ac
							   uint8_t type,
							   uint8_t len,
							   void* data,
							   uint16_t flag,
							   uint16_t daddr) {
    4d78:	e0 91 43 0a 	lds	r30, 0x0A43
    4d7c:	f0 91 44 0a 	lds	r31, 0x0A44
    4d80:	80 81       	ld	r24, Z
    4d82:	91 81       	ldd	r25, Z+1	; 0x01
  return post_link(did, sid, type, len, data, flag | SOS_MSG_ALL_LINK_IO | SOS_MSG_LINK_AUTO, daddr);
    4d84:	6c 01       	movw	r12, r24
    4d86:	84 e0       	ldi	r24, 0x04	; 4
    4d88:	e8 2e       	mov	r14, r24
    4d8a:	8e e3       	ldi	r24, 0x3E	; 62
    4d8c:	f8 2e       	mov	r15, r24
    4d8e:	2b 2d       	mov	r18, r11
    4d90:	40 e2       	ldi	r20, 0x20	; 32
    4d92:	60 e1       	ldi	r22, 0x10	; 16
    4d94:	86 2f       	mov	r24, r22
    4d96:	0e 94 25 1d 	call	0x3a4a
    4d9a:	0e 94 cb 36 	call	0x6d96
    4d9e:	87 70       	andi	r24, 0x07	; 7
    4da0:	90 70       	andi	r25, 0x00	; 0
    4da2:	98 2f       	mov	r25, r24
    4da4:	88 27       	eor	r24, r24
    4da6:	80 50       	subi	r24, 0x00	; 0
    4da8:	9b 4e       	sbci	r25, 0xEB	; 235
    4daa:	aa 27       	eor	r26, r26
    4dac:	bb 27       	eor	r27, r27
    4dae:	9c 01       	movw	r18, r24
    4db0:	ad 01       	movw	r20, r26
    4db2:	6a 2d       	mov	r22, r10
    4db4:	80 e1       	ldi	r24, 0x10	; 16
    4db6:	0e 94 63 31 	call	0x62c6
    4dba:	b3 c0       	rjmp	.+358    	; 0x4f22
    4dbc:	0e 94 5e 24 	call	0x48bc
    4dc0:	b0 c0       	rjmp	.+352    	; 0x4f22
    4dc2:	e2 e0       	ldi	r30, 0x02	; 2
    4dc4:	ae 16       	cp	r10, r30
    4dc6:	09 f0       	breq	.+2      	; 0x4dca
    4dc8:	ac c0       	rjmp	.+344    	; 0x4f22
    4dca:	80 91 66 0a 	lds	r24, 0x0A66
    4dce:	82 30       	cpi	r24, 0x02	; 2
    4dd0:	08 f0       	brcs	.+2      	; 0x4dd4
    4dd2:	a7 c0       	rjmp	.+334    	; 0x4f22
    4dd4:	e0 91 53 0a 	lds	r30, 0x0A53
    4dd8:	f0 91 54 0a 	lds	r31, 0x0A54
    4ddc:	30 97       	sbiw	r30, 0x00	; 0
    4dde:	29 f4       	brne	.+10     	; 0x4dea
    4de0:	6a 2d       	mov	r22, r10
    4de2:	80 e1       	ldi	r24, 0x10	; 16
    4de4:	0e 94 40 30 	call	0x6080
    4de8:	9c c0       	rjmp	.+312    	; 0x4f22
    4dea:	60 81       	ld	r22, Z
    4dec:	71 81       	ldd	r23, Z+1	; 0x01
    4dee:	80 e1       	ldi	r24, 0x10	; 16
    4df0:	0e 94 c9 3b 	call	0x7792
    4df4:	7c 01       	movw	r14, r24
    4df6:	89 2b       	or	r24, r25
    4df8:	09 f4       	brne	.+2      	; 0x4dfc
    4dfa:	89 c0       	rjmp	.+274    	; 0x4f0e
    4dfc:	80 91 51 0a 	lds	r24, 0x0A51
    4e00:	90 91 52 0a 	lds	r25, 0x0A52
    4e04:	89 2b       	or	r24, r25
    4e06:	09 f0       	breq	.+2      	; 0x4e0a
    4e08:	8c c0       	rjmp	.+280    	; 0x4f22
    4e0a:	90 e0       	ldi	r25, 0x00	; 0
    4e0c:	e0 91 53 0a 	lds	r30, 0x0A53
    4e10:	f0 91 54 0a 	lds	r31, 0x0A54
    4e14:	82 81       	ldd	r24, Z+2	; 0x02
    4e16:	98 17       	cp	r25, r24
    4e18:	48 f4       	brcc	.+18     	; 0x4e2c
    4e1a:	28 2f       	mov	r18, r24
    4e1c:	df 01       	movw	r26, r30
    4e1e:	13 96       	adiw	r26, 0x03	; 3
    4e20:	8d 91       	ld	r24, X+
    4e22:	88 23       	and	r24, r24
    4e24:	19 f4       	brne	.+6      	; 0x4e2c
    4e26:	9f 5f       	subi	r25, 0xFF	; 255
    4e28:	92 17       	cp	r25, r18
    4e2a:	d0 f3       	brcs	.-12     	; 0x4e20
    4e2c:	82 81       	ldd	r24, Z+2	; 0x02
    4e2e:	98 17       	cp	r25, r24
    4e30:	29 f4       	brne	.+10     	; 0x4e3c
    4e32:	6d c0       	rjmp	.+218    	; 0x4f0e
    4e34:	20 95       	com	r18
    4e36:	92 23       	and	r25, r18
    4e38:	93 83       	std	Z+3, r25	; 0x03
    4e3a:	14 c0       	rjmp	.+40     	; 0x4e64
    4e3c:	89 2f       	mov	r24, r25
    4e3e:	99 27       	eor	r25, r25
    4e40:	8c 01       	movw	r16, r24
    4e42:	a3 e0       	ldi	r26, 0x03	; 3
    4e44:	00 0f       	add	r16, r16
    4e46:	11 1f       	adc	r17, r17
    4e48:	aa 95       	dec	r26
    4e4a:	e1 f7       	brne	.-8      	; 0x4e44
    4e4c:	21 e0       	ldi	r18, 0x01	; 1
    4e4e:	30 e0       	ldi	r19, 0x00	; 0
    4e50:	e8 0f       	add	r30, r24
    4e52:	f9 1f       	adc	r31, r25
    4e54:	93 81       	ldd	r25, Z+3	; 0x03
    4e56:	82 2f       	mov	r24, r18
    4e58:	89 23       	and	r24, r25
    4e5a:	61 f7       	brne	.-40     	; 0x4e34
    4e5c:	3f 5f       	subi	r19, 0xFF	; 255
    4e5e:	22 0f       	add	r18, r18
    4e60:	38 30       	cpi	r19, 0x08	; 8
    4e62:	c8 f3       	brcs	.-14     	; 0x4e56
    4e64:	03 0f       	add	r16, r19
    4e66:	11 1d       	adc	r17, r1
 * Will return a NULL pointer if the call to sys_malloc fails.
 */
static inline void *ker_malloc(uint16_t size, sos_pid_t id)
{
  return sos_blk_mem_alloc(size, id, false);
    4e68:	40 e0       	ldi	r20, 0x00	; 0
    4e6a:	60 e1       	ldi	r22, 0x10	; 16
    4e6c:	84 e4       	ldi	r24, 0x44	; 68
    4e6e:	90 e0       	ldi	r25, 0x00	; 0
    4e70:	0e 94 14 11 	call	0x2228
    4e74:	5c 01       	movw	r10, r24
    4e76:	00 97       	sbiw	r24, 0x00	; 0
    4e78:	09 f4       	brne	.+2      	; 0x4e7c
    4e7a:	41 c0       	rjmp	.+130    	; 0x4efe
    4e7c:	fc 01       	movw	r30, r24
    4e7e:	00 83       	st	Z, r16
    4e80:	11 83       	std	Z+1, r17	; 0x01
    4e82:	e0 91 53 0a 	lds	r30, 0x0A53
    4e86:	f0 91 54 0a 	lds	r31, 0x0A54
    4e8a:	80 81       	ld	r24, Z
    4e8c:	91 81       	ldd	r25, Z+1	; 0x01
    4e8e:	f5 01       	movw	r30, r10
    4e90:	82 83       	std	Z+2, r24	; 0x02
    4e92:	93 83       	std	Z+3, r25	; 0x03
    4e94:	f6 e0       	ldi	r31, 0x06	; 6
    4e96:	00 0f       	add	r16, r16
    4e98:	11 1f       	adc	r17, r17
    4e9a:	fa 95       	dec	r31
    4e9c:	e1 f7       	brne	.-8      	; 0x4e96
    4e9e:	c5 01       	movw	r24, r10
    4ea0:	04 96       	adiw	r24, 0x04	; 4
    4ea2:	20 e4       	ldi	r18, 0x40	; 64
    4ea4:	30 e0       	ldi	r19, 0x00	; 0
    4ea6:	ac 01       	movw	r20, r24
    4ea8:	60 e1       	ldi	r22, 0x10	; 16
    4eaa:	f7 01       	movw	r30, r14
    4eac:	80 81       	ld	r24, Z
    4eae:	91 81       	ldd	r25, Z+1	; 0x01
    4eb0:	0e 94 d2 20 	call	0x41a4
    4eb4:	81 30       	cpi	r24, 0x01	; 1
    4eb6:	29 f4       	brne	.+10     	; 0x4ec2
    4eb8:	b0 92 52 0a 	sts	0x0A52, r11
    4ebc:	a0 92 51 0a 	sts	0x0A51, r10
    4ec0:	07 c0       	rjmp	.+14     	; 0x4ed0
    4ec2:	88 23       	and	r24, r24
    4ec4:	29 f0       	breq	.+10     	; 0x4ed0
 * @return void
 */
static inline void ker_free(void* ptr)
{
  sos_blk_mem_free(ptr, false);
    4ec6:	60 e0       	ldi	r22, 0x00	; 0
    4ec8:	c5 01       	movw	r24, r10
    4eca:	0e 94 98 11 	call	0x2330
    4ece:	17 c0       	rjmp	.+46     	; 0x4efe
							   uint8_t type,
							   uint8_t len,
							   void* data,
							   uint16_t flag,
							   uint16_t daddr) {
    4ed0:	80 91 4d 0a 	lds	r24, 0x0A4D
    4ed4:	90 91 4e 0a 	lds	r25, 0x0A4E
  return post_link(did, sid, type, len, data, flag | SOS_MSG_ALL_LINK_IO | SOS_MSG_LINK_AUTO, daddr);
    4ed8:	6c 01       	movw	r12, r24
    4eda:	ec e0       	ldi	r30, 0x0C	; 12
    4edc:	ee 2e       	mov	r14, r30
    4ede:	ee e3       	ldi	r30, 0x3E	; 62
    4ee0:	fe 2e       	mov	r15, r30
    4ee2:	85 01       	movw	r16, r10
    4ee4:	24 e4       	ldi	r18, 0x44	; 68
    4ee6:	41 e2       	ldi	r20, 0x21	; 33
    4ee8:	60 e1       	ldi	r22, 0x10	; 16
    4eea:	86 2f       	mov	r24, r22
    4eec:	0e 94 25 1d 	call	0x3a4a
    4ef0:	88 23       	and	r24, r24
    4ef2:	29 f4       	brne	.+10     	; 0x4efe
    4ef4:	80 91 66 0a 	lds	r24, 0x0A66
    4ef8:	8f 5f       	subi	r24, 0xFF	; 255
    4efa:	80 93 66 0a 	sts	0x0A66, r24
    4efe:	80 91 53 0a 	lds	r24, 0x0A53
    4f02:	90 91 54 0a 	lds	r25, 0x0A54
    4f06:	0e 94 4b 24 	call	0x4896
    4f0a:	88 23       	and	r24, r24
    4f0c:	51 f0       	breq	.+20     	; 0x4f22
    4f0e:	0e 94 f8 23 	call	0x47f0
    4f12:	07 c0       	rjmp	.+14     	; 0x4f22
    4f14:	80 91 66 0a 	lds	r24, 0x0A66
    4f18:	88 23       	and	r24, r24
    4f1a:	19 f0       	breq	.+6      	; 0x4f22
    4f1c:	81 50       	subi	r24, 0x01	; 1
    4f1e:	80 93 66 0a 	sts	0x0A66, r24
    4f22:	80 e0       	ldi	r24, 0x00	; 0
    4f24:	90 e0       	ldi	r25, 0x00	; 0
    4f26:	22 c0       	rjmp	.+68     	; 0x4f6c
    4f28:	10 93 54 0a 	sts	0x0A54, r17
    4f2c:	00 93 53 0a 	sts	0x0A53, r16
    4f30:	10 93 52 0a 	sts	0x0A52, r17
    4f34:	00 93 51 0a 	sts	0x0A51, r16
    4f38:	10 93 50 0a 	sts	0x0A50, r17
    4f3c:	00 93 4f 0a 	sts	0x0A4F, r16
    4f40:	10 92 66 0a 	sts	0x0A66, r1
    4f44:	60 e4       	ldi	r22, 0x40	; 64
    4f46:	80 e1       	ldi	r24, 0x10	; 16
    4f48:	0e 94 46 17 	call	0x2e8c
    4f4c:	20 e0       	ldi	r18, 0x00	; 0
    4f4e:	42 e0       	ldi	r20, 0x02	; 2
    4f50:	60 e1       	ldi	r22, 0x10	; 16
    4f52:	85 e5       	ldi	r24, 0x55	; 85
    4f54:	9a e0       	ldi	r25, 0x0A	; 10
    4f56:	0e 94 bf 30 	call	0x617e
    4f5a:	41 e0       	ldi	r20, 0x01	; 1
    4f5c:	64 2f       	mov	r22, r20
    4f5e:	80 e1       	ldi	r24, 0x10	; 16
    4f60:	0e 94 63 30 	call	0x60c6
    4f64:	c8 01       	movw	r24, r16
    4f66:	02 c0       	rjmp	.+4      	; 0x4f6c
    4f68:	8a ee       	ldi	r24, 0xEA	; 234
    4f6a:	9f ef       	ldi	r25, 0xFF	; 255
    4f6c:	60 96       	adiw	r28, 0x10	; 16
    4f6e:	0f b6       	in	r0, 0x3f	; 63
    4f70:	f8 94       	cli
    4f72:	de bf       	out	0x3e, r29	; 62
    4f74:	0f be       	out	0x3f, r0	; 63
    4f76:	cd bf       	out	0x3d, r28	; 61
    4f78:	df 91       	pop	r29
    4f7a:	cf 91       	pop	r28
    4f7c:	1f 91       	pop	r17
    4f7e:	0f 91       	pop	r16
    4f80:	ff 90       	pop	r15
    4f82:	ef 90       	pop	r14
    4f84:	df 90       	pop	r13
    4f86:	cf 90       	pop	r12
    4f88:	bf 90       	pop	r11
    4f8a:	af 90       	pop	r10
    4f8c:	08 95       	ret

00004f8e <fetcher_init>:

#ifdef SOS_DEBUG_FETCHER
static void print_bitmap(fetcher_bitmap_t *m)
{
	uint8_t i;
	int16_t delt = 0;
	char buf[DEBUG_BUFFER_SIZE];
	delt = sprintf(buf,"map: ");
	for(i = 0; i < m->bitmap_size; i++) {
		delt += sprintf(buf+delt,"0x%x ", m->bitmap[i]);
	}
	DEBUG_PID(KER_FETCHER_PID,"%s\n",buf);
}
#endif

int8_t fetcher_init()
{
#ifdef SOS_USE_PREEMPTION
	ker_register_module(sos_get_header_address(mod_header));
#else
	sched_register_kernel_module(&fetcher_module, sos_get_header_address(mod_header), NULL);
    4f8e:	84 ee       	ldi	r24, 0xE4	; 228
    4f90:	91 e0       	ldi	r25, 0x01	; 1
    4f92:	aa 27       	eor	r26, r26
    4f94:	97 fd       	sbrc	r25, 7
    4f96:	a0 95       	com	r26
    4f98:	ba 2f       	mov	r27, r26
    4f9a:	b6 95       	lsr	r27
    4f9c:	a7 95       	ror	r26
    4f9e:	97 95       	ror	r25
    4fa0:	87 95       	ror	r24
    4fa2:	40 e0       	ldi	r20, 0x00	; 0
    4fa4:	50 e0       	ldi	r21, 0x00	; 0
    4fa6:	bc 01       	movw	r22, r24
    4fa8:	85 e4       	ldi	r24, 0x45	; 69
    4faa:	9a e0       	ldi	r25, 0x0A	; 10
    4fac:	0e 94 4a 14 	call	0x2894
#endif
	return SOS_OK;
}
    4fb0:	80 e0       	ldi	r24, 0x00	; 0
    4fb2:	90 e0       	ldi	r25, 0x00	; 0
    4fb4:	08 95       	ret

00004fb6 <fntable_init>:
 */
int8_t fntable_init()
{
    return SOS_OK;
}
    4fb6:	80 e0       	ldi	r24, 0x00	; 0
    4fb8:	90 e0       	ldi	r25, 0x00	; 0
    4fba:	08 95       	ret

00004fbc <fntable_get_prov_cb>:

/**
 * @brief subscribe to function pointer
 * @param sos_pid_t sub_pid Module requesting function. (User) *
 * @param sos_pid_t pub_pid Module implementing the requested function. (Provider)
 * @param uint8_t fid function id the module is going to subscribe
 * @param uint8_t table_index the index to the function record, starting zero, this is used for gettting function prototypes
 * @return errno
 *
 */
int8_t ker_fntable_subscribe(sos_pid_t sub_pid, sos_pid_t pub_pid,
							 uint8_t fid, uint8_t table_index)
{
	sos_module_t *mod;
	mod_header_ptr sub_h;
	func_cb_ptr cb;
	func_cb_ptr *cb_in_ram;

	mod = ker_get_module(sub_pid);
	if(mod == NULL) {	
		ker_panic();
		return -EINVAL;
	}

	sub_h = mod->header;
	cb_in_ram = (func_cb_ptr*)(mod->handler_state);

	cb = fntable_real_subscribe(sub_h, pub_pid, fid, table_index);
	if(cb != 0) {
		cb_in_ram[table_index] = cb;
	} else {
		cb_in_ram[table_index] = sos_get_header_member(sub_h,
				offsetof(mod_header_t, funct[table_index]));
	}
#ifdef SOS_USE_PREEMPTION
  // Add this pid to the subscribtion list
  if(mod->num_sub >= mod->max_sub) {
	ker_panic();
	return -EINVAL;
  }
  // ?? double check num_sub - 1 ??
  mod->sub_list[(mod->num_sub - 1)] = pub_pid;
  mod->num_sub++;
#endif
	return SOS_OK;
}

void* ker_fntable_get_dfunc_addr(sos_pid_t pub_pid, uint8_t fid)
{
	sos_module_t *mod;
	uint8_t num_sub_func;
	uint8_t num_prov_func;
	mod_header_ptr pub_h;
	func_cb_ptr pub_cb = 0;
	
	mod = ker_get_module(pub_pid);
	if(mod == NULL) {	
		return NULL;
	}
	
	pub_h = mod->header;
	num_sub_func = sos_read_header_byte(pub_h,
			offsetof(mod_header_t, num_sub_func));
	num_prov_func = sos_read_header_byte(pub_h,
			offsetof(mod_header_t, num_prov_func));
			
	pub_cb = fntable_get_prov_cb(
			sos_get_header_member(pub_h, offsetof(mod_header_t, funct)),
			fid, num_sub_func, num_sub_func + num_prov_func);
	if(pub_cb == 0) {
		return NULL;
	}
	// TODO: typechecking
	
	return (void*)sos_read_header_ptr(pub_cb, offsetof(func_cb_t, ptr));
}

func_cb_ptr fntable_real_subscribe(mod_header_ptr sub_h, sos_pid_t pub_pid, uint8_t fid, uint8_t table_index)
{
	mod_header_ptr pub_h;
	uint8_t proto_pub[4];
	uint8_t proto_sub[4];
	func_cb_ptr pub_cb = 0;
	uint8_t i = 0;
	uint8_t num_sub_func;
	uint8_t num_prov_func;
	sos_module_t *mod;

	mod = ker_get_module(pub_pid);
	if(mod == NULL) return 0;
	pub_h = mod->header;
	num_sub_func = sos_read_header_byte(pub_h,
			offsetof(mod_header_t, num_sub_func));
	num_prov_func = sos_read_header_byte(pub_h,
			offsetof(mod_header_t, num_prov_func));
	pub_cb = fntable_get_prov_cb(
			sos_get_header_member(pub_h, offsetof(mod_header_t, funct)),
			fid, num_sub_func, num_sub_func + num_prov_func);
	if(pub_cb == 0) {
		return 0;
	}
	for(i = 0; i < 4; i++) {
		proto_pub[i] = sos_read_header_byte(pub_cb,
				offsetof(func_cb_t, proto[i]));
		proto_sub[i] = sos_read_header_byte(sub_h,
				offsetof(mod_header_t, funct[table_index].proto[i]));
	}
	if(check_proto(proto_pub, proto_sub)) {
		return pub_cb;
	}
	return 0;
}

static func_cb_ptr fntable_get_prov_cb(func_cb_ptr funct, uint8_t fid, uint8_t start, uint8_t end)
{
    4fbc:	0f 93       	push	r16
    4fbe:	1f 93       	push	r17
    4fc0:	cf 93       	push	r28
    4fc2:	fc 01       	movw	r30, r24
    4fc4:	06 2f       	mov	r16, r22
    4fc6:	84 2f       	mov	r24, r20
    4fc8:	12 2f       	mov	r17, r18
	uint8_t i;

	for(i = start; i < end; i++) {
    4fca:	c4 2f       	mov	r28, r20
    4fcc:	42 17       	cp	r20, r18
    4fce:	80 f5       	brcc	.+96     	; 0x5030
    4fd0:	9f 01       	movw	r18, r30
    4fd2:	44 27       	eor	r20, r20
    4fd4:	55 27       	eor	r21, r21
    4fd6:	22 0f       	add	r18, r18
    4fd8:	33 1f       	adc	r19, r19
    4fda:	44 1f       	adc	r20, r20
    4fdc:	55 1f       	adc	r21, r21
    4fde:	68 2f       	mov	r22, r24
    4fe0:	77 27       	eor	r23, r23
    4fe2:	93 e0       	ldi	r25, 0x03	; 3
    4fe4:	66 0f       	add	r22, r22
    4fe6:	77 1f       	adc	r23, r23
    4fe8:	9a 95       	dec	r25
    4fea:	e1 f7       	brne	.-8      	; 0x4fe4
		if(sos_read_header_byte(funct,
    4fec:	69 5f       	subi	r22, 0xF9	; 249
    4fee:	7f 4f       	sbci	r23, 0xFF	; 255
    4ff0:	cb 01       	movw	r24, r22
    4ff2:	aa 27       	eor	r26, r26
    4ff4:	bb 27       	eor	r27, r27
    4ff6:	67 50       	subi	r22, 0x07	; 7
    4ff8:	70 40       	sbci	r23, 0x00	; 0
    4ffa:	82 0f       	add	r24, r18
    4ffc:	93 1f       	adc	r25, r19
    4ffe:	a4 1f       	adc	r26, r20
    5000:	b5 1f       	adc	r27, r21
    5002:	ab bf       	out	0x3b, r26	; 59
    5004:	fc 01       	movw	r30, r24
    5006:	87 91       	elpm	r24, Z+
    5008:	80 17       	cp	r24, r16
    500a:	69 f4       	brne	.+26     	; 0x5026
					i * sizeof(func_cb_t) + offsetof(func_cb_t, fid))
			   	== fid) {
			return sos_get_header_member(funct,
    500c:	cb 01       	movw	r24, r22
    500e:	aa 27       	eor	r26, r26
    5010:	bb 27       	eor	r27, r27
    5012:	28 0f       	add	r18, r24
    5014:	39 1f       	adc	r19, r25
    5016:	4a 1f       	adc	r20, r26
    5018:	5b 1f       	adc	r21, r27
    501a:	56 95       	lsr	r21
    501c:	47 95       	ror	r20
    501e:	37 95       	ror	r19
    5020:	27 95       	ror	r18
    5022:	c9 01       	movw	r24, r18
    5024:	07 c0       	rjmp	.+14     	; 0x5034
    5026:	cf 5f       	subi	r28, 0xFF	; 255
    5028:	68 5f       	subi	r22, 0xF8	; 248
    502a:	7f 4f       	sbci	r23, 0xFF	; 255
    502c:	c1 17       	cp	r28, r17
    502e:	f0 f2       	brcs	.-68     	; 0x4fec
					i * sizeof(func_cb_t));
		}
	}
	return 0;
    5030:	80 e0       	ldi	r24, 0x00	; 0
    5032:	90 e0       	ldi	r25, 0x00	; 0
    5034:	cf 91       	pop	r28
    5036:	1f 91       	pop	r17
    5038:	0f 91       	pop	r16
    503a:	08 95       	ret

0000503c <ker_fntable_get_dfunc_addr>:
    503c:	1f 93       	push	r17
    503e:	cf 93       	push	r28
    5040:	df 93       	push	r29
    5042:	16 2f       	mov	r17, r22
    5044:	c0 e0       	ldi	r28, 0x00	; 0
    5046:	d0 e0       	ldi	r29, 0x00	; 0
    5048:	0e 94 9d 13 	call	0x273a
    504c:	fc 01       	movw	r30, r24
    504e:	89 2b       	or	r24, r25
    5050:	19 f1       	breq	.+70     	; 0x5098
    5052:	82 81       	ldd	r24, Z+2	; 0x02
    5054:	93 81       	ldd	r25, Z+3	; 0x03
    5056:	aa 27       	eor	r26, r26
    5058:	bb 27       	eor	r27, r27
    505a:	88 0f       	add	r24, r24
    505c:	99 1f       	adc	r25, r25
    505e:	aa 1f       	adc	r26, r26
    5060:	bb 1f       	adc	r27, r27
    5062:	04 96       	adiw	r24, 0x04	; 4
    5064:	a1 1d       	adc	r26, r1
    5066:	b1 1d       	adc	r27, r1
    5068:	ab bf       	out	0x3b, r26	; 59
    506a:	fc 01       	movw	r30, r24
    506c:	37 91       	elpm	r19, Z+
    506e:	01 96       	adiw	r24, 0x01	; 1
    5070:	a1 1d       	adc	r26, r1
    5072:	b1 1d       	adc	r27, r1
    5074:	ab bf       	out	0x3b, r26	; 59
    5076:	fc 01       	movw	r30, r24
    5078:	27 91       	elpm	r18, Z+
    507a:	23 0f       	add	r18, r19
    507c:	0b 96       	adiw	r24, 0x0b	; 11
    507e:	a1 1d       	adc	r26, r1
    5080:	b1 1d       	adc	r27, r1
    5082:	b6 95       	lsr	r27
    5084:	a7 95       	ror	r26
    5086:	97 95       	ror	r25
    5088:	87 95       	ror	r24
    508a:	43 2f       	mov	r20, r19
    508c:	61 2f       	mov	r22, r17
    508e:	0e 94 de 27 	call	0x4fbc
    5092:	ec 01       	movw	r28, r24
    5094:	89 2b       	or	r24, r25
    5096:	11 f4       	brne	.+4      	; 0x509c
    5098:	ce 01       	movw	r24, r28
    509a:	0b c0       	rjmp	.+22     	; 0x50b2
    509c:	ce 01       	movw	r24, r28
    509e:	aa 27       	eor	r26, r26
    50a0:	bb 27       	eor	r27, r27
    50a2:	88 0f       	add	r24, r24
    50a4:	99 1f       	adc	r25, r25
    50a6:	aa 1f       	adc	r26, r26
    50a8:	bb 1f       	adc	r27, r27
    50aa:	ab bf       	out	0x3b, r26	; 59
    50ac:	fc 01       	movw	r30, r24
    50ae:	87 91       	elpm	r24, Z+
    50b0:	96 91       	elpm	r25, Z
    50b2:	df 91       	pop	r29
    50b4:	cf 91       	pop	r28
    50b6:	1f 91       	pop	r17
    50b8:	08 95       	ret

000050ba <check_proto>:
}


/**
 * @brief link the module into correct address
 * NOTE: this rountine assumes the header is in RAM
 * fix offsetof(mod_header_t, module_handler)
 * fix offsetof(mod_header_t, funct) + (n * sizeof(func_cb_t)) + offsetof(func_cb_t, ptr) for n = [0 ... number_of_funcs) 
 */
static inline func_addr_t mod_header_size(uint8_t num_funcs)
{
	return offsetof(mod_header_t, funct) + 
		(num_funcs * sizeof(func_cb_t)) + offsetof(func_cb_t, ptr);
}


/**
 * @brief link the functions
 */
int8_t fntable_link(sos_module_t *m)
{
   uint8_t num_prov_func;
   uint8_t num_sub_func;
   
   fntable_link_subscribed_functions(m);
   num_prov_func = sos_read_header_byte(m->header,
                                        offsetof(mod_header_t, num_prov_func));
   num_sub_func = sos_read_header_byte(m->header,
                                       offsetof(mod_header_t, num_sub_func));
   if(num_prov_func > 0) {
      fntable_link_provided_functions(
         sos_get_header_member(m->header, offsetof(mod_header_t, funct)),
         num_sub_func,
         num_sub_func + num_prov_func, true);
   }
   return SOS_OK;
}


void fntable_link_subscribed_functions(sos_module_t *m)
{
   uint8_t num_sub_func;
   uint8_t num_prov_func;
   uint8_t i;
   func_cb_ptr *cb_in_ram = (func_cb_ptr*)(m->handler_state);
   
   num_sub_func = sos_read_header_byte(m->header,
                                       offsetof(mod_header_t, num_sub_func));
   num_prov_func = sos_read_header_byte(m->header,
                                        offsetof(mod_header_t, num_prov_func));
   
   for(i = 0; i < num_sub_func; i++) {
      uint8_t pub_pid = sos_read_header_byte(m->header,
                                             offsetof(mod_header_t, funct[i].pid));
      uint8_t pub_fid = sos_read_header_byte(m->header,
                                             offsetof(mod_header_t, funct[i].fid));
      func_cb_ptr pub_cb = 0;
      if(pub_pid == m->pid) {
         pub_cb = fntable_get_prov_cb(
            sos_get_header_member(m->header,
                                  offsetof(mod_header_t, funct)),
            pub_fid,
            num_sub_func, (num_sub_func + num_prov_func));
      } else if(pub_pid != RUNTIME_PID) {
         pub_cb = fntable_real_subscribe(m->header, pub_pid, pub_fid, i);
      }
      if(pub_cb != 0) {
			cb_in_ram[i] = pub_cb;
		} else {
			cb_in_ram[i] = sos_get_header_member(m->header,
					offsetof(mod_header_t, funct[i]));
		}
	}
}


/**
 * @brief given provided function table, search ALL OTHER modules to find the match
 *
 * PROFILE NEEDED
 * NOTE: it will be good idea to profile this...
 */
static void fntable_link_provided_functions(func_cb_ptr funct, uint8_t start, uint8_t end, bool link)
{
	sos_module_t **all_modules = sched_get_all_module();
	uint8_t bin_itr;
	uint8_t pub_pid = sos_read_header_byte(
			//funct[start].pid);
			funct, start * sizeof(func_cb_t) + offsetof(func_cb_t, pid));

	//! search both function users and dyanmic functions
	for(bin_itr = 0; bin_itr < SCHED_NUMBER_BINS; bin_itr++) {
		sos_module_t *h = all_modules[bin_itr];
		while(h != NULL) {
			uint8_t num_sub = sos_read_header_byte(
					h->header, offsetof(mod_header_t, num_sub_func));
			uint8_t i;
			for(i = 0; i < num_sub; i++) {
				uint8_t sub_pid =
					sos_read_header_byte(
							h->header, offsetof(mod_header_t, funct[i].pid));
				if(sub_pid == pub_pid) {
					uint8_t sub_fid =
						sos_read_header_byte(
								h->header, offsetof(mod_header_t, funct[i].fid));
					func_cb_ptr pub_cb =
						fntable_get_prov_cb(funct, sub_fid, start, end);
					if(pub_cb != 0) {
						//! found function to be linked
						uint8_t proto_pub[4];
						uint8_t proto_sub[4];
						uint8_t j;
						func_cb_ptr *cb_in_ram =
							(func_cb_ptr*)(h->handler_state);
						for(j = 0; j < 4; j++) {
							proto_sub[j] =
								sos_read_header_byte(
										h->header,
										offsetof(mod_header_t, funct[i].proto[j]));
							proto_pub[j] = sos_read_header_byte(
									pub_cb, offsetof(func_cb_t, proto[j]));
						}
						if(link) {
							if(check_proto(proto_pub, proto_sub)) {
								cb_in_ram[i] = pub_cb;
							}
						} else {
							//! remove link
							cb_in_ram[i] =
								sos_get_header_member( h->header,
										offsetof(mod_header_t, funct[i]));
						}
					}
				} else if((sub_pid == RUNTIME_PID) && (link == false)) {
					func_cb_ptr *cb_in_ram = (func_cb_ptr *)(h->handler_state);
					func_cb_ptr sub_cb_in_ram = cb_in_ram[i];
					uint8_t k;
					//! compare to see whether there is a match
					for(k = start; k < end; k++) {
						if((funct + (k * sizeof(func_cb_t))) == sub_cb_in_ram) {
							//! found dynamic function
							cb_in_ram[i] =
								sos_get_header_member(h->header,
										offsetof(mod_header_t, funct[i]));
							//! send message back to subscriber
							post_short(h->pid, FNTABLE_PID, MSG_DFUNC_REMOVED,
									i, 0, 0);
							break;
						}
					}
				}
			}
			h = h->next;
		}
	}
}

int8_t fntable_remove_all(sos_module_t *m)
{
	uint8_t num_sub_func;
	uint8_t num_prov_func;
	uint8_t i;
	func_cb_ptr *cb_in_ram = (func_cb_ptr *)(m->handler_state);

	num_prov_func = sos_read_header_byte(m->header,
			offsetof(mod_header_t, num_prov_func));
	//! check whether there is any provided functions
	if(num_prov_func == 0) return SOS_OK;

	num_sub_func = sos_read_header_byte(
			m->header, offsetof(mod_header_t, num_sub_func));

	//! unlink all provided functions
	fntable_link_provided_functions(
			sos_get_header_member(m->header, offsetof(mod_header_t, funct)),
			num_sub_func,
			num_sub_func + num_prov_func, false);

	//! search all used functions and send a message to the providers as well
	//! send message to the function provider based on function pointer table.
	//! we can ignore RUNTIME_PID as provider cannot have it.
	for(i = 0; i < num_sub_func; i++) {
		func_cb_ptr pub_cb = cb_in_ram[i];
		uint8_t pub_pid = sos_read_header_byte(
				pub_cb, offsetof(func_cb_t, pid));
		if(pub_pid == m->pid || pub_pid == RUNTIME_PID) {
			//! if function pointer is pointing to self,
			//! we won't send remove message
			//! similarly if function pointer is pointing to RUNTIME_PID,
			//! this means that it is pointing to self
			continue;
		}
		post_short(pub_pid, FNTABLE_PID, MSG_DFUNC_REMOVED,
				m->pid, 0, 0);

	}
	return SOS_OK;
}


// Check that two function prototypes match
// NOTE: both prototypes are in read-only memory now
static bool check_proto(uint8_t *proto1, uint8_t *proto2)
{
    50ba:	cf 93       	push	r28
    50bc:	df 93       	push	r29
    50be:	fc 01       	movw	r30, r24
    50c0:	db 01       	movw	r26, r22

	if ((proto1[0] == proto2[0]) &&
    50c2:	90 81       	ld	r25, Z
    50c4:	8c 91       	ld	r24, X
    50c6:	98 17       	cp	r25, r24
    50c8:	81 f4       	brne	.+32     	; 0x50ea
    50ca:	91 81       	ldd	r25, Z+1	; 0x01
    50cc:	eb 01       	movw	r28, r22
    50ce:	89 81       	ldd	r24, Y+1	; 0x01
    50d0:	98 17       	cp	r25, r24
    50d2:	59 f4       	brne	.+22     	; 0x50ea
    50d4:	92 81       	ldd	r25, Z+2	; 0x02
    50d6:	8a 81       	ldd	r24, Y+2	; 0x02
    50d8:	98 17       	cp	r25, r24
    50da:	39 f4       	brne	.+14     	; 0x50ea
    50dc:	93 81       	ldd	r25, Z+3	; 0x03
    50de:	8b 81       	ldd	r24, Y+3	; 0x03
    50e0:	98 17       	cp	r25, r24
    50e2:	19 f4       	brne	.+6      	; 0x50ea
		(proto1[1] == proto2[1]) &&
		(proto1[2] == proto2[2]) &&
		(proto1[3] == proto2[3])) {
	   return true;
    50e4:	81 e0       	ldi	r24, 0x01	; 1
    50e6:	90 e0       	ldi	r25, 0x00	; 0
    50e8:	02 c0       	rjmp	.+4      	; 0x50ee
	}

	return false;
    50ea:	80 e0       	ldi	r24, 0x00	; 0
    50ec:	90 e0       	ldi	r25, 0x00	; 0
    50ee:	df 91       	pop	r29
    50f0:	cf 91       	pop	r28
    50f2:	08 95       	ret

000050f4 <fntable_real_subscribe>:
    50f4:	7f 92       	push	r7
    50f6:	8f 92       	push	r8
    50f8:	9f 92       	push	r9
    50fa:	af 92       	push	r10
    50fc:	bf 92       	push	r11
    50fe:	cf 92       	push	r12
    5100:	df 92       	push	r13
    5102:	ef 92       	push	r14
    5104:	ff 92       	push	r15
    5106:	0f 93       	push	r16
    5108:	1f 93       	push	r17
    510a:	cf 93       	push	r28
    510c:	df 93       	push	r29
    510e:	cd b7       	in	r28, 0x3d	; 61
    5110:	de b7       	in	r29, 0x3e	; 62
    5112:	28 97       	sbiw	r28, 0x08	; 8
    5114:	0f b6       	in	r0, 0x3f	; 63
    5116:	f8 94       	cli
    5118:	de bf       	out	0x3e, r29	; 62
    511a:	0f be       	out	0x3f, r0	; 63
    511c:	cd bf       	out	0x3d, r28	; 61
    511e:	6c 01       	movw	r12, r24
    5120:	86 2f       	mov	r24, r22
    5122:	14 2f       	mov	r17, r20
    5124:	b2 2e       	mov	r11, r18
    5126:	88 24       	eor	r8, r8
    5128:	99 24       	eor	r9, r9
    512a:	77 24       	eor	r7, r7
    512c:	0e 94 9d 13 	call	0x273a
    5130:	fc 01       	movw	r30, r24
    5132:	89 2b       	or	r24, r25
    5134:	09 f4       	brne	.+2      	; 0x5138
    5136:	72 c0       	rjmp	.+228    	; 0x521c
    5138:	82 81       	ldd	r24, Z+2	; 0x02
    513a:	93 81       	ldd	r25, Z+3	; 0x03
    513c:	aa 27       	eor	r26, r26
    513e:	bb 27       	eor	r27, r27
    5140:	88 0f       	add	r24, r24
    5142:	99 1f       	adc	r25, r25
    5144:	aa 1f       	adc	r26, r26
    5146:	bb 1f       	adc	r27, r27
    5148:	04 96       	adiw	r24, 0x04	; 4
    514a:	a1 1d       	adc	r26, r1
    514c:	b1 1d       	adc	r27, r1
    514e:	ab bf       	out	0x3b, r26	; 59
    5150:	fc 01       	movw	r30, r24
    5152:	37 91       	elpm	r19, Z+
    5154:	01 96       	adiw	r24, 0x01	; 1
    5156:	a1 1d       	adc	r26, r1
    5158:	b1 1d       	adc	r27, r1
    515a:	ab bf       	out	0x3b, r26	; 59
    515c:	fc 01       	movw	r30, r24
    515e:	27 91       	elpm	r18, Z+
    5160:	23 0f       	add	r18, r19
    5162:	0b 96       	adiw	r24, 0x0b	; 11
    5164:	a1 1d       	adc	r26, r1
    5166:	b1 1d       	adc	r27, r1
    5168:	b6 95       	lsr	r27
    516a:	a7 95       	ror	r26
    516c:	97 95       	ror	r25
    516e:	87 95       	ror	r24
    5170:	43 2f       	mov	r20, r19
    5172:	61 2f       	mov	r22, r17
    5174:	0e 94 de 27 	call	0x4fbc
    5178:	4c 01       	movw	r8, r24
    517a:	00 97       	sbiw	r24, 0x00	; 0
    517c:	09 f4       	brne	.+2      	; 0x5180
    517e:	4e c0       	rjmp	.+156    	; 0x521c
    5180:	7c 01       	movw	r14, r24
    5182:	00 27       	eor	r16, r16
    5184:	11 27       	eor	r17, r17
    5186:	ee 0c       	add	r14, r14
    5188:	ff 1c       	adc	r15, r15
    518a:	00 1f       	adc	r16, r16
    518c:	11 1f       	adc	r17, r17
    518e:	a6 01       	movw	r20, r12
    5190:	66 27       	eor	r22, r22
    5192:	77 27       	eor	r23, r23
    5194:	44 0f       	add	r20, r20
    5196:	55 1f       	adc	r21, r21
    5198:	66 1f       	adc	r22, r22
    519a:	77 1f       	adc	r23, r23
    519c:	2b 2d       	mov	r18, r11
    519e:	33 27       	eor	r19, r19
    51a0:	a3 e0       	ldi	r26, 0x03	; 3
    51a2:	22 0f       	add	r18, r18
    51a4:	33 1f       	adc	r19, r19
    51a6:	aa 95       	dec	r26
    51a8:	e1 f7       	brne	.-8      	; 0x51a2
    51aa:	2e 5e       	subi	r18, 0xEE	; 238
    51ac:	3f 4f       	sbci	r19, 0xFF	; 255
    51ae:	5e 01       	movw	r10, r28
    51b0:	08 94       	sec
    51b2:	a1 1c       	adc	r10, r1
    51b4:	b1 1c       	adc	r11, r1
    51b6:	cc 24       	eor	r12, r12
    51b8:	dd 24       	eor	r13, r13
    51ba:	82 e0       	ldi	r24, 0x02	; 2
    51bc:	90 e0       	ldi	r25, 0x00	; 0
    51be:	c8 0e       	add	r12, r24
    51c0:	d9 1e       	adc	r13, r25
    51c2:	c6 01       	movw	r24, r12
    51c4:	aa 27       	eor	r26, r26
    51c6:	bb 27       	eor	r27, r27
    51c8:	8e 0d       	add	r24, r14
    51ca:	9f 1d       	adc	r25, r15
    51cc:	a0 1f       	adc	r26, r16
    51ce:	b1 1f       	adc	r27, r17
    51d0:	ab bf       	out	0x3b, r26	; 59
    51d2:	fc 01       	movw	r30, r24
    51d4:	87 91       	elpm	r24, Z+
    51d6:	f5 01       	movw	r30, r10
    51d8:	80 83       	st	Z, r24
    51da:	c9 01       	movw	r24, r18
    51dc:	aa 27       	eor	r26, r26
    51de:	bb 27       	eor	r27, r27
    51e0:	84 0f       	add	r24, r20
    51e2:	95 1f       	adc	r25, r21
    51e4:	a6 1f       	adc	r26, r22
    51e6:	b7 1f       	adc	r27, r23
    51e8:	ab bf       	out	0x3b, r26	; 59
    51ea:	fc 01       	movw	r30, r24
    51ec:	87 91       	elpm	r24, Z+
    51ee:	f5 01       	movw	r30, r10
    51f0:	84 83       	std	Z+4, r24	; 0x04
    51f2:	73 94       	inc	r7
    51f4:	08 94       	sec
    51f6:	c1 08       	sbc	r12, r1
    51f8:	d1 08       	sbc	r13, r1
    51fa:	08 94       	sec
    51fc:	a1 1c       	adc	r10, r1
    51fe:	b1 1c       	adc	r11, r1
    5200:	2f 5f       	subi	r18, 0xFF	; 255
    5202:	3f 4f       	sbci	r19, 0xFF	; 255
    5204:	f3 e0       	ldi	r31, 0x03	; 3
    5206:	f7 15       	cp	r31, r7
    5208:	c0 f6       	brcc	.-80     	; 0x51ba
    520a:	be 01       	movw	r22, r28
    520c:	6b 5f       	subi	r22, 0xFB	; 251
    520e:	7f 4f       	sbci	r23, 0xFF	; 255
    5210:	ce 01       	movw	r24, r28
    5212:	01 96       	adiw	r24, 0x01	; 1
    5214:	0e 94 5d 28 	call	0x50ba
    5218:	88 23       	and	r24, r24
    521a:	11 f0       	breq	.+4      	; 0x5220
    521c:	c4 01       	movw	r24, r8
    521e:	02 c0       	rjmp	.+4      	; 0x5224
    5220:	80 e0       	ldi	r24, 0x00	; 0
    5222:	90 e0       	ldi	r25, 0x00	; 0
    5224:	28 96       	adiw	r28, 0x08	; 8
    5226:	0f b6       	in	r0, 0x3f	; 63
    5228:	f8 94       	cli
    522a:	de bf       	out	0x3e, r29	; 62
    522c:	0f be       	out	0x3f, r0	; 63
    522e:	cd bf       	out	0x3d, r28	; 61
    5230:	df 91       	pop	r29
    5232:	cf 91       	pop	r28
    5234:	1f 91       	pop	r17
    5236:	0f 91       	pop	r16
    5238:	ff 90       	pop	r15
    523a:	ef 90       	pop	r14
    523c:	df 90       	pop	r13
    523e:	cf 90       	pop	r12
    5240:	bf 90       	pop	r11
    5242:	af 90       	pop	r10
    5244:	9f 90       	pop	r9
    5246:	8f 90       	pop	r8
    5248:	7f 90       	pop	r7
    524a:	08 95       	ret

0000524c <ker_fntable_subscribe>:
    524c:	cf 92       	push	r12
    524e:	df 92       	push	r13
    5250:	ef 92       	push	r14
    5252:	ff 92       	push	r15
    5254:	0f 93       	push	r16
    5256:	1f 93       	push	r17
    5258:	cf 93       	push	r28
    525a:	df 93       	push	r29
    525c:	c6 2e       	mov	r12, r22
    525e:	d4 2e       	mov	r13, r20
    5260:	c2 2f       	mov	r28, r18
    5262:	0e 94 9d 13 	call	0x273a
    5266:	fc 01       	movw	r30, r24
    5268:	89 2b       	or	r24, r25
    526a:	29 f4       	brne	.+10     	; 0x5276
    526c:	0e 94 2f 18 	call	0x305e
    5270:	8a ee       	ldi	r24, 0xEA	; 234
    5272:	9f ef       	ldi	r25, 0xFF	; 255
    5274:	35 c0       	rjmp	.+106    	; 0x52e0
    5276:	02 81       	ldd	r16, Z+2	; 0x02
    5278:	13 81       	ldd	r17, Z+3	; 0x03
    527a:	e6 80       	ldd	r14, Z+6	; 0x06
    527c:	f7 80       	ldd	r15, Z+7	; 0x07
    527e:	2c 2f       	mov	r18, r28
    5280:	4d 2d       	mov	r20, r13
    5282:	6c 2d       	mov	r22, r12
    5284:	c8 01       	movw	r24, r16
    5286:	0e 94 7a 28 	call	0x50f4
    528a:	dd 27       	eor	r29, r29
    528c:	00 97       	sbiw	r24, 0x00	; 0
    528e:	39 f0       	breq	.+14     	; 0x529e
    5290:	cc 0f       	add	r28, r28
    5292:	dd 1f       	adc	r29, r29
    5294:	ce 0d       	add	r28, r14
    5296:	df 1d       	adc	r29, r15
    5298:	88 83       	st	Y, r24
    529a:	99 83       	std	Y+1, r25	; 0x01
    529c:	1f c0       	rjmp	.+62     	; 0x52dc
    529e:	fe 01       	movw	r30, r28
    52a0:	ec 0f       	add	r30, r28
    52a2:	fd 1f       	adc	r31, r29
    52a4:	ee 0d       	add	r30, r14
    52a6:	ff 1d       	adc	r31, r15
    52a8:	c8 01       	movw	r24, r16
    52aa:	aa 27       	eor	r26, r26
    52ac:	bb 27       	eor	r27, r27
    52ae:	88 0f       	add	r24, r24
    52b0:	99 1f       	adc	r25, r25
    52b2:	aa 1f       	adc	r26, r26
    52b4:	bb 1f       	adc	r27, r27
    52b6:	73 e0       	ldi	r23, 0x03	; 3
    52b8:	cc 0f       	add	r28, r28
    52ba:	dd 1f       	adc	r29, r29
    52bc:	7a 95       	dec	r23
    52be:	e1 f7       	brne	.-8      	; 0x52b8
    52c0:	60 96       	adiw	r28, 0x10	; 16
    52c2:	9e 01       	movw	r18, r28
    52c4:	44 27       	eor	r20, r20
    52c6:	55 27       	eor	r21, r21
    52c8:	82 0f       	add	r24, r18
    52ca:	93 1f       	adc	r25, r19
    52cc:	a4 1f       	adc	r26, r20
    52ce:	b5 1f       	adc	r27, r21
    52d0:	b6 95       	lsr	r27
    52d2:	a7 95       	ror	r26
    52d4:	97 95       	ror	r25
    52d6:	87 95       	ror	r24
    52d8:	80 83       	st	Z, r24
    52da:	91 83       	std	Z+1, r25	; 0x01
    52dc:	80 e0       	ldi	r24, 0x00	; 0
    52de:	90 e0       	ldi	r25, 0x00	; 0
    52e0:	df 91       	pop	r29
    52e2:	cf 91       	pop	r28
    52e4:	1f 91       	pop	r17
    52e6:	0f 91       	pop	r16
    52e8:	ff 90       	pop	r15
    52ea:	ef 90       	pop	r14
    52ec:	df 90       	pop	r13
    52ee:	cf 90       	pop	r12
    52f0:	08 95       	ret

000052f2 <fntable_link_subscribed_functions>:
    52f2:	3f 92       	push	r3
    52f4:	4f 92       	push	r4
    52f6:	5f 92       	push	r5
    52f8:	6f 92       	push	r6
    52fa:	7f 92       	push	r7
    52fc:	8f 92       	push	r8
    52fe:	9f 92       	push	r9
    5300:	af 92       	push	r10
    5302:	bf 92       	push	r11
    5304:	cf 92       	push	r12
    5306:	df 92       	push	r13
    5308:	ef 92       	push	r14
    530a:	ff 92       	push	r15
    530c:	0f 93       	push	r16
    530e:	1f 93       	push	r17
    5310:	cf 93       	push	r28
    5312:	df 93       	push	r29
    5314:	5c 01       	movw	r10, r24
    5316:	fc 01       	movw	r30, r24
    5318:	26 81       	ldd	r18, Z+6	; 0x06
    531a:	37 81       	ldd	r19, Z+7	; 0x07
    531c:	82 81       	ldd	r24, Z+2	; 0x02
    531e:	93 81       	ldd	r25, Z+3	; 0x03
    5320:	aa 27       	eor	r26, r26
    5322:	bb 27       	eor	r27, r27
    5324:	88 0f       	add	r24, r24
    5326:	99 1f       	adc	r25, r25
    5328:	aa 1f       	adc	r26, r26
    532a:	bb 1f       	adc	r27, r27
    532c:	04 96       	adiw	r24, 0x04	; 4
    532e:	a1 1d       	adc	r26, r1
    5330:	b1 1d       	adc	r27, r1
    5332:	ab bf       	out	0x3b, r26	; 59
    5334:	fc 01       	movw	r30, r24
    5336:	77 90       	elpm	r7, Z+
    5338:	01 96       	adiw	r24, 0x01	; 1
    533a:	a1 1d       	adc	r26, r1
    533c:	b1 1d       	adc	r27, r1
    533e:	ab bf       	out	0x3b, r26	; 59
    5340:	fc 01       	movw	r30, r24
    5342:	37 90       	elpm	r3, Z+
    5344:	66 24       	eor	r6, r6
    5346:	67 14       	cp	r6, r7
    5348:	08 f0       	brcs	.+2      	; 0x534c
    534a:	6c c0       	rjmp	.+216    	; 0x5424
    534c:	50 e1       	ldi	r21, 0x10	; 16
    534e:	45 2e       	mov	r4, r21
    5350:	51 2c       	mov	r5, r1
    5352:	c0 e0       	ldi	r28, 0x00	; 0
    5354:	d0 e0       	ldi	r29, 0x00	; 0
    5356:	69 01       	movw	r12, r18
    5358:	f5 01       	movw	r30, r10
    535a:	82 80       	ldd	r8, Z+2	; 0x02
    535c:	93 80       	ldd	r9, Z+3	; 0x03
    535e:	74 01       	movw	r14, r8
    5360:	00 27       	eor	r16, r16
    5362:	11 27       	eor	r17, r17
    5364:	ee 0c       	add	r14, r14
    5366:	ff 1c       	adc	r15, r15
    5368:	00 1f       	adc	r16, r16
    536a:	11 1f       	adc	r17, r17
    536c:	66 96       	adiw	r28, 0x16	; 22
    536e:	ce 01       	movw	r24, r28
    5370:	aa 27       	eor	r26, r26
    5372:	bb 27       	eor	r27, r27
    5374:	8e 0d       	add	r24, r14
    5376:	9f 1d       	adc	r25, r15
    5378:	a0 1f       	adc	r26, r16
    537a:	b1 1f       	adc	r27, r17
    537c:	ab bf       	out	0x3b, r26	; 59
    537e:	fc 01       	movw	r30, r24
    5380:	67 91       	elpm	r22, Z+
    5382:	21 96       	adiw	r28, 0x01	; 1
    5384:	ce 01       	movw	r24, r28
    5386:	aa 27       	eor	r26, r26
    5388:	bb 27       	eor	r27, r27
    538a:	67 97       	sbiw	r28, 0x17	; 23
    538c:	8e 0d       	add	r24, r14
    538e:	9f 1d       	adc	r25, r15
    5390:	a0 1f       	adc	r26, r16
    5392:	b1 1f       	adc	r27, r17
    5394:	ab bf       	out	0x3b, r26	; 59
    5396:	fc 01       	movw	r30, r24
    5398:	97 91       	elpm	r25, Z+
    539a:	f5 01       	movw	r30, r10
    539c:	84 81       	ldd	r24, Z+4	; 0x04
    539e:	68 17       	cp	r22, r24
    53a0:	a1 f4       	brne	.+40     	; 0x53ca
    53a2:	20 e1       	ldi	r18, 0x10	; 16
    53a4:	30 e0       	ldi	r19, 0x00	; 0
    53a6:	40 e0       	ldi	r20, 0x00	; 0
    53a8:	50 e0       	ldi	r21, 0x00	; 0
    53aa:	e2 0e       	add	r14, r18
    53ac:	f3 1e       	adc	r15, r19
    53ae:	04 1f       	adc	r16, r20
    53b0:	15 1f       	adc	r17, r21
    53b2:	16 95       	lsr	r17
    53b4:	07 95       	ror	r16
    53b6:	f7 94       	ror	r15
    53b8:	e7 94       	ror	r14
    53ba:	27 2d       	mov	r18, r7
    53bc:	23 0d       	add	r18, r3
    53be:	47 2d       	mov	r20, r7
    53c0:	69 2f       	mov	r22, r25
    53c2:	c7 01       	movw	r24, r14
    53c4:	0e 94 de 27 	call	0x4fbc
    53c8:	07 c0       	rjmp	.+14     	; 0x53d8
    53ca:	6f 3f       	cpi	r22, 0xFF	; 255
    53cc:	39 f0       	breq	.+14     	; 0x53dc
    53ce:	26 2d       	mov	r18, r6
    53d0:	49 2f       	mov	r20, r25
    53d2:	c4 01       	movw	r24, r8
    53d4:	0e 94 7a 28 	call	0x50f4
    53d8:	00 97       	sbiw	r24, 0x00	; 0
    53da:	a1 f4       	brne	.+40     	; 0x5404
    53dc:	f5 01       	movw	r30, r10
    53de:	82 81       	ldd	r24, Z+2	; 0x02
    53e0:	93 81       	ldd	r25, Z+3	; 0x03
    53e2:	aa 27       	eor	r26, r26
    53e4:	bb 27       	eor	r27, r27
    53e6:	88 0f       	add	r24, r24
    53e8:	99 1f       	adc	r25, r25
    53ea:	aa 1f       	adc	r26, r26
    53ec:	bb 1f       	adc	r27, r27
    53ee:	92 01       	movw	r18, r4
    53f0:	44 27       	eor	r20, r20
    53f2:	55 27       	eor	r21, r21
    53f4:	82 0f       	add	r24, r18
    53f6:	93 1f       	adc	r25, r19
    53f8:	a4 1f       	adc	r26, r20
    53fa:	b5 1f       	adc	r27, r21
    53fc:	b6 95       	lsr	r27
    53fe:	a7 95       	ror	r26
    5400:	97 95       	ror	r25
    5402:	87 95       	ror	r24
    5404:	f6 01       	movw	r30, r12
    5406:	80 83       	st	Z, r24
    5408:	91 83       	std	Z+1, r25	; 0x01
    540a:	63 94       	inc	r6
    540c:	22 e0       	ldi	r18, 0x02	; 2
    540e:	30 e0       	ldi	r19, 0x00	; 0
    5410:	c2 0e       	add	r12, r18
    5412:	d3 1e       	adc	r13, r19
    5414:	28 96       	adiw	r28, 0x08	; 8
    5416:	48 e0       	ldi	r20, 0x08	; 8
    5418:	50 e0       	ldi	r21, 0x00	; 0
    541a:	44 0e       	add	r4, r20
    541c:	55 1e       	adc	r5, r21
    541e:	67 14       	cp	r6, r7
    5420:	08 f4       	brcc	.+2      	; 0x5424
    5422:	9a cf       	rjmp	.-204    	; 0x5358
    5424:	df 91       	pop	r29
    5426:	cf 91       	pop	r28
    5428:	1f 91       	pop	r17
    542a:	0f 91       	pop	r16
    542c:	ff 90       	pop	r15
    542e:	ef 90       	pop	r14
    5430:	df 90       	pop	r13
    5432:	cf 90       	pop	r12
    5434:	bf 90       	pop	r11
    5436:	af 90       	pop	r10
    5438:	9f 90       	pop	r9
    543a:	8f 90       	pop	r8
    543c:	7f 90       	pop	r7
    543e:	6f 90       	pop	r6
    5440:	5f 90       	pop	r5
    5442:	4f 90       	pop	r4
    5444:	3f 90       	pop	r3
    5446:	08 95       	ret

00005448 <fntable_link_provided_functions>:
    5448:	2f 92       	push	r2
    544a:	3f 92       	push	r3
    544c:	4f 92       	push	r4
    544e:	5f 92       	push	r5
    5450:	6f 92       	push	r6
    5452:	7f 92       	push	r7
    5454:	8f 92       	push	r8
    5456:	9f 92       	push	r9
    5458:	af 92       	push	r10
    545a:	bf 92       	push	r11
    545c:	cf 92       	push	r12
    545e:	df 92       	push	r13
    5460:	ef 92       	push	r14
    5462:	ff 92       	push	r15
    5464:	0f 93       	push	r16
    5466:	1f 93       	push	r17
    5468:	cf 93       	push	r28
    546a:	df 93       	push	r29
    546c:	cd b7       	in	r28, 0x3d	; 61
    546e:	de b7       	in	r29, 0x3e	; 62
    5470:	6c 97       	sbiw	r28, 0x1c	; 28
    5472:	0f b6       	in	r0, 0x3f	; 63
    5474:	f8 94       	cli
    5476:	de bf       	out	0x3e, r29	; 62
    5478:	0f be       	out	0x3f, r0	; 63
    547a:	cd bf       	out	0x3d, r28	; 61
    547c:	89 87       	std	Y+9, r24	; 0x09
    547e:	9a 87       	std	Y+10, r25	; 0x0a
    5480:	6b 87       	std	Y+11, r22	; 0x0b
    5482:	4c 87       	std	Y+12, r20	; 0x0c
    5484:	2d 87       	std	Y+13, r18	; 0x0d
    5486:	0e 94 ee 13 	call	0x27dc
    548a:	8e 87       	std	Y+14, r24	; 0x0e
    548c:	9f 87       	std	Y+15, r25	; 0x0f
    548e:	29 85       	ldd	r18, Y+9	; 0x09
    5490:	3a 85       	ldd	r19, Y+10	; 0x0a
    5492:	c9 01       	movw	r24, r18
    5494:	aa 27       	eor	r26, r26
    5496:	bb 27       	eor	r27, r27
    5498:	88 0f       	add	r24, r24
    549a:	99 1f       	adc	r25, r25
    549c:	aa 1f       	adc	r26, r26
    549e:	bb 1f       	adc	r27, r27
    54a0:	4b 85       	ldd	r20, Y+11	; 0x0b
    54a2:	24 2f       	mov	r18, r20
    54a4:	33 27       	eor	r19, r19
    54a6:	13 e0       	ldi	r17, 0x03	; 3
    54a8:	22 0f       	add	r18, r18
    54aa:	33 1f       	adc	r19, r19
    54ac:	1a 95       	dec	r17
    54ae:	e1 f7       	brne	.-8      	; 0x54a8
    54b0:	2a 5f       	subi	r18, 0xFA	; 250
    54b2:	3f 4f       	sbci	r19, 0xFF	; 255
    54b4:	44 27       	eor	r20, r20
    54b6:	55 27       	eor	r21, r21
    54b8:	82 0f       	add	r24, r18
    54ba:	93 1f       	adc	r25, r19
    54bc:	a4 1f       	adc	r26, r20
    54be:	b5 1f       	adc	r27, r21
    54c0:	ab bf       	out	0x3b, r26	; 59
    54c2:	fc 01       	movw	r30, r24
    54c4:	67 91       	elpm	r22, Z+
    54c6:	69 8b       	std	Y+17, r22	; 0x11
    54c8:	18 8a       	std	Y+16, r1	; 0x10
    54ca:	78 89       	ldd	r23, Y+16	; 0x10
    54cc:	e7 2f       	mov	r30, r23
    54ce:	ff 27       	eor	r31, r31
    54d0:	ee 0f       	add	r30, r30
    54d2:	ff 1f       	adc	r31, r31
    54d4:	8e 85       	ldd	r24, Y+14	; 0x0e
    54d6:	9f 85       	ldd	r25, Y+15	; 0x0f
    54d8:	e8 0f       	add	r30, r24
    54da:	f9 1f       	adc	r31, r25
    54dc:	a0 80       	ld	r10, Z
    54de:	b1 80       	ldd	r11, Z+1	; 0x01
    54e0:	a1 14       	cp	r10, r1
    54e2:	b1 04       	cpc	r11, r1
    54e4:	09 f4       	brne	.+2      	; 0x54e8
    54e6:	50 c1       	rjmp	.+672    	; 0x5788
    54e8:	f5 01       	movw	r30, r10
    54ea:	82 81       	ldd	r24, Z+2	; 0x02
    54ec:	93 81       	ldd	r25, Z+3	; 0x03
    54ee:	aa 27       	eor	r26, r26
    54f0:	bb 27       	eor	r27, r27
    54f2:	88 0f       	add	r24, r24
    54f4:	99 1f       	adc	r25, r25
    54f6:	aa 1f       	adc	r26, r26
    54f8:	bb 1f       	adc	r27, r27
    54fa:	04 96       	adiw	r24, 0x04	; 4
    54fc:	a1 1d       	adc	r26, r1
    54fe:	b1 1d       	adc	r27, r1
    5500:	ab bf       	out	0x3b, r26	; 59
    5502:	fc 01       	movw	r30, r24
    5504:	27 91       	elpm	r18, Z+
    5506:	2a 8b       	std	Y+18, r18	; 0x12
    5508:	1b 8a       	std	Y+19, r1	; 0x13
    550a:	3b 89       	ldd	r19, Y+19	; 0x13
    550c:	32 17       	cp	r19, r18
    550e:	08 f0       	brcs	.+2      	; 0x5512
    5510:	39 c1       	rjmp	.+626    	; 0x5784
    5512:	60 e1       	ldi	r22, 0x10	; 16
    5514:	70 e0       	ldi	r23, 0x00	; 0
    5516:	6f 8b       	std	Y+23, r22	; 0x17
    5518:	78 8f       	std	Y+24, r23	; 0x18
    551a:	69 8f       	std	Y+25, r22	; 0x19
    551c:	7a 8f       	std	Y+26, r23	; 0x1a
    551e:	44 24       	eor	r4, r4
    5520:	55 24       	eor	r5, r5
    5522:	12 01       	movw	r2, r4
    5524:	4b 8e       	std	Y+27, r4	; 0x1b
    5526:	5c 8e       	std	Y+28, r5	; 0x1c
    5528:	f5 01       	movw	r30, r10
    552a:	62 81       	ldd	r22, Z+2	; 0x02
    552c:	73 81       	ldd	r23, Z+3	; 0x03
    552e:	9b 01       	movw	r18, r22
    5530:	44 27       	eor	r20, r20
    5532:	55 27       	eor	r21, r21
    5534:	22 0f       	add	r18, r18
    5536:	33 1f       	adc	r19, r19
    5538:	44 1f       	adc	r20, r20
    553a:	55 1f       	adc	r21, r21
    553c:	86 e1       	ldi	r24, 0x16	; 22
    553e:	90 e0       	ldi	r25, 0x00	; 0
    5540:	48 0e       	add	r4, r24
    5542:	59 1e       	adc	r5, r25
    5544:	c2 01       	movw	r24, r4
    5546:	aa 27       	eor	r26, r26
    5548:	bb 27       	eor	r27, r27
    554a:	ea ee       	ldi	r30, 0xEA	; 234
    554c:	ff ef       	ldi	r31, 0xFF	; 255
    554e:	4e 0e       	add	r4, r30
    5550:	5f 1e       	adc	r5, r31
    5552:	82 0f       	add	r24, r18
    5554:	93 1f       	adc	r25, r19
    5556:	a4 1f       	adc	r26, r20
    5558:	b5 1f       	adc	r27, r21
    555a:	ab bf       	out	0x3b, r26	; 59
    555c:	fc 01       	movw	r30, r24
    555e:	87 91       	elpm	r24, Z+
    5560:	f9 89       	ldd	r31, Y+17	; 0x11
    5562:	8f 17       	cp	r24, r31
    5564:	09 f0       	breq	.+2      	; 0x5568
    5566:	c6 c0       	rjmp	.+396    	; 0x56f4
    5568:	67 e1       	ldi	r22, 0x17	; 23
    556a:	70 e0       	ldi	r23, 0x00	; 0
    556c:	46 0e       	add	r4, r22
    556e:	57 1e       	adc	r5, r23
    5570:	c2 01       	movw	r24, r4
    5572:	aa 27       	eor	r26, r26
    5574:	bb 27       	eor	r27, r27
    5576:	e9 ee       	ldi	r30, 0xE9	; 233
    5578:	ff ef       	ldi	r31, 0xFF	; 255
    557a:	4e 0e       	add	r4, r30
    557c:	5f 1e       	adc	r5, r31
    557e:	28 0f       	add	r18, r24
    5580:	39 1f       	adc	r19, r25
    5582:	4a 1f       	adc	r20, r26
    5584:	5b 1f       	adc	r21, r27
    5586:	4b bf       	out	0x3b, r20	; 59
    5588:	f9 01       	movw	r30, r18
    558a:	87 91       	elpm	r24, Z+
    558c:	2c 85       	ldd	r18, Y+12	; 0x0c
    558e:	4b 85       	ldd	r20, Y+11	; 0x0b
    5590:	68 2f       	mov	r22, r24
    5592:	89 85       	ldd	r24, Y+9	; 0x09
    5594:	9a 85       	ldd	r25, Y+10	; 0x0a
    5596:	0e 94 de 27 	call	0x4fbc
    559a:	3c 01       	movw	r6, r24
    559c:	00 97       	sbiw	r24, 0x00	; 0
    559e:	09 f4       	brne	.+2      	; 0x55a2
    55a0:	d1 c0       	rjmp	.+418    	; 0x5744
    55a2:	f5 01       	movw	r30, r10
    55a4:	06 80       	ldd	r0, Z+6	; 0x06
    55a6:	f7 81       	ldd	r31, Z+7	; 0x07
    55a8:	e0 2d       	mov	r30, r0
    55aa:	ed 8b       	std	Y+21, r30	; 0x15
    55ac:	fe 8b       	std	Y+22, r31	; 0x16
    55ae:	7c 01       	movw	r14, r24
    55b0:	00 27       	eor	r16, r16
    55b2:	11 27       	eor	r17, r17
    55b4:	ee 0c       	add	r14, r14
    55b6:	ff 1c       	adc	r15, r15
    55b8:	00 1f       	adc	r16, r16
    55ba:	11 1f       	adc	r17, r17
    55bc:	4e 01       	movw	r8, r28
    55be:	08 94       	sec
    55c0:	81 1c       	adc	r8, r1
    55c2:	91 1c       	adc	r9, r1
    55c4:	6b 8d       	ldd	r22, Y+27	; 0x1b
    55c6:	7c 8d       	ldd	r23, Y+28	; 0x1c
    55c8:	6e 5e       	subi	r22, 0xEE	; 238
    55ca:	7f 4f       	sbci	r23, 0xFF	; 255
    55cc:	cc 24       	eor	r12, r12
    55ce:	dd 24       	eor	r13, r13
    55d0:	f3 e0       	ldi	r31, 0x03	; 3
    55d2:	fc 8b       	std	Y+20, r31	; 0x14
    55d4:	f5 01       	movw	r30, r10
    55d6:	82 81       	ldd	r24, Z+2	; 0x02
    55d8:	93 81       	ldd	r25, Z+3	; 0x03
    55da:	aa 27       	eor	r26, r26
    55dc:	bb 27       	eor	r27, r27
    55de:	88 0f       	add	r24, r24
    55e0:	99 1f       	adc	r25, r25
    55e2:	aa 1f       	adc	r26, r26
    55e4:	bb 1f       	adc	r27, r27
    55e6:	9b 01       	movw	r18, r22
    55e8:	44 27       	eor	r20, r20
    55ea:	55 27       	eor	r21, r21
    55ec:	82 0f       	add	r24, r18
    55ee:	93 1f       	adc	r25, r19
    55f0:	a4 1f       	adc	r26, r20
    55f2:	b5 1f       	adc	r27, r21
    55f4:	ab bf       	out	0x3b, r26	; 59
    55f6:	fc 01       	movw	r30, r24
    55f8:	87 91       	elpm	r24, Z+
    55fa:	d4 01       	movw	r26, r8
    55fc:	8c 93       	st	X, r24
    55fe:	e2 e0       	ldi	r30, 0x02	; 2
    5600:	f0 e0       	ldi	r31, 0x00	; 0
    5602:	ce 0e       	add	r12, r30
    5604:	df 1e       	adc	r13, r31
    5606:	c6 01       	movw	r24, r12
    5608:	aa 27       	eor	r26, r26
    560a:	bb 27       	eor	r27, r27
    560c:	8e 0d       	add	r24, r14
    560e:	9f 1d       	adc	r25, r15
    5610:	a0 1f       	adc	r26, r16
    5612:	b1 1f       	adc	r27, r17
    5614:	ab bf       	out	0x3b, r26	; 59
    5616:	fc 01       	movw	r30, r24
    5618:	87 91       	elpm	r24, Z+
    561a:	f4 01       	movw	r30, r8
    561c:	84 83       	std	Z+4, r24	; 0x04
    561e:	fc 89       	ldd	r31, Y+20	; 0x14
    5620:	f1 50       	subi	r31, 0x01	; 1
    5622:	fc 8b       	std	Y+20, r31	; 0x14
    5624:	08 94       	sec
    5626:	c1 08       	sbc	r12, r1
    5628:	d1 08       	sbc	r13, r1
    562a:	6f 5f       	subi	r22, 0xFF	; 255
    562c:	7f 4f       	sbci	r23, 0xFF	; 255
    562e:	08 94       	sec
    5630:	81 1c       	adc	r8, r1
    5632:	91 1c       	adc	r9, r1
    5634:	f7 ff       	sbrs	r31, 7
    5636:	ce cf       	rjmp	.-100    	; 0x55d4
    5638:	2d 85       	ldd	r18, Y+13	; 0x0d
    563a:	22 23       	and	r18, r18
    563c:	a1 f0       	breq	.+40     	; 0x5666
    563e:	be 01       	movw	r22, r28
    5640:	6f 5f       	subi	r22, 0xFF	; 255
    5642:	7f 4f       	sbci	r23, 0xFF	; 255
    5644:	ce 01       	movw	r24, r28
    5646:	05 96       	adiw	r24, 0x05	; 5
    5648:	0e 94 5d 28 	call	0x50ba
    564c:	88 23       	and	r24, r24
    564e:	09 f4       	brne	.+2      	; 0x5652
    5650:	79 c0       	rjmp	.+242    	; 0x5744
    5652:	f1 01       	movw	r30, r2
    5654:	e2 0d       	add	r30, r2
    5656:	f3 1d       	adc	r31, r3
    5658:	6d 89       	ldd	r22, Y+21	; 0x15
    565a:	7e 89       	ldd	r23, Y+22	; 0x16
    565c:	e6 0f       	add	r30, r22
    565e:	f7 1f       	adc	r31, r23
    5660:	60 82       	st	Z, r6
    5662:	71 82       	std	Z+1, r7	; 0x01
    5664:	6f c0       	rjmp	.+222    	; 0x5744
    5666:	81 01       	movw	r16, r2
    5668:	02 0d       	add	r16, r2
    566a:	13 1d       	adc	r17, r3
    566c:	8d 89       	ldd	r24, Y+21	; 0x15
    566e:	9e 89       	ldd	r25, Y+22	; 0x16
    5670:	08 0f       	add	r16, r24
    5672:	19 1f       	adc	r17, r25
    5674:	f5 01       	movw	r30, r10
    5676:	82 81       	ldd	r24, Z+2	; 0x02
    5678:	93 81       	ldd	r25, Z+3	; 0x03
    567a:	aa 27       	eor	r26, r26
    567c:	bb 27       	eor	r27, r27
    567e:	88 0f       	add	r24, r24
    5680:	99 1f       	adc	r25, r25
    5682:	aa 1f       	adc	r26, r26
    5684:	bb 1f       	adc	r27, r27
    5686:	69 8d       	ldd	r22, Y+25	; 0x19
    5688:	7a 8d       	ldd	r23, Y+26	; 0x1a
    568a:	9b 01       	movw	r18, r22
    568c:	44 27       	eor	r20, r20
    568e:	55 27       	eor	r21, r21
    5690:	82 0f       	add	r24, r18
    5692:	93 1f       	adc	r25, r19
    5694:	a4 1f       	adc	r26, r20
    5696:	b5 1f       	adc	r27, r21
    5698:	b6 95       	lsr	r27
    569a:	a7 95       	ror	r26
    569c:	97 95       	ror	r25
    569e:	87 95       	ror	r24
    56a0:	f8 01       	movw	r30, r16
    56a2:	80 83       	st	Z, r24
    56a4:	91 83       	std	Z+1, r25	; 0x01
    56a6:	4e c0       	rjmp	.+156    	; 0x5744
    56a8:	f1 01       	movw	r30, r2
    56aa:	e2 0d       	add	r30, r2
    56ac:	f3 1d       	adc	r31, r3
    56ae:	e4 0f       	add	r30, r20
    56b0:	f5 1f       	adc	r31, r21
    56b2:	cb 01       	movw	r24, r22
    56b4:	aa 27       	eor	r26, r26
    56b6:	bb 27       	eor	r27, r27
    56b8:	88 0f       	add	r24, r24
    56ba:	99 1f       	adc	r25, r25
    56bc:	aa 1f       	adc	r26, r26
    56be:	bb 1f       	adc	r27, r27
    56c0:	6f 89       	ldd	r22, Y+23	; 0x17
    56c2:	78 8d       	ldd	r23, Y+24	; 0x18
    56c4:	9b 01       	movw	r18, r22
    56c6:	44 27       	eor	r20, r20
    56c8:	55 27       	eor	r21, r21
    56ca:	82 0f       	add	r24, r18
    56cc:	93 1f       	adc	r25, r19
    56ce:	a4 1f       	adc	r26, r20
    56d0:	b5 1f       	adc	r27, r21
    56d2:	b6 95       	lsr	r27
    56d4:	a7 95       	ror	r26
    56d6:	97 95       	ror	r25
    56d8:	87 95       	ror	r24
    56da:	80 83       	st	Z, r24
    56dc:	91 83       	std	Z+1, r25	; 0x01
    56de:	ee 24       	eor	r14, r14
    56e0:	ff 24       	eor	r15, r15
    56e2:	87 01       	movw	r16, r14
    56e4:	2b 89       	ldd	r18, Y+19	; 0x13
    56e6:	4a e0       	ldi	r20, 0x0A	; 10
    56e8:	6c e0       	ldi	r22, 0x0C	; 12
    56ea:	f5 01       	movw	r30, r10
    56ec:	84 81       	ldd	r24, Z+4	; 0x04
    56ee:	0e 94 50 18 	call	0x30a0
    56f2:	28 c0       	rjmp	.+80     	; 0x5744
    56f4:	8f 3f       	cpi	r24, 0xFF	; 255
    56f6:	31 f5       	brne	.+76     	; 0x5744
    56f8:	fd 85       	ldd	r31, Y+13	; 0x0d
    56fa:	ff 23       	and	r31, r31
    56fc:	19 f5       	brne	.+70     	; 0x5744
    56fe:	f5 01       	movw	r30, r10
    5700:	46 81       	ldd	r20, Z+6	; 0x06
    5702:	57 81       	ldd	r21, Z+7	; 0x07
    5704:	f1 01       	movw	r30, r2
    5706:	e2 0d       	add	r30, r2
    5708:	f3 1d       	adc	r31, r3
    570a:	e4 0f       	add	r30, r20
    570c:	f5 1f       	adc	r31, r21
    570e:	01 90       	ld	r0, Z+
    5710:	f0 81       	ld	r31, Z
    5712:	e0 2d       	mov	r30, r0
    5714:	2b 85       	ldd	r18, Y+11	; 0x0b
    5716:	3c 85       	ldd	r19, Y+12	; 0x0c
    5718:	23 17       	cp	r18, r19
    571a:	a0 f4       	brcc	.+40     	; 0x5744
    571c:	82 2f       	mov	r24, r18
    571e:	99 27       	eor	r25, r25
    5720:	a3 e0       	ldi	r26, 0x03	; 3
    5722:	88 0f       	add	r24, r24
    5724:	99 1f       	adc	r25, r25
    5726:	aa 95       	dec	r26
    5728:	e1 f7       	brne	.-8      	; 0x5722
    572a:	a9 85       	ldd	r26, Y+9	; 0x09
    572c:	ba 85       	ldd	r27, Y+10	; 0x0a
    572e:	8a 0f       	add	r24, r26
    5730:	9b 1f       	adc	r25, r27
    5732:	8e 17       	cp	r24, r30
    5734:	9f 07       	cpc	r25, r31
    5736:	09 f4       	brne	.+2      	; 0x573a
    5738:	b7 cf       	rjmp	.-146    	; 0x56a8
    573a:	2f 5f       	subi	r18, 0xFF	; 255
    573c:	08 96       	adiw	r24, 0x08	; 8
    573e:	bc 85       	ldd	r27, Y+12	; 0x0c
    5740:	2b 17       	cp	r18, r27
    5742:	b8 f3       	brcs	.-18     	; 0x5732
    5744:	eb 89       	ldd	r30, Y+19	; 0x13
    5746:	ef 5f       	subi	r30, 0xFF	; 255
    5748:	eb 8b       	std	Y+19, r30	; 0x13
    574a:	08 94       	sec
    574c:	21 1c       	adc	r2, r1
    574e:	31 1c       	adc	r3, r1
    5750:	2b 8d       	ldd	r18, Y+27	; 0x1b
    5752:	3c 8d       	ldd	r19, Y+28	; 0x1c
    5754:	28 5f       	subi	r18, 0xF8	; 248
    5756:	3f 4f       	sbci	r19, 0xFF	; 255
    5758:	2b 8f       	std	Y+27, r18	; 0x1b
    575a:	3c 8f       	std	Y+28, r19	; 0x1c
    575c:	68 e0       	ldi	r22, 0x08	; 8
    575e:	70 e0       	ldi	r23, 0x00	; 0
    5760:	46 0e       	add	r4, r22
    5762:	57 1e       	adc	r5, r23
    5764:	89 8d       	ldd	r24, Y+25	; 0x19
    5766:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5768:	86 0f       	add	r24, r22
    576a:	97 1f       	adc	r25, r23
    576c:	89 8f       	std	Y+25, r24	; 0x19
    576e:	9a 8f       	std	Y+26, r25	; 0x1a
    5770:	af 89       	ldd	r26, Y+23	; 0x17
    5772:	b8 8d       	ldd	r27, Y+24	; 0x18
    5774:	a6 0f       	add	r26, r22
    5776:	b7 1f       	adc	r27, r23
    5778:	af 8b       	std	Y+23, r26	; 0x17
    577a:	b8 8f       	std	Y+24, r27	; 0x18
    577c:	ba 89       	ldd	r27, Y+18	; 0x12
    577e:	eb 17       	cp	r30, r27
    5780:	08 f4       	brcc	.+2      	; 0x5784
    5782:	d2 ce       	rjmp	.-604    	; 0x5528
    5784:	f5 01       	movw	r30, r10
    5786:	aa ce       	rjmp	.-684    	; 0x54dc
    5788:	f8 89       	ldd	r31, Y+16	; 0x10
    578a:	ff 5f       	subi	r31, 0xFF	; 255
    578c:	f8 8b       	std	Y+16, r31	; 0x10
    578e:	f4 30       	cpi	r31, 0x04	; 4
    5790:	08 f4       	brcc	.+2      	; 0x5794
    5792:	9b ce       	rjmp	.-714    	; 0x54ca
    5794:	6c 96       	adiw	r28, 0x1c	; 28
    5796:	0f b6       	in	r0, 0x3f	; 63
    5798:	f8 94       	cli
    579a:	de bf       	out	0x3e, r29	; 62
    579c:	0f be       	out	0x3f, r0	; 63
    579e:	cd bf       	out	0x3d, r28	; 61
    57a0:	df 91       	pop	r29
    57a2:	cf 91       	pop	r28
    57a4:	1f 91       	pop	r17
    57a6:	0f 91       	pop	r16
    57a8:	ff 90       	pop	r15
    57aa:	ef 90       	pop	r14
    57ac:	df 90       	pop	r13
    57ae:	cf 90       	pop	r12
    57b0:	bf 90       	pop	r11
    57b2:	af 90       	pop	r10
    57b4:	9f 90       	pop	r9
    57b6:	8f 90       	pop	r8
    57b8:	7f 90       	pop	r7
    57ba:	6f 90       	pop	r6
    57bc:	5f 90       	pop	r5
    57be:	4f 90       	pop	r4
    57c0:	3f 90       	pop	r3
    57c2:	2f 90       	pop	r2
    57c4:	08 95       	ret

000057c6 <fntable_link>:
    57c6:	0f 93       	push	r16
    57c8:	1f 93       	push	r17
    57ca:	8c 01       	movw	r16, r24
    57cc:	0e 94 79 29 	call	0x52f2
    57d0:	f8 01       	movw	r30, r16
    57d2:	82 81       	ldd	r24, Z+2	; 0x02
    57d4:	93 81       	ldd	r25, Z+3	; 0x03
    57d6:	aa 27       	eor	r26, r26
    57d8:	bb 27       	eor	r27, r27
    57da:	88 0f       	add	r24, r24
    57dc:	99 1f       	adc	r25, r25
    57de:	aa 1f       	adc	r26, r26
    57e0:	bb 1f       	adc	r27, r27
    57e2:	05 96       	adiw	r24, 0x05	; 5
    57e4:	a1 1d       	adc	r26, r1
    57e6:	b1 1d       	adc	r27, r1
    57e8:	ab bf       	out	0x3b, r26	; 59
    57ea:	fc 01       	movw	r30, r24
    57ec:	47 91       	elpm	r20, Z+
    57ee:	01 97       	sbiw	r24, 0x01	; 1
    57f0:	a1 09       	sbc	r26, r1
    57f2:	b1 09       	sbc	r27, r1
    57f4:	ab bf       	out	0x3b, r26	; 59
    57f6:	fc 01       	movw	r30, r24
    57f8:	67 91       	elpm	r22, Z+
    57fa:	04 97       	sbiw	r24, 0x04	; 4
    57fc:	a1 09       	sbc	r26, r1
    57fe:	b1 09       	sbc	r27, r1
    5800:	44 23       	and	r20, r20
    5802:	59 f0       	breq	.+22     	; 0x581a
    5804:	46 0f       	add	r20, r22
    5806:	40 96       	adiw	r24, 0x10	; 16
    5808:	a1 1d       	adc	r26, r1
    580a:	b1 1d       	adc	r27, r1
    580c:	b6 95       	lsr	r27
    580e:	a7 95       	ror	r26
    5810:	97 95       	ror	r25
    5812:	87 95       	ror	r24
    5814:	21 e0       	ldi	r18, 0x01	; 1
    5816:	0e 94 24 2a 	call	0x5448
    581a:	80 e0       	ldi	r24, 0x00	; 0
    581c:	90 e0       	ldi	r25, 0x00	; 0
    581e:	1f 91       	pop	r17
    5820:	0f 91       	pop	r16
    5822:	08 95       	ret

00005824 <fntable_remove_all>:
    5824:	af 92       	push	r10
    5826:	bf 92       	push	r11
    5828:	df 92       	push	r13
    582a:	ef 92       	push	r14
    582c:	ff 92       	push	r15
    582e:	0f 93       	push	r16
    5830:	1f 93       	push	r17
    5832:	cf 93       	push	r28
    5834:	df 93       	push	r29
    5836:	ec 01       	movw	r28, r24
    5838:	ee 80       	ldd	r14, Y+6	; 0x06
    583a:	ff 80       	ldd	r15, Y+7	; 0x07
    583c:	8a 81       	ldd	r24, Y+2	; 0x02
    583e:	9b 81       	ldd	r25, Y+3	; 0x03
    5840:	aa 27       	eor	r26, r26
    5842:	bb 27       	eor	r27, r27
    5844:	88 0f       	add	r24, r24
    5846:	99 1f       	adc	r25, r25
    5848:	aa 1f       	adc	r26, r26
    584a:	bb 1f       	adc	r27, r27
    584c:	05 96       	adiw	r24, 0x05	; 5
    584e:	a1 1d       	adc	r26, r1
    5850:	b1 1d       	adc	r27, r1
    5852:	ab bf       	out	0x3b, r26	; 59
    5854:	fc 01       	movw	r30, r24
    5856:	47 91       	elpm	r20, Z+
    5858:	05 97       	sbiw	r24, 0x05	; 5
    585a:	a1 09       	sbc	r26, r1
    585c:	b1 09       	sbc	r27, r1
    585e:	44 23       	and	r20, r20
    5860:	09 f4       	brne	.+2      	; 0x5864
    5862:	34 c0       	rjmp	.+104    	; 0x58cc
    5864:	04 96       	adiw	r24, 0x04	; 4
    5866:	a1 1d       	adc	r26, r1
    5868:	b1 1d       	adc	r27, r1
    586a:	ab bf       	out	0x3b, r26	; 59
    586c:	fc 01       	movw	r30, r24
    586e:	17 91       	elpm	r17, Z+
    5870:	41 0f       	add	r20, r17
    5872:	0c 96       	adiw	r24, 0x0c	; 12
    5874:	a1 1d       	adc	r26, r1
    5876:	b1 1d       	adc	r27, r1
    5878:	b6 95       	lsr	r27
    587a:	a7 95       	ror	r26
    587c:	97 95       	ror	r25
    587e:	87 95       	ror	r24
    5880:	20 e0       	ldi	r18, 0x00	; 0
    5882:	61 2f       	mov	r22, r17
    5884:	0e 94 24 2a 	call	0x5448
    5888:	11 23       	and	r17, r17
    588a:	01 f1       	breq	.+64     	; 0x58cc
    588c:	d1 2e       	mov	r13, r17
    588e:	57 01       	movw	r10, r14
    5890:	f5 01       	movw	r30, r10
    5892:	81 91       	ld	r24, Z+
    5894:	91 91       	ld	r25, Z+
    5896:	5f 01       	movw	r10, r30
    5898:	aa 27       	eor	r26, r26
    589a:	bb 27       	eor	r27, r27
    589c:	88 0f       	add	r24, r24
    589e:	99 1f       	adc	r25, r25
    58a0:	aa 1f       	adc	r26, r26
    58a2:	bb 1f       	adc	r27, r27
    58a4:	06 96       	adiw	r24, 0x06	; 6
    58a6:	a1 1d       	adc	r26, r1
    58a8:	b1 1d       	adc	r27, r1
    58aa:	ab bf       	out	0x3b, r26	; 59
    58ac:	fc 01       	movw	r30, r24
    58ae:	87 91       	elpm	r24, Z+
    58b0:	2c 81       	ldd	r18, Y+4	; 0x04
    58b2:	82 17       	cp	r24, r18
    58b4:	49 f0       	breq	.+18     	; 0x58c8
    58b6:	8f 3f       	cpi	r24, 0xFF	; 255
    58b8:	39 f0       	breq	.+14     	; 0x58c8
    58ba:	ee 24       	eor	r14, r14
    58bc:	ff 24       	eor	r15, r15
    58be:	87 01       	movw	r16, r14
    58c0:	4a e0       	ldi	r20, 0x0A	; 10
    58c2:	6c e0       	ldi	r22, 0x0C	; 12
    58c4:	0e 94 50 18 	call	0x30a0
    58c8:	da 94       	dec	r13
    58ca:	11 f7       	brne	.-60     	; 0x5890
    58cc:	80 e0       	ldi	r24, 0x00	; 0
    58ce:	90 e0       	ldi	r25, 0x00	; 0
    58d0:	df 91       	pop	r29
    58d2:	cf 91       	pop	r28
    58d4:	1f 91       	pop	r17
    58d6:	0f 91       	pop	r16
    58d8:	ff 90       	pop	r15
    58da:	ef 90       	pop	r14
    58dc:	df 90       	pop	r13
    58de:	bf 90       	pop	r11
    58e0:	af 90       	pop	r10
    58e2:	08 95       	ret

000058e4 <ker_get_func_ptr>:
}

dummy_func ker_get_func_ptr(func_cb_ptr p, sos_pid_t *prev)
{
    58e4:	0f 93       	push	r16
    58e6:	1f 93       	push	r17
    58e8:	cf 93       	push	r28
    58ea:	df 93       	push	r29
    58ec:	8c 01       	movw	r16, r24
    58ee:	eb 01       	movw	r28, r22
	if( prev != NULL ) {
    58f0:	67 2b       	or	r22, r23
    58f2:	81 f0       	breq	.+32     	; 0x5914
		*prev = 
			ker_set_current_pid(sos_read_header_byte(p, offsetof(func_cb_t, pid)));
    58f4:	c8 01       	movw	r24, r16
    58f6:	aa 27       	eor	r26, r26
    58f8:	bb 27       	eor	r27, r27
    58fa:	88 0f       	add	r24, r24
    58fc:	99 1f       	adc	r25, r25
    58fe:	aa 1f       	adc	r26, r26
    5900:	bb 1f       	adc	r27, r27
    5902:	06 96       	adiw	r24, 0x06	; 6
    5904:	a1 1d       	adc	r26, r1
    5906:	b1 1d       	adc	r27, r1
    5908:	ab bf       	out	0x3b, r26	; 59
    590a:	fc 01       	movw	r30, r24
    590c:	87 91       	elpm	r24, Z+
    590e:	0e 94 d9 13 	call	0x27b2
    5912:	88 83       	st	Y, r24
	}
	
	return (dummy_func)sos_read_header_ptr( p, offsetof(func_cb_t, ptr));
    5914:	c8 01       	movw	r24, r16
    5916:	aa 27       	eor	r26, r26
    5918:	bb 27       	eor	r27, r27
    591a:	88 0f       	add	r24, r24
    591c:	99 1f       	adc	r25, r25
    591e:	aa 1f       	adc	r26, r26
    5920:	bb 1f       	adc	r27, r27
}
    5922:	ab bf       	out	0x3b, r26	; 59
    5924:	fc 01       	movw	r30, r24
    5926:	87 91       	elpm	r24, Z+
    5928:	96 91       	elpm	r25, Z
    592a:	df 91       	pop	r29
    592c:	cf 91       	pop	r28
    592e:	1f 91       	pop	r17
    5930:	0f 91       	pop	r16
    5932:	08 95       	ret

00005934 <ker_sys_enter_func>:

/**
 * Call to get the function pointer in the control block
 * It also sets the current pid to the function destination
 *
 */
dummy_func ker_sys_enter_func( func_cb_ptr p )
{
    5934:	ff 92       	push	r15
    5936:	0f 93       	push	r16
    5938:	1f 93       	push	r17
    593a:	8c 01       	movw	r16, r24
	HAS_CRITICAL_SECTION;

	ENTER_CRITICAL_SECTION();
    593c:	ff b6       	in	r15, 0x3f	; 63
    593e:	f8 94       	cli

	*pid_sp =
		ker_set_current_pid(sos_read_header_byte(p, offsetof(func_cb_t, pid)));
    5940:	c8 01       	movw	r24, r16
    5942:	aa 27       	eor	r26, r26
    5944:	bb 27       	eor	r27, r27
    5946:	88 0f       	add	r24, r24
    5948:	99 1f       	adc	r25, r25
    594a:	aa 1f       	adc	r26, r26
    594c:	bb 1f       	adc	r27, r27
    594e:	06 96       	adiw	r24, 0x06	; 6
    5950:	a1 1d       	adc	r26, r1
    5952:	b1 1d       	adc	r27, r1
    5954:	ab bf       	out	0x3b, r26	; 59
    5956:	fc 01       	movw	r30, r24
    5958:	87 91       	elpm	r24, Z+
    595a:	0e 94 d9 13 	call	0x27b2
    595e:	e0 91 ee 0b 	lds	r30, 0x0BEE
    5962:	f0 91 ef 0b 	lds	r31, 0x0BEF
    5966:	80 83       	st	Z, r24

	pid_sp++;
    5968:	80 91 ee 0b 	lds	r24, 0x0BEE
    596c:	90 91 ef 0b 	lds	r25, 0x0BEF
    5970:	01 96       	adiw	r24, 0x01	; 1
    5972:	90 93 ef 0b 	sts	0x0BEF, r25
    5976:	80 93 ee 0b 	sts	0x0BEE, r24
	LEAVE_CRITICAL_SECTION();
    597a:	ff be       	out	0x3f, r15	; 63

	return (dummy_func)sos_read_header_ptr( p, offsetof(func_cb_t, ptr));
    597c:	c8 01       	movw	r24, r16
    597e:	aa 27       	eor	r26, r26
    5980:	bb 27       	eor	r27, r27
    5982:	88 0f       	add	r24, r24
    5984:	99 1f       	adc	r25, r25
    5986:	aa 1f       	adc	r26, r26
    5988:	bb 1f       	adc	r27, r27
}                                                               
    598a:	ab bf       	out	0x3b, r26	; 59
    598c:	fc 01       	movw	r30, r24
    598e:	87 91       	elpm	r24, Z+
    5990:	96 91       	elpm	r25, Z
    5992:	1f 91       	pop	r17
    5994:	0f 91       	pop	r16
    5996:	ff 90       	pop	r15
    5998:	08 95       	ret

0000599a <ker_sys_leave_func>:

/**                                                             
 * Pop current_pid from the stack when func has finished execution
 */                                                             
void ker_sys_leave_func( void )                                 
{                                                               
    599a:	1f 93       	push	r17
	HAS_CRITICAL_SECTION;                                       

	ENTER_CRITICAL_SECTION();                                   
    599c:	1f b7       	in	r17, 0x3f	; 63
    599e:	f8 94       	cli
	pid_sp--;                                                   
    59a0:	e0 91 ee 0b 	lds	r30, 0x0BEE
    59a4:	f0 91 ef 0b 	lds	r31, 0x0BEF
    59a8:	31 97       	sbiw	r30, 0x01	; 1
    59aa:	f0 93 ef 0b 	sts	0x0BEF, r31
    59ae:	e0 93 ee 0b 	sts	0x0BEE, r30
	ker_set_current_pid( *pid_sp );                             
    59b2:	80 81       	ld	r24, Z
    59b4:	0e 94 d9 13 	call	0x27b2
	LEAVE_CRITICAL_SECTION();                                   
    59b8:	1f bf       	out	0x3f, r17	; 63
    59ba:	1f 91       	pop	r17
    59bc:	08 95       	ret

000059be <ker_sys_fntable_subscribe>:
}                    

int8_t ker_sys_fntable_subscribe( sos_pid_t pub_pid, uint8_t fid, uint8_t table_index ) 
{
    59be:	ff 92       	push	r15
    59c0:	0f 93       	push	r16
    59c2:	1f 93       	push	r17
    59c4:	f8 2e       	mov	r15, r24
    59c6:	06 2f       	mov	r16, r22
    59c8:	14 2f       	mov	r17, r20
	sos_pid_t my_id = ker_get_current_pid();
    59ca:	0e 94 e2 13 	call	0x27c4

	return ker_fntable_subscribe( my_id, pub_pid, fid, table_index );
    59ce:	21 2f       	mov	r18, r17
    59d0:	40 2f       	mov	r20, r16
    59d2:	6f 2d       	mov	r22, r15
    59d4:	0e 94 26 29 	call	0x524c
}
    59d8:	99 27       	eor	r25, r25
    59da:	87 fd       	sbrc	r24, 7
    59dc:	90 95       	com	r25
    59de:	1f 91       	pop	r17
    59e0:	0f 91       	pop	r16
    59e2:	ff 90       	pop	r15
    59e4:	08 95       	ret

000059e6 <timer_init>:
/**
 * @brief Initialize the timer unit
 */
void timer_init(void)
{
    59e6:	0f 93       	push	r16
	uint8_t i;
  list_init(&deltaq);
    59e8:	8c e6       	ldi	r24, 0x6C	; 108
    59ea:	9a e0       	ldi	r25, 0x0A	; 10
    59ec:	0e 94 72 35 	call	0x6ae4
  list_init(&timer_pool);
    59f0:	80 e7       	ldi	r24, 0x70	; 112
    59f2:	9a e0       	ldi	r25, 0x0A	; 10
    59f4:	0e 94 72 35 	call	0x6ae4
  list_init(&prealloc_timer_pool);
    59f8:	84 e7       	ldi	r24, 0x74	; 116
    59fa:	9a e0       	ldi	r25, 0x0A	; 10
    59fc:	0e 94 72 35 	call	0x6ae4
  list_init(&periodic_pool);
    5a00:	88 e7       	ldi	r24, 0x78	; 120
    5a02:	9a e0       	ldi	r25, 0x0A	; 10
    5a04:	0e 94 72 35 	call	0x6ae4
    5a08:	20 e0       	ldi	r18, 0x00	; 0
    5a0a:	30 e0       	ldi	r19, 0x00	; 0
    5a0c:	a9 01       	movw	r20, r18
    5a0e:	83 e0       	ldi	r24, 0x03	; 3

  for(i = 0; i < MAX_REALTIME_CLOCK; i++) {
	realtime[i].f = NULL;  
    5a10:	f9 01       	movw	r30, r18
    5a12:	e4 0f       	add	r30, r20
    5a14:	f5 1f       	adc	r31, r21
    5a16:	e4 58       	subi	r30, 0x84	; 132
    5a18:	f5 4f       	sbci	r31, 0xF5	; 245
    5a1a:	14 82       	std	Z+4, r1	; 0x04
    5a1c:	15 82       	std	Z+5, r1	; 0x05
    5a1e:	81 50       	subi	r24, 0x01	; 1
    5a20:	4f 5f       	subi	r20, 0xFF	; 255
    5a22:	5f 4f       	sbci	r21, 0xFF	; 255
    5a24:	2b 5f       	subi	r18, 0xFB	; 251
    5a26:	3f 4f       	sbci	r19, 0xFF	; 255
    5a28:	87 ff       	sbrs	r24, 7
    5a2a:	f2 cf       	rjmp	.-28     	; 0x5a10
    5a2c:	84 e0       	ldi	r24, 0x04	; 4
  }
  
  ker_slab_init( TIMER_PID, &timer_slab, sizeof(sos_timer_t), 4, SLAB_LONGTERM );
    5a2e:	00 e8       	ldi	r16, 0x80	; 128
    5a30:	28 2f       	mov	r18, r24
    5a32:	40 e1       	ldi	r20, 0x10	; 16
    5a34:	64 e9       	ldi	r22, 0x94	; 148
    5a36:	7a e0       	ldi	r23, 0x0A	; 10
    5a38:	0e 94 3c 3d 	call	0x7a78
    5a3c:	0f 91       	pop	r16
    5a3e:	08 95       	ret

00005a40 <timer_remove_timer>:
}


/**
 * @brief Pre-allocate timers for a module at load time
 */
int8_t timer_preallocate(sos_pid_t pid, uint8_t num_timers)
{
   // We have already checked if num_timer > 0 and pid is not NULL_PID

  uint8_t i, j;
  sos_timer_t* tt[MAX_PRE_ALLOCATED_TIMERS];
   
  //! We cannot allow a single module to pre allocate a lot of timers
  if (num_timers > MAX_PRE_ALLOCATED_TIMERS)
	return -EINVAL;
  
  //! First try to safely allocate memory blocks for all the pre-allocated timers
  for (i = 0; i < num_timers; i++){
	tt[i] = (sos_timer_t*)ker_slab_alloc(&timer_slab, TIMER_PID);
	if (tt[i] == NULL){
	  for (j = 0; j < i; j++){
		ker_slab_free(&timer_slab, tt[j]);
	  }
	  return -ENOMEM;
	}   
  }
  
   //! If we get here then we have all the memory allocated
   //! Now initialize all the data structures and just add them to the timer pool
  for (i = 0; i < num_timers; i++){
	timer_pre_alloc_block_init(tt[i], pid);
  }
  
  return SOS_OK;
}

/**
 * @brief remove timers for a particular pid
 */
int8_t timer_remove_all(sos_pid_t pid)
{
  list_link_t *link;
  
  for(link = deltaq.l_next;
	  link != (&deltaq); link = link->l_next) {
	sos_timer_t *h = (sos_timer_t*)link;         
	if(h->pid == pid) {
	  link = link->l_prev;
	  timer_remove_timer(h);
	  ker_slab_free( &timer_slab, h );
	  //	break; Ram - Why are we breaking from this loop ?
	}
  }
	
  for (link = timer_pool.l_next; link != (&timer_pool); link = link->l_next){
	sos_timer_t *h = (sos_timer_t*)link;
	if (h->pid == pid){
	  link = link->l_prev;
	  list_remove((list_link_t*)h);
	  ker_slab_free(&timer_slab,h);
	}
  }

  for (link = prealloc_timer_pool.l_next; link != (&prealloc_timer_pool); link = link->l_next){
	sos_timer_t *h = (sos_timer_t*)link;
	if (h->pid == pid){
	  link = link->l_prev;
	  list_remove((list_link_t*)h);
	  ker_slab_free(&timer_slab,h);
	}
  }

  for (link = periodic_pool.l_next; link != (&periodic_pool); link = link->l_next){
	sos_timer_t *h = (sos_timer_t*)link;
	if (h->pid == pid){
	  link = link->l_prev;
	  list_remove((list_link_t*)h);
	  ker_slab_free(&timer_slab,h);
	}
  }

  return SOS_OK;
}


//------------------------------------------------------------------------
// STATIC FUNCTIONS
//------------------------------------------------------------------------

/**
 * @brief Initialize the pre-allocated timer blocks
 */ 
static void timer_pre_alloc_block_init(sos_timer_t *h, sos_pid_t pid)
{
   h->pid = pid;                  //! Indicate ownership of a timer block
   h->flag = TIMER_PRE_ALLOCATED; //! Pre-allocated timer block
   list_insert_tail(&prealloc_timer_pool, (list_link_t*)h);
}

static void timer_set_hw_interval(int32_t cnt)
{
	if( cnt < TIMER_MIN_INTERVAL ) {
		DEBUG("set hw top to %d\n", TIMER_MIN_INTERVAL );
		timer_setInterval(TIMER_MIN_INTERVAL);
	} else if( cnt > MAX_SLEEP_INTERVAL ) {
		DEBUG("set hw top to %d\n", MAX_SLEEP_INTERVAL);
		timer_setInterval(MAX_SLEEP_INTERVAL);
	} else {
		DEBUG("set hw top to %d\n", cnt);
		timer_setInterval((uint8_t)cnt);
	}
}

static void timer_set_hw_top(int32_t cnt, bool update_outstanding)
{
	uint8_t hw_cnt = timer_hardware_get_counter();
	uint16_t rt_cnt;
	HAS_CRITICAL_SECTION;

	ENTER_CRITICAL_SECTION();
	if( update_outstanding ) {
		outstanding_ticks += hw_cnt;
	} else {
		outstanding_ticks = 0;
	}
	if( num_realtime_clock > 0 ) {
		rt_cnt = timer_update_realtime_clock(hw_cnt);

		if( rt_cnt < cnt ) {
			cnt = rt_cnt;
		}
	}

	timer_set_hw_interval(cnt);

	LEAVE_CRITICAL_SECTION();
}

#ifdef SOS_DEBUG_TIMER
static void print_all_timers(char *context)
{
	list_link_t *link;
	uint8_t i = 0;

	DEBUG(" *** ALL TIMER: %s ***\n", context);
	for(link = deltaq.l_next;
			link != (&deltaq); link = link->l_next, i++) {
		sos_timer_t *h = (sos_timer_t*)link;
		DEBUG("(%d) pid = %d, tid = %d, ticks = %d, delta = %d, prev = %x, next = %x\n", i, h->pid, h->tid, h->ticks, h->delta, (int)h->list.l_prev, (int)h->list.l_next);
	}
}
#endif

/**
 * @brief insert handle into delta queue
 * This routine assumes that the data structure is set
 */
static void timer_delta_q_insert(sos_timer_t *h, bool new_timer)
{
	list_link_t *link;
	int32_t hw_cnt;
	HAS_CRITICAL_SECTION;
	
	DEBUG("ticks = %d, delta = %d\n", h->ticks, h->delta);
	if(list_empty(&deltaq) == true) {
		//! empty queue
		//! start the timer
		DEBUG("empty q, set top to %d\n", h->delta);
		if( new_timer ) {
			// clear any outstnading ticks
			// and start new timer
			timer_set_hw_top(h->delta, false);
		}
		list_insert_head(&deltaq, (list_link_t*)h);
		return;
	}

	ENTER_CRITICAL_SECTION();
	hw_cnt = outstanding_ticks + timer_hardware_get_counter();
	LEAVE_CRITICAL_SECTION();

	if( new_timer ) {
		// if it is a new timer, we need to add the ticks that are 
		// already counted because these ticks will be subtracted 
		// later.
		// outstanding_ticks + timer_hardware_get_counter() is the 
		// ticks that are already passed in time
		h->delta += hw_cnt;
		DEBUG("get hw_cnt = %d\n", hw_cnt);
	}

	link = deltaq.l_next;

	// Check whether new timer will be new head
	// because we need to modify hardware counter if it is the case
	if( h->delta < (((sos_timer_t*)link)->delta)) {
		DEBUG("new timer will be the head\n");
		(((sos_timer_t*)link)->delta) -= (h->delta);
		if( new_timer ) {
			timer_set_hw_top(h->delta - hw_cnt, true);
		}
		list_insert_head(&deltaq, (list_link_t*)h);
		return;
	}

	// Work this timer to the current position
	for(/* initialized already */ ;
		link != (&deltaq); 
		link = link->l_next) {
		sos_timer_t *curr = (sos_timer_t*)link;
		if(h->delta < curr->delta) {
			//! insert here
			DEBUG("insert to middle\n");
			curr->delta -= h->delta;
			list_insert_before(link, (list_link_t*)h);
			return;
		}
		h->delta -= curr->delta;
	}
	DEBUG("insert to tail\n");
	list_insert_tail(&deltaq, (list_link_t*)h);
	return;
}
/**
 * @brief Locate a timer block from the detlaq
 */
static sos_timer_t* find_timer_block(sos_pid_t pid, uint8_t tid)
{
   sos_timer_t* tt;
   

   if (list_empty(&deltaq)){
      return NULL;   
   }
   
   tt = (sos_timer_t*) deltaq.l_next;
   do{
      if ((tt->pid == pid) &&
          (tt->tid == tid))
         return tt;
      tt = (sos_timer_t*)tt->list.l_next;
   } while ((list_t*)tt != &deltaq);

   return NULL;
}

static sos_timer_t *find_timer_in_periodic_pool(sos_pid_t pid, uint8_t tid)
{
   sos_timer_t* tt;

   if (list_empty(&periodic_pool) == false) {
	   tt = (sos_timer_t*) periodic_pool.l_next;
	   do {
		   if( (tt->pid == pid) && (tt->tid == tid) ) {
				list_remove((list_t*)tt);
				return tt;
		   }
		   tt = (sos_timer_t*)tt->list.l_next;
	   } while((list_t*)tt != &periodic_pool);
   }
   return NULL;
}

/**
 * @brief Locate a free timer block from the preallocated timer pool
 */
static sos_timer_t* alloc_from_preallocated_timer_pool(sos_pid_t pid)
{
   sos_timer_t* tt;
   
   if (list_empty(&prealloc_timer_pool))
      return NULL;
   
   //! Find an unused pre-allocated block or an intialized block
   tt = (sos_timer_t*) prealloc_timer_pool.l_next;
   do{
	 
      if (tt->pid == pid)
		{
		  list_remove((list_t*)tt);
		  return tt;
		}
	  tt = (sos_timer_t*)tt->list.l_next;
   } while ((list_t*)tt != &prealloc_timer_pool);
   
   return NULL;
}


static sos_timer_t* alloc_from_timer_pool(sos_pid_t pid, uint8_t tid)
{
   sos_timer_t* tt;
   
   if (list_empty(&timer_pool)) {
      return NULL;
   }
   
   //! Find an unused pre-allocated block or an intialized block
   tt = (sos_timer_t*) timer_pool.l_next;
   do{
	 
      if ((tt->pid == pid) &&
          (tt->tid == tid))
		{
		  list_remove((list_t*)tt);
		  return tt;
		}
	  tt = (sos_timer_t*)tt->list.l_next;
   } while ((list_t*)tt != &timer_pool);
   
   return NULL;
}

/**
 * @brief Remove a timer from the deltaq
 */
static int8_t timer_remove_timer(sos_timer_t *tt)
{
    5a40:	cf 93       	push	r28
    5a42:	df 93       	push	r29
    5a44:	ec 01       	movw	r28, r24
	
	if((tt->list.l_next == NULL) ||
    5a46:	e8 81       	ld	r30, Y
    5a48:	f9 81       	ldd	r31, Y+1	; 0x01
    5a4a:	30 97       	sbiw	r30, 0x00	; 0
    5a4c:	21 f0       	breq	.+8      	; 0x5a56
    5a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    5a50:	9b 81       	ldd	r25, Y+3	; 0x03
    5a52:	89 2b       	or	r24, r25
    5a54:	19 f4       	brne	.+6      	; 0x5a5c
	   (tt->list.l_prev == NULL)) {
		return -EINVAL;
    5a56:	8a ee       	ldi	r24, 0xEA	; 234
    5a58:	9f ef       	ldi	r25, 0xFF	; 255
    5a5a:	1e c0       	rjmp	.+60     	; 0x5a98
	}
	// if I am not the tail... and I have positive delta
	if((tt->list.l_next != &deltaq) && (tt->delta > 0 )) {
    5a5c:	8a e0       	ldi	r24, 0x0A	; 10
    5a5e:	ec 36       	cpi	r30, 0x6C	; 108
    5a60:	f8 07       	cpc	r31, r24
    5a62:	a9 f0       	breq	.+42     	; 0x5a8e
    5a64:	2b 85       	ldd	r18, Y+11	; 0x0b
    5a66:	3c 85       	ldd	r19, Y+12	; 0x0c
    5a68:	4d 85       	ldd	r20, Y+13	; 0x0d
    5a6a:	5e 85       	ldd	r21, Y+14	; 0x0e
    5a6c:	12 16       	cp	r1, r18
    5a6e:	13 06       	cpc	r1, r19
    5a70:	14 06       	cpc	r1, r20
    5a72:	15 06       	cpc	r1, r21
    5a74:	64 f4       	brge	.+24     	; 0x5a8e
		((sos_timer_t*)(tt->list.l_next))->delta += tt->delta;
    5a76:	83 85       	ldd	r24, Z+11	; 0x0b
    5a78:	94 85       	ldd	r25, Z+12	; 0x0c
    5a7a:	a5 85       	ldd	r26, Z+13	; 0x0d
    5a7c:	b6 85       	ldd	r27, Z+14	; 0x0e
    5a7e:	82 0f       	add	r24, r18
    5a80:	93 1f       	adc	r25, r19
    5a82:	a4 1f       	adc	r26, r20
    5a84:	b5 1f       	adc	r27, r21
    5a86:	83 87       	std	Z+11, r24	; 0x0b
    5a88:	94 87       	std	Z+12, r25	; 0x0c
    5a8a:	a5 87       	std	Z+13, r26	; 0x0d
    5a8c:	b6 87       	std	Z+14, r27	; 0x0e
	}
	list_remove((list_t*)tt);
    5a8e:	ce 01       	movw	r24, r28
    5a90:	0e 94 3d 35 	call	0x6a7a
    return SOS_OK;
    5a94:	80 e0       	ldi	r24, 0x00	; 0
    5a96:	90 e0       	ldi	r25, 0x00	; 0
    5a98:	df 91       	pop	r29
    5a9a:	cf 91       	pop	r28
    5a9c:	08 95       	ret

00005a9e <timer_remove_all>:
    5a9e:	ff 92       	push	r15
    5aa0:	0f 93       	push	r16
    5aa2:	1f 93       	push	r17
    5aa4:	cf 93       	push	r28
    5aa6:	df 93       	push	r29
    5aa8:	f8 2e       	mov	r15, r24
    5aaa:	c0 91 6c 0a 	lds	r28, 0x0A6C
    5aae:	d0 91 6d 0a 	lds	r29, 0x0A6D
    5ab2:	8a e0       	ldi	r24, 0x0A	; 10
    5ab4:	cc 36       	cpi	r28, 0x6C	; 108
    5ab6:	d8 07       	cpc	r29, r24
    5ab8:	99 f0       	breq	.+38     	; 0x5ae0
    5aba:	8e 01       	movw	r16, r28
    5abc:	8d 81       	ldd	r24, Y+5	; 0x05
    5abe:	8f 15       	cp	r24, r15
    5ac0:	59 f4       	brne	.+22     	; 0x5ad8
    5ac2:	0a 80       	ldd	r0, Y+2	; 0x02
    5ac4:	db 81       	ldd	r29, Y+3	; 0x03
    5ac6:	c0 2d       	mov	r28, r0
    5ac8:	c8 01       	movw	r24, r16
    5aca:	0e 94 20 2d 	call	0x5a40
    5ace:	b8 01       	movw	r22, r16
    5ad0:	84 e9       	ldi	r24, 0x94	; 148
    5ad2:	9a e0       	ldi	r25, 0x0A	; 10
    5ad4:	0e 94 e0 3d 	call	0x7bc0
    5ad8:	09 90       	ld	r0, Y+
    5ada:	d8 81       	ld	r29, Y
    5adc:	c0 2d       	mov	r28, r0
    5ade:	e9 cf       	rjmp	.-46     	; 0x5ab2
    5ae0:	c0 91 70 0a 	lds	r28, 0x0A70
    5ae4:	d0 91 71 0a 	lds	r29, 0x0A71
    5ae8:	8a e0       	ldi	r24, 0x0A	; 10
    5aea:	c0 37       	cpi	r28, 0x70	; 112
    5aec:	d8 07       	cpc	r29, r24
    5aee:	99 f0       	breq	.+38     	; 0x5b16
    5af0:	8e 01       	movw	r16, r28
    5af2:	8d 81       	ldd	r24, Y+5	; 0x05
    5af4:	8f 15       	cp	r24, r15
    5af6:	59 f4       	brne	.+22     	; 0x5b0e
    5af8:	0a 80       	ldd	r0, Y+2	; 0x02
    5afa:	db 81       	ldd	r29, Y+3	; 0x03
    5afc:	c0 2d       	mov	r28, r0
    5afe:	c8 01       	movw	r24, r16
    5b00:	0e 94 3d 35 	call	0x6a7a
    5b04:	b8 01       	movw	r22, r16
    5b06:	84 e9       	ldi	r24, 0x94	; 148
    5b08:	9a e0       	ldi	r25, 0x0A	; 10
    5b0a:	0e 94 e0 3d 	call	0x7bc0
    5b0e:	09 90       	ld	r0, Y+
    5b10:	d8 81       	ld	r29, Y
    5b12:	c0 2d       	mov	r28, r0
    5b14:	e9 cf       	rjmp	.-46     	; 0x5ae8
    5b16:	c0 91 74 0a 	lds	r28, 0x0A74
    5b1a:	d0 91 75 0a 	lds	r29, 0x0A75
    5b1e:	8a e0       	ldi	r24, 0x0A	; 10
    5b20:	c4 37       	cpi	r28, 0x74	; 116
    5b22:	d8 07       	cpc	r29, r24
    5b24:	99 f0       	breq	.+38     	; 0x5b4c
    5b26:	8e 01       	movw	r16, r28
    5b28:	8d 81       	ldd	r24, Y+5	; 0x05
    5b2a:	8f 15       	cp	r24, r15
    5b2c:	59 f4       	brne	.+22     	; 0x5b44
    5b2e:	0a 80       	ldd	r0, Y+2	; 0x02
    5b30:	db 81       	ldd	r29, Y+3	; 0x03
    5b32:	c0 2d       	mov	r28, r0
    5b34:	c8 01       	movw	r24, r16
    5b36:	0e 94 3d 35 	call	0x6a7a
    5b3a:	b8 01       	movw	r22, r16
    5b3c:	84 e9       	ldi	r24, 0x94	; 148
    5b3e:	9a e0       	ldi	r25, 0x0A	; 10
    5b40:	0e 94 e0 3d 	call	0x7bc0
    5b44:	09 90       	ld	r0, Y+
    5b46:	d8 81       	ld	r29, Y
    5b48:	c0 2d       	mov	r28, r0
    5b4a:	e9 cf       	rjmp	.-46     	; 0x5b1e
    5b4c:	c0 91 78 0a 	lds	r28, 0x0A78
    5b50:	d0 91 79 0a 	lds	r29, 0x0A79
    5b54:	8a e0       	ldi	r24, 0x0A	; 10
    5b56:	c8 37       	cpi	r28, 0x78	; 120
    5b58:	d8 07       	cpc	r29, r24
    5b5a:	99 f0       	breq	.+38     	; 0x5b82
    5b5c:	8e 01       	movw	r16, r28
    5b5e:	8d 81       	ldd	r24, Y+5	; 0x05
    5b60:	8f 15       	cp	r24, r15
    5b62:	59 f4       	brne	.+22     	; 0x5b7a
    5b64:	0a 80       	ldd	r0, Y+2	; 0x02
    5b66:	db 81       	ldd	r29, Y+3	; 0x03
    5b68:	c0 2d       	mov	r28, r0
    5b6a:	c8 01       	movw	r24, r16
    5b6c:	0e 94 3d 35 	call	0x6a7a
    5b70:	b8 01       	movw	r22, r16
    5b72:	84 e9       	ldi	r24, 0x94	; 148
    5b74:	9a e0       	ldi	r25, 0x0A	; 10
    5b76:	0e 94 e0 3d 	call	0x7bc0
    5b7a:	09 90       	ld	r0, Y+
    5b7c:	d8 81       	ld	r29, Y
    5b7e:	c0 2d       	mov	r28, r0
    5b80:	e9 cf       	rjmp	.-46     	; 0x5b54
    5b82:	80 e0       	ldi	r24, 0x00	; 0
    5b84:	90 e0       	ldi	r25, 0x00	; 0
    5b86:	df 91       	pop	r29
    5b88:	cf 91       	pop	r28
    5b8a:	1f 91       	pop	r17
    5b8c:	0f 91       	pop	r16
    5b8e:	ff 90       	pop	r15
    5b90:	08 95       	ret

00005b92 <timer_preallocate>:
    5b92:	9f 92       	push	r9
    5b94:	af 92       	push	r10
    5b96:	bf 92       	push	r11
    5b98:	cf 92       	push	r12
    5b9a:	df 92       	push	r13
    5b9c:	ef 92       	push	r14
    5b9e:	ff 92       	push	r15
    5ba0:	0f 93       	push	r16
    5ba2:	1f 93       	push	r17
    5ba4:	cf 93       	push	r28
    5ba6:	df 93       	push	r29
    5ba8:	cd b7       	in	r28, 0x3d	; 61
    5baa:	de b7       	in	r29, 0x3e	; 62
    5bac:	64 97       	sbiw	r28, 0x14	; 20
    5bae:	0f b6       	in	r0, 0x3f	; 63
    5bb0:	f8 94       	cli
    5bb2:	de bf       	out	0x3e, r29	; 62
    5bb4:	0f be       	out	0x3f, r0	; 63
    5bb6:	cd bf       	out	0x3d, r28	; 61
    5bb8:	98 2e       	mov	r9, r24
    5bba:	d6 2e       	mov	r13, r22
    5bbc:	8a e0       	ldi	r24, 0x0A	; 10
    5bbe:	86 17       	cp	r24, r22
    5bc0:	18 f4       	brcc	.+6      	; 0x5bc8
    5bc2:	8a ee       	ldi	r24, 0xEA	; 234
    5bc4:	9f ef       	ldi	r25, 0xFF	; 255
    5bc6:	48 c0       	rjmp	.+144    	; 0x5c58
    5bc8:	cc 24       	eor	r12, r12
    5bca:	c6 16       	cp	r12, r22
    5bcc:	58 f5       	brcc	.+86     	; 0x5c24
    5bce:	ee 24       	eor	r14, r14
    5bd0:	ff 24       	eor	r15, r15
    5bd2:	5e 01       	movw	r10, r28
    5bd4:	08 94       	sec
    5bd6:	a1 1c       	adc	r10, r1
    5bd8:	b1 1c       	adc	r11, r1
    5bda:	87 01       	movw	r16, r14
    5bdc:	0a 0d       	add	r16, r10
    5bde:	1b 1d       	adc	r17, r11
    5be0:	64 e0       	ldi	r22, 0x04	; 4
    5be2:	84 e9       	ldi	r24, 0x94	; 148
    5be4:	9a e0       	ldi	r25, 0x0A	; 10
    5be6:	0e 94 80 3d 	call	0x7b00
    5bea:	f8 01       	movw	r30, r16
    5bec:	80 83       	st	Z, r24
    5bee:	91 83       	std	Z+1, r25	; 0x01
    5bf0:	89 2b       	or	r24, r25
    5bf2:	89 f4       	brne	.+34     	; 0x5c16
    5bf4:	cc 20       	and	r12, r12
    5bf6:	61 f0       	breq	.+24     	; 0x5c10
    5bf8:	0c 2d       	mov	r16, r12
    5bfa:	75 01       	movw	r14, r10
    5bfc:	f7 01       	movw	r30, r14
    5bfe:	61 91       	ld	r22, Z+
    5c00:	71 91       	ld	r23, Z+
    5c02:	7f 01       	movw	r14, r30
    5c04:	84 e9       	ldi	r24, 0x94	; 148
    5c06:	9a e0       	ldi	r25, 0x0A	; 10
    5c08:	0e 94 e0 3d 	call	0x7bc0
    5c0c:	01 50       	subi	r16, 0x01	; 1
    5c0e:	b1 f7       	brne	.-20     	; 0x5bfc
    5c10:	84 ef       	ldi	r24, 0xF4	; 244
    5c12:	9f ef       	ldi	r25, 0xFF	; 255
    5c14:	21 c0       	rjmp	.+66     	; 0x5c58
    5c16:	c3 94       	inc	r12
    5c18:	82 e0       	ldi	r24, 0x02	; 2
    5c1a:	90 e0       	ldi	r25, 0x00	; 0
    5c1c:	e8 0e       	add	r14, r24
    5c1e:	f9 1e       	adc	r15, r25
    5c20:	cd 14       	cp	r12, r13
    5c22:	b8 f2       	brcs	.-82     	; 0x5bd2
    5c24:	dd 20       	and	r13, r13
    5c26:	b1 f0       	breq	.+44     	; 0x5c54
    5c28:	cd 2c       	mov	r12, r13
    5c2a:	00 e0       	ldi	r16, 0x00	; 0
    5c2c:	10 e0       	ldi	r17, 0x00	; 0
    5c2e:	fe 01       	movw	r30, r28
    5c30:	e0 0f       	add	r30, r16
    5c32:	f1 1f       	adc	r31, r17
    5c34:	01 80       	ldd	r0, Z+1	; 0x01
    5c36:	f2 81       	ldd	r31, Z+2	; 0x02
    5c38:	e0 2d       	mov	r30, r0
    5c3a:	95 82       	std	Z+5, r9	; 0x05
    5c3c:	82 e0       	ldi	r24, 0x02	; 2
    5c3e:	87 87       	std	Z+15, r24	; 0x0f
    5c40:	bf 01       	movw	r22, r30
    5c42:	84 e7       	ldi	r24, 0x74	; 116
    5c44:	9a e0       	ldi	r25, 0x0A	; 10
    5c46:	0e 94 3a 35 	call	0x6a74
    5c4a:	ca 94       	dec	r12
    5c4c:	0e 5f       	subi	r16, 0xFE	; 254
    5c4e:	1f 4f       	sbci	r17, 0xFF	; 255
    5c50:	cc 20       	and	r12, r12
    5c52:	69 f7       	brne	.-38     	; 0x5c2e
    5c54:	80 e0       	ldi	r24, 0x00	; 0
    5c56:	90 e0       	ldi	r25, 0x00	; 0
    5c58:	64 96       	adiw	r28, 0x14	; 20
    5c5a:	0f b6       	in	r0, 0x3f	; 63
    5c5c:	f8 94       	cli
    5c5e:	de bf       	out	0x3e, r29	; 62
    5c60:	0f be       	out	0x3f, r0	; 63
    5c62:	cd bf       	out	0x3d, r28	; 61
    5c64:	df 91       	pop	r29
    5c66:	cf 91       	pop	r28
    5c68:	1f 91       	pop	r17
    5c6a:	0f 91       	pop	r16
    5c6c:	ff 90       	pop	r15
    5c6e:	ef 90       	pop	r14
    5c70:	df 90       	pop	r13
    5c72:	cf 90       	pop	r12
    5c74:	bf 90       	pop	r11
    5c76:	af 90       	pop	r10
    5c78:	9f 90       	pop	r9
    5c7a:	08 95       	ret

00005c7c <timer_set_hw_interval>:
    5c7c:	65 30       	cpi	r22, 0x05	; 5
    5c7e:	71 05       	cpc	r23, r1
    5c80:	81 05       	cpc	r24, r1
    5c82:	91 05       	cpc	r25, r1
    5c84:	2c f4       	brge	.+10     	; 0x5c90
    5c86:	65 e0       	ldi	r22, 0x05	; 5
    5c88:	70 e0       	ldi	r23, 0x00	; 0
    5c8a:	80 e0       	ldi	r24, 0x00	; 0
    5c8c:	90 e0       	ldi	r25, 0x00	; 0
    5c8e:	09 c0       	rjmp	.+18     	; 0x5ca2
    5c90:	6b 3f       	cpi	r22, 0xFB	; 251
    5c92:	71 05       	cpc	r23, r1
    5c94:	81 05       	cpc	r24, r1
    5c96:	91 05       	cpc	r25, r1
    5c98:	3c f0       	brlt	.+14     	; 0x5ca8
    5c9a:	6a ef       	ldi	r22, 0xFA	; 250
    5c9c:	70 e0       	ldi	r23, 0x00	; 0
    5c9e:	80 e0       	ldi	r24, 0x00	; 0
    5ca0:	90 e0       	ldi	r25, 0x00	; 0
    5ca2:	0e 94 7b 55 	call	0xaaf6
    5ca6:	08 95       	ret
    5ca8:	86 2f       	mov	r24, r22
    5caa:	99 27       	eor	r25, r25
    5cac:	aa 27       	eor	r26, r26
    5cae:	bb 27       	eor	r27, r27
    5cb0:	bc 01       	movw	r22, r24
    5cb2:	cd 01       	movw	r24, r26
    5cb4:	f6 cf       	rjmp	.-20     	; 0x5ca2

00005cb6 <timer_update_realtime_clock>:
}

/**
 * @brief update delta queue
 * traverse each item in the queue until no more delta left
 * NOTE: this is executed in interrupt handler, so NO lock necessary
 */
#ifdef SOS_USE_PREEMPTION
static void timer_update_delta(int32_t delta)
{
	list_link_t *link;

	if(list_empty(&deltaq) == true) {
		return;
	}
	DEBUG("update delta = %d\n", delta);
	for(link = deltaq.l_next;
			link != (&deltaq); link = link->l_next) {
		sos_timer_t *h = (sos_timer_t*)link;         
		if(h->delta >= delta) {
			// if we use all ticks...
			h->delta -= delta;
			return;
		} else {
			int32_t tmp = h->delta;
			h->delta -= delta;
			delta -= tmp;
		}
	}
}
#else
static void timer_update_delta(void)
{
	list_link_t *link;
	int32_t delta;
	HAS_CRITICAL_SECTION;
	
	ENTER_CRITICAL_SECTION();
	delta = outstanding_ticks;
	outstanding_ticks = 0;
	LEAVE_CRITICAL_SECTION();
	
	if(list_empty(&deltaq) == true) {
		return;
	}
	DEBUG("update delta = %d\n", delta);
	for(link = deltaq.l_next;
			link != (&deltaq); link = link->l_next) {
		sos_timer_t *h = (sos_timer_t*)link;         
		if(h->delta >= delta) {
			// if we use all ticks...
			h->delta -= delta;
			return;
		} else {
			int32_t tmp = h->delta;
			h->delta -= delta;
			delta -= tmp;
		}
	}
}
#endif

/**
 * @brief Post the timeout messages
 */



//------------------------------------------------------------------------
// TIMER API
//------------------------------------------------------------------------

//! Assumption - This function is never called from an interrupt context
int8_t ker_timer_init(sos_pid_t pid, uint8_t tid, uint8_t type)
{
  sos_timer_t* tt;

  tt = find_timer_in_periodic_pool(pid, tid);
  if (tt != NULL) {
      tt->type = type;
	  list_insert_tail(&timer_pool, (list_link_t*)tt);
	  return SOS_OK;
  }
  //! re-initialize an existing timer by stoping it and updating the type
  tt = find_timer_block(pid, tid);
  if (tt != NULL){
      ker_timer_stop(pid,tid);
      tt->type = type;
      return SOS_OK;
  }
  
  //! Search if pre-initialized timer exists
  tt = alloc_from_timer_pool(pid, tid);
  
  //! Look for pre-allocated timers or try to get dynamic memory
  if (tt == NULL){
	tt = alloc_from_preallocated_timer_pool(pid);
	if (tt == NULL)
	  tt = (sos_timer_t*)ker_slab_alloc(&timer_slab, TIMER_PID);
	//! Init will fail if the system does not have sufficient resources
	if (tt == NULL)
	  return -ENOMEM;
  }
  
  //! Fill up the data structure and insert into the timer pool
  tt->pid = pid;
  tt->tid = tid;
  tt->type = type;
  
  list_insert_tail(&timer_pool, (list_link_t*)tt);
  return SOS_OK;
}

int8_t ker_permanent_timer_init(sos_timer_t* tt, sos_pid_t pid, uint8_t tid, uint8_t type)
{
   //! Fill up the data structures and insert into the timer pool
   tt->pid = pid;
   tt->tid = tid;
   tt->type = type | PERMANENT_TIMER_MASK;
   list_insert_tail(&timer_pool, (list_link_t*)tt);

   return SOS_OK; 
}

void timer_gc( void )
{
	list_link_t *link;
	
	for(link = deltaq.l_next; link != (&deltaq); link = link->l_next) {
		if( (((sos_timer_t*)link)->type & PERMANENT_TIMER_MASK) == 0 ) {
			slab_gc_mark( &timer_slab, link );
		} 
	}
	
	for (link = timer_pool.l_next; link != (&timer_pool); link = link->l_next) {
		if( (((sos_timer_t*)link)->type & PERMANENT_TIMER_MASK) == 0 ) {
			slab_gc_mark( &timer_slab, link );
		}
	}
	
	for (link = prealloc_timer_pool.l_next; link != (&prealloc_timer_pool); link = link->l_next) {
		if( (((sos_timer_t*)link)->type & PERMANENT_TIMER_MASK) == 0 ) {
			slab_gc_mark( &timer_slab, link );
		}
	}
	
	for (link = periodic_pool.l_next; link != (&periodic_pool); link = link->l_next) {
		if( (((sos_timer_t*)link)->type & PERMANENT_TIMER_MASK) == 0 ) {
			slab_gc_mark( &timer_slab, link );
		}
	}
	
	slab_gc( &timer_slab, TIMER_PID );
	
	malloc_gc( TIMER_PID );
}


int8_t ker_timer_start(sos_pid_t pid, uint8_t tid, int32_t interval)
{
  sos_timer_t* tt;
  //! Start the timer from the timer pool
  tt = alloc_from_timer_pool(pid, tid);
  
  //! If the timer does not exist, then it is already in use or not initialized
  if (tt == NULL) {
	DEBUG_PID(TIMER_PID, "ker_timer_start: tt == NULL\n");
	return -EINVAL;
  }
  
  //  tt->ticks = PROCESSOR_TICKS(interval);
  tt->ticks = interval;
  tt->delta = interval;
  
  //DEBUG("timer_start(%d) %d %d %d\n", tt->pid, tt->tid, tt->type, tt->ticks);
  
  //! insert into delta queue
  print_all_timers("timer_start_start");
  timer_delta_q_insert(tt, true);
  print_all_timers("timer_start_end");
  ker_log( SOS_LOG_TIMER_START, pid, tid );
  return SOS_OK;
}



//! The implementation of this call can be optimized to include the find with
//! the remove. We will do it later
int8_t ker_timer_stop(sos_pid_t pid, uint8_t tid)
{
  sos_timer_t* tt;

  tt = find_timer_in_periodic_pool(pid, tid);
  if( tt == NULL ) {
	  //! Find the timer block
	  tt = find_timer_block(pid, tid);
	  if (tt == NULL) {
		  return -EINVAL;
	  } else {
		  //! Remove the timer from the deltaq and any pending messages in the queue
		  timer_remove_timer(tt);
	  }
  }
  //timer_remove_timeout_from_scheduler(tt);
  //! Re-insert timer into the pool
  list_insert_tail(&timer_pool, (list_link_t*)tt);
  ker_log( SOS_LOG_TIMER_STOP, pid, tid );
  return SOS_OK;
}

//! Free the first timer block beloning to pid in the timer_pool
int8_t ker_timer_stop_and_release(sos_pid_t pid, uint8_t tid)
{
  sos_timer_t* tt;

  //! First stop the timer if it is running
  ker_timer_stop(pid, tid);

  //! Get the timer block from the pool
  tt = alloc_from_timer_pool(pid, tid);
  
  if (tt == NULL) 
	return -EINVAL;

  //! Deep free of the timer
  ker_slab_free(&timer_slab,tt); 
  
  return SOS_OK;   
}


int8_t ker_timer_restart(sos_pid_t pid, uint8_t tid, int32_t interval)
{
  sos_timer_t* tt;
  
  tt = find_timer_in_periodic_pool(pid, tid);
  if (tt == NULL) {
	  //! Locate a running timer or from the timer pool
	  tt = find_timer_block(pid, tid);
	  if (tt != NULL){
		  timer_remove_timer(tt);
	  }
	  else {
		  tt = alloc_from_timer_pool(pid, tid);
	  }
  }
   
   //! The timer is neither running nor initialized
  if (tt == NULL) {
	return -EINVAL;
  }
  /* Special Case restart with existing ticks field */
  if( interval <= 0 )
      interval = tt->ticks;

  if(interval < TIMER_MIN_INTERVAL){
      /* Need to put the timer back in to the pool 
         as an initialized timer that was never started */
      list_insert_tail(&timer_pool, (list_link_t*)tt);
      return -EPERM;
  }
  //! Initialize the data structure
  tt->ticks = interval;
  //  tt->ticks = PROCESSOR_TICKS(interval);
  tt->delta = interval;

  //! Insert into the delta queue
  timer_delta_q_insert(tt, true);
  ker_log( SOS_LOG_TIMER_RESTART, pid, tid );
  return SOS_OK;
}

int8_t ker_sys_timer_start(uint8_t tid, int32_t interval, uint8_t type)
{
#ifdef SOS_USE_PREEMPTION
  HAS_ATOMIC_PREEMPTION_SECTION;
#endif
  sos_pid_t my_id = ker_get_current_pid();
#ifdef SOS_USE_PREEMPTION
  ATOMIC_DISABLE_PREEMPTION();
#endif
  if( (ker_timer_init(my_id, tid, type) != SOS_OK) ||       
	  (ker_timer_start(my_id, tid, interval) != SOS_OK)) {
#ifdef SOS_USE_PREEMPTION
	ATOMIC_ENABLE_PREEMPTION();
#endif
	return ker_mod_panic(my_id);                                 
  }                                                         
#ifdef SOS_USE_PREEMPTION
  ATOMIC_ENABLE_PREEMPTION();
#endif
  return SOS_OK;                                            
}

int8_t ker_sys_timer_restart(uint8_t tid, int32_t interval)       
{                                                             
#ifdef SOS_USE_PREEMPTION
  HAS_ATOMIC_PREEMPTION_SECTION;
#endif
  sos_pid_t my_id = ker_get_current_pid();                  
#ifdef SOS_USE_PREEMPTION
  ATOMIC_DISABLE_PREEMPTION();
#endif
  if( ker_timer_restart(my_id, tid, interval) != SOS_OK ) { 
#ifdef SOS_USE_PREEMPTION
	ATOMIC_ENABLE_PREEMPTION();
#endif
	return ker_mod_panic(my_id);                                 
  }
#ifdef SOS_USE_PREEMPTION
  ATOMIC_ENABLE_PREEMPTION();
#endif
  return SOS_OK;                                            
}                                                             

int8_t ker_sys_timer_stop(uint8_t tid)              
{                                                             
  int8_t ret;
#ifdef SOS_USE_PREEMPTION
  HAS_ATOMIC_PREEMPTION_SECTION;
#endif
  sos_pid_t my_id = ker_get_current_pid();                  
#ifdef SOS_USE_PREEMPTION
  ATOMIC_DISABLE_PREEMPTION();
#endif
  ret = ker_timer_stop_and_release(my_id, tid);
#ifdef SOS_USE_PREEMPTION
  ATOMIC_ENABLE_PREEMPTION();
#endif
  return ret;                                            
}

#ifndef SOS_USE_PREEMPTION
// called from scheduler
static void soft_interrupt( void )
{
  HAS_CRITICAL_SECTION;

  timer_update_delta();
  while(list_empty(&deltaq) == false) {
	sos_timer_t *h = (sos_timer_t*)(deltaq.l_next);         
	if(h->delta <= 0) {
	  sos_pid_t pid = h->pid;
	  uint8_t tid = h->tid;
	  uint8_t flag;
	  list_remove_head(&deltaq);
	  
	  if(((h->type) & SLOW_TIMER_MASK) == 0){
		flag = SOS_MSG_HIGH_PRIORITY;
	  } else {
		flag = 0;
	  }
	  
	  if (((h->type) & ONE_SHOT_TIMER_MASK) == 0){
		//! periocic timer
		while(h->delta <= 0) {
		  // make sure it is positive
		  h->delta += h->ticks;
		}
		list_insert_tail(&periodic_pool, (list_t*) h);
		
	  } else {
		list_insert_tail(&timer_pool, (list_link_t*)h);
	  }
	  sched_dispatch_short_message(pid, TIMER_PID,
								   MSG_TIMER_TIMEOUT, 
								   tid, 0,
								   flag);
	  
	} else {
	  break;
	}
  }
  
  while(list_empty(&periodic_pool) == false) {
	list_link_t *link = periodic_pool.l_next;
	list_remove_head(&periodic_pool);
	timer_delta_q_insert((sos_timer_t*)link, false);
  }
  
  if(list_empty(&deltaq) == false) {
	sos_timer_t *h = (sos_timer_t*)(deltaq.l_next);
	int32_t hw_cnt;
	ENTER_CRITICAL_SECTION();
	hw_cnt = outstanding_ticks - timer_hardware_get_counter();
	if( h->delta - hw_cnt > 0) {
	  LEAVE_CRITICAL_SECTION();
	  timer_set_hw_top(h->delta - hw_cnt, true);	
	} else {
	  LEAVE_CRITICAL_SECTION();
	  sched_add_interrupt(SCHED_TIMER_INT, soft_interrupt);
	}
  } else {
	ENTER_CRITICAL_SECTION();
	timer_set_hw_top(MAX_SLEEP_INTERVAL, false);
	LEAVE_CRITICAL_SECTION();
  }
}
#endif

static void timer_realtime_set_hw_top(uint16_t value)
{
  // compute the time it takes to have next interrupt
  if(list_empty(&deltaq) == true) {
	timer_set_hw_top(value, false);
  } else {
	uint8_t hw_interval = timer_getInterval();
	uint8_t hw_cnt = timer_hardware_get_counter();
	if( (hw_interval - hw_cnt) >= value ) {
	  if(list_empty(&deltaq) == true) {
		timer_set_hw_top(value, false);
	  } else {
		timer_set_hw_top(value, true);
	  }
	}
  }
}



int8_t timer_realtime_start(uint16_t value, uint16_t interval, timer_callback_t f)
{
	uint8_t i;
	HAS_CRITICAL_SECTION;

	ENTER_CRITICAL_SECTION();
	if( num_realtime_clock == MAX_REALTIME_CLOCK ) {
		LEAVE_CRITICAL_SECTION();
		return -ENOMEM;
	}

	for( i = 0; i < MAX_REALTIME_CLOCK; i++ ) {
		if( realtime[i].f == NULL ) {

			timer_realtime_set_hw_top(value);
			num_realtime_clock++;

			realtime[i].value = value;
			realtime[i].interval = interval;
			realtime[i].f = f;
			LEAVE_CRITICAL_SECTION();
			return SOS_OK;
		}
	}	
	LEAVE_CRITICAL_SECTION();
	return -ENOMEM;
}

int8_t timer_realtime_stop(timer_callback_t f)
{
	uint8_t i;
	HAS_CRITICAL_SECTION;

	ENTER_CRITICAL_SECTION();
	for( i = 0; i < MAX_REALTIME_CLOCK; i++ ) {
		if( realtime[i].f == f ) {
			realtime[i].f = NULL;
			num_realtime_clock--;
			LEAVE_CRITICAL_SECTION();
			return SOS_OK;
		}
	}
	LEAVE_CRITICAL_SECTION();
	return -EINVAL;
}

static uint16_t timer_update_realtime_clock(uint8_t cnt)
{
    5cb6:	4f 92       	push	r4
    5cb8:	5f 92       	push	r5
    5cba:	7f 92       	push	r7
    5cbc:	8f 92       	push	r8
    5cbe:	9f 92       	push	r9
    5cc0:	af 92       	push	r10
    5cc2:	bf 92       	push	r11
    5cc4:	cf 92       	push	r12
    5cc6:	df 92       	push	r13
    5cc8:	ef 92       	push	r14
    5cca:	ff 92       	push	r15
    5ccc:	0f 93       	push	r16
    5cce:	1f 93       	push	r17
    5cd0:	cf 93       	push	r28
    5cd2:	df 93       	push	r29
    5cd4:	cd b7       	in	r28, 0x3d	; 61
    5cd6:	de b7       	in	r29, 0x3e	; 62
    5cd8:	28 97       	sbiw	r28, 0x08	; 8
    5cda:	0f b6       	in	r0, 0x3f	; 63
    5cdc:	f8 94       	cli
    5cde:	de bf       	out	0x3e, r29	; 62
    5ce0:	0f be       	out	0x3f, r0	; 63
    5ce2:	cd bf       	out	0x3d, r28	; 61
    5ce4:	78 2e       	mov	r7, r24
	uint8_t i;
	uint16_t min_cnt = 65535;
    5ce6:	3f ef       	ldi	r19, 0xFF	; 255
    5ce8:	a3 2e       	mov	r10, r19
    5cea:	b3 2e       	mov	r11, r19
    5cec:	4e 01       	movw	r8, r28
    5cee:	08 94       	sec
    5cf0:	81 1c       	adc	r8, r1
    5cf2:	91 1c       	adc	r9, r1
    5cf4:	e0 90 67 0a 	lds	r14, 0x0A67
    5cf8:	44 24       	eor	r4, r4
    5cfa:	55 24       	eor	r5, r5
    5cfc:	62 01       	movw	r12, r4
    5cfe:	c2 01       	movw	r24, r4
    5d00:	23 e0       	ldi	r18, 0x03	; 3
    5d02:	f2 2e       	mov	r15, r18
    5d04:	84 01       	movw	r16, r8
	timer_callback_t f[MAX_REALTIME_CLOCK];

	// iterate through all realtime clock
	for( i = 0; i < MAX_REALTIME_CLOCK; i++ ) {
		f[i] = NULL;
    5d06:	d8 01       	movw	r26, r16
    5d08:	1d 92       	st	X+, r1
    5d0a:	1c 92       	st	X, r1
    5d0c:	11 97       	sbiw	r26, 0x01	; 1
		if( realtime[i].f != NULL ) {
    5d0e:	f6 01       	movw	r30, r12
    5d10:	e8 0f       	add	r30, r24
    5d12:	f9 1f       	adc	r31, r25
    5d14:	e4 58       	subi	r30, 0x84	; 132
    5d16:	f5 4f       	sbci	r31, 0xF5	; 245
    5d18:	44 81       	ldd	r20, Z+4	; 0x04
    5d1a:	55 81       	ldd	r21, Z+5	; 0x05
    5d1c:	41 15       	cp	r20, r1
    5d1e:	51 05       	cpc	r21, r1
    5d20:	39 f1       	breq	.+78     	; 0x5d70
			if( realtime[i].value <= cnt ) {
    5d22:	67 2d       	mov	r22, r7
    5d24:	77 27       	eor	r23, r23
    5d26:	20 81       	ld	r18, Z
    5d28:	31 81       	ldd	r19, Z+1	; 0x01
    5d2a:	62 17       	cp	r22, r18
    5d2c:	73 07       	cpc	r23, r19
    5d2e:	80 f0       	brcs	.+32     	; 0x5d50
				f[i] = realtime[i].f;
    5d30:	4d 93       	st	X+, r20
    5d32:	5c 93       	st	X, r21
				if( realtime[i].interval != 0 ) {
    5d34:	42 81       	ldd	r20, Z+2	; 0x02
    5d36:	53 81       	ldd	r21, Z+3	; 0x03
    5d38:	41 15       	cp	r20, r1
    5d3a:	51 05       	cpc	r21, r1
    5d3c:	29 f0       	breq	.+10     	; 0x5d48
					realtime[i].value += (realtime[i].interval - cnt);
    5d3e:	46 1b       	sub	r20, r22
    5d40:	57 0b       	sbc	r21, r23
    5d42:	24 0f       	add	r18, r20
    5d44:	35 1f       	adc	r19, r21
    5d46:	06 c0       	rjmp	.+12     	; 0x5d54
				} else {
					realtime[i].f = NULL;
    5d48:	44 83       	std	Z+4, r20	; 0x04
    5d4a:	55 83       	std	Z+5, r21	; 0x05
					num_realtime_clock--;
    5d4c:	ea 94       	dec	r14
					continue;
    5d4e:	10 c0       	rjmp	.+32     	; 0x5d70
				}
			} else {
				realtime[i].value -= cnt;
    5d50:	26 1b       	sub	r18, r22
    5d52:	37 0b       	sbc	r19, r23
    5d54:	20 83       	st	Z, r18
    5d56:	31 83       	std	Z+1, r19	; 0x01
			}
			if( realtime[i].value < min_cnt ) {                 
    5d58:	f2 01       	movw	r30, r4
    5d5a:	e8 0f       	add	r30, r24
    5d5c:	f9 1f       	adc	r31, r25
    5d5e:	e4 58       	subi	r30, 0x84	; 132
    5d60:	f5 4f       	sbci	r31, 0xF5	; 245
    5d62:	01 90       	ld	r0, Z+
    5d64:	f0 81       	ld	r31, Z
    5d66:	e0 2d       	mov	r30, r0
    5d68:	ea 15       	cp	r30, r10
    5d6a:	fb 05       	cpc	r31, r11
    5d6c:	08 f4       	brcc	.+2      	; 0x5d70
				min_cnt = realtime[i].value;                    
    5d6e:	5f 01       	movw	r10, r30
    5d70:	fa 94       	dec	r15
    5d72:	01 96       	adiw	r24, 0x01	; 1
    5d74:	0e 5f       	subi	r16, 0xFE	; 254
    5d76:	1f 4f       	sbci	r17, 0xFF	; 255
    5d78:	e5 e0       	ldi	r30, 0x05	; 5
    5d7a:	f0 e0       	ldi	r31, 0x00	; 0
    5d7c:	ce 0e       	add	r12, r30
    5d7e:	df 1e       	adc	r13, r31
    5d80:	4e 0e       	add	r4, r30
    5d82:	5f 1e       	adc	r5, r31
    5d84:	f7 fe       	sbrs	r15, 7
    5d86:	bf cf       	rjmp	.-130    	; 0x5d06
    5d88:	e0 92 67 0a 	sts	0x0A67, r14
    5d8c:	83 e0       	ldi	r24, 0x03	; 3
    5d8e:	f8 2e       	mov	r15, r24
    5d90:	84 01       	movw	r16, r8
			}
		}
	}

	for( i = 0; i < MAX_REALTIME_CLOCK; i++ ) {
		if( f[i] != NULL ) {
    5d92:	d8 01       	movw	r26, r16
    5d94:	ed 91       	ld	r30, X+
    5d96:	fd 91       	ld	r31, X+
    5d98:	8d 01       	movw	r16, r26
    5d9a:	30 97       	sbiw	r30, 0x00	; 0
    5d9c:	09 f0       	breq	.+2      	; 0x5da0
			(f[i])();
    5d9e:	09 95       	icall
    5da0:	fa 94       	dec	r15
    5da2:	f7 fe       	sbrs	r15, 7
    5da4:	f6 cf       	rjmp	.-20     	; 0x5d92
		}
	}

	return min_cnt;
}
    5da6:	c5 01       	movw	r24, r10
    5da8:	28 96       	adiw	r28, 0x08	; 8
    5daa:	0f b6       	in	r0, 0x3f	; 63
    5dac:	f8 94       	cli
    5dae:	de bf       	out	0x3e, r29	; 62
    5db0:	0f be       	out	0x3f, r0	; 63
    5db2:	cd bf       	out	0x3d, r28	; 61
    5db4:	df 91       	pop	r29
    5db6:	cf 91       	pop	r28
    5db8:	1f 91       	pop	r17
    5dba:	0f 91       	pop	r16
    5dbc:	ff 90       	pop	r15
    5dbe:	ef 90       	pop	r14
    5dc0:	df 90       	pop	r13
    5dc2:	cf 90       	pop	r12
    5dc4:	bf 90       	pop	r11
    5dc6:	af 90       	pop	r10
    5dc8:	9f 90       	pop	r9
    5dca:	8f 90       	pop	r8
    5dcc:	7f 90       	pop	r7
    5dce:	5f 90       	pop	r5
    5dd0:	4f 90       	pop	r4
    5dd2:	08 95       	ret

00005dd4 <timer_set_hw_top>:
    5dd4:	ef 92       	push	r14
    5dd6:	ff 92       	push	r15
    5dd8:	0f 93       	push	r16
    5dda:	1f 93       	push	r17
    5ddc:	cf 93       	push	r28
    5dde:	7b 01       	movw	r14, r22
    5de0:	8c 01       	movw	r16, r24
 * @brief Get the current value stored in the hardware register
 */
static inline uint8_t timer_hardware_get_counter()
{
	return TCNT0;
    5de2:	82 b7       	in	r24, 0x32	; 50
    5de4:	28 2f       	mov	r18, r24
    5de6:	cf b7       	in	r28, 0x3f	; 63
    5de8:	f8 94       	cli
    5dea:	44 23       	and	r20, r20
    5dec:	a9 f0       	breq	.+42     	; 0x5e18
    5dee:	80 91 68 0a 	lds	r24, 0x0A68
    5df2:	90 91 69 0a 	lds	r25, 0x0A69
    5df6:	a0 91 6a 0a 	lds	r26, 0x0A6A
    5dfa:	b0 91 6b 0a 	lds	r27, 0x0A6B
    5dfe:	82 0f       	add	r24, r18
    5e00:	91 1d       	adc	r25, r1
    5e02:	a1 1d       	adc	r26, r1
    5e04:	b1 1d       	adc	r27, r1
    5e06:	80 93 68 0a 	sts	0x0A68, r24
    5e0a:	90 93 69 0a 	sts	0x0A69, r25
    5e0e:	a0 93 6a 0a 	sts	0x0A6A, r26
    5e12:	b0 93 6b 0a 	sts	0x0A6B, r27
    5e16:	08 c0       	rjmp	.+16     	; 0x5e28
    5e18:	10 92 68 0a 	sts	0x0A68, r1
    5e1c:	10 92 69 0a 	sts	0x0A69, r1
    5e20:	10 92 6a 0a 	sts	0x0A6A, r1
    5e24:	10 92 6b 0a 	sts	0x0A6B, r1
    5e28:	80 91 67 0a 	lds	r24, 0x0A67
    5e2c:	88 23       	and	r24, r24
    5e2e:	61 f0       	breq	.+24     	; 0x5e48
    5e30:	82 2f       	mov	r24, r18
    5e32:	0e 94 5b 2e 	call	0x5cb6
    5e36:	aa 27       	eor	r26, r26
    5e38:	bb 27       	eor	r27, r27
    5e3a:	8e 15       	cp	r24, r14
    5e3c:	9f 05       	cpc	r25, r15
    5e3e:	a0 07       	cpc	r26, r16
    5e40:	b1 07       	cpc	r27, r17
    5e42:	14 f4       	brge	.+4      	; 0x5e48
    5e44:	7c 01       	movw	r14, r24
    5e46:	8d 01       	movw	r16, r26
    5e48:	c8 01       	movw	r24, r16
    5e4a:	b7 01       	movw	r22, r14
    5e4c:	0e 94 3e 2e 	call	0x5c7c
    5e50:	cf bf       	out	0x3f, r28	; 63
    5e52:	cf 91       	pop	r28
    5e54:	1f 91       	pop	r17
    5e56:	0f 91       	pop	r16
    5e58:	ff 90       	pop	r15
    5e5a:	ef 90       	pop	r14
    5e5c:	08 95       	ret

00005e5e <timer_delta_q_insert>:
    5e5e:	df 92       	push	r13
    5e60:	ef 92       	push	r14
    5e62:	ff 92       	push	r15
    5e64:	0f 93       	push	r16
    5e66:	1f 93       	push	r17
    5e68:	cf 93       	push	r28
    5e6a:	df 93       	push	r29
    5e6c:	ec 01       	movw	r28, r24
    5e6e:	d6 2e       	mov	r13, r22
    5e70:	8c e6       	ldi	r24, 0x6C	; 108
    5e72:	9a e0       	ldi	r25, 0x0A	; 10
    5e74:	0e 94 78 35 	call	0x6af0
    5e78:	81 30       	cpi	r24, 0x01	; 1
    5e7a:	49 f4       	brne	.+18     	; 0x5e8e
    5e7c:	dd 20       	and	r13, r13
    5e7e:	09 f4       	brne	.+2      	; 0x5e82
    5e80:	4c c0       	rjmp	.+152    	; 0x5f1a
    5e82:	40 e0       	ldi	r20, 0x00	; 0
    5e84:	6b 85       	ldd	r22, Y+11	; 0x0b
    5e86:	7c 85       	ldd	r23, Y+12	; 0x0c
    5e88:	8d 85       	ldd	r24, Y+13	; 0x0d
    5e8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    5e8c:	44 c0       	rjmp	.+136    	; 0x5f16
    5e8e:	9f b7       	in	r25, 0x3f	; 63
    5e90:	f8 94       	cli
 * @brief Get the current value stored in the hardware register
 */
static inline uint8_t timer_hardware_get_counter()
{
	return TCNT0;
    5e92:	82 b7       	in	r24, 0x32	; 50
    5e94:	e0 90 68 0a 	lds	r14, 0x0A68
    5e98:	f0 90 69 0a 	lds	r15, 0x0A69
    5e9c:	00 91 6a 0a 	lds	r16, 0x0A6A
    5ea0:	10 91 6b 0a 	lds	r17, 0x0A6B
    5ea4:	e8 0e       	add	r14, r24
    5ea6:	f1 1c       	adc	r15, r1
    5ea8:	01 1d       	adc	r16, r1
    5eaa:	11 1d       	adc	r17, r1
    5eac:	9f bf       	out	0x3f, r25	; 63
    5eae:	dd 20       	and	r13, r13
    5eb0:	61 f0       	breq	.+24     	; 0x5eca
    5eb2:	8b 85       	ldd	r24, Y+11	; 0x0b
    5eb4:	9c 85       	ldd	r25, Y+12	; 0x0c
    5eb6:	ad 85       	ldd	r26, Y+13	; 0x0d
    5eb8:	be 85       	ldd	r27, Y+14	; 0x0e
    5eba:	8e 0d       	add	r24, r14
    5ebc:	9f 1d       	adc	r25, r15
    5ebe:	a0 1f       	adc	r26, r16
    5ec0:	b1 1f       	adc	r27, r17
    5ec2:	8b 87       	std	Y+11, r24	; 0x0b
    5ec4:	9c 87       	std	Y+12, r25	; 0x0c
    5ec6:	ad 87       	std	Y+13, r26	; 0x0d
    5ec8:	be 87       	std	Y+14, r27	; 0x0e
    5eca:	e0 91 6c 0a 	lds	r30, 0x0A6C
    5ece:	f0 91 6d 0a 	lds	r31, 0x0A6D
    5ed2:	2b 85       	ldd	r18, Y+11	; 0x0b
    5ed4:	3c 85       	ldd	r19, Y+12	; 0x0c
    5ed6:	4d 85       	ldd	r20, Y+13	; 0x0d
    5ed8:	5e 85       	ldd	r21, Y+14	; 0x0e
    5eda:	83 85       	ldd	r24, Z+11	; 0x0b
    5edc:	94 85       	ldd	r25, Z+12	; 0x0c
    5ede:	a5 85       	ldd	r26, Z+13	; 0x0d
    5ee0:	b6 85       	ldd	r27, Z+14	; 0x0e
    5ee2:	28 17       	cp	r18, r24
    5ee4:	39 07       	cpc	r19, r25
    5ee6:	4a 07       	cpc	r20, r26
    5ee8:	5b 07       	cpc	r21, r27
    5eea:	54 f5       	brge	.+84     	; 0x5f40
    5eec:	82 1b       	sub	r24, r18
    5eee:	93 0b       	sbc	r25, r19
    5ef0:	a4 0b       	sbc	r26, r20
    5ef2:	b5 0b       	sbc	r27, r21
    5ef4:	83 87       	std	Z+11, r24	; 0x0b
    5ef6:	94 87       	std	Z+12, r25	; 0x0c
    5ef8:	a5 87       	std	Z+13, r26	; 0x0d
    5efa:	b6 87       	std	Z+14, r27	; 0x0e
    5efc:	dd 20       	and	r13, r13
    5efe:	69 f0       	breq	.+26     	; 0x5f1a
    5f00:	8b 85       	ldd	r24, Y+11	; 0x0b
    5f02:	9c 85       	ldd	r25, Y+12	; 0x0c
    5f04:	ad 85       	ldd	r26, Y+13	; 0x0d
    5f06:	be 85       	ldd	r27, Y+14	; 0x0e
    5f08:	8e 19       	sub	r24, r14
    5f0a:	9f 09       	sbc	r25, r15
    5f0c:	a0 0b       	sbc	r26, r16
    5f0e:	b1 0b       	sbc	r27, r17
    5f10:	41 e0       	ldi	r20, 0x01	; 1
    5f12:	bc 01       	movw	r22, r24
    5f14:	cd 01       	movw	r24, r26
    5f16:	0e 94 ea 2e 	call	0x5dd4
    5f1a:	be 01       	movw	r22, r28
    5f1c:	8c e6       	ldi	r24, 0x6C	; 108
    5f1e:	9a e0       	ldi	r25, 0x0A	; 10
    5f20:	0e 94 34 35 	call	0x6a68
    5f24:	2f c0       	rjmp	.+94     	; 0x5f84
    5f26:	82 1b       	sub	r24, r18
    5f28:	93 0b       	sbc	r25, r19
    5f2a:	a4 0b       	sbc	r26, r20
    5f2c:	b5 0b       	sbc	r27, r21
    5f2e:	83 87       	std	Z+11, r24	; 0x0b
    5f30:	94 87       	std	Z+12, r25	; 0x0c
    5f32:	a5 87       	std	Z+13, r26	; 0x0d
    5f34:	b6 87       	std	Z+14, r27	; 0x0e
    5f36:	be 01       	movw	r22, r28
    5f38:	cf 01       	movw	r24, r30
    5f3a:	0e 94 20 35 	call	0x6a40
    5f3e:	22 c0       	rjmp	.+68     	; 0x5f84
    5f40:	8a e0       	ldi	r24, 0x0A	; 10
    5f42:	ec 36       	cpi	r30, 0x6C	; 108
    5f44:	f8 07       	cpc	r31, r24
    5f46:	c9 f0       	breq	.+50     	; 0x5f7a
    5f48:	2b 85       	ldd	r18, Y+11	; 0x0b
    5f4a:	3c 85       	ldd	r19, Y+12	; 0x0c
    5f4c:	4d 85       	ldd	r20, Y+13	; 0x0d
    5f4e:	5e 85       	ldd	r21, Y+14	; 0x0e
    5f50:	83 85       	ldd	r24, Z+11	; 0x0b
    5f52:	94 85       	ldd	r25, Z+12	; 0x0c
    5f54:	a5 85       	ldd	r26, Z+13	; 0x0d
    5f56:	b6 85       	ldd	r27, Z+14	; 0x0e
    5f58:	28 17       	cp	r18, r24
    5f5a:	39 07       	cpc	r19, r25
    5f5c:	4a 07       	cpc	r20, r26
    5f5e:	5b 07       	cpc	r21, r27
    5f60:	14 f3       	brlt	.-60     	; 0x5f26
    5f62:	28 1b       	sub	r18, r24
    5f64:	39 0b       	sbc	r19, r25
    5f66:	4a 0b       	sbc	r20, r26
    5f68:	5b 0b       	sbc	r21, r27
    5f6a:	2b 87       	std	Y+11, r18	; 0x0b
    5f6c:	3c 87       	std	Y+12, r19	; 0x0c
    5f6e:	4d 87       	std	Y+13, r20	; 0x0d
    5f70:	5e 87       	std	Y+14, r21	; 0x0e
    5f72:	01 90       	ld	r0, Z+
    5f74:	f0 81       	ld	r31, Z
    5f76:	e0 2d       	mov	r30, r0
    5f78:	e3 cf       	rjmp	.-58     	; 0x5f40
    5f7a:	be 01       	movw	r22, r28
    5f7c:	8c e6       	ldi	r24, 0x6C	; 108
    5f7e:	9a e0       	ldi	r25, 0x0A	; 10
    5f80:	0e 94 3a 35 	call	0x6a74
    5f84:	df 91       	pop	r29
    5f86:	cf 91       	pop	r28
    5f88:	1f 91       	pop	r17
    5f8a:	0f 91       	pop	r16
    5f8c:	ff 90       	pop	r15
    5f8e:	ef 90       	pop	r14
    5f90:	df 90       	pop	r13
    5f92:	08 95       	ret

00005f94 <find_timer_block>:
    5f94:	1f 93       	push	r17
    5f96:	cf 93       	push	r28
    5f98:	18 2f       	mov	r17, r24
    5f9a:	c6 2f       	mov	r28, r22
    5f9c:	8c e6       	ldi	r24, 0x6C	; 108
    5f9e:	9a e0       	ldi	r25, 0x0A	; 10
    5fa0:	0e 94 78 35 	call	0x6af0
    5fa4:	88 23       	and	r24, r24
    5fa6:	19 f0       	breq	.+6      	; 0x5fae
    5fa8:	13 c0       	rjmp	.+38     	; 0x5fd0
    5faa:	cf 01       	movw	r24, r30
    5fac:	13 c0       	rjmp	.+38     	; 0x5fd4
    5fae:	e0 91 6c 0a 	lds	r30, 0x0A6C
    5fb2:	f0 91 6d 0a 	lds	r31, 0x0A6D
    5fb6:	85 81       	ldd	r24, Z+5	; 0x05
    5fb8:	81 17       	cp	r24, r17
    5fba:	19 f4       	brne	.+6      	; 0x5fc2
    5fbc:	86 81       	ldd	r24, Z+6	; 0x06
    5fbe:	8c 17       	cp	r24, r28
    5fc0:	a1 f3       	breq	.-24     	; 0x5faa
    5fc2:	01 90       	ld	r0, Z+
    5fc4:	f0 81       	ld	r31, Z
    5fc6:	e0 2d       	mov	r30, r0
    5fc8:	8a e0       	ldi	r24, 0x0A	; 10
    5fca:	ec 36       	cpi	r30, 0x6C	; 108
    5fcc:	f8 07       	cpc	r31, r24
    5fce:	99 f7       	brne	.-26     	; 0x5fb6
    5fd0:	80 e0       	ldi	r24, 0x00	; 0
    5fd2:	90 e0       	ldi	r25, 0x00	; 0
    5fd4:	cf 91       	pop	r28
    5fd6:	1f 91       	pop	r17
    5fd8:	08 95       	ret

00005fda <find_timer_in_periodic_pool>:
    5fda:	0f 93       	push	r16
    5fdc:	1f 93       	push	r17
    5fde:	cf 93       	push	r28
    5fe0:	df 93       	push	r29
    5fe2:	08 2f       	mov	r16, r24
    5fe4:	16 2f       	mov	r17, r22
    5fe6:	88 e7       	ldi	r24, 0x78	; 120
    5fe8:	9a e0       	ldi	r25, 0x0A	; 10
    5fea:	0e 94 78 35 	call	0x6af0
    5fee:	88 23       	and	r24, r24
    5ff0:	b1 f4       	brne	.+44     	; 0x601e
    5ff2:	c0 91 78 0a 	lds	r28, 0x0A78
    5ff6:	d0 91 79 0a 	lds	r29, 0x0A79
    5ffa:	8d 81       	ldd	r24, Y+5	; 0x05
    5ffc:	80 17       	cp	r24, r16
    5ffe:	41 f4       	brne	.+16     	; 0x6010
    6000:	8e 81       	ldd	r24, Y+6	; 0x06
    6002:	81 17       	cp	r24, r17
    6004:	29 f4       	brne	.+10     	; 0x6010
    6006:	ce 01       	movw	r24, r28
    6008:	0e 94 3d 35 	call	0x6a7a
    600c:	ce 01       	movw	r24, r28
    600e:	09 c0       	rjmp	.+18     	; 0x6022
    6010:	09 90       	ld	r0, Y+
    6012:	d8 81       	ld	r29, Y
    6014:	c0 2d       	mov	r28, r0
    6016:	8a e0       	ldi	r24, 0x0A	; 10
    6018:	c8 37       	cpi	r28, 0x78	; 120
    601a:	d8 07       	cpc	r29, r24
    601c:	71 f7       	brne	.-36     	; 0x5ffa
    601e:	80 e0       	ldi	r24, 0x00	; 0
    6020:	90 e0       	ldi	r25, 0x00	; 0
    6022:	df 91       	pop	r29
    6024:	cf 91       	pop	r28
    6026:	1f 91       	pop	r17
    6028:	0f 91       	pop	r16
    602a:	08 95       	ret

0000602c <alloc_from_timer_pool>:
    602c:	0f 93       	push	r16
    602e:	1f 93       	push	r17
    6030:	cf 93       	push	r28
    6032:	df 93       	push	r29
    6034:	08 2f       	mov	r16, r24
    6036:	16 2f       	mov	r17, r22
    6038:	80 e7       	ldi	r24, 0x70	; 112
    603a:	9a e0       	ldi	r25, 0x0A	; 10
    603c:	0e 94 78 35 	call	0x6af0
    6040:	88 23       	and	r24, r24
    6042:	31 f0       	breq	.+12     	; 0x6050
    6044:	16 c0       	rjmp	.+44     	; 0x6072
    6046:	ce 01       	movw	r24, r28
    6048:	0e 94 3d 35 	call	0x6a7a
    604c:	ce 01       	movw	r24, r28
    604e:	13 c0       	rjmp	.+38     	; 0x6076
    6050:	c0 91 70 0a 	lds	r28, 0x0A70
    6054:	d0 91 71 0a 	lds	r29, 0x0A71
    6058:	8d 81       	ldd	r24, Y+5	; 0x05
    605a:	80 17       	cp	r24, r16
    605c:	19 f4       	brne	.+6      	; 0x6064
    605e:	8e 81       	ldd	r24, Y+6	; 0x06
    6060:	81 17       	cp	r24, r17
    6062:	89 f3       	breq	.-30     	; 0x6046
    6064:	09 90       	ld	r0, Y+
    6066:	d8 81       	ld	r29, Y
    6068:	c0 2d       	mov	r28, r0
    606a:	8a e0       	ldi	r24, 0x0A	; 10
    606c:	c0 37       	cpi	r28, 0x70	; 112
    606e:	d8 07       	cpc	r29, r24
    6070:	99 f7       	brne	.-26     	; 0x6058
    6072:	80 e0       	ldi	r24, 0x00	; 0
    6074:	90 e0       	ldi	r25, 0x00	; 0
    6076:	df 91       	pop	r29
    6078:	cf 91       	pop	r28
    607a:	1f 91       	pop	r17
    607c:	0f 91       	pop	r16
    607e:	08 95       	ret

00006080 <ker_timer_stop>:
    6080:	0f 93       	push	r16
    6082:	1f 93       	push	r17
    6084:	cf 93       	push	r28
    6086:	df 93       	push	r29
    6088:	08 2f       	mov	r16, r24
    608a:	16 2f       	mov	r17, r22
    608c:	0e 94 ed 2f 	call	0x5fda
    6090:	ec 01       	movw	r28, r24
    6092:	89 2b       	or	r24, r25
    6094:	61 f4       	brne	.+24     	; 0x60ae
    6096:	61 2f       	mov	r22, r17
    6098:	80 2f       	mov	r24, r16
    609a:	0e 94 ca 2f 	call	0x5f94
    609e:	ec 01       	movw	r28, r24
    60a0:	00 97       	sbiw	r24, 0x00	; 0
    60a2:	19 f4       	brne	.+6      	; 0x60aa
    60a4:	8a ee       	ldi	r24, 0xEA	; 234
    60a6:	9f ef       	ldi	r25, 0xFF	; 255
    60a8:	09 c0       	rjmp	.+18     	; 0x60bc
    60aa:	0e 94 20 2d 	call	0x5a40
    60ae:	be 01       	movw	r22, r28
    60b0:	80 e7       	ldi	r24, 0x70	; 112
    60b2:	9a e0       	ldi	r25, 0x0A	; 10
    60b4:	0e 94 3a 35 	call	0x6a74
    60b8:	80 e0       	ldi	r24, 0x00	; 0
    60ba:	90 e0       	ldi	r25, 0x00	; 0
    60bc:	df 91       	pop	r29
    60be:	cf 91       	pop	r28
    60c0:	1f 91       	pop	r17
    60c2:	0f 91       	pop	r16
    60c4:	08 95       	ret

000060c6 <ker_timer_init>:
    60c6:	ff 92       	push	r15
    60c8:	0f 93       	push	r16
    60ca:	1f 93       	push	r17
    60cc:	cf 93       	push	r28
    60ce:	df 93       	push	r29
    60d0:	18 2f       	mov	r17, r24
    60d2:	06 2f       	mov	r16, r22
    60d4:	f4 2e       	mov	r15, r20
    60d6:	0e 94 ed 2f 	call	0x5fda
    60da:	ec 01       	movw	r28, r24
    60dc:	89 2b       	or	r24, r25
    60de:	09 f0       	breq	.+2      	; 0x60e2
    60e0:	40 c0       	rjmp	.+128    	; 0x6162
    60e2:	60 2f       	mov	r22, r16
    60e4:	81 2f       	mov	r24, r17
    60e6:	0e 94 ca 2f 	call	0x5f94
    60ea:	ec 01       	movw	r28, r24
    60ec:	89 2b       	or	r24, r25
    60ee:	31 f0       	breq	.+12     	; 0x60fc
    60f0:	60 2f       	mov	r22, r16
    60f2:	81 2f       	mov	r24, r17
    60f4:	0e 94 40 30 	call	0x6080
    60f8:	fc 82       	std	Y+4, r15	; 0x04
    60fa:	39 c0       	rjmp	.+114    	; 0x616e
    60fc:	60 2f       	mov	r22, r16
    60fe:	81 2f       	mov	r24, r17
    6100:	0e 94 16 30 	call	0x602c
    6104:	ec 01       	movw	r28, r24
    6106:	89 2b       	or	r24, r25
    6108:	51 f5       	brne	.+84     	; 0x615e
    610a:	84 e7       	ldi	r24, 0x74	; 116
    610c:	9a e0       	ldi	r25, 0x0A	; 10
    610e:	0e 94 78 35 	call	0x6af0
    6112:	88 23       	and	r24, r24
    6114:	31 f0       	breq	.+12     	; 0x6122
    6116:	03 c0       	rjmp	.+6      	; 0x611e
    6118:	ce 01       	movw	r24, r28
    611a:	0e 94 3d 35 	call	0x6a7a
    611e:	be 01       	movw	r22, r28
    6120:	10 c0       	rjmp	.+32     	; 0x6142
    6122:	c0 91 74 0a 	lds	r28, 0x0A74
    6126:	d0 91 75 0a 	lds	r29, 0x0A75
    612a:	8d 81       	ldd	r24, Y+5	; 0x05
    612c:	81 17       	cp	r24, r17
    612e:	a1 f3       	breq	.-24     	; 0x6118
    6130:	09 90       	ld	r0, Y+
    6132:	d8 81       	ld	r29, Y
    6134:	c0 2d       	mov	r28, r0
    6136:	8a e0       	ldi	r24, 0x0A	; 10
    6138:	c4 37       	cpi	r28, 0x74	; 116
    613a:	d8 07       	cpc	r29, r24
    613c:	b1 f7       	brne	.-20     	; 0x612a
    613e:	60 e0       	ldi	r22, 0x00	; 0
    6140:	70 e0       	ldi	r23, 0x00	; 0
    6142:	eb 01       	movw	r28, r22
    6144:	67 2b       	or	r22, r23
    6146:	31 f4       	brne	.+12     	; 0x6154
    6148:	64 e0       	ldi	r22, 0x04	; 4
    614a:	84 e9       	ldi	r24, 0x94	; 148
    614c:	9a e0       	ldi	r25, 0x0A	; 10
    614e:	0e 94 80 3d 	call	0x7b00
    6152:	ec 01       	movw	r28, r24
    6154:	20 97       	sbiw	r28, 0x00	; 0
    6156:	19 f4       	brne	.+6      	; 0x615e
    6158:	84 ef       	ldi	r24, 0xF4	; 244
    615a:	9f ef       	ldi	r25, 0xFF	; 255
    615c:	0a c0       	rjmp	.+20     	; 0x6172
    615e:	1d 83       	std	Y+5, r17	; 0x05
    6160:	0e 83       	std	Y+6, r16	; 0x06
    6162:	fc 82       	std	Y+4, r15	; 0x04
    6164:	be 01       	movw	r22, r28
    6166:	80 e7       	ldi	r24, 0x70	; 112
    6168:	9a e0       	ldi	r25, 0x0A	; 10
    616a:	0e 94 3a 35 	call	0x6a74
    616e:	80 e0       	ldi	r24, 0x00	; 0
    6170:	90 e0       	ldi	r25, 0x00	; 0
    6172:	df 91       	pop	r29
    6174:	cf 91       	pop	r28
    6176:	1f 91       	pop	r17
    6178:	0f 91       	pop	r16
    617a:	ff 90       	pop	r15
    617c:	08 95       	ret

0000617e <ker_permanent_timer_init>:
    617e:	fc 01       	movw	r30, r24
    6180:	82 2f       	mov	r24, r18
    6182:	65 83       	std	Z+5, r22	; 0x05
    6184:	46 83       	std	Z+6, r20	; 0x06
    6186:	84 60       	ori	r24, 0x04	; 4
    6188:	84 83       	std	Z+4, r24	; 0x04
    618a:	bf 01       	movw	r22, r30
    618c:	80 e7       	ldi	r24, 0x70	; 112
    618e:	9a e0       	ldi	r25, 0x0A	; 10
    6190:	0e 94 3a 35 	call	0x6a74
    6194:	80 e0       	ldi	r24, 0x00	; 0
    6196:	90 e0       	ldi	r25, 0x00	; 0
    6198:	08 95       	ret

0000619a <timer_gc>:
    619a:	cf 93       	push	r28
    619c:	df 93       	push	r29
    619e:	c0 91 6c 0a 	lds	r28, 0x0A6C
    61a2:	d0 91 6d 0a 	lds	r29, 0x0A6D
    61a6:	8a e0       	ldi	r24, 0x0A	; 10
    61a8:	cc 36       	cpi	r28, 0x6C	; 108
    61aa:	d8 07       	cpc	r29, r24
    61ac:	61 f0       	breq	.+24     	; 0x61c6
    61ae:	8c 81       	ldd	r24, Y+4	; 0x04
    61b0:	82 fd       	sbrc	r24, 2
    61b2:	05 c0       	rjmp	.+10     	; 0x61be
    61b4:	be 01       	movw	r22, r28
    61b6:	84 e9       	ldi	r24, 0x94	; 148
    61b8:	9a e0       	ldi	r25, 0x0A	; 10
    61ba:	0e 94 2a 3e 	call	0x7c54
    61be:	09 90       	ld	r0, Y+
    61c0:	d8 81       	ld	r29, Y
    61c2:	c0 2d       	mov	r28, r0
    61c4:	f0 cf       	rjmp	.-32     	; 0x61a6
    61c6:	c0 91 70 0a 	lds	r28, 0x0A70
    61ca:	d0 91 71 0a 	lds	r29, 0x0A71
    61ce:	8a e0       	ldi	r24, 0x0A	; 10
    61d0:	c0 37       	cpi	r28, 0x70	; 112
    61d2:	d8 07       	cpc	r29, r24
    61d4:	61 f0       	breq	.+24     	; 0x61ee
    61d6:	8c 81       	ldd	r24, Y+4	; 0x04
    61d8:	82 fd       	sbrc	r24, 2
    61da:	05 c0       	rjmp	.+10     	; 0x61e6
    61dc:	be 01       	movw	r22, r28
    61de:	84 e9       	ldi	r24, 0x94	; 148
    61e0:	9a e0       	ldi	r25, 0x0A	; 10
    61e2:	0e 94 2a 3e 	call	0x7c54
    61e6:	09 90       	ld	r0, Y+
    61e8:	d8 81       	ld	r29, Y
    61ea:	c0 2d       	mov	r28, r0
    61ec:	f0 cf       	rjmp	.-32     	; 0x61ce
    61ee:	c0 91 74 0a 	lds	r28, 0x0A74
    61f2:	d0 91 75 0a 	lds	r29, 0x0A75
    61f6:	8a e0       	ldi	r24, 0x0A	; 10
    61f8:	c4 37       	cpi	r28, 0x74	; 116
    61fa:	d8 07       	cpc	r29, r24
    61fc:	61 f0       	breq	.+24     	; 0x6216
    61fe:	8c 81       	ldd	r24, Y+4	; 0x04
    6200:	82 fd       	sbrc	r24, 2
    6202:	05 c0       	rjmp	.+10     	; 0x620e
    6204:	be 01       	movw	r22, r28
    6206:	84 e9       	ldi	r24, 0x94	; 148
    6208:	9a e0       	ldi	r25, 0x0A	; 10
    620a:	0e 94 2a 3e 	call	0x7c54
    620e:	09 90       	ld	r0, Y+
    6210:	d8 81       	ld	r29, Y
    6212:	c0 2d       	mov	r28, r0
    6214:	f0 cf       	rjmp	.-32     	; 0x61f6
    6216:	c0 91 78 0a 	lds	r28, 0x0A78
    621a:	d0 91 79 0a 	lds	r29, 0x0A79
    621e:	8a e0       	ldi	r24, 0x0A	; 10
    6220:	c8 37       	cpi	r28, 0x78	; 120
    6222:	d8 07       	cpc	r29, r24
    6224:	61 f0       	breq	.+24     	; 0x623e
    6226:	8c 81       	ldd	r24, Y+4	; 0x04
    6228:	82 fd       	sbrc	r24, 2
    622a:	05 c0       	rjmp	.+10     	; 0x6236
    622c:	be 01       	movw	r22, r28
    622e:	84 e9       	ldi	r24, 0x94	; 148
    6230:	9a e0       	ldi	r25, 0x0A	; 10
    6232:	0e 94 2a 3e 	call	0x7c54
    6236:	09 90       	ld	r0, Y+
    6238:	d8 81       	ld	r29, Y
    623a:	c0 2d       	mov	r28, r0
    623c:	f0 cf       	rjmp	.-32     	; 0x621e
    623e:	64 e0       	ldi	r22, 0x04	; 4
    6240:	84 e9       	ldi	r24, 0x94	; 148
    6242:	9a e0       	ldi	r25, 0x0A	; 10
    6244:	0e 94 6e 3e 	call	0x7cdc
    6248:	84 e0       	ldi	r24, 0x04	; 4
    624a:	0e 94 db 12 	call	0x25b6
    624e:	df 91       	pop	r29
    6250:	cf 91       	pop	r28
    6252:	08 95       	ret

00006254 <ker_timer_start>:
    6254:	ef 92       	push	r14
    6256:	ff 92       	push	r15
    6258:	0f 93       	push	r16
    625a:	1f 93       	push	r17
    625c:	79 01       	movw	r14, r18
    625e:	8a 01       	movw	r16, r20
    6260:	0e 94 16 30 	call	0x602c
    6264:	fc 01       	movw	r30, r24
    6266:	00 97       	sbiw	r24, 0x00	; 0
    6268:	19 f4       	brne	.+6      	; 0x6270
    626a:	8a ee       	ldi	r24, 0xEA	; 234
    626c:	9f ef       	ldi	r25, 0xFF	; 255
    626e:	0d c0       	rjmp	.+26     	; 0x628a
    6270:	e7 82       	std	Z+7, r14	; 0x07
    6272:	f0 86       	std	Z+8, r15	; 0x08
    6274:	01 87       	std	Z+9, r16	; 0x09
    6276:	12 87       	std	Z+10, r17	; 0x0a
    6278:	e3 86       	std	Z+11, r14	; 0x0b
    627a:	f4 86       	std	Z+12, r15	; 0x0c
    627c:	05 87       	std	Z+13, r16	; 0x0d
    627e:	16 87       	std	Z+14, r17	; 0x0e
    6280:	61 e0       	ldi	r22, 0x01	; 1
    6282:	0e 94 2f 2f 	call	0x5e5e
    6286:	80 e0       	ldi	r24, 0x00	; 0
    6288:	90 e0       	ldi	r25, 0x00	; 0
    628a:	1f 91       	pop	r17
    628c:	0f 91       	pop	r16
    628e:	ff 90       	pop	r15
    6290:	ef 90       	pop	r14
    6292:	08 95       	ret

00006294 <ker_timer_stop_and_release>:
    6294:	0f 93       	push	r16
    6296:	1f 93       	push	r17
    6298:	08 2f       	mov	r16, r24
    629a:	16 2f       	mov	r17, r22
    629c:	0e 94 40 30 	call	0x6080
    62a0:	61 2f       	mov	r22, r17
    62a2:	80 2f       	mov	r24, r16
    62a4:	0e 94 16 30 	call	0x602c
    62a8:	bc 01       	movw	r22, r24
    62aa:	89 2b       	or	r24, r25
    62ac:	19 f4       	brne	.+6      	; 0x62b4
    62ae:	8a ee       	ldi	r24, 0xEA	; 234
    62b0:	9f ef       	ldi	r25, 0xFF	; 255
    62b2:	06 c0       	rjmp	.+12     	; 0x62c0
    62b4:	84 e9       	ldi	r24, 0x94	; 148
    62b6:	9a e0       	ldi	r25, 0x0A	; 10
    62b8:	0e 94 e0 3d 	call	0x7bc0
    62bc:	80 e0       	ldi	r24, 0x00	; 0
    62be:	90 e0       	ldi	r25, 0x00	; 0
    62c0:	1f 91       	pop	r17
    62c2:	0f 91       	pop	r16
    62c4:	08 95       	ret

000062c6 <ker_timer_restart>:
    62c6:	cf 92       	push	r12
    62c8:	df 92       	push	r13
    62ca:	ef 92       	push	r14
    62cc:	ff 92       	push	r15
    62ce:	0f 93       	push	r16
    62d0:	1f 93       	push	r17
    62d2:	cf 93       	push	r28
    62d4:	df 93       	push	r29
    62d6:	c8 2e       	mov	r12, r24
    62d8:	d6 2e       	mov	r13, r22
    62da:	79 01       	movw	r14, r18
    62dc:	8a 01       	movw	r16, r20
    62de:	0e 94 ed 2f 	call	0x5fda
    62e2:	ec 01       	movw	r28, r24
    62e4:	89 2b       	or	r24, r25
    62e6:	79 f4       	brne	.+30     	; 0x6306
    62e8:	6d 2d       	mov	r22, r13
    62ea:	8c 2d       	mov	r24, r12
    62ec:	0e 94 ca 2f 	call	0x5f94
    62f0:	ec 01       	movw	r28, r24
    62f2:	00 97       	sbiw	r24, 0x00	; 0
    62f4:	19 f0       	breq	.+6      	; 0x62fc
    62f6:	0e 94 20 2d 	call	0x5a40
    62fa:	05 c0       	rjmp	.+10     	; 0x6306
    62fc:	6d 2d       	mov	r22, r13
    62fe:	8c 2d       	mov	r24, r12
    6300:	0e 94 16 30 	call	0x602c
    6304:	ec 01       	movw	r28, r24
    6306:	20 97       	sbiw	r28, 0x00	; 0
    6308:	19 f4       	brne	.+6      	; 0x6310
    630a:	8a ee       	ldi	r24, 0xEA	; 234
    630c:	9f ef       	ldi	r25, 0xFF	; 255
    630e:	25 c0       	rjmp	.+74     	; 0x635a
    6310:	1e 14       	cp	r1, r14
    6312:	1f 04       	cpc	r1, r15
    6314:	10 06       	cpc	r1, r16
    6316:	11 06       	cpc	r1, r17
    6318:	24 f0       	brlt	.+8      	; 0x6322
    631a:	ef 80       	ldd	r14, Y+7	; 0x07
    631c:	f8 84       	ldd	r15, Y+8	; 0x08
    631e:	09 85       	ldd	r16, Y+9	; 0x09
    6320:	1a 85       	ldd	r17, Y+10	; 0x0a
    6322:	85 e0       	ldi	r24, 0x05	; 5
    6324:	e8 16       	cp	r14, r24
    6326:	f1 04       	cpc	r15, r1
    6328:	01 05       	cpc	r16, r1
    632a:	11 05       	cpc	r17, r1
    632c:	44 f4       	brge	.+16     	; 0x633e
    632e:	be 01       	movw	r22, r28
    6330:	80 e7       	ldi	r24, 0x70	; 112
    6332:	9a e0       	ldi	r25, 0x0A	; 10
    6334:	0e 94 3a 35 	call	0x6a74
    6338:	8f ef       	ldi	r24, 0xFF	; 255
    633a:	9f ef       	ldi	r25, 0xFF	; 255
    633c:	0e c0       	rjmp	.+28     	; 0x635a
    633e:	ef 82       	std	Y+7, r14	; 0x07
    6340:	f8 86       	std	Y+8, r15	; 0x08
    6342:	09 87       	std	Y+9, r16	; 0x09
    6344:	1a 87       	std	Y+10, r17	; 0x0a
    6346:	eb 86       	std	Y+11, r14	; 0x0b
    6348:	fc 86       	std	Y+12, r15	; 0x0c
    634a:	0d 87       	std	Y+13, r16	; 0x0d
    634c:	1e 87       	std	Y+14, r17	; 0x0e
    634e:	61 e0       	ldi	r22, 0x01	; 1
    6350:	ce 01       	movw	r24, r28
    6352:	0e 94 2f 2f 	call	0x5e5e
    6356:	80 e0       	ldi	r24, 0x00	; 0
    6358:	90 e0       	ldi	r25, 0x00	; 0
    635a:	df 91       	pop	r29
    635c:	cf 91       	pop	r28
    635e:	1f 91       	pop	r17
    6360:	0f 91       	pop	r16
    6362:	ff 90       	pop	r15
    6364:	ef 90       	pop	r14
    6366:	df 90       	pop	r13
    6368:	cf 90       	pop	r12
    636a:	08 95       	ret

0000636c <ker_sys_timer_start>:
    636c:	cf 92       	push	r12
    636e:	df 92       	push	r13
    6370:	ef 92       	push	r14
    6372:	ff 92       	push	r15
    6374:	0f 93       	push	r16
    6376:	1f 93       	push	r17
    6378:	cf 93       	push	r28
    637a:	08 2f       	mov	r16, r24
    637c:	6a 01       	movw	r12, r20
    637e:	7b 01       	movw	r14, r22
    6380:	12 2f       	mov	r17, r18
    6382:	0e 94 e2 13 	call	0x27c4
    6386:	c8 2f       	mov	r28, r24
    6388:	41 2f       	mov	r20, r17
    638a:	60 2f       	mov	r22, r16
    638c:	0e 94 63 30 	call	0x60c6
    6390:	88 23       	and	r24, r24
    6392:	41 f4       	brne	.+16     	; 0x63a4
    6394:	a7 01       	movw	r20, r14
    6396:	96 01       	movw	r18, r12
    6398:	60 2f       	mov	r22, r16
    639a:	8c 2f       	mov	r24, r28
    639c:	0e 94 2a 31 	call	0x6254
    63a0:	88 23       	and	r24, r24
    63a2:	39 f0       	breq	.+14     	; 0x63b2
    63a4:	8c 2f       	mov	r24, r28
    63a6:	0e 94 4a 18 	call	0x3094
    63aa:	99 27       	eor	r25, r25
    63ac:	87 fd       	sbrc	r24, 7
    63ae:	90 95       	com	r25
    63b0:	02 c0       	rjmp	.+4      	; 0x63b6
    63b2:	80 e0       	ldi	r24, 0x00	; 0
    63b4:	90 e0       	ldi	r25, 0x00	; 0
    63b6:	cf 91       	pop	r28
    63b8:	1f 91       	pop	r17
    63ba:	0f 91       	pop	r16
    63bc:	ff 90       	pop	r15
    63be:	ef 90       	pop	r14
    63c0:	df 90       	pop	r13
    63c2:	cf 90       	pop	r12
    63c4:	08 95       	ret

000063c6 <ker_sys_timer_restart>:
    63c6:	df 92       	push	r13
    63c8:	ef 92       	push	r14
    63ca:	ff 92       	push	r15
    63cc:	0f 93       	push	r16
    63ce:	1f 93       	push	r17
    63d0:	cf 93       	push	r28
    63d2:	d8 2e       	mov	r13, r24
    63d4:	7a 01       	movw	r14, r20
    63d6:	8b 01       	movw	r16, r22
    63d8:	0e 94 e2 13 	call	0x27c4
    63dc:	c8 2f       	mov	r28, r24
    63de:	a8 01       	movw	r20, r16
    63e0:	97 01       	movw	r18, r14
    63e2:	6d 2d       	mov	r22, r13
    63e4:	0e 94 63 31 	call	0x62c6
    63e8:	88 23       	and	r24, r24
    63ea:	39 f0       	breq	.+14     	; 0x63fa
    63ec:	8c 2f       	mov	r24, r28
    63ee:	0e 94 4a 18 	call	0x3094
    63f2:	99 27       	eor	r25, r25
    63f4:	87 fd       	sbrc	r24, 7
    63f6:	90 95       	com	r25
    63f8:	02 c0       	rjmp	.+4      	; 0x63fe
    63fa:	80 e0       	ldi	r24, 0x00	; 0
    63fc:	90 e0       	ldi	r25, 0x00	; 0
    63fe:	cf 91       	pop	r28
    6400:	1f 91       	pop	r17
    6402:	0f 91       	pop	r16
    6404:	ff 90       	pop	r15
    6406:	ef 90       	pop	r14
    6408:	df 90       	pop	r13
    640a:	08 95       	ret

0000640c <ker_sys_timer_stop>:
    640c:	1f 93       	push	r17
    640e:	18 2f       	mov	r17, r24
    6410:	0e 94 e2 13 	call	0x27c4
    6414:	61 2f       	mov	r22, r17
    6416:	0e 94 4a 31 	call	0x6294
    641a:	99 27       	eor	r25, r25
    641c:	87 fd       	sbrc	r24, 7
    641e:	90 95       	com	r25
    6420:	1f 91       	pop	r17
    6422:	08 95       	ret

00006424 <soft_interrupt>:
    6424:	bf 92       	push	r11
    6426:	cf 92       	push	r12
    6428:	df 92       	push	r13
    642a:	ef 92       	push	r14
    642c:	ff 92       	push	r15
    642e:	0f 93       	push	r16
    6430:	1f 93       	push	r17
    6432:	cf 93       	push	r28
    6434:	df 93       	push	r29
    6436:	8f b7       	in	r24, 0x3f	; 63
    6438:	f8 94       	cli
    643a:	e0 90 68 0a 	lds	r14, 0x0A68
    643e:	f0 90 69 0a 	lds	r15, 0x0A69
    6442:	00 91 6a 0a 	lds	r16, 0x0A6A
    6446:	10 91 6b 0a 	lds	r17, 0x0A6B
    644a:	10 92 68 0a 	sts	0x0A68, r1
    644e:	10 92 69 0a 	sts	0x0A69, r1
    6452:	10 92 6a 0a 	sts	0x0A6A, r1
    6456:	10 92 6b 0a 	sts	0x0A6B, r1
    645a:	8f bf       	out	0x3f, r24	; 63
    645c:	8c e6       	ldi	r24, 0x6C	; 108
    645e:	9a e0       	ldi	r25, 0x0A	; 10
    6460:	0e 94 78 35 	call	0x6af0
    6464:	81 30       	cpi	r24, 0x01	; 1
    6466:	09 f4       	brne	.+2      	; 0x646a
    6468:	74 c0       	rjmp	.+232    	; 0x6552
    646a:	e0 91 6c 0a 	lds	r30, 0x0A6C
    646e:	f0 91 6d 0a 	lds	r31, 0x0A6D
    6472:	8a e0       	ldi	r24, 0x0A	; 10
    6474:	ec 36       	cpi	r30, 0x6C	; 108
    6476:	f8 07       	cpc	r31, r24
    6478:	09 f4       	brne	.+2      	; 0x647c
    647a:	6b c0       	rjmp	.+214    	; 0x6552
    647c:	83 85       	ldd	r24, Z+11	; 0x0b
    647e:	94 85       	ldd	r25, Z+12	; 0x0c
    6480:	a5 85       	ldd	r26, Z+13	; 0x0d
    6482:	b6 85       	ldd	r27, Z+14	; 0x0e
    6484:	9c 01       	movw	r18, r24
    6486:	ad 01       	movw	r20, r26
    6488:	2e 19       	sub	r18, r14
    648a:	3f 09       	sbc	r19, r15
    648c:	40 0b       	sbc	r20, r16
    648e:	51 0b       	sbc	r21, r17
    6490:	8e 15       	cp	r24, r14
    6492:	9f 05       	cpc	r25, r15
    6494:	a0 07       	cpc	r26, r16
    6496:	b1 07       	cpc	r27, r17
    6498:	0c f0       	brlt	.+2      	; 0x649c
    649a:	ab c0       	rjmp	.+342    	; 0x65f2
    649c:	23 87       	std	Z+11, r18	; 0x0b
    649e:	34 87       	std	Z+12, r19	; 0x0c
    64a0:	45 87       	std	Z+13, r20	; 0x0d
    64a2:	56 87       	std	Z+14, r21	; 0x0e
    64a4:	e8 1a       	sub	r14, r24
    64a6:	f9 0a       	sbc	r15, r25
    64a8:	0a 0b       	sbc	r16, r26
    64aa:	1b 0b       	sbc	r17, r27
    64ac:	01 90       	ld	r0, Z+
    64ae:	f0 81       	ld	r31, Z
    64b0:	e0 2d       	mov	r30, r0
    64b2:	df cf       	rjmp	.-66     	; 0x6472
    64b4:	c0 91 6c 0a 	lds	r28, 0x0A6C
    64b8:	d0 91 6d 0a 	lds	r29, 0x0A6D
    64bc:	8b 85       	ldd	r24, Y+11	; 0x0b
    64be:	9c 85       	ldd	r25, Y+12	; 0x0c
    64c0:	ad 85       	ldd	r26, Y+13	; 0x0d
    64c2:	be 85       	ldd	r27, Y+14	; 0x0e
    64c4:	18 16       	cp	r1, r24
    64c6:	19 06       	cpc	r1, r25
    64c8:	1a 06       	cpc	r1, r26
    64ca:	1b 06       	cpc	r1, r27
    64cc:	0c f4       	brge	.+2      	; 0x64d0
    64ce:	56 c0       	rjmp	.+172    	; 0x657c
    64d0:	bd 80       	ldd	r11, Y+5	; 0x05
    64d2:	ce 80       	ldd	r12, Y+6	; 0x06
    64d4:	8c e6       	ldi	r24, 0x6C	; 108
    64d6:	9a e0       	ldi	r25, 0x0A	; 10
    64d8:	0e 94 66 35 	call	0x6acc
    64dc:	8c 81       	ldd	r24, Y+4	; 0x04
    64de:	81 fd       	sbrc	r24, 1
    64e0:	03 c0       	rjmp	.+6      	; 0x64e8
    64e2:	40 e4       	ldi	r20, 0x40	; 64
    64e4:	d4 2e       	mov	r13, r20
    64e6:	01 c0       	rjmp	.+2      	; 0x64ea
    64e8:	d1 2e       	mov	r13, r17
    64ea:	80 fd       	sbrc	r24, 0
    64ec:	22 c0       	rjmp	.+68     	; 0x6532
    64ee:	2b 85       	ldd	r18, Y+11	; 0x0b
    64f0:	3c 85       	ldd	r19, Y+12	; 0x0c
    64f2:	4d 85       	ldd	r20, Y+13	; 0x0d
    64f4:	5e 85       	ldd	r21, Y+14	; 0x0e
    64f6:	12 16       	cp	r1, r18
    64f8:	13 06       	cpc	r1, r19
    64fa:	14 06       	cpc	r1, r20
    64fc:	15 06       	cpc	r1, r21
    64fe:	ac f0       	brlt	.+42     	; 0x652a
    6500:	ef 80       	ldd	r14, Y+7	; 0x07
    6502:	f8 84       	ldd	r15, Y+8	; 0x08
    6504:	09 85       	ldd	r16, Y+9	; 0x09
    6506:	1a 85       	ldd	r17, Y+10	; 0x0a
    6508:	da 01       	movw	r26, r20
    650a:	c9 01       	movw	r24, r18
    650c:	8e 0d       	add	r24, r14
    650e:	9f 1d       	adc	r25, r15
    6510:	a0 1f       	adc	r26, r16
    6512:	b1 1f       	adc	r27, r17
    6514:	9c 01       	movw	r18, r24
    6516:	ad 01       	movw	r20, r26
    6518:	18 16       	cp	r1, r24
    651a:	19 06       	cpc	r1, r25
    651c:	1a 06       	cpc	r1, r26
    651e:	1b 06       	cpc	r1, r27
    6520:	9c f7       	brge	.-26     	; 0x6508
    6522:	8b 87       	std	Y+11, r24	; 0x0b
    6524:	9c 87       	std	Y+12, r25	; 0x0c
    6526:	ad 87       	std	Y+13, r26	; 0x0d
    6528:	be 87       	std	Y+14, r27	; 0x0e
    652a:	be 01       	movw	r22, r28
    652c:	88 e7       	ldi	r24, 0x78	; 120
    652e:	9a e0       	ldi	r25, 0x0A	; 10
    6530:	03 c0       	rjmp	.+6      	; 0x6538
    6532:	be 01       	movw	r22, r28
    6534:	80 e7       	ldi	r24, 0x70	; 112
    6536:	9a e0       	ldi	r25, 0x0A	; 10
    6538:	0e 94 3a 35 	call	0x6a74
    653c:	8d 2d       	mov	r24, r13
    653e:	99 27       	eor	r25, r25
    6540:	7c 01       	movw	r14, r24
    6542:	00 e0       	ldi	r16, 0x00	; 0
    6544:	10 e0       	ldi	r17, 0x00	; 0
    6546:	2c 2d       	mov	r18, r12
    6548:	42 e0       	ldi	r20, 0x02	; 2
    654a:	64 e0       	ldi	r22, 0x04	; 4
    654c:	8b 2d       	mov	r24, r11
    654e:	0e 94 9b 16 	call	0x2d36
    6552:	8c e6       	ldi	r24, 0x6C	; 108
    6554:	9a e0       	ldi	r25, 0x0A	; 10
    6556:	0e 94 78 35 	call	0x6af0
    655a:	18 2f       	mov	r17, r24
    655c:	88 23       	and	r24, r24
    655e:	09 f4       	brne	.+2      	; 0x6562
    6560:	a9 cf       	rjmp	.-174    	; 0x64b4
    6562:	0c c0       	rjmp	.+24     	; 0x657c
    6564:	00 91 78 0a 	lds	r16, 0x0A78
    6568:	10 91 79 0a 	lds	r17, 0x0A79
    656c:	88 e7       	ldi	r24, 0x78	; 120
    656e:	9a e0       	ldi	r25, 0x0A	; 10
    6570:	0e 94 66 35 	call	0x6acc
    6574:	6c 2f       	mov	r22, r28
    6576:	c8 01       	movw	r24, r16
    6578:	0e 94 2f 2f 	call	0x5e5e
    657c:	88 e7       	ldi	r24, 0x78	; 120
    657e:	9a e0       	ldi	r25, 0x0A	; 10
    6580:	0e 94 78 35 	call	0x6af0
    6584:	c8 2f       	mov	r28, r24
    6586:	88 23       	and	r24, r24
    6588:	69 f3       	breq	.-38     	; 0x6564
    658a:	8c e6       	ldi	r24, 0x6C	; 108
    658c:	9a e0       	ldi	r25, 0x0A	; 10
    658e:	0e 94 78 35 	call	0x6af0
    6592:	88 23       	and	r24, r24
    6594:	09 f0       	breq	.+2      	; 0x6598
    6596:	39 c0       	rjmp	.+114    	; 0x660a
    6598:	e0 91 6c 0a 	lds	r30, 0x0A6C
    659c:	f0 91 6d 0a 	lds	r31, 0x0A6D
    65a0:	cf b7       	in	r28, 0x3f	; 63
    65a2:	f8 94       	cli
 * @brief Get the current value stored in the hardware register
 */
static inline uint8_t timer_hardware_get_counter()
{
	return TCNT0;
    65a4:	82 b7       	in	r24, 0x32	; 50
    65a6:	20 91 68 0a 	lds	r18, 0x0A68
    65aa:	30 91 69 0a 	lds	r19, 0x0A69
    65ae:	40 91 6a 0a 	lds	r20, 0x0A6A
    65b2:	50 91 6b 0a 	lds	r21, 0x0A6B
    65b6:	28 1b       	sub	r18, r24
    65b8:	31 09       	sbc	r19, r1
    65ba:	41 09       	sbc	r20, r1
    65bc:	51 09       	sbc	r21, r1
    65be:	e3 84       	ldd	r14, Z+11	; 0x0b
    65c0:	f4 84       	ldd	r15, Z+12	; 0x0c
    65c2:	05 85       	ldd	r16, Z+13	; 0x0d
    65c4:	16 85       	ldd	r17, Z+14	; 0x0e
    65c6:	d8 01       	movw	r26, r16
    65c8:	c7 01       	movw	r24, r14
    65ca:	82 1b       	sub	r24, r18
    65cc:	93 0b       	sbc	r25, r19
    65ce:	a4 0b       	sbc	r26, r20
    65d0:	b5 0b       	sbc	r27, r21
    65d2:	18 16       	cp	r1, r24
    65d4:	19 06       	cpc	r1, r25
    65d6:	1a 06       	cpc	r1, r26
    65d8:	1b 06       	cpc	r1, r27
    65da:	84 f4       	brge	.+32     	; 0x65fc
    65dc:	cf bf       	out	0x3f, r28	; 63
    65de:	e2 1a       	sub	r14, r18
    65e0:	f3 0a       	sbc	r15, r19
    65e2:	04 0b       	sbc	r16, r20
    65e4:	15 0b       	sbc	r17, r21
    65e6:	41 e0       	ldi	r20, 0x01	; 1
    65e8:	c8 01       	movw	r24, r16
    65ea:	b7 01       	movw	r22, r14
    65ec:	0e 94 ea 2e 	call	0x5dd4
    65f0:	16 c0       	rjmp	.+44     	; 0x661e
    65f2:	23 87       	std	Z+11, r18	; 0x0b
    65f4:	34 87       	std	Z+12, r19	; 0x0c
    65f6:	45 87       	std	Z+13, r20	; 0x0d
    65f8:	56 87       	std	Z+14, r21	; 0x0e
    65fa:	ab cf       	rjmp	.-170    	; 0x6552
    65fc:	cf bf       	out	0x3f, r28	; 63
    65fe:	62 e1       	ldi	r22, 0x12	; 18
    6600:	72 e3       	ldi	r23, 0x32	; 50
    6602:	80 e0       	ldi	r24, 0x00	; 0
    6604:	0e 94 8e 13 	call	0x271c
    6608:	0a c0       	rjmp	.+20     	; 0x661e
    660a:	cf b7       	in	r28, 0x3f	; 63
    660c:	f8 94       	cli
    660e:	40 e0       	ldi	r20, 0x00	; 0
    6610:	6a ef       	ldi	r22, 0xFA	; 250
    6612:	70 e0       	ldi	r23, 0x00	; 0
    6614:	80 e0       	ldi	r24, 0x00	; 0
    6616:	90 e0       	ldi	r25, 0x00	; 0
    6618:	0e 94 ea 2e 	call	0x5dd4
    661c:	cf bf       	out	0x3f, r28	; 63
    661e:	df 91       	pop	r29
    6620:	cf 91       	pop	r28
    6622:	1f 91       	pop	r17
    6624:	0f 91       	pop	r16
    6626:	ff 90       	pop	r15
    6628:	ef 90       	pop	r14
    662a:	df 90       	pop	r13
    662c:	cf 90       	pop	r12
    662e:	bf 90       	pop	r11
    6630:	08 95       	ret

00006632 <timer_realtime_start>:
    6632:	6f 92       	push	r6
    6634:	7f 92       	push	r7
    6636:	8f 92       	push	r8
    6638:	9f 92       	push	r9
    663a:	af 92       	push	r10
    663c:	bf 92       	push	r11
    663e:	df 92       	push	r13
    6640:	ef 92       	push	r14
    6642:	ff 92       	push	r15
    6644:	0f 93       	push	r16
    6646:	1f 93       	push	r17
    6648:	cf 93       	push	r28
    664a:	df 93       	push	r29
    664c:	8c 01       	movw	r16, r24
    664e:	4b 01       	movw	r8, r22
    6650:	3a 01       	movw	r6, r20
    6652:	df b6       	in	r13, 0x3f	; 63
    6654:	f8 94       	cli
    6656:	80 91 67 0a 	lds	r24, 0x0A67
    665a:	84 30       	cpi	r24, 0x04	; 4
    665c:	11 f4       	brne	.+4      	; 0x6662
    665e:	df be       	out	0x3f, r13	; 63
    6660:	54 c0       	rjmp	.+168    	; 0x670a
    6662:	40 e0       	ldi	r20, 0x00	; 0
    6664:	ee 24       	eor	r14, r14
    6666:	ff 24       	eor	r15, r15
    6668:	97 01       	movw	r18, r14
    666a:	57 01       	movw	r10, r14
    666c:	f9 01       	movw	r30, r18
    666e:	ea 0d       	add	r30, r10
    6670:	fb 1d       	adc	r31, r11
    6672:	e4 58       	subi	r30, 0x84	; 132
    6674:	f5 4f       	sbci	r31, 0xF5	; 245
    6676:	84 81       	ldd	r24, Z+4	; 0x04
    6678:	95 81       	ldd	r25, Z+5	; 0x05
    667a:	89 2b       	or	r24, r25
    667c:	c1 f5       	brne	.+112    	; 0x66ee
    667e:	8c e6       	ldi	r24, 0x6C	; 108
    6680:	9a e0       	ldi	r25, 0x0A	; 10
    6682:	0e 94 78 35 	call	0x6af0
    6686:	81 30       	cpi	r24, 0x01	; 1
    6688:	29 f4       	brne	.+10     	; 0x6694
    668a:	40 e0       	ldi	r20, 0x00	; 0
    668c:	b8 01       	movw	r22, r16
    668e:	88 27       	eor	r24, r24
    6690:	99 27       	eor	r25, r25
    6692:	17 c0       	rjmp	.+46     	; 0x66c2
#define timer_interrupt()    SIGNAL(SIG_OUTPUT_COMPARE0)
/**
 * @brief Get the current interval setting
 */ 
static inline uint8_t timer_getInterval()   {return OCR0 + 1;}
    6694:	81 b7       	in	r24, 0x31	; 49
    6696:	8f 5f       	subi	r24, 0xFF	; 255
/**
 * @brief Get the current value stored in the hardware register
 */
static inline uint8_t timer_hardware_get_counter()
{
	return TCNT0;
    6698:	22 b7       	in	r18, 0x32	; 50
    669a:	99 27       	eor	r25, r25
    669c:	82 1b       	sub	r24, r18
    669e:	91 09       	sbc	r25, r1
    66a0:	80 17       	cp	r24, r16
    66a2:	91 07       	cpc	r25, r17
    66a4:	80 f0       	brcs	.+32     	; 0x66c6
    66a6:	8c e6       	ldi	r24, 0x6C	; 108
    66a8:	9a e0       	ldi	r25, 0x0A	; 10
    66aa:	0e 94 78 35 	call	0x6af0
    66ae:	d8 01       	movw	r26, r16
    66b0:	cc 27       	eor	r28, r28
    66b2:	dd 27       	eor	r29, r29
    66b4:	81 30       	cpi	r24, 0x01	; 1
    66b6:	11 f4       	brne	.+4      	; 0x66bc
    66b8:	40 e0       	ldi	r20, 0x00	; 0
    66ba:	01 c0       	rjmp	.+2      	; 0x66be
    66bc:	41 e0       	ldi	r20, 0x01	; 1
    66be:	bd 01       	movw	r22, r26
    66c0:	ce 01       	movw	r24, r28
    66c2:	0e 94 ea 2e 	call	0x5dd4
    66c6:	80 91 67 0a 	lds	r24, 0x0A67
    66ca:	8f 5f       	subi	r24, 0xFF	; 255
    66cc:	80 93 67 0a 	sts	0x0A67, r24
    66d0:	f7 01       	movw	r30, r14
    66d2:	ea 0d       	add	r30, r10
    66d4:	fb 1d       	adc	r31, r11
    66d6:	e4 58       	subi	r30, 0x84	; 132
    66d8:	f5 4f       	sbci	r31, 0xF5	; 245
    66da:	00 83       	st	Z, r16
    66dc:	11 83       	std	Z+1, r17	; 0x01
    66de:	82 82       	std	Z+2, r8	; 0x02
    66e0:	93 82       	std	Z+3, r9	; 0x03
    66e2:	64 82       	std	Z+4, r6	; 0x04
    66e4:	75 82       	std	Z+5, r7	; 0x05
    66e6:	df be       	out	0x3f, r13	; 63
    66e8:	80 e0       	ldi	r24, 0x00	; 0
    66ea:	90 e0       	ldi	r25, 0x00	; 0
    66ec:	10 c0       	rjmp	.+32     	; 0x670e
    66ee:	4f 5f       	subi	r20, 0xFF	; 255
    66f0:	08 94       	sec
    66f2:	a1 1c       	adc	r10, r1
    66f4:	b1 1c       	adc	r11, r1
    66f6:	2b 5f       	subi	r18, 0xFB	; 251
    66f8:	3f 4f       	sbci	r19, 0xFF	; 255
    66fa:	85 e0       	ldi	r24, 0x05	; 5
    66fc:	90 e0       	ldi	r25, 0x00	; 0
    66fe:	e8 0e       	add	r14, r24
    6700:	f9 1e       	adc	r15, r25
    6702:	44 30       	cpi	r20, 0x04	; 4
    6704:	08 f4       	brcc	.+2      	; 0x6708
    6706:	b2 cf       	rjmp	.-156    	; 0x666c
    6708:	df be       	out	0x3f, r13	; 63
    670a:	84 ef       	ldi	r24, 0xF4	; 244
    670c:	9f ef       	ldi	r25, 0xFF	; 255
    670e:	df 91       	pop	r29
    6710:	cf 91       	pop	r28
    6712:	1f 91       	pop	r17
    6714:	0f 91       	pop	r16
    6716:	ff 90       	pop	r15
    6718:	ef 90       	pop	r14
    671a:	df 90       	pop	r13
    671c:	bf 90       	pop	r11
    671e:	af 90       	pop	r10
    6720:	9f 90       	pop	r9
    6722:	8f 90       	pop	r8
    6724:	7f 90       	pop	r7
    6726:	6f 90       	pop	r6
    6728:	08 95       	ret

0000672a <timer_realtime_stop>:
    672a:	dc 01       	movw	r26, r24
    672c:	6f b7       	in	r22, 0x3f	; 63
    672e:	f8 94       	cli
    6730:	70 e0       	ldi	r23, 0x00	; 0
    6732:	20 e0       	ldi	r18, 0x00	; 0
    6734:	30 e0       	ldi	r19, 0x00	; 0
    6736:	a9 01       	movw	r20, r18
    6738:	f9 01       	movw	r30, r18
    673a:	e4 0f       	add	r30, r20
    673c:	f5 1f       	adc	r31, r21
    673e:	e4 58       	subi	r30, 0x84	; 132
    6740:	f5 4f       	sbci	r31, 0xF5	; 245
    6742:	84 81       	ldd	r24, Z+4	; 0x04
    6744:	95 81       	ldd	r25, Z+5	; 0x05
    6746:	8a 17       	cp	r24, r26
    6748:	9b 07       	cpc	r25, r27
    674a:	59 f4       	brne	.+22     	; 0x6762
    674c:	14 82       	std	Z+4, r1	; 0x04
    674e:	15 82       	std	Z+5, r1	; 0x05
    6750:	80 91 67 0a 	lds	r24, 0x0A67
    6754:	81 50       	subi	r24, 0x01	; 1
    6756:	80 93 67 0a 	sts	0x0A67, r24
    675a:	6f bf       	out	0x3f, r22	; 63
    675c:	80 e0       	ldi	r24, 0x00	; 0
    675e:	90 e0       	ldi	r25, 0x00	; 0
    6760:	08 95       	ret
    6762:	7f 5f       	subi	r23, 0xFF	; 255
    6764:	4f 5f       	subi	r20, 0xFF	; 255
    6766:	5f 4f       	sbci	r21, 0xFF	; 255
    6768:	2b 5f       	subi	r18, 0xFB	; 251
    676a:	3f 4f       	sbci	r19, 0xFF	; 255
    676c:	74 30       	cpi	r23, 0x04	; 4
    676e:	20 f3       	brcs	.-56     	; 0x6738
    6770:	6f bf       	out	0x3f, r22	; 63
    6772:	8a ee       	ldi	r24, 0xEA	; 234
    6774:	9f ef       	ldi	r25, 0xFF	; 255
    6776:	08 95       	ret
    6778:	08 95       	ret

0000677a <__vector_15>:

timer_interrupt()
{
    677a:	1f 92       	push	r1
    677c:	0f 92       	push	r0
    677e:	0f b6       	in	r0, 0x3f	; 63
    6780:	0f 92       	push	r0
    6782:	11 24       	eor	r1, r1
    6784:	2f 93       	push	r18
    6786:	3f 93       	push	r19
    6788:	4f 93       	push	r20
    678a:	5f 93       	push	r21
    678c:	6f 93       	push	r22
    678e:	7f 93       	push	r23
    6790:	8f 93       	push	r24
    6792:	9f 93       	push	r25
    6794:	af 93       	push	r26
    6796:	bf 93       	push	r27
    6798:	cf 93       	push	r28
    679a:	df 93       	push	r29
    679c:	ef 93       	push	r30
    679e:	ff 93       	push	r31
#define timer_interrupt()    SIGNAL(SIG_OUTPUT_COMPARE0)
/**
 * @brief Get the current interval setting
 */ 
static inline uint8_t timer_getInterval()   {return OCR0 + 1;}
    67a0:	81 b7       	in	r24, 0x31	; 49
    67a2:	8f 5f       	subi	r24, 0xFF	; 255
    67a4:	c8 2f       	mov	r28, r24
    67a6:	dd 27       	eor	r29, r29
#ifdef SOS_USE_PREEMPTION
  uint8_t cnt = timer_getInterval();

  timer_update_delta(cnt);
  while(list_empty(&deltaq) == false) {
	sos_timer_t *h = (sos_timer_t*)(deltaq.l_next);         
	if(h->delta <= 0) {
	  sos_pid_t pid = h->pid;
	  uint8_t tid = h->tid;
	  MsgParam *p;
	  Message *msg;
	  pri_t pid_pri = get_module_priority(pid);

	  list_remove_head(&deltaq);
	  
	  if (((h->type) & ONE_SHOT_TIMER_MASK) == 0){
		//! periocic timer
		while(h->delta <= 0) {
		  // make sure it is positive
		  h->delta += h->ticks;
		}
		list_insert_tail(&periodic_pool, (list_t*) h);
		
	  } else {
		list_insert_tail(&timer_pool, (list_link_t*)h);
	  }

	  // If priority is higher than current, msg_queue and preemption point is ok,
	  // dispatch now
	  if((GET_PREEMPTION_STATUS() == ENABLED) && (pid_pri > curr_pri) &&
		 ((schedpq.head == NULL) || (pid_pri > schedpq.head->priority)) &&
		 (preemption_point(pid) == 1)) {
		ENABLE_GLOBAL_INTERRUPTS();
		sched_dispatch_short_message(pid, TIMER_PID, MSG_TIMER_TIMEOUT,
								   tid, 0, 0);
	  }
	  else {
		ENABLE_GLOBAL_INTERRUPTS();
		// Queue the msg
		msg = msg_create();
		if (msg != NULL) {
		  msg->did = pid;
		  msg->sid = TIMER_PID;
		  msg->type = MSG_TIMER_TIMEOUT;
		  msg->flag = 0;
		  msg->priority = pid_pri;
		  p = (MsgParam*)(msg->data);
		  p->byte = tid;
		  p->word = 0;
		  mq_enqueue(&schedpq, msg);
		}
	  }
	  DISABLE_GLOBAL_INTERRUPTS();
	} else {
	  break;
	}
  }
  
  while(list_empty(&periodic_pool) == false) {
	list_link_t *link = periodic_pool.l_next;
	list_remove_head(&periodic_pool);
	timer_delta_q_insert((sos_timer_t*)link, false);
  }
  
  if(list_empty(&deltaq) == false) {
	sos_timer_t *h = (sos_timer_t*)(deltaq.l_next);
	int32_t hw_cnt;
	hw_cnt = -(timer_hardware_get_counter());
	if( h->delta - hw_cnt > 0) {
	  timer_set_hw_top(h->delta - hw_cnt, true);
	}
  } 
  else {
	timer_set_hw_top(MAX_SLEEP_INTERVAL, false);
  }

#else
	uint8_t cnt = timer_getInterval();
	outstanding_ticks += cnt;
    67a8:	80 91 68 0a 	lds	r24, 0x0A68
    67ac:	90 91 69 0a 	lds	r25, 0x0A69
    67b0:	a0 91 6a 0a 	lds	r26, 0x0A6A
    67b4:	b0 91 6b 0a 	lds	r27, 0x0A6B
    67b8:	8c 0f       	add	r24, r28
    67ba:	91 1d       	adc	r25, r1
    67bc:	a1 1d       	adc	r26, r1
    67be:	b1 1d       	adc	r27, r1
    67c0:	80 93 68 0a 	sts	0x0A68, r24
    67c4:	90 93 69 0a 	sts	0x0A69, r25
    67c8:	a0 93 6a 0a 	sts	0x0A6A, r26
    67cc:	b0 93 6b 0a 	sts	0x0A6B, r27
	sched_add_interrupt(SCHED_TIMER_INT, soft_interrupt);
    67d0:	62 e1       	ldi	r22, 0x12	; 18
    67d2:	72 e3       	ldi	r23, 0x32	; 50
    67d4:	80 e0       	ldi	r24, 0x00	; 0
    67d6:	0e 94 8e 13 	call	0x271c


	if( num_realtime_clock > 0 ) {
    67da:	80 91 67 0a 	lds	r24, 0x0A67
    67de:	88 23       	and	r24, r24
    67e0:	49 f0       	breq	.+18     	; 0x67f4
		timer_set_hw_interval(	timer_update_realtime_clock(cnt) );
    67e2:	8c 2f       	mov	r24, r28
    67e4:	0e 94 5b 2e 	call	0x5cb6
    67e8:	aa 27       	eor	r26, r26
    67ea:	bb 27       	eor	r27, r27
    67ec:	bc 01       	movw	r22, r24
    67ee:	cd 01       	movw	r24, r26
    67f0:	0e 94 3e 2e 	call	0x5c7c
    67f4:	ff 91       	pop	r31
    67f6:	ef 91       	pop	r30
    67f8:	df 91       	pop	r29
    67fa:	cf 91       	pop	r28
    67fc:	bf 91       	pop	r27
    67fe:	af 91       	pop	r26
    6800:	9f 91       	pop	r25
    6802:	8f 91       	pop	r24
    6804:	7f 91       	pop	r23
    6806:	6f 91       	pop	r22
    6808:	5f 91       	pop	r21
    680a:	4f 91       	pop	r20
    680c:	3f 91       	pop	r19
    680e:	2f 91       	pop	r18
    6810:	0f 90       	pop	r0
    6812:	0f be       	out	0x3f, r0	; 63
    6814:	0f 90       	pop	r0
    6816:	1f 90       	pop	r1
    6818:	18 95       	reti

0000681a <monitor_init>:
//  Funcation declarations
//----------------------------------------------------------------------------
int8_t monitor_init()
{
  cb_list = NULL;
    681a:	10 92 9b 0a 	sts	0x0A9B, r1
    681e:	10 92 9a 0a 	sts	0x0A9A, r1
  return SOS_OK;
}
    6822:	80 e0       	ldi	r24, 0x00	; 0
    6824:	90 e0       	ldi	r25, 0x00	; 0
    6826:	08 95       	ret

00006828 <ker_register_monitor>:

int8_t ker_register_monitor(sos_pid_t pid, uint8_t type, monitor_cb *cb)
{
    6828:	1f 93       	push	r17
    682a:	cf 93       	push	r28
    682c:	df 93       	push	r29
    682e:	16 2f       	mov	r17, r22
    6830:	ea 01       	movw	r28, r20
	cb->mod_handle = ker_get_module(pid);
    6832:	0e 94 9d 13 	call	0x273a
    6836:	89 83       	std	Y+1, r24	; 0x01
    6838:	9a 83       	std	Y+2, r25	; 0x02
	if(cb->mod_handle == NULL) return -ESRCH;
    683a:	89 2b       	or	r24, r25
    683c:	19 f4       	brne	.+6      	; 0x6844
    683e:	8d ef       	ldi	r24, 0xFD	; 253
    6840:	9f ef       	ldi	r25, 0xFF	; 255
    6842:	1b c0       	rjmp	.+54     	; 0x687a
	cb->type = type;
    6844:	18 83       	st	Y, r17
	cb->next = NULL;
    6846:	1b 82       	std	Y+3, r1	; 0x03
    6848:	1c 82       	std	Y+4, r1	; 0x04
	if(cb_list == NULL) {
    684a:	80 91 9a 0a 	lds	r24, 0x0A9A
    684e:	90 91 9b 0a 	lds	r25, 0x0A9B
    6852:	00 97       	sbiw	r24, 0x00	; 0
    6854:	29 f4       	brne	.+10     	; 0x6860
		/**
		 * Current list is empty
		 */
		cb_list = cb;
    6856:	d0 93 9b 0a 	sts	0x0A9B, r29
    685a:	c0 93 9a 0a 	sts	0x0A9A, r28
    685e:	0b c0       	rjmp	.+22     	; 0x6876
	} else {
		/**
		 * List is not empty, traverse the list to the end
		 * and add this new CB
		 */
		monitor_cb *curr = cb_list;
    6860:	fc 01       	movw	r30, r24
		while(curr->next != NULL){ curr = curr->next; }
    6862:	83 81       	ldd	r24, Z+3	; 0x03
    6864:	94 81       	ldd	r25, Z+4	; 0x04
    6866:	89 2b       	or	r24, r25
    6868:	21 f0       	breq	.+8      	; 0x6872
    686a:	03 80       	ldd	r0, Z+3	; 0x03
    686c:	f4 81       	ldd	r31, Z+4	; 0x04
    686e:	e0 2d       	mov	r30, r0
    6870:	f8 cf       	rjmp	.-16     	; 0x6862
		curr->next = cb;
    6872:	c3 83       	std	Z+3, r28	; 0x03
    6874:	d4 83       	std	Z+4, r29	; 0x04
	}
	return SOS_OK;
    6876:	80 e0       	ldi	r24, 0x00	; 0
    6878:	90 e0       	ldi	r25, 0x00	; 0
    687a:	df 91       	pop	r29
    687c:	cf 91       	pop	r28
    687e:	1f 91       	pop	r17
    6880:	08 95       	ret

00006882 <ker_deregister_monitor>:
}

int8_t ker_deregister_monitor(monitor_cb *cb)
{
	monitor_cb *curr = cb_list;
    6882:	e0 91 9a 0a 	lds	r30, 0x0A9A
    6886:	f0 91 9b 0a 	lds	r31, 0x0A9B
	monitor_cb *prev = cb_list;
    688a:	df 01       	movw	r26, r30
	while(curr) {
		if(curr == cb) {
			if(curr == prev) {
				/**
				 * Removing the head
				 */
				cb_list = curr->next;	
			} else {
				/**
				 * Removing non-head item in the list
				 */
				prev->next = curr->next;
			}
			return SOS_OK;
		}
		prev = curr;
		curr = curr->next;
    688c:	30 97       	sbiw	r30, 0x00	; 0
    688e:	c1 f0       	breq	.+48     	; 0x68c0
    6890:	e8 17       	cp	r30, r24
    6892:	f9 07       	cpc	r31, r25
    6894:	81 f4       	brne	.+32     	; 0x68b6
    6896:	83 81       	ldd	r24, Z+3	; 0x03
    6898:	94 81       	ldd	r25, Z+4	; 0x04
    689a:	ea 17       	cp	r30, r26
    689c:	fb 07       	cpc	r31, r27
    689e:	29 f4       	brne	.+10     	; 0x68aa
    68a0:	90 93 9b 0a 	sts	0x0A9B, r25
    68a4:	80 93 9a 0a 	sts	0x0A9A, r24
    68a8:	03 c0       	rjmp	.+6      	; 0x68b0
    68aa:	fd 01       	movw	r30, r26
    68ac:	83 83       	std	Z+3, r24	; 0x03
    68ae:	94 83       	std	Z+4, r25	; 0x04
    68b0:	80 e0       	ldi	r24, 0x00	; 0
    68b2:	90 e0       	ldi	r25, 0x00	; 0
    68b4:	08 95       	ret
    68b6:	df 01       	movw	r26, r30
    68b8:	03 80       	ldd	r0, Z+3	; 0x03
    68ba:	f4 81       	ldd	r31, Z+4	; 0x04
    68bc:	e0 2d       	mov	r30, r0
    68be:	e6 cf       	rjmp	.-52     	; 0x688c
	}
	return -EINVAL;
    68c0:	8a ee       	ldi	r24, 0xEA	; 234
    68c2:	9f ef       	ldi	r25, 0xFF	; 255
}
    68c4:	08 95       	ret
    68c6:	08 95       	ret

000068c8 <monitor_remove_all>:

void monitor_remove_all(sos_pid_t pid )
{
    68c8:	cf 93       	push	r28
    68ca:	df 93       	push	r29
    68cc:	98 2f       	mov	r25, r24
	monitor_cb *curr = cb_list;
    68ce:	a0 91 9a 0a 	lds	r26, 0x0A9A
    68d2:	b0 91 9b 0a 	lds	r27, 0x0A9B
	monitor_cb *prev = cb_list;
    68d6:	ed 01       	movw	r28, r26

	while(curr) {
		if(curr->mod_handle->pid == pid) {
			if(curr == prev) {
				/**
				 * Removing the head
				 */
				cb_list = curr->next;
			} else {
				/**
				 * Removing non-head item in the list
				 */
				prev->next = curr->next;
			}
			return;
		}
		prev = curr;
		curr = curr->next;
    68d8:	10 97       	sbiw	r26, 0x00	; 0
    68da:	e1 f0       	breq	.+56     	; 0x6914
    68dc:	9d 01       	movw	r18, r26
    68de:	fd 01       	movw	r30, r26
    68e0:	41 81       	ldd	r20, Z+1	; 0x01
    68e2:	52 81       	ldd	r21, Z+2	; 0x02
    68e4:	fa 01       	movw	r30, r20
    68e6:	84 81       	ldd	r24, Z+4	; 0x04
    68e8:	89 17       	cp	r24, r25
    68ea:	59 f4       	brne	.+22     	; 0x6902
    68ec:	fd 01       	movw	r30, r26
    68ee:	83 81       	ldd	r24, Z+3	; 0x03
    68f0:	94 81       	ldd	r25, Z+4	; 0x04
    68f2:	ac 17       	cp	r26, r28
    68f4:	bd 07       	cpc	r27, r29
    68f6:	11 f4       	brne	.+4      	; 0x68fc
    68f8:	9c 01       	movw	r18, r24
    68fa:	08 c0       	rjmp	.+16     	; 0x690c
    68fc:	8b 83       	std	Y+3, r24	; 0x03
    68fe:	9c 83       	std	Y+4, r25	; 0x04
    6900:	05 c0       	rjmp	.+10     	; 0x690c
    6902:	ed 01       	movw	r28, r26
    6904:	ab 81       	ldd	r26, Y+3	; 0x03
    6906:	bc 81       	ldd	r27, Y+4	; 0x04
    6908:	10 97       	sbiw	r26, 0x00	; 0
    690a:	49 f7       	brne	.-46     	; 0x68de
    690c:	30 93 9b 0a 	sts	0x0A9B, r19
    6910:	20 93 9a 0a 	sts	0x0A9A, r18
    6914:	df 91       	pop	r29
    6916:	cf 91       	pop	r28
    6918:	08 95       	ret

0000691a <monitor_deliver_incoming_msg_to_monitor>:
	}
}

void monitor_deliver_incoming_msg_to_monitor(Message *m)
{
    691a:	df 92       	push	r13
    691c:	ef 92       	push	r14
    691e:	ff 92       	push	r15
    6920:	0f 93       	push	r16
    6922:	1f 93       	push	r17
    6924:	cf 93       	push	r28
    6926:	df 93       	push	r29
    6928:	7c 01       	movw	r14, r24
	uint8_t type;
	monitor_cb *curr;

#ifdef MSG_TRACE
#ifdef PC_PLATFORM
	msg_trace(m, false);
#endif
#endif
	if(cb_list == NULL) return;
    692a:	40 91 9a 0a 	lds	r20, 0x0A9A
    692e:	50 91 9b 0a 	lds	r21, 0x0A9B
    6932:	41 15       	cp	r20, r1
    6934:	51 05       	cpc	r21, r1
    6936:	09 f4       	brne	.+2      	; 0x693a
    6938:	39 c0       	rjmp	.+114    	; 0x69ac
	/**
	 * in SOS, incoming message can be both local and 
	 * from the network
	 */
	if(m->saddr == node_address) {
    693a:	fc 01       	movw	r30, r24
    693c:	24 81       	ldd	r18, Z+4	; 0x04
    693e:	35 81       	ldd	r19, Z+5	; 0x05
    6940:	80 91 04 01 	lds	r24, 0x0104
    6944:	90 91 05 01 	lds	r25, 0x0105
    6948:	28 17       	cp	r18, r24
    694a:	39 07       	cpc	r19, r25
    694c:	19 f4       	brne	.+6      	; 0x6954
		/**
		 * local message
		 */
		type = MON_LOCAL;
    694e:	64 e0       	ldi	r22, 0x04	; 4
    6950:	d6 2e       	mov	r13, r22
    6952:	02 c0       	rjmp	.+4      	; 0x6958
	} else {
		/**
		 * from network
		 */
		type = MON_NET_INCOMING;
    6954:	31 e0       	ldi	r19, 0x01	; 1
    6956:	d3 2e       	mov	r13, r19
	}
	curr = cb_list;
    6958:	8a 01       	movw	r16, r20
	while(curr) {
		/**
		 * We only deliver the message if the destination is 
		 * not the monitor.  It does not make sense to 
		 * deliver the message twice
		 */
		if((curr->type & type) != 0 && 
			curr->mod_handle->pid != m->did) {
			msg_handler_t handler = 
				(msg_handler_t)sos_read_header_ptr(
							curr->mod_handle->header,
							offsetof(mod_header_t,module_handler));
			void *handler_state = curr->mod_handle->handler_state;
#ifdef SOS_USE_PREEMPTION
			// push the old pid and priority
			*pid_sp++ = curr_pid;
			*pri_sp++ - curr_pri;
			// set the new priority
			curr_pri = get_module_priority(curr->mod_handle->pid);
#endif
			curr_pid = curr->mod_handle->pid;
			handler(handler_state, m);
#ifdef SOS_USE_PREEMPTION
			// pop the old pid and priority
			curr_pid = *(--pid_sp);
			curr_pri = *(--pri_sp);
#endif
		}
		curr = curr->next;
    695a:	45 2b       	or	r20, r21
    695c:	39 f1       	breq	.+78     	; 0x69ac
    695e:	f8 01       	movw	r30, r16
    6960:	80 81       	ld	r24, Z
    6962:	8d 21       	and	r24, r13
    6964:	e9 f0       	breq	.+58     	; 0x69a0
    6966:	c1 81       	ldd	r28, Z+1	; 0x01
    6968:	d2 81       	ldd	r29, Z+2	; 0x02
    696a:	4c 81       	ldd	r20, Y+4	; 0x04
    696c:	f7 01       	movw	r30, r14
    696e:	80 81       	ld	r24, Z
    6970:	48 17       	cp	r20, r24
    6972:	b1 f0       	breq	.+44     	; 0x69a0
    6974:	8a 81       	ldd	r24, Y+2	; 0x02
    6976:	9b 81       	ldd	r25, Y+3	; 0x03
    6978:	aa 27       	eor	r26, r26
    697a:	bb 27       	eor	r27, r27
    697c:	88 0f       	add	r24, r24
    697e:	99 1f       	adc	r25, r25
    6980:	aa 1f       	adc	r26, r26
    6982:	bb 1f       	adc	r27, r27
    6984:	0e 96       	adiw	r24, 0x0e	; 14
    6986:	a1 1d       	adc	r26, r1
    6988:	b1 1d       	adc	r27, r1
    698a:	ab bf       	out	0x3b, r26	; 59
    698c:	fc 01       	movw	r30, r24
    698e:	27 91       	elpm	r18, Z+
    6990:	36 91       	elpm	r19, Z
    6992:	8e 81       	ldd	r24, Y+6	; 0x06
    6994:	9f 81       	ldd	r25, Y+7	; 0x07
    6996:	40 93 ed 0b 	sts	0x0BED, r20
    699a:	b7 01       	movw	r22, r14
    699c:	f9 01       	movw	r30, r18
    699e:	09 95       	icall
    69a0:	f8 01       	movw	r30, r16
    69a2:	03 81       	ldd	r16, Z+3	; 0x03
    69a4:	14 81       	ldd	r17, Z+4	; 0x04
    69a6:	01 15       	cp	r16, r1
    69a8:	11 05       	cpc	r17, r1
    69aa:	c9 f6       	brne	.-78     	; 0x695e
    69ac:	df 91       	pop	r29
    69ae:	cf 91       	pop	r28
    69b0:	1f 91       	pop	r17
    69b2:	0f 91       	pop	r16
    69b4:	ff 90       	pop	r15
    69b6:	ef 90       	pop	r14
    69b8:	df 90       	pop	r13
    69ba:	08 95       	ret

000069bc <monitor_deliver_outgoing_msg_to_monitor>:
	}
}

void monitor_deliver_outgoing_msg_to_monitor(Message *m)
{
    69bc:	cf 92       	push	r12
    69be:	df 92       	push	r13
    69c0:	ef 92       	push	r14
    69c2:	ff 92       	push	r15
    69c4:	1f 93       	push	r17
    69c6:	cf 93       	push	r28
    69c8:	df 93       	push	r29
    69ca:	6c 01       	movw	r12, r24
	monitor_cb *curr;
#ifndef SOS_USE_PREEMPTION
	sos_pid_t prev_pid;
#endif
#ifdef MSG_TRACE
#ifdef PC_PLATFORM
	msg_trace(m, true);
#endif
#endif
	if(cb_list == NULL) return;
    69cc:	80 91 9a 0a 	lds	r24, 0x0A9A
    69d0:	90 91 9b 0a 	lds	r25, 0x0A9B
    69d4:	00 97       	sbiw	r24, 0x00	; 0
    69d6:	61 f1       	breq	.+88     	; 0x6a30
	curr = cb_list;
    69d8:	7c 01       	movw	r14, r24
	while(curr) {
		/**
		 * We only deliver the message if the source is not
		 * the monitor.  It does not make sense to deliver 
		 * the message sent by the monitor.
		 */
		if((curr->type & MON_NET_OUTGOING) != 0 &&
    69da:	f7 01       	movw	r30, r14
    69dc:	80 81       	ld	r24, Z
    69de:	81 ff       	sbrs	r24, 1
    69e0:	21 c0       	rjmp	.+66     	; 0x6a24
    69e2:	c1 81       	ldd	r28, Z+1	; 0x01
    69e4:	d2 81       	ldd	r29, Z+2	; 0x02
    69e6:	4c 81       	ldd	r20, Y+4	; 0x04
    69e8:	f6 01       	movw	r30, r12
    69ea:	81 81       	ldd	r24, Z+1	; 0x01
    69ec:	48 17       	cp	r20, r24
    69ee:	d1 f0       	breq	.+52     	; 0x6a24
			curr->mod_handle->pid != m->sid) {
			msg_handler_t handler = 
				(msg_handler_t)sos_read_header_ptr(
    69f0:	8a 81       	ldd	r24, Y+2	; 0x02
    69f2:	9b 81       	ldd	r25, Y+3	; 0x03
    69f4:	aa 27       	eor	r26, r26
    69f6:	bb 27       	eor	r27, r27
    69f8:	88 0f       	add	r24, r24
    69fa:	99 1f       	adc	r25, r25
    69fc:	aa 1f       	adc	r26, r26
    69fe:	bb 1f       	adc	r27, r27
    6a00:	0e 96       	adiw	r24, 0x0e	; 14
    6a02:	a1 1d       	adc	r26, r1
    6a04:	b1 1d       	adc	r27, r1
    6a06:	ab bf       	out	0x3b, r26	; 59
    6a08:	fc 01       	movw	r30, r24
    6a0a:	27 91       	elpm	r18, Z+
    6a0c:	36 91       	elpm	r19, Z
							curr->mod_handle->header,
							offsetof(mod_header_t,module_handler));
			void *handler_state = curr->mod_handle->handler_state;
    6a0e:	8e 81       	ldd	r24, Y+6	; 0x06
    6a10:	9f 81       	ldd	r25, Y+7	; 0x07
#ifdef SOS_USE_PREEMPTION
			// push the old pid and priority
			*pid_sp++ = curr_pid;
			*pri_sp++ = curr_pri;
			curr_pri = get_module_priority(curr->mod_handle->pid);
#else
			prev_pid = curr_pid;
    6a12:	10 91 ed 0b 	lds	r17, 0x0BED
#endif
			curr_pid = curr->mod_handle->pid;
    6a16:	40 93 ed 0b 	sts	0x0BED, r20
			handler(handler_state, m);
    6a1a:	b6 01       	movw	r22, r12
    6a1c:	f9 01       	movw	r30, r18
    6a1e:	09 95       	icall
#ifdef SOS_USE_PREEMPTION
			// pop the old pid and priority
			curr_pri = *(--pri_sp);
			curr_pid = *(--pid_sp);
#else
			curr_pid = prev_pid;
    6a20:	10 93 ed 0b 	sts	0x0BED, r17
#endif
		}
		curr = curr->next;
    6a24:	f7 01       	movw	r30, r14
    6a26:	e3 80       	ldd	r14, Z+3	; 0x03
    6a28:	f4 80       	ldd	r15, Z+4	; 0x04
    6a2a:	e1 14       	cp	r14, r1
    6a2c:	f1 04       	cpc	r15, r1
    6a2e:	a9 f6       	brne	.-86     	; 0x69da
    6a30:	df 91       	pop	r29
    6a32:	cf 91       	pop	r28
    6a34:	1f 91       	pop	r17
    6a36:	ff 90       	pop	r15
    6a38:	ef 90       	pop	r14
    6a3a:	df 90       	pop	r13
    6a3c:	cf 90       	pop	r12
    6a3e:	08 95       	ret

00006a40 <list_insert_before>:
#include <sos_list.h>
#include <sos_sched.h>

void list_insert_before(list_link_t* before, list_link_t* toInsert)
{
    6a40:	cf 93       	push	r28
    6a42:	df 93       	push	r29
    6a44:	db 01       	movw	r26, r22
	toInsert->l_next = before;
    6a46:	8d 93       	st	X+, r24
    6a48:	9c 93       	st	X, r25
	toInsert->l_prev = before->l_prev;
    6a4a:	ec 01       	movw	r28, r24
    6a4c:	8a 81       	ldd	r24, Y+2	; 0x02
    6a4e:	9b 81       	ldd	r25, Y+3	; 0x03
    6a50:	fb 01       	movw	r30, r22
    6a52:	82 83       	std	Z+2, r24	; 0x02
    6a54:	93 83       	std	Z+3, r25	; 0x03
	before->l_prev->l_next = toInsert;
    6a56:	ea 81       	ldd	r30, Y+2	; 0x02
    6a58:	fb 81       	ldd	r31, Y+3	; 0x03
    6a5a:	60 83       	st	Z, r22
    6a5c:	71 83       	std	Z+1, r23	; 0x01
	before->l_prev = toInsert;
    6a5e:	6a 83       	std	Y+2, r22	; 0x02
    6a60:	7b 83       	std	Y+3, r23	; 0x03
    6a62:	df 91       	pop	r29
    6a64:	cf 91       	pop	r28
    6a66:	08 95       	ret

00006a68 <list_insert_head>:
}

void list_insert_head(list_t* list, list_link_t* element)
{
    6a68:	fc 01       	movw	r30, r24
	list_insert_before(list->l_next, element);
    6a6a:	80 81       	ld	r24, Z
    6a6c:	91 81       	ldd	r25, Z+1	; 0x01
    6a6e:	0e 94 20 35 	call	0x6a40
    6a72:	08 95       	ret

00006a74 <list_insert_tail>:
}

void list_insert_tail(list_t* list, list_link_t* element)
{
	list_insert_before(list, element);
    6a74:	0e 94 20 35 	call	0x6a40
    6a78:	08 95       	ret

00006a7a <list_remove>:
}

void list_remove(list_link_t* ll)
{
    6a7a:	cf 93       	push	r28
    6a7c:	df 93       	push	r29
    6a7e:	fc 01       	movw	r30, r24
	list_link_t *before = ll->l_prev;
    6a80:	42 81       	ldd	r20, Z+2	; 0x02
    6a82:	53 81       	ldd	r21, Z+3	; 0x03
	list_link_t *after = ll->l_next;
    6a84:	a0 81       	ld	r26, Z
    6a86:	b1 81       	ldd	r27, Z+1	; 0x01
	if (before->l_next != ll && after->l_prev != ll)
    6a88:	ea 01       	movw	r28, r20
    6a8a:	28 81       	ld	r18, Y
    6a8c:	39 81       	ldd	r19, Y+1	; 0x01
    6a8e:	28 17       	cp	r18, r24
    6a90:	39 07       	cpc	r19, r25
    6a92:	31 f0       	breq	.+12     	; 0x6aa0
    6a94:	ed 01       	movw	r28, r26
    6a96:	8a 81       	ldd	r24, Y+2	; 0x02
    6a98:	9b 81       	ldd	r25, Y+3	; 0x03
    6a9a:	8e 17       	cp	r24, r30
    6a9c:	9f 07       	cpc	r25, r31
    6a9e:	79 f4       	brne	.+30     	; 0x6abe
	{
		ll->l_next = 0;
		ll->l_prev = 0;
		return;
	} else if (before->l_next != ll || after->l_prev != ll)
    6aa0:	2e 17       	cp	r18, r30
    6aa2:	3f 07       	cpc	r19, r31
    6aa4:	81 f4       	brne	.+32     	; 0x6ac6
    6aa6:	ed 01       	movw	r28, r26
    6aa8:	8a 81       	ldd	r24, Y+2	; 0x02
    6aaa:	9b 81       	ldd	r25, Y+3	; 0x03
    6aac:	8e 17       	cp	r24, r30
    6aae:	9f 07       	cpc	r25, r31
    6ab0:	51 f4       	brne	.+20     	; 0x6ac6
	{
		DEBUG("ERROR: corrupted queue\n");
		return;
	}
	before->l_next = after;
    6ab2:	ea 01       	movw	r28, r20
    6ab4:	a8 83       	st	Y, r26
    6ab6:	b9 83       	std	Y+1, r27	; 0x01
	after->l_prev = before;
    6ab8:	ed 01       	movw	r28, r26
    6aba:	4a 83       	std	Y+2, r20	; 0x02
    6abc:	5b 83       	std	Y+3, r21	; 0x03
	ll->l_next = NULL;
    6abe:	10 82       	st	Z, r1
    6ac0:	11 82       	std	Z+1, r1	; 0x01
	ll->l_prev = NULL;
    6ac2:	12 82       	std	Z+2, r1	; 0x02
    6ac4:	13 82       	std	Z+3, r1	; 0x03
    6ac6:	df 91       	pop	r29
    6ac8:	cf 91       	pop	r28
    6aca:	08 95       	ret

00006acc <list_remove_head>:
}



void list_remove_head(list_t* list)
{
    6acc:	fc 01       	movw	r30, r24
	list_remove((list)->l_next);
    6ace:	80 81       	ld	r24, Z
    6ad0:	91 81       	ldd	r25, Z+1	; 0x01
    6ad2:	0e 94 3d 35 	call	0x6a7a
    6ad6:	08 95       	ret

00006ad8 <list_remove_tail>:
}



void list_remove_tail(list_t* list)
{
	list_remove((list)->l_prev);
    6ad8:	fc 01       	movw	r30, r24
    6ada:	82 81       	ldd	r24, Z+2	; 0x02
    6adc:	93 81       	ldd	r25, Z+3	; 0x03
    6ade:	0e 94 3d 35 	call	0x6a7a
    6ae2:	08 95       	ret

00006ae4 <list_init>:
}

void list_init(list_t* list)
{
    6ae4:	fc 01       	movw	r30, r24
	list->l_next = list->l_prev = list;
    6ae6:	82 83       	std	Z+2, r24	; 0x02
    6ae8:	93 83       	std	Z+3, r25	; 0x03
    6aea:	80 83       	st	Z, r24
    6aec:	91 83       	std	Z+1, r25	; 0x01
    6aee:	08 95       	ret

00006af0 <list_empty>:
}

bool list_empty(list_t* list)
{
    6af0:	fc 01       	movw	r30, r24
	return ((list->l_next == list)? true:false);
    6af2:	20 e0       	ldi	r18, 0x00	; 0
    6af4:	30 e0       	ldi	r19, 0x00	; 0
    6af6:	80 81       	ld	r24, Z
    6af8:	91 81       	ldd	r25, Z+1	; 0x01
    6afa:	8e 17       	cp	r24, r30
    6afc:	9f 07       	cpc	r25, r31
    6afe:	11 f4       	brne	.+4      	; 0x6b04
    6b00:	21 e0       	ldi	r18, 0x01	; 1
    6b02:	30 e0       	ldi	r19, 0x00	; 0
}
    6b04:	c9 01       	movw	r24, r18
    6b06:	08 95       	ret

00006b08 <id_init>:

int8_t id_init()
{
   return SOS_OK;
}
    6b08:	80 e0       	ldi	r24, 0x00	; 0
    6b0a:	90 e0       	ldi	r25, 0x00	; 0
    6b0c:	08 95       	ret

00006b0e <ker_set_id>:


//! The following function is used by the 802.15.4 MAC to set the node address after boot-up
void ker_set_id(uint16_t alloc_address)
{
    node_address = alloc_address;
    6b0e:	90 93 05 01 	sts	0x0105, r25
    6b12:	80 93 04 01 	sts	0x0104, r24
    6b16:	08 95       	ret

00006b18 <ker_id>:
}

uint16_t ker_id()
{
    return node_address;
}
    6b18:	80 91 04 01 	lds	r24, 0x0104
    6b1c:	90 91 05 01 	lds	r25, 0x0105
    6b20:	08 95       	ret

00006b22 <ker_loc>:

node_loc_t ker_loc()
{
    6b22:	af 92       	push	r10
    6b24:	bf 92       	push	r11
    6b26:	cf 92       	push	r12
    6b28:	df 92       	push	r13
    6b2a:	ef 92       	push	r14
    6b2c:	ff 92       	push	r15
    6b2e:	0f 93       	push	r16
    6b30:	1f 93       	push	r17
    return node_loc;
    6b32:	e0 91 19 01 	lds	r30, 0x0119
    6b36:	20 91 12 01 	lds	r18, 0x0112
    6b3a:	30 91 13 01 	lds	r19, 0x0113
    6b3e:	40 91 14 01 	lds	r20, 0x0114
    6b42:	50 91 15 01 	lds	r21, 0x0115
    6b46:	60 91 16 01 	lds	r22, 0x0116
    6b4a:	70 91 17 01 	lds	r23, 0x0117
    6b4e:	80 91 18 01 	lds	r24, 0x0118
}
    6b52:	9e 2f       	mov	r25, r30
    6b54:	1f 91       	pop	r17
    6b56:	0f 91       	pop	r16
    6b58:	ff 90       	pop	r15
    6b5a:	ef 90       	pop	r14
    6b5c:	df 90       	pop	r13
    6b5e:	cf 90       	pop	r12
    6b60:	bf 90       	pop	r11
    6b62:	af 90       	pop	r10
    6b64:	08 95       	ret

00006b66 <ker_gps>:

gps_t ker_gps()
{
    6b66:	cf 93       	push	r28
    6b68:	df 93       	push	r29
    6b6a:	fc 01       	movw	r30, r24
    return gps_loc;
    6b6c:	8c e0       	ldi	r24, 0x0C	; 12
    6b6e:	a6 e0       	ldi	r26, 0x06	; 6
    6b70:	b1 e0       	ldi	r27, 0x01	; 1
    6b72:	ef 01       	movw	r28, r30
    6b74:	0d 90       	ld	r0, X+
    6b76:	09 92       	st	Y+, r0
    6b78:	8a 95       	dec	r24
    6b7a:	e1 f7       	brne	.-8      	; 0x6b74
}
    6b7c:	cf 01       	movw	r24, r30
    6b7e:	df 91       	pop	r29
    6b80:	cf 91       	pop	r28
    6b82:	08 95       	ret

00006b84 <ker_loc_r2>:

uint32_t ker_loc_r2(node_loc_t *loc1, node_loc_t *loc2)
{
    6b84:	6f 92       	push	r6
    6b86:	7f 92       	push	r7
    6b88:	8f 92       	push	r8
    6b8a:	9f 92       	push	r9
    6b8c:	af 92       	push	r10
    6b8e:	bf 92       	push	r11
    6b90:	cf 92       	push	r12
    6b92:	df 92       	push	r13
    6b94:	ef 92       	push	r14
    6b96:	ff 92       	push	r15
    6b98:	0f 93       	push	r16
    6b9a:	1f 93       	push	r17
    6b9c:	cf 93       	push	r28
    6b9e:	df 93       	push	r29
    6ba0:	6c 01       	movw	r12, r24
    int32_t dx=0, dy=0, dz=0;
    uint32_t dx2=0, dy2=0, dz2=0;
#define SQUARED(x) ((x)*(x))
#define DXYZ_MAX ((int16_t)1<<14)
#define DXYZ_MIN -DXYZ_MAX

#ifndef MAX
#define MAX(a,b) ( ((a) > (b)) ? (a) : (b) )
#endif

#ifndef MIN
#define MIN(a,b) ( ((a) < (b)) ? (a) : (b) )
#endif

    if (loc1->unit != loc2->unit)
    6ba2:	dc 01       	movw	r26, r24
    6ba4:	2d 91       	ld	r18, X+
    6ba6:	3c 91       	ld	r19, X
    6ba8:	eb 01       	movw	r28, r22
    6baa:	88 81       	ld	r24, Y
    6bac:	99 81       	ldd	r25, Y+1	; 0x01
    6bae:	28 17       	cp	r18, r24
    6bb0:	39 07       	cpc	r19, r25
    6bb2:	49 f0       	breq	.+18     	; 0x6bc6
        return 0xffffffff;
    6bb4:	4f ef       	ldi	r20, 0xFF	; 255
    6bb6:	64 2e       	mov	r6, r20
    6bb8:	4f ef       	ldi	r20, 0xFF	; 255
    6bba:	74 2e       	mov	r7, r20
    6bbc:	4f ef       	ldi	r20, 0xFF	; 255
    6bbe:	84 2e       	mov	r8, r20
    6bc0:	4f ef       	ldi	r20, 0xFF	; 255
    6bc2:	94 2e       	mov	r9, r20
    6bc4:	9a c0       	rjmp	.+308    	; 0x6cfa
    /* Limit the largest dimension to +/- 16384 to prevent overflow */
    dx = loc1->x - loc2->x;
    6bc6:	f6 01       	movw	r30, r12
    6bc8:	82 81       	ldd	r24, Z+2	; 0x02
    6bca:	93 81       	ldd	r25, Z+3	; 0x03
    6bcc:	eb 01       	movw	r28, r22
    6bce:	2a 81       	ldd	r18, Y+2	; 0x02
    6bd0:	3b 81       	ldd	r19, Y+3	; 0x03
    6bd2:	82 1b       	sub	r24, r18
    6bd4:	93 0b       	sbc	r25, r19
    6bd6:	dc 01       	movw	r26, r24
    6bd8:	cc 27       	eor	r28, r28
    6bda:	b7 fd       	sbrc	r27, 7
    6bdc:	c0 95       	com	r28
    6bde:	dc 2f       	mov	r29, r28
    dy = loc1->y - loc2->y;
    6be0:	84 81       	ldd	r24, Z+4	; 0x04
    6be2:	95 81       	ldd	r25, Z+5	; 0x05
    6be4:	fb 01       	movw	r30, r22
    6be6:	24 81       	ldd	r18, Z+4	; 0x04
    6be8:	35 81       	ldd	r19, Z+5	; 0x05
    6bea:	82 1b       	sub	r24, r18
    6bec:	93 0b       	sbc	r25, r19
    6bee:	7c 01       	movw	r14, r24
    6bf0:	00 27       	eor	r16, r16
    6bf2:	f7 fc       	sbrc	r15, 7
    6bf4:	00 95       	com	r16
    6bf6:	10 2f       	mov	r17, r16
    dz = loc1->z - loc2->z;
    6bf8:	f6 01       	movw	r30, r12
    6bfa:	86 81       	ldd	r24, Z+6	; 0x06
    6bfc:	97 81       	ldd	r25, Z+7	; 0x07
    6bfe:	fb 01       	movw	r30, r22
    6c00:	26 81       	ldd	r18, Z+6	; 0x06
    6c02:	37 81       	ldd	r19, Z+7	; 0x07
    6c04:	82 1b       	sub	r24, r18
    6c06:	93 0b       	sbc	r25, r19
    6c08:	5c 01       	movw	r10, r24
    6c0a:	cc 24       	eor	r12, r12
    6c0c:	b7 fc       	sbrc	r11, 7
    6c0e:	c0 94       	com	r12
    6c10:	dc 2c       	mov	r13, r12
    dx = MAX(dx,DXYZ_MIN);
    6c12:	a0 30       	cpi	r26, 0x00	; 0
    6c14:	f0 ec       	ldi	r31, 0xC0	; 192
    6c16:	bf 07       	cpc	r27, r31
    6c18:	ff ef       	ldi	r31, 0xFF	; 255
    6c1a:	cf 07       	cpc	r28, r31
    6c1c:	ff ef       	ldi	r31, 0xFF	; 255
    6c1e:	df 07       	cpc	r29, r31
    6c20:	24 f4       	brge	.+8      	; 0x6c2a
    6c22:	a0 e0       	ldi	r26, 0x00	; 0
    6c24:	b0 ec       	ldi	r27, 0xC0	; 192
    6c26:	cf ef       	ldi	r28, 0xFF	; 255
    6c28:	df ef       	ldi	r29, 0xFF	; 255
    dy = MAX(dy,DXYZ_MIN);
    6c2a:	80 e0       	ldi	r24, 0x00	; 0
    6c2c:	e8 16       	cp	r14, r24
    6c2e:	80 ec       	ldi	r24, 0xC0	; 192
    6c30:	f8 06       	cpc	r15, r24
    6c32:	8f ef       	ldi	r24, 0xFF	; 255
    6c34:	08 07       	cpc	r16, r24
    6c36:	8f ef       	ldi	r24, 0xFF	; 255
    6c38:	18 07       	cpc	r17, r24
    6c3a:	3c f4       	brge	.+14     	; 0x6c4a
    6c3c:	e1 2c       	mov	r14, r1
    6c3e:	30 ec       	ldi	r19, 0xC0	; 192
    6c40:	f3 2e       	mov	r15, r19
    6c42:	3f ef       	ldi	r19, 0xFF	; 255
    6c44:	03 2f       	mov	r16, r19
    6c46:	3f ef       	ldi	r19, 0xFF	; 255
    6c48:	13 2f       	mov	r17, r19
    dz = MAX(dz,DXYZ_MIN);
    6c4a:	e0 e0       	ldi	r30, 0x00	; 0
    6c4c:	ae 16       	cp	r10, r30
    6c4e:	e0 ec       	ldi	r30, 0xC0	; 192
    6c50:	be 06       	cpc	r11, r30
    6c52:	ef ef       	ldi	r30, 0xFF	; 255
    6c54:	ce 06       	cpc	r12, r30
    6c56:	ef ef       	ldi	r30, 0xFF	; 255
    6c58:	de 06       	cpc	r13, r30
    6c5a:	3c f4       	brge	.+14     	; 0x6c6a
    6c5c:	a1 2c       	mov	r10, r1
    6c5e:	20 ec       	ldi	r18, 0xC0	; 192
    6c60:	b2 2e       	mov	r11, r18
    6c62:	2f ef       	ldi	r18, 0xFF	; 255
    6c64:	c2 2e       	mov	r12, r18
    6c66:	2f ef       	ldi	r18, 0xFF	; 255
    6c68:	d2 2e       	mov	r13, r18
    dx = MIN(dx,DXYZ_MAX);
    6c6a:	a1 30       	cpi	r26, 0x01	; 1
    6c6c:	f0 e4       	ldi	r31, 0x40	; 64
    6c6e:	bf 07       	cpc	r27, r31
    6c70:	f0 e0       	ldi	r31, 0x00	; 0
    6c72:	cf 07       	cpc	r28, r31
    6c74:	f0 e0       	ldi	r31, 0x00	; 0
    6c76:	df 07       	cpc	r29, r31
    6c78:	24 f0       	brlt	.+8      	; 0x6c82
    6c7a:	a0 e0       	ldi	r26, 0x00	; 0
    6c7c:	b0 e4       	ldi	r27, 0x40	; 64
    6c7e:	c0 e0       	ldi	r28, 0x00	; 0
    6c80:	d0 e0       	ldi	r29, 0x00	; 0
    dy = MIN(dy,DXYZ_MAX);
    6c82:	81 e0       	ldi	r24, 0x01	; 1
    6c84:	e8 16       	cp	r14, r24
    6c86:	80 e4       	ldi	r24, 0x40	; 64
    6c88:	f8 06       	cpc	r15, r24
    6c8a:	80 e0       	ldi	r24, 0x00	; 0
    6c8c:	08 07       	cpc	r16, r24
    6c8e:	80 e0       	ldi	r24, 0x00	; 0
    6c90:	18 07       	cpc	r17, r24
    6c92:	2c f0       	brlt	.+10     	; 0x6c9e
    6c94:	e1 2c       	mov	r14, r1
    6c96:	90 e4       	ldi	r25, 0x40	; 64
    6c98:	f9 2e       	mov	r15, r25
    6c9a:	01 2d       	mov	r16, r1
    6c9c:	11 2d       	mov	r17, r1
    dz = MIN(dz,DXYZ_MAX);
    6c9e:	e1 e0       	ldi	r30, 0x01	; 1
    6ca0:	ae 16       	cp	r10, r30
    6ca2:	e0 e4       	ldi	r30, 0x40	; 64
    6ca4:	be 06       	cpc	r11, r30
    6ca6:	e0 e0       	ldi	r30, 0x00	; 0
    6ca8:	ce 06       	cpc	r12, r30
    6caa:	e0 e0       	ldi	r30, 0x00	; 0
    6cac:	de 06       	cpc	r13, r30
    6cae:	2c f0       	brlt	.+10     	; 0x6cba
    6cb0:	a1 2c       	mov	r10, r1
    6cb2:	80 e4       	ldi	r24, 0x40	; 64
    6cb4:	b8 2e       	mov	r11, r24
    6cb6:	c1 2c       	mov	r12, r1
    6cb8:	d1 2c       	mov	r13, r1
    dx2 = SQUARED(dx);
    6cba:	bd 01       	movw	r22, r26
    6cbc:	ce 01       	movw	r24, r28
    6cbe:	9d 01       	movw	r18, r26
    6cc0:	ae 01       	movw	r20, r28
    6cc2:	0e 94 5f 59 	call	0xb2be
    6cc6:	3b 01       	movw	r6, r22
    6cc8:	4c 01       	movw	r8, r24
    dy2 = SQUARED(dy);
    6cca:	c8 01       	movw	r24, r16
    6ccc:	b7 01       	movw	r22, r14
    6cce:	a8 01       	movw	r20, r16
    6cd0:	97 01       	movw	r18, r14
    6cd2:	0e 94 5f 59 	call	0xb2be
    6cd6:	7b 01       	movw	r14, r22
    6cd8:	8c 01       	movw	r16, r24
    dz2 = SQUARED(dz);
    6cda:	c6 01       	movw	r24, r12
    6cdc:	b5 01       	movw	r22, r10
    6cde:	a6 01       	movw	r20, r12
    6ce0:	95 01       	movw	r18, r10
    6ce2:	0e 94 5f 59 	call	0xb2be
    6ce6:	dc 01       	movw	r26, r24
    6ce8:	cb 01       	movw	r24, r22
    return dx2 + dy2 + dz2;
    6cea:	6e 0c       	add	r6, r14
    6cec:	7f 1c       	adc	r7, r15
    6cee:	80 1e       	adc	r8, r16
    6cf0:	91 1e       	adc	r9, r17
    6cf2:	68 0e       	add	r6, r24
    6cf4:	79 1e       	adc	r7, r25
    6cf6:	8a 1e       	adc	r8, r26
    6cf8:	9b 1e       	adc	r9, r27
}
    6cfa:	c4 01       	movw	r24, r8
    6cfc:	b3 01       	movw	r22, r6
    6cfe:	df 91       	pop	r29
    6d00:	cf 91       	pop	r28
    6d02:	1f 91       	pop	r17
    6d04:	0f 91       	pop	r16
    6d06:	ff 90       	pop	r15
    6d08:	ef 90       	pop	r14
    6d0a:	df 90       	pop	r13
    6d0c:	cf 90       	pop	r12
    6d0e:	bf 90       	pop	r11
    6d10:	af 90       	pop	r10
    6d12:	9f 90       	pop	r9
    6d14:	8f 90       	pop	r8
    6d16:	7f 90       	pop	r7
    6d18:	6f 90       	pop	r6
    6d1a:	08 95       	ret

00006d1c <ker_uart_id>:

uint16_t ker_uart_id()
{
    return (uint16_t)UART_ADDRESS;
}
    6d1c:	80 e0       	ldi	r24, 0x00	; 0
    6d1e:	90 e8       	ldi	r25, 0x80	; 128
    6d20:	08 95       	ret

00006d22 <ker_i2c_id>:

uint8_t ker_i2c_id()
{
    return (uint8_t)I2C_ADDRESS;
}
    6d22:	82 e0       	ldi	r24, 0x02	; 2
    6d24:	90 e0       	ldi	r25, 0x00	; 0
    6d26:	08 95       	ret

00006d28 <ker_hw_type>:

uint8_t ker_hw_type()
{
    return hw_type;
    6d28:	80 91 03 01 	lds	r24, 0x0103
}
    6d2c:	99 27       	eor	r25, r25
    6d2e:	08 95       	ret

00006d30 <ker_get_group>:

uint8_t ker_get_group(void) 				{ return node_group_id; }
    6d30:	80 91 9c 0a 	lds	r24, 0x0A9C
    6d34:	99 27       	eor	r25, r25
    6d36:	08 95       	ret

00006d38 <ker_set_group>:

void ker_set_group(uint8_t new_group_id) 	{ node_group_id = new_group_id; }
    6d38:	80 93 9c 0a 	sts	0x0A9C, r24
    6d3c:	08 95       	ret

00006d3e <random_init>:
static RandomState randomst;

void random_init(){
    HAS_CRITICAL_SECTION;
    ENTER_CRITICAL_SECTION();
    6d3e:	4f b7       	in	r20, 0x3f	; 63
    6d40:	f8 94       	cli
    randomst.shiftReg = (uint16_t)(119 * 119 * (node_address + 1));
    6d42:	20 91 04 01 	lds	r18, 0x0104
    6d46:	30 91 05 01 	lds	r19, 0x0105
    6d4a:	81 e5       	ldi	r24, 0x51	; 81
    6d4c:	97 e3       	ldi	r25, 0x37	; 55
    6d4e:	28 9f       	mul	r18, r24
    6d50:	b0 01       	movw	r22, r0
    6d52:	29 9f       	mul	r18, r25
    6d54:	70 0d       	add	r23, r0
    6d56:	38 9f       	mul	r19, r24
    6d58:	70 0d       	add	r23, r0
    6d5a:	11 24       	eor	r1, r1
    6d5c:	cb 01       	movw	r24, r22
    6d5e:	8f 5a       	subi	r24, 0xAF	; 175
    6d60:	98 4c       	sbci	r25, 0xC8	; 200
    6d62:	90 93 9e 0a 	sts	0x0A9E, r25
    6d66:	80 93 9d 0a 	sts	0x0A9D, r24
    randomst.initSeed = randomst.shiftReg;
    6d6a:	90 93 a0 0a 	sts	0x0AA0, r25
    6d6e:	80 93 9f 0a 	sts	0x0A9F, r24
    randomst.mask = (uint16_t)(137 * 29 * (node_address + 1));
    6d72:	85 e8       	ldi	r24, 0x85	; 133
    6d74:	9f e0       	ldi	r25, 0x0F	; 15
    6d76:	28 9f       	mul	r18, r24
    6d78:	b0 01       	movw	r22, r0
    6d7a:	29 9f       	mul	r18, r25
    6d7c:	70 0d       	add	r23, r0
    6d7e:	38 9f       	mul	r19, r24
    6d80:	70 0d       	add	r23, r0
    6d82:	11 24       	eor	r1, r1
    6d84:	cb 01       	movw	r24, r22
    6d86:	8b 57       	subi	r24, 0x7B	; 123
    6d88:	90 4f       	sbci	r25, 0xF0	; 240
    6d8a:	90 93 a2 0a 	sts	0x0AA2, r25
    6d8e:	80 93 a1 0a 	sts	0x0AA1, r24
    LEAVE_CRITICAL_SECTION();
    6d92:	4f bf       	out	0x3f, r20	; 63
    6d94:	08 95       	ret

00006d96 <ker_rand>:
}

uint16_t ker_rand() {
    HAS_CRITICAL_SECTION;
    bool endbit;
    uint16_t tmpShiftReg;

    ENTER_CRITICAL_SECTION();
    6d96:	8f b7       	in	r24, 0x3f	; 63
    6d98:	f8 94       	cli
    tmpShiftReg = randomst.shiftReg;
    6d9a:	20 91 9d 0a 	lds	r18, 0x0A9D
    6d9e:	30 91 9e 0a 	lds	r19, 0x0A9E
    LEAVE_CRITICAL_SECTION();
    6da2:	8f bf       	out	0x3f, r24	; 63
    endbit = ((tmpShiftReg & 0x8000) != 0)?true:false;
    6da4:	83 2f       	mov	r24, r19
    6da6:	88 1f       	adc	r24, r24
    6da8:	88 27       	eor	r24, r24
    6daa:	88 1f       	adc	r24, r24
    tmpShiftReg <<= 1;
    6dac:	22 0f       	add	r18, r18
    6dae:	33 1f       	adc	r19, r19
    if (endbit)
    6db0:	88 23       	and	r24, r24
    6db2:	21 f0       	breq	.+8      	; 0x6dbc
        tmpShiftReg ^= 0x100b;
    6db4:	8b e0       	ldi	r24, 0x0B	; 11
    6db6:	90 e1       	ldi	r25, 0x10	; 16
    6db8:	28 27       	eor	r18, r24
    6dba:	39 27       	eor	r19, r25
    tmpShiftReg++;
    6dbc:	2f 5f       	subi	r18, 0xFF	; 255
    6dbe:	3f 4f       	sbci	r19, 0xFF	; 255
    ENTER_CRITICAL_SECTION();
    6dc0:	8f b7       	in	r24, 0x3f	; 63
    6dc2:	f8 94       	cli
    randomst.shiftReg = tmpShiftReg;
    6dc4:	30 93 9e 0a 	sts	0x0A9E, r19
    6dc8:	20 93 9d 0a 	sts	0x0A9D, r18
    LEAVE_CRITICAL_SECTION();
    6dcc:	8f bf       	out	0x3f, r24	; 63
    tmpShiftReg = tmpShiftReg ^ randomst.mask;
    6dce:	80 91 a1 0a 	lds	r24, 0x0AA1
    6dd2:	90 91 a2 0a 	lds	r25, 0x0AA2
    return tmpShiftReg;
}
    6dd6:	82 27       	eor	r24, r18
    6dd8:	93 27       	eor	r25, r19
    6dda:	08 95       	ret

00006ddc <timestamp_do_timestamp>:
static ts_svc_t *ts_owner = NULL;

static void timestamp_do_timestamp(void* ptr, uint32_t t)
{
	ts_owner->rec[ts_owner->next_rec].ptr = ptr;
    6ddc:	a0 91 a3 0a 	lds	r26, 0x0AA3
    6de0:	b0 91 a4 0a 	lds	r27, 0x0AA4
    6de4:	fd 01       	movw	r30, r26
    6de6:	22 81       	ldd	r18, Z+2	; 0x02
    6de8:	33 27       	eor	r19, r19
    6dea:	f9 01       	movw	r30, r18
    6dec:	ee 0f       	add	r30, r30
    6dee:	ff 1f       	adc	r31, r31
    6df0:	ee 0f       	add	r30, r30
    6df2:	ff 1f       	adc	r31, r31
    6df4:	e2 0f       	add	r30, r18
    6df6:	f3 1f       	adc	r31, r19
    6df8:	e2 0f       	add	r30, r18
    6dfa:	f3 1f       	adc	r31, r19
    6dfc:	ea 0f       	add	r30, r26
    6dfe:	fb 1f       	adc	r31, r27
    6e00:	83 83       	std	Z+3, r24	; 0x03
    6e02:	94 83       	std	Z+4, r25	; 0x04
	ts_owner->rec[ts_owner->next_rec].ts = t;
    6e04:	fd 01       	movw	r30, r26
    6e06:	82 81       	ldd	r24, Z+2	; 0x02
    6e08:	99 27       	eor	r25, r25
    6e0a:	fc 01       	movw	r30, r24
    6e0c:	ee 0f       	add	r30, r30
    6e0e:	ff 1f       	adc	r31, r31
    6e10:	ee 0f       	add	r30, r30
    6e12:	ff 1f       	adc	r31, r31
    6e14:	e8 0f       	add	r30, r24
    6e16:	f9 1f       	adc	r31, r25
    6e18:	e8 0f       	add	r30, r24
    6e1a:	f9 1f       	adc	r31, r25
    6e1c:	ea 0f       	add	r30, r26
    6e1e:	fb 1f       	adc	r31, r27
    6e20:	45 83       	std	Z+5, r20	; 0x05
    6e22:	56 83       	std	Z+6, r21	; 0x06
    6e24:	67 83       	std	Z+7, r22	; 0x07
    6e26:	70 87       	std	Z+8, r23	; 0x08
	ts_owner->next_rec += 1;
    6e28:	fd 01       	movw	r30, r26
    6e2a:	82 81       	ldd	r24, Z+2	; 0x02
    6e2c:	8f 5f       	subi	r24, 0xFF	; 255
    6e2e:	82 83       	std	Z+2, r24	; 0x02
	if(ts_owner->next_rec == ts_owner->num_rec) {
    6e30:	e0 91 a3 0a 	lds	r30, 0x0AA3
    6e34:	f0 91 a4 0a 	lds	r31, 0x0AA4
    6e38:	92 81       	ldd	r25, Z+2	; 0x02
    6e3a:	81 81       	ldd	r24, Z+1	; 0x01
    6e3c:	98 17       	cp	r25, r24
    6e3e:	09 f4       	brne	.+2      	; 0x6e42
		ts_owner->next_rec = 0;
    6e40:	12 82       	std	Z+2, r1	; 0x02
    6e42:	08 95       	ret
    6e44:	08 95       	ret

00006e46 <timestamp_incoming>:
	}
}

void timestamp_incoming(Message *msg_in, uint32_t t)
{
    6e46:	dc 01       	movw	r26, r24
	if(ts_owner && (ts_owner->pid == msg_in->did)) {
    6e48:	e0 91 a3 0a 	lds	r30, 0x0AA3
    6e4c:	f0 91 a4 0a 	lds	r31, 0x0AA4
    6e50:	30 97       	sbiw	r30, 0x00	; 0
    6e52:	49 f0       	breq	.+18     	; 0x6e66
    6e54:	90 81       	ld	r25, Z
    6e56:	8c 91       	ld	r24, X
    6e58:	98 17       	cp	r25, r24
    6e5a:	29 f4       	brne	.+10     	; 0x6e66
		timestamp_do_timestamp(msg_in->data, t);
    6e5c:	fd 01       	movw	r30, r26
    6e5e:	80 85       	ldd	r24, Z+8	; 0x08
    6e60:	91 85       	ldd	r25, Z+9	; 0x09
    6e62:	0e 94 ee 36 	call	0x6ddc
    6e66:	08 95       	ret
    6e68:	08 95       	ret

00006e6a <timestamp_outgoing>:
	}
}

void timestamp_outgoing(Message *msg_out, uint32_t t)
{
    6e6a:	dc 01       	movw	r26, r24
	if(ts_owner && (ts_owner->pid == msg_out->sid)) {
    6e6c:	e0 91 a3 0a 	lds	r30, 0x0AA3
    6e70:	f0 91 a4 0a 	lds	r31, 0x0AA4
    6e74:	30 97       	sbiw	r30, 0x00	; 0
    6e76:	49 f0       	breq	.+18     	; 0x6e8a
    6e78:	90 81       	ld	r25, Z
    6e7a:	fd 01       	movw	r30, r26
    6e7c:	81 81       	ldd	r24, Z+1	; 0x01
    6e7e:	98 17       	cp	r25, r24
    6e80:	21 f4       	brne	.+8      	; 0x6e8a
		timestamp_do_timestamp(msg_out->data, t);
    6e82:	80 85       	ldd	r24, Z+8	; 0x08
    6e84:	91 85       	ldd	r25, Z+9	; 0x09
    6e86:	0e 94 ee 36 	call	0x6ddc
    6e8a:	08 95       	ret
    6e8c:	08 95       	ret

00006e8e <ker_timestamp_register>:
	}
}

int8_t ker_timestamp_register(sos_pid_t pid, uint8_t n)
{
    6e8e:	ef 92       	push	r14
    6e90:	ff 92       	push	r15
    6e92:	0f 93       	push	r16
    6e94:	1f 93       	push	r17
    6e96:	cf 93       	push	r28
    6e98:	08 2f       	mov	r16, r24
    6e9a:	16 2f       	mov	r17, r22
	uint8_t i;
	if(ts_owner != NULL) {
    6e9c:	e0 90 a3 0a 	lds	r14, 0x0AA3
    6ea0:	f0 90 a4 0a 	lds	r15, 0x0AA4
    6ea4:	e1 14       	cp	r14, r1
    6ea6:	f1 04       	cpc	r15, r1
    6ea8:	19 f0       	breq	.+6      	; 0x6eb0
		return -EBUSY;
    6eaa:	80 ef       	ldi	r24, 0xF0	; 240
    6eac:	9f ef       	ldi	r25, 0xFF	; 255
    6eae:	46 c0       	rjmp	.+140    	; 0x6f3c
	}
#ifndef NO_RADIO
	if(radio_set_timestamp(true) != SOS_OK) {
    6eb0:	81 e0       	ldi	r24, 0x01	; 1
    6eb2:	0e 94 4e 0b 	call	0x169c
    6eb6:	c8 2f       	mov	r28, r24
    6eb8:	88 23       	and	r24, r24
    6eba:	19 f0       	breq	.+6      	; 0x6ec2
		return -ENXIO;
    6ebc:	8a ef       	ldi	r24, 0xFA	; 250
    6ebe:	9f ef       	ldi	r25, 0xFF	; 255
    6ec0:	3d c0       	rjmp	.+122    	; 0x6f3c
 * @return Returns a pointer to the allocated memory.
 * Will return a NULL pointer if the call to sys_malloc fails.
 */
static inline void *ker_malloc(uint16_t size, sos_pid_t id)
{
    6ec2:	86 e0       	ldi	r24, 0x06	; 6
    6ec4:	18 9f       	mul	r17, r24
    6ec6:	c0 01       	movw	r24, r0
    6ec8:	11 24       	eor	r1, r1
  return sos_blk_mem_alloc(size, id, false);
    6eca:	4c 2f       	mov	r20, r28
    6ecc:	6e e0       	ldi	r22, 0x0E	; 14
    6ece:	03 96       	adiw	r24, 0x03	; 3
    6ed0:	0e 94 14 11 	call	0x2228
    6ed4:	fc 01       	movw	r30, r24
    6ed6:	90 93 a4 0a 	sts	0x0AA4, r25
    6eda:	80 93 a3 0a 	sts	0x0AA3, r24
	}
#endif
	ts_owner = (ts_svc_t*)ker_malloc(offsetof(struct ts_svc, rec) + n * sizeof(ts_rec_t), KER_TS_PID);
	if(ts_owner == NULL){ 
    6ede:	89 2b       	or	r24, r25
    6ee0:	31 f4       	brne	.+12     	; 0x6eee
#ifndef NO_RADIO
		radio_set_timestamp(false);
    6ee2:	8c 2f       	mov	r24, r28
    6ee4:	0e 94 4e 0b 	call	0x169c
#endif
		return -ENOMEM;
    6ee8:	84 ef       	ldi	r24, 0xF4	; 244
    6eea:	9f ef       	ldi	r25, 0xFF	; 255
    6eec:	27 c0       	rjmp	.+78     	; 0x6f3c
	}
	ts_owner->pid = pid;
    6eee:	00 83       	st	Z, r16
	ts_owner->num_rec = n;
    6ef0:	e0 91 a3 0a 	lds	r30, 0x0AA3
    6ef4:	f0 91 a4 0a 	lds	r31, 0x0AA4
    6ef8:	11 83       	std	Z+1, r17	; 0x01
	ts_owner->next_rec = 0;
    6efa:	e0 91 a3 0a 	lds	r30, 0x0AA3
    6efe:	f0 91 a4 0a 	lds	r31, 0x0AA4
    6f02:	c2 83       	std	Z+2, r28	; 0x02
	for(i = 0; i < n; i++) {
    6f04:	c1 17       	cp	r28, r17
    6f06:	c0 f4       	brcc	.+48     	; 0x6f38
    6f08:	40 91 a3 0a 	lds	r20, 0x0AA3
    6f0c:	50 91 a4 0a 	lds	r21, 0x0AA4
    6f10:	c7 01       	movw	r24, r14
    6f12:	97 01       	movw	r18, r14
    6f14:	61 2f       	mov	r22, r17
		(ts_owner->rec[i]).ptr = NULL;
    6f16:	fc 01       	movw	r30, r24
    6f18:	e2 0f       	add	r30, r18
    6f1a:	f3 1f       	adc	r31, r19
    6f1c:	e4 0f       	add	r30, r20
    6f1e:	f5 1f       	adc	r31, r21
    6f20:	13 82       	std	Z+3, r1	; 0x03
    6f22:	14 82       	std	Z+4, r1	; 0x04
		(ts_owner->rec[i]).ts = 0;
    6f24:	15 82       	std	Z+5, r1	; 0x05
    6f26:	16 82       	std	Z+6, r1	; 0x06
    6f28:	17 82       	std	Z+7, r1	; 0x07
    6f2a:	10 86       	std	Z+8, r1	; 0x08
    6f2c:	61 50       	subi	r22, 0x01	; 1
    6f2e:	2f 5f       	subi	r18, 0xFF	; 255
    6f30:	3f 4f       	sbci	r19, 0xFF	; 255
    6f32:	05 96       	adiw	r24, 0x05	; 5
    6f34:	66 23       	and	r22, r22
    6f36:	79 f7       	brne	.-34     	; 0x6f16
	}
	return SOS_OK;
    6f38:	80 e0       	ldi	r24, 0x00	; 0
    6f3a:	90 e0       	ldi	r25, 0x00	; 0
    6f3c:	cf 91       	pop	r28
    6f3e:	1f 91       	pop	r17
    6f40:	0f 91       	pop	r16
    6f42:	ff 90       	pop	r15
    6f44:	ef 90       	pop	r14
    6f46:	08 95       	ret

00006f48 <ker_timestamp_deregister>:
}


int8_t ker_timestamp_deregister(sos_pid_t pid)
{
    6f48:	98 2f       	mov	r25, r24
	if(ts_owner && ts_owner->pid == pid) {
    6f4a:	e0 91 a3 0a 	lds	r30, 0x0AA3
    6f4e:	f0 91 a4 0a 	lds	r31, 0x0AA4
    6f52:	30 97       	sbiw	r30, 0x00	; 0
    6f54:	89 f0       	breq	.+34     	; 0x6f78
    6f56:	80 81       	ld	r24, Z
    6f58:	89 17       	cp	r24, r25
    6f5a:	71 f4       	brne	.+28     	; 0x6f78
 * @return void
 */
static inline void ker_free(void* ptr)
{
  sos_blk_mem_free(ptr, false);
    6f5c:	60 e0       	ldi	r22, 0x00	; 0
    6f5e:	cf 01       	movw	r24, r30
    6f60:	0e 94 98 11 	call	0x2330
		ker_free(ts_owner);
		ts_owner = NULL;
    6f64:	10 92 a4 0a 	sts	0x0AA4, r1
    6f68:	10 92 a3 0a 	sts	0x0AA3, r1
#ifndef NO_RADIO
		radio_set_timestamp(false);
    6f6c:	80 e0       	ldi	r24, 0x00	; 0
    6f6e:	0e 94 4e 0b 	call	0x169c
#endif
		return SOS_OK;
    6f72:	80 e0       	ldi	r24, 0x00	; 0
    6f74:	90 e0       	ldi	r25, 0x00	; 0
    6f76:	08 95       	ret
	} else {
		return -ESRCH; 
    6f78:	8d ef       	ldi	r24, 0xFD	; 253
    6f7a:	9f ef       	ldi	r25, 0xFF	; 255
	}
}
    6f7c:	08 95       	ret
    6f7e:	08 95       	ret

00006f80 <ker_timestamp_query>:

uint32_t ker_timestamp_query(sos_pid_t pid, void *data)
{
    6f80:	ff 92       	push	r15
    6f82:	0f 93       	push	r16
    6f84:	1f 93       	push	r17
    6f86:	cf 93       	push	r28
    6f88:	8b 01       	movw	r16, r22
	uint8_t i;
	if(ts_owner->pid != pid) return 0;
    6f8a:	e0 91 a3 0a 	lds	r30, 0x0AA3
    6f8e:	f0 91 a4 0a 	lds	r31, 0x0AA4
    6f92:	90 81       	ld	r25, Z
    6f94:	98 17       	cp	r25, r24
    6f96:	41 f0       	breq	.+16     	; 0x6fa8
    6f98:	2a c0       	rjmp	.+84     	; 0x6fee
	for(i = 0; i < ts_owner->num_rec; i++) {
		if((ts_owner->rec[i].ptr == data) && (ts_owner->rec[i].ts != 0)) {
			uint32_t ret = ts_owner->rec[i].ts;
			ts_owner->rec[i].ptr = NULL;
    6f9a:	13 82       	std	Z+3, r1	; 0x03
    6f9c:	14 82       	std	Z+4, r1	; 0x04
			ts_owner->rec[i].ts = 0;
    6f9e:	15 82       	std	Z+5, r1	; 0x05
    6fa0:	16 82       	std	Z+6, r1	; 0x06
    6fa2:	17 82       	std	Z+7, r1	; 0x07
    6fa4:	10 86       	std	Z+8, r1	; 0x08
			return ret;
    6fa6:	27 c0       	rjmp	.+78     	; 0x6ff6
    6fa8:	c0 e0       	ldi	r28, 0x00	; 0
    6faa:	81 81       	ldd	r24, Z+1	; 0x01
    6fac:	c8 17       	cp	r28, r24
    6fae:	f8 f4       	brcc	.+62     	; 0x6fee
    6fb0:	df 01       	movw	r26, r30
    6fb2:	f8 2e       	mov	r15, r24
    6fb4:	20 e0       	ldi	r18, 0x00	; 0
    6fb6:	30 e0       	ldi	r19, 0x00	; 0
    6fb8:	a9 01       	movw	r20, r18
    6fba:	f9 01       	movw	r30, r18
    6fbc:	e4 0f       	add	r30, r20
    6fbe:	f5 1f       	adc	r31, r21
    6fc0:	ea 0f       	add	r30, r26
    6fc2:	fb 1f       	adc	r31, r27
    6fc4:	83 81       	ldd	r24, Z+3	; 0x03
    6fc6:	94 81       	ldd	r25, Z+4	; 0x04
    6fc8:	80 17       	cp	r24, r16
    6fca:	91 07       	cpc	r25, r17
    6fcc:	49 f4       	brne	.+18     	; 0x6fe0
    6fce:	65 81       	ldd	r22, Z+5	; 0x05
    6fd0:	76 81       	ldd	r23, Z+6	; 0x06
    6fd2:	87 81       	ldd	r24, Z+7	; 0x07
    6fd4:	90 85       	ldd	r25, Z+8	; 0x08
    6fd6:	61 15       	cp	r22, r1
    6fd8:	71 05       	cpc	r23, r1
    6fda:	81 05       	cpc	r24, r1
    6fdc:	91 05       	cpc	r25, r1
    6fde:	e9 f6       	brne	.-70     	; 0x6f9a
    6fe0:	cf 5f       	subi	r28, 0xFF	; 255
    6fe2:	4f 5f       	subi	r20, 0xFF	; 255
    6fe4:	5f 4f       	sbci	r21, 0xFF	; 255
    6fe6:	2b 5f       	subi	r18, 0xFB	; 251
    6fe8:	3f 4f       	sbci	r19, 0xFF	; 255
    6fea:	cf 15       	cp	r28, r15
    6fec:	30 f3       	brcs	.-52     	; 0x6fba
		}
	}
	return 0;
    6fee:	60 e0       	ldi	r22, 0x00	; 0
    6ff0:	70 e0       	ldi	r23, 0x00	; 0
    6ff2:	80 e0       	ldi	r24, 0x00	; 0
    6ff4:	90 e0       	ldi	r25, 0x00	; 0
    6ff6:	cf 91       	pop	r28
    6ff8:	1f 91       	pop	r17
    6ffa:	0f 91       	pop	r16
    6ffc:	ff 90       	pop	r15
    6ffe:	08 95       	ret

00007000 <sensor_handler>:

static int8_t sensor_handler(void *state, Message *msg)
{
	return -EINVAL;
}
    7000:	8a ee       	ldi	r24, 0xEA	; 234
    7002:	9f ef       	ldi	r25, 0xFF	; 255
    7004:	08 95       	ret

00007006 <sensor_init>:


/**
 * @brief Initialize the sensor interface
 */
int8_t sensor_init() {
    7006:	9f ef       	ldi	r25, 0xFF	; 255
    7008:	e5 ea       	ldi	r30, 0xA5	; 165
    700a:	fa e0       	ldi	r31, 0x0A	; 10
    700c:	8b e0       	ldi	r24, 0x0B	; 11
  uint8_t i;

  for (i = 0; i < MAX_SENSOR_ID; i++){
		st[i].pid = NULL_PID;
    700e:	90 83       	st	Z, r25
		st[i].client_pid = NULL_PID;
    7010:	91 83       	std	Z+1, r25	; 0x01
		st[i].ctx = NULL;
    7012:	12 82       	std	Z+2, r1	; 0x02
    7014:	13 82       	std	Z+3, r1	; 0x03
    7016:	81 50       	subi	r24, 0x01	; 1
    7018:	34 96       	adiw	r30, 0x04	; 4
    701a:	87 ff       	sbrs	r24, 7
    701c:	f8 cf       	rjmp	.-16     	; 0x700e
	}
#ifdef SOS_USE_PREEMPTION
	ker_register_module(sos_get_header_address(mod_header));
	sensor_func_ptr = ker_get_module_state(KER_SENSOR_PID);
#else
	sched_register_kernel_module(&sensor_module, sos_get_header_address(mod_header), sensor_func_ptr);
    701e:	84 ef       	ldi	r24, 0xF4	; 244
    7020:	91 e0       	ldi	r25, 0x01	; 1
    7022:	aa 27       	eor	r26, r26
    7024:	97 fd       	sbrc	r25, 7
    7026:	a0 95       	com	r26
    7028:	ba 2f       	mov	r27, r26
    702a:	b6 95       	lsr	r27
    702c:	a7 95       	ror	r26
    702e:	97 95       	ror	r25
    7030:	87 95       	ror	r24
    7032:	45 ed       	ldi	r20, 0xD5	; 213
    7034:	5a e0       	ldi	r21, 0x0A	; 10
    7036:	bc 01       	movw	r22, r24
    7038:	8d ee       	ldi	r24, 0xED	; 237
    703a:	9a e0       	ldi	r25, 0x0A	; 10
    703c:	0e 94 4a 14 	call	0x2894
#endif
	return SOS_OK;
}
    7040:	80 e0       	ldi	r24, 0x00	; 0
    7042:	90 e0       	ldi	r25, 0x00	; 0
    7044:	08 95       	ret

00007046 <ker_sensor_register>:


/**
 * @brief Register a new sensor driver
 */
int8_t ker_sensor_register(sos_pid_t calling_id, uint8_t sensor_id, 
													 uint8_t sensor_fid, void *ctx) {
    7046:	ff 92       	push	r15
    7048:	0f 93       	push	r16
    704a:	1f 93       	push	r17
    704c:	cf 93       	push	r28
    704e:	df 93       	push	r29
    7050:	f8 2e       	mov	r15, r24
    7052:	89 01       	movw	r16, r18

	if (sensor_id > MAX_SENSOR_ID) {
    7054:	6d 30       	cpi	r22, 0x0D	; 13
    7056:	a8 f4       	brcc	.+42     	; 0x7082
		return -EINVAL;
	}
	if(st[sensor_id].pid != NULL_PID) {
    7058:	c6 2f       	mov	r28, r22
    705a:	dd 27       	eor	r29, r29
    705c:	cc 0f       	add	r28, r28
    705e:	dd 1f       	adc	r29, r29
    7060:	cc 0f       	add	r28, r28
    7062:	dd 1f       	adc	r29, r29
    7064:	cb 55       	subi	r28, 0x5B	; 91
    7066:	d5 4f       	sbci	r29, 0xF5	; 245
    7068:	88 81       	ld	r24, Y
    706a:	8f 3f       	cpi	r24, 0xFF	; 255
    706c:	19 f0       	breq	.+6      	; 0x7074
		return -EBUSY;
    706e:	80 ef       	ldi	r24, 0xF0	; 240
    7070:	9f ef       	ldi	r25, 0xFF	; 255
    7072:	0f c0       	rjmp	.+30     	; 0x7092
	}

	// try to register all necessary function calls
	// if any fail do cleanup
	if(ker_fntable_subscribe(KER_SENSOR_PID, calling_id, sensor_fid, sensor_id) < 0) {
    7074:	26 2f       	mov	r18, r22
    7076:	6f 2d       	mov	r22, r15
    7078:	86 e0       	ldi	r24, 0x06	; 6
    707a:	0e 94 26 29 	call	0x524c
    707e:	87 ff       	sbrs	r24, 7
    7080:	03 c0       	rjmp	.+6      	; 0x7088
		return -EINVAL;
    7082:	8a ee       	ldi	r24, 0xEA	; 234
    7084:	9f ef       	ldi	r25, 0xFF	; 255
    7086:	05 c0       	rjmp	.+10     	; 0x7092
	}
	
  st[sensor_id].ctx = ctx;
    7088:	0a 83       	std	Y+2, r16	; 0x02
    708a:	1b 83       	std	Y+3, r17	; 0x03
  st[sensor_id].pid = calling_id;
    708c:	f8 82       	st	Y, r15

  return SOS_OK;
    708e:	80 e0       	ldi	r24, 0x00	; 0
    7090:	90 e0       	ldi	r25, 0x00	; 0
    7092:	df 91       	pop	r29
    7094:	cf 91       	pop	r28
    7096:	1f 91       	pop	r17
    7098:	0f 91       	pop	r16
    709a:	ff 90       	pop	r15
    709c:	08 95       	ret

0000709e <ker_sensor_deregister>:
}


/**
 * @brief De-Register a sensor driver
 */
//! XXX: We are not registering the get_data function, should be de-register it ?
int8_t ker_sensor_deregister(sos_pid_t calling_id, uint8_t sensor_id) {
    709e:	cf 93       	push	r28
    70a0:	df 93       	push	r29
    70a2:	98 2f       	mov	r25, r24

	if ((sensor_id > MAX_SENSOR_ID) || (st[sensor_id].pid != calling_id)) {
    70a4:	6d 30       	cpi	r22, 0x0D	; 13
    70a6:	60 f4       	brcc	.+24     	; 0x70c0
    70a8:	e6 2f       	mov	r30, r22
    70aa:	ff 27       	eor	r31, r31
    70ac:	ef 01       	movw	r28, r30
    70ae:	cc 0f       	add	r28, r28
    70b0:	dd 1f       	adc	r29, r29
    70b2:	cc 0f       	add	r28, r28
    70b4:	dd 1f       	adc	r29, r29
    70b6:	cb 55       	subi	r28, 0x5B	; 91
    70b8:	d5 4f       	sbci	r29, 0xF5	; 245
    70ba:	88 81       	ld	r24, Y
    70bc:	89 17       	cp	r24, r25
    70be:	19 f0       	breq	.+6      	; 0x70c6
		return -EINVAL;
    70c0:	8a ee       	ldi	r24, 0xEA	; 234
    70c2:	9f ef       	ldi	r25, 0xFF	; 255
    70c4:	11 c0       	rjmp	.+34     	; 0x70e8
	}

	// disable sensor before unregistering function calls
  SOS_CALL(sensor_func_ptr[sensor_id], sensor_func_t, SENSOR_DISABLE_CMD,  st[sensor_id].ctx);
    70c6:	ee 0f       	add	r30, r30
    70c8:	ff 1f       	adc	r31, r31
    70ca:	eb 52       	subi	r30, 0x2B	; 43
    70cc:	f5 4f       	sbci	r31, 0xF5	; 245
    70ce:	4a 81       	ldd	r20, Y+2	; 0x02
    70d0:	5b 81       	ldd	r21, Y+3	; 0x03
    70d2:	62 e0       	ldi	r22, 0x02	; 2
    70d4:	80 81       	ld	r24, Z
    70d6:	91 81       	ldd	r25, Z+1	; 0x01
    70d8:	0e 94 46 00 	call	0x8c

	//sensor_func_ptr[sensor_id] = NULL;

  st[sensor_id].pid = NULL_PID;
    70dc:	8f ef       	ldi	r24, 0xFF	; 255
    70de:	88 83       	st	Y, r24
  st[sensor_id].ctx = NULL;
    70e0:	1a 82       	std	Y+2, r1	; 0x02
    70e2:	1b 82       	std	Y+3, r1	; 0x03

  return SOS_OK;
    70e4:	80 e0       	ldi	r24, 0x00	; 0
    70e6:	90 e0       	ldi	r25, 0x00	; 0
    70e8:	df 91       	pop	r29
    70ea:	cf 91       	pop	r28
    70ec:	08 95       	ret

000070ee <ker_sensor_get_data>:
}


/**
 * @brief Get the sensor data
 */
#ifdef SOS_USE_PREEMPTION
int8_t ker_sensor_get_data(uint8_t sensor_id) 
{
	HAS_ATOMIC_PREEMPTION_SECTION;
	int8_t ret;
	sos_pid_t calling_id = ker_get_current_pid();
	if ((sensor_id > MAX_SENSOR_ID) || (st[sensor_id].pid == NULL_PID) || (st[sensor_id].client_pid != NULL_PID)) {
		return -EINVAL;
	}

	st[sensor_id].client_pid = calling_id;  //changed

	ATOMIC_DISABLE_PREEMPTION();
	ret = SOS_CALL(sensor_func_ptr[sensor_id], sensor_func_t, SENSOR_GET_DATA_CMD, st[sensor_id].ctx);
	ATOMIC_ENABLE_PREEMPTION();
	if (SOS_OK != ret) {
		//! XXX ????
		st[sensor_id].client_pid = NULL_PID; //changed
		return -EINVAL;
	}
	

  return SOS_OK;
}
#else
int8_t ker_sensor_get_data(uint8_t sensor_id) 
{
    70ee:	1f 93       	push	r17
    70f0:	cf 93       	push	r28
    70f2:	df 93       	push	r29
    70f4:	c8 2f       	mov	r28, r24
	int8_t ret;
	sos_pid_t calling_id = ker_get_current_pid();
    70f6:	0e 94 e2 13 	call	0x27c4
    70fa:	98 2f       	mov	r25, r24

	if ((sensor_id > MAX_SENSOR_ID) || (st[sensor_id].pid == NULL_PID) || (st[sensor_id].client_pid != NULL_PID)) {
    70fc:	cd 30       	cpi	r28, 0x0D	; 13
    70fe:	f0 f4       	brcc	.+60     	; 0x713c
    7100:	ec 2f       	mov	r30, r28
    7102:	ff 27       	eor	r31, r31
    7104:	ef 01       	movw	r28, r30
    7106:	cc 0f       	add	r28, r28
    7108:	dd 1f       	adc	r29, r29
    710a:	cc 0f       	add	r28, r28
    710c:	dd 1f       	adc	r29, r29
    710e:	cb 55       	subi	r28, 0x5B	; 91
    7110:	d5 4f       	sbci	r29, 0xF5	; 245
    7112:	88 81       	ld	r24, Y
    7114:	8f 3f       	cpi	r24, 0xFF	; 255
    7116:	91 f0       	breq	.+36     	; 0x713c
    7118:	19 81       	ldd	r17, Y+1	; 0x01
    711a:	1f 3f       	cpi	r17, 0xFF	; 255
    711c:	79 f4       	brne	.+30     	; 0x713c
		return -EINVAL;
	}

	st[sensor_id].client_pid = calling_id;  //changed
    711e:	99 83       	std	Y+1, r25	; 0x01

	ret = SOS_CALL(sensor_func_ptr[sensor_id], sensor_func_t, SENSOR_GET_DATA_CMD, st[sensor_id].ctx);
    7120:	ee 0f       	add	r30, r30
    7122:	ff 1f       	adc	r31, r31
    7124:	eb 52       	subi	r30, 0x2B	; 43
    7126:	f5 4f       	sbci	r31, 0xF5	; 245
    7128:	4a 81       	ldd	r20, Y+2	; 0x02
    712a:	5b 81       	ldd	r21, Y+3	; 0x03
    712c:	60 e0       	ldi	r22, 0x00	; 0
    712e:	80 81       	ld	r24, Z
    7130:	91 81       	ldd	r25, Z+1	; 0x01
    7132:	0e 94 46 00 	call	0x8c
	if (SOS_OK != ret) {
    7136:	88 23       	and	r24, r24
    7138:	21 f0       	breq	.+8      	; 0x7142
		//! XXX ????
		st[sensor_id].client_pid = NULL_PID; //changed
    713a:	19 83       	std	Y+1, r17	; 0x01
		return -EINVAL;
    713c:	8a ee       	ldi	r24, 0xEA	; 234
    713e:	9f ef       	ldi	r25, 0xFF	; 255
    7140:	02 c0       	rjmp	.+4      	; 0x7146
	}
	

  return SOS_OK;
    7142:	80 e0       	ldi	r24, 0x00	; 0
    7144:	90 e0       	ldi	r25, 0x00	; 0
    7146:	df 91       	pop	r29
    7148:	cf 91       	pop	r28
    714a:	1f 91       	pop	r17
    714c:	08 95       	ret

0000714e <ker_sensor_enable>:
}
#endif

/**
 * @brief enable the sensor
 */
int8_t ker_sensor_enable(uint8_t sensor_id) 
{
    714e:	cf 93       	push	r28
    7150:	df 93       	push	r29
	int8_t ret;
	if ((sensor_id > MAX_SENSOR_ID) || (st[sensor_id].pid == NULL_PID) || (st[sensor_id].client_pid != NULL_PID)) {
    7152:	8d 30       	cpi	r24, 0x0D	; 13
    7154:	f0 f4       	brcc	.+60     	; 0x7192
    7156:	e8 2f       	mov	r30, r24
    7158:	ff 27       	eor	r31, r31
    715a:	df 01       	movw	r26, r30
    715c:	aa 0f       	add	r26, r26
    715e:	bb 1f       	adc	r27, r27
    7160:	aa 0f       	add	r26, r26
    7162:	bb 1f       	adc	r27, r27
    7164:	ab 55       	subi	r26, 0x5B	; 91
    7166:	b5 4f       	sbci	r27, 0xF5	; 245
    7168:	8c 91       	ld	r24, X
    716a:	8f 3f       	cpi	r24, 0xFF	; 255
    716c:	91 f0       	breq	.+36     	; 0x7192
    716e:	ed 01       	movw	r28, r26
    7170:	89 81       	ldd	r24, Y+1	; 0x01
    7172:	8f 3f       	cpi	r24, 0xFF	; 255
    7174:	71 f4       	brne	.+28     	; 0x7192
		return -EINVAL;
	}

	ret = SOS_CALL(sensor_func_ptr[sensor_id], sensor_func_t, SENSOR_ENABLE_CMD, st[sensor_id].ctx);
    7176:	ee 0f       	add	r30, r30
    7178:	ff 1f       	adc	r31, r31
    717a:	eb 52       	subi	r30, 0x2B	; 43
    717c:	f5 4f       	sbci	r31, 0xF5	; 245
    717e:	ed 01       	movw	r28, r26
    7180:	4a 81       	ldd	r20, Y+2	; 0x02
    7182:	5b 81       	ldd	r21, Y+3	; 0x03
    7184:	61 e0       	ldi	r22, 0x01	; 1
    7186:	80 81       	ld	r24, Z
    7188:	91 81       	ldd	r25, Z+1	; 0x01
    718a:	0e 94 46 00 	call	0x8c
	if (SOS_OK != ret) {
    718e:	88 23       	and	r24, r24
    7190:	19 f0       	breq	.+6      	; 0x7198
		//! XXX ????
		return -EINVAL;
    7192:	8a ee       	ldi	r24, 0xEA	; 234
    7194:	9f ef       	ldi	r25, 0xFF	; 255
    7196:	02 c0       	rjmp	.+4      	; 0x719c
	}

  return SOS_OK;
    7198:	80 e0       	ldi	r24, 0x00	; 0
    719a:	90 e0       	ldi	r25, 0x00	; 0
    719c:	df 91       	pop	r29
    719e:	cf 91       	pop	r28
    71a0:	08 95       	ret

000071a2 <ker_sensor_disable>:
}

/**
 * @brief disable the sensor
 */
int8_t ker_sensor_disable(uint8_t sensor_id) 
{
    71a2:	1f 93       	push	r17
    71a4:	cf 93       	push	r28
    71a6:	df 93       	push	r29
	int8_t ret;
	if ((sensor_id > MAX_SENSOR_ID) || (st[sensor_id].pid == NULL_PID) || (st[sensor_id].client_pid != NULL_PID)) {
    71a8:	8d 30       	cpi	r24, 0x0D	; 13
    71aa:	e0 f4       	brcc	.+56     	; 0x71e4
    71ac:	e8 2f       	mov	r30, r24
    71ae:	ff 27       	eor	r31, r31
    71b0:	ef 01       	movw	r28, r30
    71b2:	cc 0f       	add	r28, r28
    71b4:	dd 1f       	adc	r29, r29
    71b6:	cc 0f       	add	r28, r28
    71b8:	dd 1f       	adc	r29, r29
    71ba:	cb 55       	subi	r28, 0x5B	; 91
    71bc:	d5 4f       	sbci	r29, 0xF5	; 245
    71be:	88 81       	ld	r24, Y
    71c0:	8f 3f       	cpi	r24, 0xFF	; 255
    71c2:	81 f0       	breq	.+32     	; 0x71e4
    71c4:	19 81       	ldd	r17, Y+1	; 0x01
    71c6:	1f 3f       	cpi	r17, 0xFF	; 255
    71c8:	69 f4       	brne	.+26     	; 0x71e4
		return -EINVAL;
	}

	ret = SOS_CALL(sensor_func_ptr[sensor_id], sensor_func_t, SENSOR_DISABLE_CMD, st[sensor_id].ctx);
    71ca:	ee 0f       	add	r30, r30
    71cc:	ff 1f       	adc	r31, r31
    71ce:	eb 52       	subi	r30, 0x2B	; 43
    71d0:	f5 4f       	sbci	r31, 0xF5	; 245
    71d2:	4a 81       	ldd	r20, Y+2	; 0x02
    71d4:	5b 81       	ldd	r21, Y+3	; 0x03
    71d6:	62 e0       	ldi	r22, 0x02	; 2
    71d8:	80 81       	ld	r24, Z
    71da:	91 81       	ldd	r25, Z+1	; 0x01
    71dc:	0e 94 46 00 	call	0x8c
	if (SOS_OK != ret) {
    71e0:	88 23       	and	r24, r24
    71e2:	19 f0       	breq	.+6      	; 0x71ea
		//! XXX ????
		return -EINVAL;
    71e4:	8a ee       	ldi	r24, 0xEA	; 234
    71e6:	9f ef       	ldi	r25, 0xFF	; 255
    71e8:	03 c0       	rjmp	.+6      	; 0x71f0
	}
	st[sensor_id].client_pid = NULL_PID;
    71ea:	19 83       	std	Y+1, r17	; 0x01

  return SOS_OK;
    71ec:	80 e0       	ldi	r24, 0x00	; 0
    71ee:	90 e0       	ldi	r25, 0x00	; 0
    71f0:	df 91       	pop	r29
    71f2:	cf 91       	pop	r28
    71f4:	1f 91       	pop	r17
    71f6:	08 95       	ret

000071f8 <ker_sensor_control>:
}

/**
 * @brief reconfigure the sensor
 */
int8_t ker_sensor_control(uint8_t sensor_id, void* sensor_new_state) 
{
    71f8:	cf 93       	push	r28
    71fa:	df 93       	push	r29
    71fc:	ab 01       	movw	r20, r22
	int8_t ret;
	if ((sensor_id > MAX_SENSOR_ID) || (st[sensor_id].pid == NULL_PID) || (st[sensor_id].client_pid != NULL_PID)) {
    71fe:	8d 30       	cpi	r24, 0x0D	; 13
    7200:	d8 f4       	brcc	.+54     	; 0x7238
    7202:	e8 2f       	mov	r30, r24
    7204:	ff 27       	eor	r31, r31
    7206:	df 01       	movw	r26, r30
    7208:	aa 0f       	add	r26, r26
    720a:	bb 1f       	adc	r27, r27
    720c:	aa 0f       	add	r26, r26
    720e:	bb 1f       	adc	r27, r27
    7210:	ab 55       	subi	r26, 0x5B	; 91
    7212:	b5 4f       	sbci	r27, 0xF5	; 245
    7214:	8c 91       	ld	r24, X
    7216:	8f 3f       	cpi	r24, 0xFF	; 255
    7218:	79 f0       	breq	.+30     	; 0x7238
    721a:	ed 01       	movw	r28, r26
    721c:	89 81       	ldd	r24, Y+1	; 0x01
    721e:	8f 3f       	cpi	r24, 0xFF	; 255
    7220:	59 f4       	brne	.+22     	; 0x7238
		return -EINVAL;
	}

	ret = SOS_CALL(sensor_func_ptr[sensor_id], sensor_func_t, SENSOR_CONFIG_CMD, sensor_new_state);
    7222:	ee 0f       	add	r30, r30
    7224:	ff 1f       	adc	r31, r31
    7226:	eb 52       	subi	r30, 0x2B	; 43
    7228:	f5 4f       	sbci	r31, 0xF5	; 245
    722a:	63 e0       	ldi	r22, 0x03	; 3
    722c:	80 81       	ld	r24, Z
    722e:	91 81       	ldd	r25, Z+1	; 0x01
    7230:	0e 94 46 00 	call	0x8c
	if (SOS_OK != ret) {
    7234:	88 23       	and	r24, r24
    7236:	19 f0       	breq	.+6      	; 0x723e
		//! XXX ????
		return -EINVAL;
    7238:	8a ee       	ldi	r24, 0xEA	; 234
    723a:	9f ef       	ldi	r25, 0xFF	; 255
    723c:	02 c0       	rjmp	.+4      	; 0x7242
	}

  return SOS_OK;
    723e:	80 e0       	ldi	r24, 0x00	; 0
    7240:	90 e0       	ldi	r25, 0x00	; 0
    7242:	df 91       	pop	r29
    7244:	cf 91       	pop	r28
    7246:	08 95       	ret

00007248 <ker_sensor_data_ready>:
}





/**
 * @brief The data ready message to the application
 */
int8_t ker_sensor_data_ready(uint8_t sensor_id, uint16_t sensor_data, uint8_t status) {
    7248:	ef 92       	push	r14
    724a:	ff 92       	push	r15
    724c:	0f 93       	push	r16
    724e:	1f 93       	push	r17
    7250:	cf 93       	push	r28
    7252:	df 93       	push	r29
    7254:	28 2f       	mov	r18, r24
    7256:	8b 01       	movw	r16, r22

	if ((sensor_id > MAX_SENSOR_ID) || (NULL_PID == st[sensor_id].pid) || (NULL_PID == st[sensor_id].client_pid)) {
    7258:	8d 30       	cpi	r24, 0x0D	; 13
    725a:	78 f4       	brcc	.+30     	; 0x727a
    725c:	c8 2f       	mov	r28, r24
    725e:	dd 27       	eor	r29, r29
    7260:	fe 01       	movw	r30, r28
    7262:	ee 0f       	add	r30, r30
    7264:	ff 1f       	adc	r31, r31
    7266:	ee 0f       	add	r30, r30
    7268:	ff 1f       	adc	r31, r31
    726a:	eb 55       	subi	r30, 0x5B	; 91
    726c:	f5 4f       	sbci	r31, 0xF5	; 245
    726e:	80 81       	ld	r24, Z
    7270:	8f 3f       	cpi	r24, 0xFF	; 255
    7272:	19 f0       	breq	.+6      	; 0x727a
    7274:	81 81       	ldd	r24, Z+1	; 0x01
    7276:	8f 3f       	cpi	r24, 0xFF	; 255
    7278:	19 f4       	brne	.+6      	; 0x7280
		return -EINVAL;
    727a:	8a ee       	ldi	r24, 0xEA	; 234
    727c:	9f ef       	ldi	r25, 0xFF	; 255
    727e:	1a c0       	rjmp	.+52     	; 0x72b4
	}
	
	//! There is no need to make this message a high priority one as it is the sampling which needs to be done asap and not the delivery
	if ((0x3f & status) != 0) {
    7280:	e4 2e       	mov	r14, r20
    7282:	ff 24       	eor	r15, r15
    7284:	9f e3       	ldi	r25, 0x3F	; 63
    7286:	e9 22       	and	r14, r25
    7288:	ff 24       	eor	r15, r15
    728a:	e1 14       	cp	r14, r1
    728c:	f1 04       	cpc	r15, r1
    728e:	21 f0       	breq	.+8      	; 0x7298
		post_short(st[sensor_id].client_pid, KER_SENSOR_PID, MSG_ERROR, sensor_id, sensor_data, 0);
    7290:	ee 24       	eor	r14, r14
    7292:	ff 24       	eor	r15, r15
    7294:	4f e0       	ldi	r20, 0x0F	; 15
    7296:	01 c0       	rjmp	.+2      	; 0x729a
	} else {
		post_short(st[sensor_id].client_pid, KER_SENSOR_PID, MSG_DATA_READY, sensor_id, sensor_data, 0);
    7298:	44 e0       	ldi	r20, 0x04	; 4
    729a:	66 e0       	ldi	r22, 0x06	; 6
    729c:	0e 94 50 18 	call	0x30a0
	}
	st[sensor_id].client_pid = NULL_PID;
    72a0:	cc 0f       	add	r28, r28
    72a2:	dd 1f       	adc	r29, r29
    72a4:	cc 0f       	add	r28, r28
    72a6:	dd 1f       	adc	r29, r29
    72a8:	cb 55       	subi	r28, 0x5B	; 91
    72aa:	d5 4f       	sbci	r29, 0xF5	; 245
    72ac:	8f ef       	ldi	r24, 0xFF	; 255
    72ae:	89 83       	std	Y+1, r24	; 0x01

  return SOS_OK;
    72b0:	80 e0       	ldi	r24, 0x00	; 0
    72b2:	90 e0       	ldi	r25, 0x00	; 0
    72b4:	df 91       	pop	r29
    72b6:	cf 91       	pop	r28
    72b8:	1f 91       	pop	r17
    72ba:	0f 91       	pop	r16
    72bc:	ff 90       	pop	r15
    72be:	ef 90       	pop	r14
    72c0:	08 95       	ret

000072c2 <sensor_remove_all>:
}

#ifndef NEW_SENSING_API
int8_t sensor_remove_all(sos_pid_t pid)
{
    72c2:	0f 93       	push	r16
    72c4:	1f 93       	push	r17
    72c6:	cf 93       	push	r28
    72c8:	df 93       	push	r29
    72ca:	08 2f       	mov	r16, r24
	uint8_t i;

	for(i = 0; i < MAX_SENSOR_ID; i++) {
    72cc:	10 e0       	ldi	r17, 0x00	; 0
    72ce:	c5 ea       	ldi	r28, 0xA5	; 165
    72d0:	da e0       	ldi	r29, 0x0A	; 10
		if(st[i].pid == pid) {
    72d2:	88 81       	ld	r24, Y
    72d4:	24 96       	adiw	r28, 0x04	; 4
    72d6:	80 17       	cp	r24, r16
    72d8:	19 f4       	brne	.+6      	; 0x72e0
			ker_sensor_deregister(st[i].pid, i);
    72da:	61 2f       	mov	r22, r17
    72dc:	0e 94 4f 38 	call	0x709e
    72e0:	1f 5f       	subi	r17, 0xFF	; 255
    72e2:	1c 30       	cpi	r17, 0x0C	; 12
    72e4:	b0 f3       	brcs	.-20     	; 0x72d2
		}
	}
	return SOS_OK;
}
    72e6:	80 e0       	ldi	r24, 0x00	; 0
    72e8:	90 e0       	ldi	r25, 0x00	; 0
    72ea:	df 91       	pop	r29
    72ec:	cf 91       	pop	r28
    72ee:	1f 91       	pop	r17
    72f0:	0f 91       	pop	r16
    72f2:	08 95       	ret

000072f4 <sensor_handler>:

static int8_t sensor_handler(void *state, Message *msg)
{
	return -EINVAL;
}
    72f4:	8a ee       	ldi	r24, 0xEA	; 234
    72f6:	9f ef       	ldi	r25, 0xFF	; 255
    72f8:	08 95       	ret

000072fa <sensor_system_init>:


/**
 * @brief Initialize the sensor interface
 */
int8_t sensor_system_init() {
    72fa:	8f ef       	ldi	r24, 0xFF	; 255
    72fc:	e5 ef       	ldi	r30, 0xF5	; 245
    72fe:	fa e0       	ldi	r31, 0x0A	; 10
	unsigned int i;

	for (i = 0; i < MAX_NUM_SENSORS; i++) {
		s.driver_id[i] = NULL_PID;
    7300:	81 93       	st	Z+, r24
    7302:	9a e0       	ldi	r25, 0x0A	; 10
    7304:	ec 3f       	cpi	r30, 0xFC	; 252
    7306:	f9 07       	cpc	r31, r25
    7308:	d9 f3       	breq	.-10     	; 0x7300
    730a:	d0 f3       	brcs	.-12     	; 0x7300
	}
#ifdef SOS_USE_PREEMPTION
	ker_register_module(sos_get_header_address(mod_header));
	sensor_func_ptr = ker_get_module_state(KER_SENSOR_PID);
#else
	sched_register_kernel_module(&sensor_module, sos_get_header_address(mod_header), sensor_func_ptr);
    730c:	84 e6       	ldi	r24, 0x64	; 100
    730e:	92 e0       	ldi	r25, 0x02	; 2
    7310:	aa 27       	eor	r26, r26
    7312:	97 fd       	sbrc	r25, 7
    7314:	a0 95       	com	r26
    7316:	ba 2f       	mov	r27, r26
    7318:	b6 95       	lsr	r27
    731a:	a7 95       	ror	r26
    731c:	97 95       	ror	r25
    731e:	87 95       	ror	r24
    7320:	4d ef       	ldi	r20, 0xFD	; 253
    7322:	5a e0       	ldi	r21, 0x0A	; 10
    7324:	bc 01       	movw	r22, r24
    7326:	8d e0       	ldi	r24, 0x0D	; 13
    7328:	9b e0       	ldi	r25, 0x0B	; 11
    732a:	0e 94 4a 14 	call	0x2894
#endif
	return SOS_OK;
}
    732e:	80 e0       	ldi	r24, 0x00	; 0
    7330:	90 e0       	ldi	r25, 0x00	; 0
    7332:	08 95       	ret

00007334 <ker_sensor_driver_register>:

/**
 * @brief Register a new sensor driver
 */
int8_t ker_sys_sensor_driver_register(sensor_id_t sensor, uint8_t sensor_control_fid) {
	sos_pid_t driver_id = ker_get_current_pid();
	return ker_sensor_driver_register(driver_id, sensor, sensor_control_fid);
}

int8_t ker_sensor_driver_register(sos_pid_t driver_id, sensor_id_t sensor, uint8_t sensor_control_fid) {
    7334:	1f 93       	push	r17
    7336:	cf 93       	push	r28
    7338:	df 93       	push	r29
    733a:	18 2f       	mov	r17, r24
    733c:	26 2f       	mov	r18, r22
	// Verify driver id and sensor id.
	// Verify if the sensor has already been registered.
	if ((driver_id == NULL_PID) || 
    733e:	8f 3f       	cpi	r24, 0xFF	; 255
    7340:	79 f0       	breq	.+30     	; 0x7360
    7342:	68 30       	cpi	r22, 0x08	; 8
    7344:	68 f4       	brcc	.+26     	; 0x7360
    7346:	c6 2f       	mov	r28, r22
    7348:	dd 27       	eor	r29, r29
    734a:	cb 50       	subi	r28, 0x0B	; 11
    734c:	d5 4f       	sbci	r29, 0xF5	; 245
    734e:	88 81       	ld	r24, Y
    7350:	8f 3f       	cpi	r24, 0xFF	; 255
    7352:	31 f4       	brne	.+12     	; 0x7360
		(sensor >= MAX_NUM_SENSORS) || 
		(s.driver_id[sensor] != NULL_PID)) {
		return -EINVAL;
	}

	// Subscribe to sensor control function.
	if (ker_fntable_subscribe(KER_SENSOR_PID, driver_id, sensor_control_fid, sensor) < 0) {
    7354:	61 2f       	mov	r22, r17
    7356:	86 e0       	ldi	r24, 0x06	; 6
    7358:	0e 94 26 29 	call	0x524c
    735c:	87 ff       	sbrs	r24, 7
    735e:	03 c0       	rjmp	.+6      	; 0x7366
		return -EINVAL;
    7360:	8a ee       	ldi	r24, 0xEA	; 234
    7362:	9f ef       	ldi	r25, 0xFF	; 255
    7364:	03 c0       	rjmp	.+6      	; 0x736c
	}

	// Registration successful.
	s.driver_id[sensor] = driver_id;
    7366:	18 83       	st	Y, r17

	return SOS_OK;
    7368:	80 e0       	ldi	r24, 0x00	; 0
    736a:	90 e0       	ldi	r25, 0x00	; 0
    736c:	df 91       	pop	r29
    736e:	cf 91       	pop	r28
    7370:	1f 91       	pop	r17
    7372:	08 95       	ret

00007374 <ker_sys_sensor_driver_register>:
    7374:	0f 93       	push	r16
    7376:	1f 93       	push	r17
    7378:	08 2f       	mov	r16, r24
    737a:	16 2f       	mov	r17, r22
    737c:	0e 94 e2 13 	call	0x27c4
    7380:	41 2f       	mov	r20, r17
    7382:	60 2f       	mov	r22, r16
    7384:	0e 94 9a 39 	call	0x7334
    7388:	99 27       	eor	r25, r25
    738a:	87 fd       	sbrc	r24, 7
    738c:	90 95       	com	r25
    738e:	1f 91       	pop	r17
    7390:	0f 91       	pop	r16
    7392:	08 95       	ret

00007394 <ker_sensor_driver_deregister>:
}


int8_t ker_sys_sensor_driver_deregister(sensor_id_t sensor) {
	sos_pid_t driver_id = ker_get_current_pid();
	return ker_sensor_driver_deregister(driver_id, sensor);
}

/**
 * @brief De-Register a sensor driver
 */
int8_t ker_sensor_driver_deregister(sos_pid_t driver_id, sensor_id_t sensor) {
	// Verify driver id and sensor id.
	// Verify if the sensor has already been registered.
	if ((driver_id == NULL_PID) || 
    7394:	8f 3f       	cpi	r24, 0xFF	; 255
    7396:	49 f0       	breq	.+18     	; 0x73aa
    7398:	68 30       	cpi	r22, 0x08	; 8
    739a:	38 f4       	brcc	.+14     	; 0x73aa
    739c:	e6 2f       	mov	r30, r22
    739e:	ff 27       	eor	r31, r31
    73a0:	eb 50       	subi	r30, 0x0B	; 11
    73a2:	f5 4f       	sbci	r31, 0xF5	; 245
    73a4:	80 81       	ld	r24, Z
    73a6:	8f 3f       	cpi	r24, 0xFF	; 255
    73a8:	19 f4       	brne	.+6      	; 0x73b0
		(sensor >= MAX_NUM_SENSORS) || 
		(s.driver_id[sensor] == NULL_PID)) {
		return -EINVAL;
    73aa:	8a ee       	ldi	r24, 0xEA	; 234
    73ac:	9f ef       	ldi	r25, 0xFF	; 255
    73ae:	08 95       	ret
	}

	// Driver de-registered.
	s.driver_id[sensor] = NULL_PID;
    73b0:	8f ef       	ldi	r24, 0xFF	; 255
    73b2:	80 83       	st	Z, r24

	return SOS_OK;
    73b4:	80 e0       	ldi	r24, 0x00	; 0
    73b6:	90 e0       	ldi	r25, 0x00	; 0
}
    73b8:	08 95       	ret
    73ba:	08 95       	ret

000073bc <ker_sys_sensor_driver_deregister>:
    73bc:	1f 93       	push	r17
    73be:	18 2f       	mov	r17, r24
    73c0:	0e 94 e2 13 	call	0x27c4
    73c4:	61 2f       	mov	r22, r17
    73c6:	0e 94 ca 39 	call	0x7394
    73ca:	99 27       	eor	r25, r25
    73cc:	87 fd       	sbrc	r24, 7
    73ce:	90 95       	com	r25
    73d0:	1f 91       	pop	r17
    73d2:	08 95       	ret

000073d4 <ker_sensor_start_sampling>:


int8_t ker_sys_sensor_start_sampling(sensor_id_t *sensors, unsigned int num_sensors, 
						sample_context_t *param, void *context) {
	sos_pid_t app_id = ker_get_current_pid();
	return ker_sensor_start_sampling(app_id, sensors, num_sensors, param, context);
}

/**
 * @brief Get the sensor data
 */
int8_t ker_sensor_start_sampling(sos_pid_t app_id, sensor_id_t *sensors, unsigned int num_sensors, 
						sample_context_t *param, void *context) {
    73d4:	2f 92       	push	r2
    73d6:	3f 92       	push	r3
    73d8:	4f 92       	push	r4
    73da:	5f 92       	push	r5
    73dc:	6f 92       	push	r6
    73de:	7f 92       	push	r7
    73e0:	8f 92       	push	r8
    73e2:	9f 92       	push	r9
    73e4:	af 92       	push	r10
    73e6:	bf 92       	push	r11
    73e8:	cf 92       	push	r12
    73ea:	df 92       	push	r13
    73ec:	ef 92       	push	r14
    73ee:	ff 92       	push	r15
    73f0:	0f 93       	push	r16
    73f2:	1f 93       	push	r17
    73f4:	cf 93       	push	r28
    73f6:	df 93       	push	r29
    73f8:	28 2e       	mov	r2, r24
    73fa:	5b 01       	movw	r10, r22
    73fc:	6a 01       	movw	r12, r20
    73fe:	39 01       	movw	r6, r18
    7400:	28 01       	movw	r4, r16
	unsigned int i;

	// Verify application id.
	if (app_id == NULL_PID) return -EINVAL;
    7402:	2f ef       	ldi	r18, 0xFF	; 255
    7404:	82 17       	cp	r24, r18
    7406:	b1 f0       	breq	.+44     	; 0x7434

	// Verify sensor ids and the sensor drivers that support these
	// sensors are registered.
	for (i = 0; i < num_sensors; i++) {
    7408:	c0 e0       	ldi	r28, 0x00	; 0
    740a:	d0 e0       	ldi	r29, 0x00	; 0
    740c:	c4 17       	cp	r28, r20
    740e:	d5 07       	cpc	r29, r21
    7410:	70 f4       	brcc	.+28     	; 0x742e
    7412:	db 01       	movw	r26, r22
		if ((sensors[i] >= MAX_NUM_SENSORS) || 
    7414:	ed 91       	ld	r30, X+
    7416:	e8 30       	cpi	r30, 0x08	; 8
    7418:	68 f4       	brcc	.+26     	; 0x7434
    741a:	ff 27       	eor	r31, r31
    741c:	eb 50       	subi	r30, 0x0B	; 11
    741e:	f5 4f       	sbci	r31, 0xF5	; 245
    7420:	80 81       	ld	r24, Z
    7422:	8f 3f       	cpi	r24, 0xFF	; 255
    7424:	39 f0       	breq	.+14     	; 0x7434
    7426:	21 96       	adiw	r28, 0x01	; 1
    7428:	cc 15       	cp	r28, r12
    742a:	dd 05       	cpc	r29, r13
    742c:	98 f3       	brcs	.-26     	; 0x7414
			(s.driver_id[sensors[i]] == NULL_PID)) { 
			return -EINVAL;
		}
	}

	if (param == NULL) return -EINVAL;
    742e:	61 14       	cp	r6, r1
    7430:	71 04       	cpc	r7, r1
    7432:	19 f4       	brne	.+6      	; 0x743a
    7434:	8a ee       	ldi	r24, 0xEA	; 234
    7436:	9f ef       	ldi	r25, 0xFF	; 255
    7438:	62 c0       	rjmp	.+196    	; 0x74fe

	// Register request to sensor drivers.
	for (i = 0; i < num_sensors; i++) {
    743a:	c0 e0       	ldi	r28, 0x00	; 0
    743c:	d0 e0       	ldi	r29, 0x00	; 0
    743e:	cc 15       	cp	r28, r12
    7440:	dd 05       	cpc	r29, r13
    7442:	08 f0       	brcs	.+2      	; 0x7446
    7444:	42 c0       	rjmp	.+132    	; 0x74ca
    7446:	45 01       	movw	r8, r10
		int8_t ret = SOS_CALL(sensor_func_ptr[sensors[i]], sensor_control_fn_t, SENSOR_REGISTER_REQUEST_COMMAND, 
    7448:	f4 01       	movw	r30, r8
    744a:	81 91       	ld	r24, Z+
    744c:	4f 01       	movw	r8, r30
    744e:	e8 2f       	mov	r30, r24
    7450:	ff 27       	eor	r31, r31
    7452:	ee 0f       	add	r30, r30
    7454:	ff 1f       	adc	r31, r31
    7456:	e3 50       	subi	r30, 0x03	; 3
    7458:	f5 4f       	sbci	r31, 0xF5	; 245
    745a:	72 01       	movw	r14, r4
    745c:	83 01       	movw	r16, r6
    745e:	28 2f       	mov	r18, r24
    7460:	42 2d       	mov	r20, r2
    7462:	60 e0       	ldi	r22, 0x00	; 0
    7464:	80 81       	ld	r24, Z
    7466:	91 81       	ldd	r25, Z+1	; 0x01
    7468:	0e 94 46 00 	call	0x8c
    746c:	38 2e       	mov	r3, r24
							app_id, sensors[i], param, context);
		if (ret < 0) {
    746e:	87 ff       	sbrs	r24, 7
    7470:	27 c0       	rjmp	.+78     	; 0x74c0
			// Remove request from other drivers too if there is some error
			// while registering it.
			int j;
			for (j = i-1; j > -1; j--) {
    7472:	ce 01       	movw	r24, r28
    7474:	01 97       	sbiw	r24, 0x01	; 1
    7476:	ff ef       	ldi	r31, 0xFF	; 255
    7478:	8f 3f       	cpi	r24, 0xFF	; 255
    747a:	9f 07       	cpc	r25, r31
    747c:	e1 f0       	breq	.+56     	; 0x74b6
    747e:	dc f0       	brlt	.+54     	; 0x74b6
    7480:	ec 01       	movw	r28, r24
    7482:	ca 0d       	add	r28, r10
    7484:	db 1d       	adc	r29, r11
    7486:	65 01       	movw	r12, r10
    7488:	08 94       	sec
    748a:	c1 08       	sbc	r12, r1
    748c:	d1 08       	sbc	r13, r1
				SOS_CALL(sensor_func_ptr[sensors[j]], sensor_control_fn_t, SENSOR_REMOVE_REQUEST_COMMAND, 
    748e:	88 81       	ld	r24, Y
    7490:	21 97       	sbiw	r28, 0x01	; 1
    7492:	e8 2f       	mov	r30, r24
    7494:	ff 27       	eor	r31, r31
    7496:	ee 0f       	add	r30, r30
    7498:	ff 1f       	adc	r31, r31
    749a:	e3 50       	subi	r30, 0x03	; 3
    749c:	f5 4f       	sbci	r31, 0xF5	; 245
    749e:	72 01       	movw	r14, r4
    74a0:	83 01       	movw	r16, r6
    74a2:	28 2f       	mov	r18, r24
    74a4:	42 2d       	mov	r20, r2
    74a6:	61 e0       	ldi	r22, 0x01	; 1
    74a8:	80 81       	ld	r24, Z
    74aa:	91 81       	ldd	r25, Z+1	; 0x01
    74ac:	0e 94 46 00 	call	0x8c
    74b0:	cc 16       	cp	r12, r28
    74b2:	dd 06       	cpc	r13, r29
    74b4:	64 f3       	brlt	.-40     	; 0x748e
						app_id, sensors[j], param, context);
			}
			return ret;
    74b6:	83 2d       	mov	r24, r3
    74b8:	99 27       	eor	r25, r25
    74ba:	87 fd       	sbrc	r24, 7
    74bc:	90 95       	com	r25
    74be:	1f c0       	rjmp	.+62     	; 0x74fe
    74c0:	21 96       	adiw	r28, 0x01	; 1
    74c2:	cc 15       	cp	r28, r12
    74c4:	dd 05       	cpc	r29, r13
    74c6:	08 f4       	brcc	.+2      	; 0x74ca
    74c8:	bf cf       	rjmp	.-130    	; 0x7448
		}
	}

	// Issue GET_DATA command to sensor drivers.
	for (i = 0; i < num_sensors; i++) {
    74ca:	c1 14       	cp	r12, r1
    74cc:	d1 04       	cpc	r13, r1
    74ce:	a9 f0       	breq	.+42     	; 0x74fa
    74d0:	e6 01       	movw	r28, r12
		SOS_CALL(sensor_func_ptr[sensors[i]], sensor_control_fn_t, SENSOR_GET_DATA_COMMAND, 
    74d2:	f5 01       	movw	r30, r10
    74d4:	81 91       	ld	r24, Z+
    74d6:	5f 01       	movw	r10, r30
    74d8:	e8 2f       	mov	r30, r24
    74da:	ff 27       	eor	r31, r31
    74dc:	ee 0f       	add	r30, r30
    74de:	ff 1f       	adc	r31, r31
    74e0:	e3 50       	subi	r30, 0x03	; 3
    74e2:	f5 4f       	sbci	r31, 0xF5	; 245
    74e4:	72 01       	movw	r14, r4
    74e6:	83 01       	movw	r16, r6
    74e8:	28 2f       	mov	r18, r24
    74ea:	42 2d       	mov	r20, r2
    74ec:	62 e0       	ldi	r22, 0x02	; 2
    74ee:	80 81       	ld	r24, Z
    74f0:	91 81       	ldd	r25, Z+1	; 0x01
    74f2:	0e 94 46 00 	call	0x8c
    74f6:	21 97       	sbiw	r28, 0x01	; 1
    74f8:	61 f7       	brne	.-40     	; 0x74d2
				app_id, sensors[i], param, context);
	}

	return SOS_OK;
    74fa:	80 e0       	ldi	r24, 0x00	; 0
    74fc:	90 e0       	ldi	r25, 0x00	; 0
    74fe:	df 91       	pop	r29
    7500:	cf 91       	pop	r28
    7502:	1f 91       	pop	r17
    7504:	0f 91       	pop	r16
    7506:	ff 90       	pop	r15
    7508:	ef 90       	pop	r14
    750a:	df 90       	pop	r13
    750c:	cf 90       	pop	r12
    750e:	bf 90       	pop	r11
    7510:	af 90       	pop	r10
    7512:	9f 90       	pop	r9
    7514:	8f 90       	pop	r8
    7516:	7f 90       	pop	r7
    7518:	6f 90       	pop	r6
    751a:	5f 90       	pop	r5
    751c:	4f 90       	pop	r4
    751e:	3f 90       	pop	r3
    7520:	2f 90       	pop	r2
    7522:	08 95       	ret

00007524 <ker_sys_sensor_start_sampling>:
    7524:	af 92       	push	r10
    7526:	bf 92       	push	r11
    7528:	cf 92       	push	r12
    752a:	df 92       	push	r13
    752c:	ef 92       	push	r14
    752e:	ff 92       	push	r15
    7530:	0f 93       	push	r16
    7532:	1f 93       	push	r17
    7534:	5c 01       	movw	r10, r24
    7536:	6b 01       	movw	r12, r22
    7538:	7a 01       	movw	r14, r20
    753a:	89 01       	movw	r16, r18
    753c:	0e 94 e2 13 	call	0x27c4
    7540:	97 01       	movw	r18, r14
    7542:	a6 01       	movw	r20, r12
    7544:	b5 01       	movw	r22, r10
    7546:	0e 94 ea 39 	call	0x73d4
    754a:	99 27       	eor	r25, r25
    754c:	87 fd       	sbrc	r24, 7
    754e:	90 95       	com	r25
    7550:	1f 91       	pop	r17
    7552:	0f 91       	pop	r16
    7554:	ff 90       	pop	r15
    7556:	ef 90       	pop	r14
    7558:	df 90       	pop	r13
    755a:	cf 90       	pop	r12
    755c:	bf 90       	pop	r11
    755e:	af 90       	pop	r10
    7560:	08 95       	ret

00007562 <ker_sensor_stop_sampling>:
}


int8_t ker_sys_sensor_stop_sampling(sensor_id_t sensor) { 
	sos_pid_t app_id = ker_get_current_pid();
	return ker_sensor_stop_sampling(app_id, sensor);
}

int8_t ker_sensor_stop_sampling(sos_pid_t app_id, sensor_id_t sensor) {
    7562:	ef 92       	push	r14
    7564:	ff 92       	push	r15
    7566:	0f 93       	push	r16
    7568:	1f 93       	push	r17
    756a:	48 2f       	mov	r20, r24
    756c:	26 2f       	mov	r18, r22
	if ((app_id == NULL_PID) ||
    756e:	8f 3f       	cpi	r24, 0xFF	; 255
    7570:	51 f0       	breq	.+20     	; 0x7586
    7572:	69 30       	cpi	r22, 0x09	; 9
    7574:	40 f4       	brcc	.+16     	; 0x7586
    7576:	a6 2f       	mov	r26, r22
    7578:	bb 27       	eor	r27, r27
    757a:	fd 01       	movw	r30, r26
    757c:	eb 50       	subi	r30, 0x0B	; 11
    757e:	f5 4f       	sbci	r31, 0xF5	; 245
    7580:	80 81       	ld	r24, Z
    7582:	8f 3f       	cpi	r24, 0xFF	; 255
    7584:	19 f0       	breq	.+6      	; 0x758c
		(sensor > MAX_NUM_SENSORS) ||
		(s.driver_id[sensor] != NULL_PID)) {
		return -EINVAL;
    7586:	8a ee       	ldi	r24, 0xEA	; 234
    7588:	9f ef       	ldi	r25, 0xFF	; 255
    758a:	0f c0       	rjmp	.+30     	; 0x75aa
	}

	int8_t ret = SOS_CALL(sensor_func_ptr[sensor], sensor_control_fn_t, SENSOR_STOP_DATA_COMMAND, 
    758c:	aa 0f       	add	r26, r26
    758e:	bb 1f       	adc	r27, r27
    7590:	a3 50       	subi	r26, 0x03	; 3
    7592:	b5 4f       	sbci	r27, 0xF5	; 245
    7594:	ee 24       	eor	r14, r14
    7596:	ff 24       	eor	r15, r15
    7598:	87 01       	movw	r16, r14
    759a:	63 e0       	ldi	r22, 0x03	; 3
    759c:	8d 91       	ld	r24, X+
    759e:	9c 91       	ld	r25, X
    75a0:	0e 94 46 00 	call	0x8c
						app_id, sensor, NULL, NULL);

	return ret;
    75a4:	99 27       	eor	r25, r25
    75a6:	87 fd       	sbrc	r24, 7
    75a8:	90 95       	com	r25
    75aa:	1f 91       	pop	r17
    75ac:	0f 91       	pop	r16
    75ae:	ff 90       	pop	r15
    75b0:	ef 90       	pop	r14
    75b2:	08 95       	ret

000075b4 <ker_sys_sensor_stop_sampling>:
    75b4:	1f 93       	push	r17
    75b6:	18 2f       	mov	r17, r24
    75b8:	0e 94 e2 13 	call	0x27c4
    75bc:	61 2f       	mov	r22, r17
    75be:	0e 94 b1 3a 	call	0x7562
    75c2:	99 27       	eor	r25, r25
    75c4:	87 fd       	sbrc	r24, 7
    75c6:	90 95       	com	r25
    75c8:	1f 91       	pop	r17
    75ca:	08 95       	ret

000075cc <shm_lookup>:
	return shm_bin[hash_bin(name)];
}

static shm_cb *shm_lookup(sos_shm_t name) 
{
    75cc:	9c 01       	movw	r18, r24
    75ce:	fc 01       	movw	r30, r24
    75d0:	e3 70       	andi	r30, 0x03	; 3
    75d2:	f0 70       	andi	r31, 0x00	; 0
    75d4:	ee 0f       	add	r30, r30
    75d6:	ff 1f       	adc	r31, r31
    75d8:	eb 5e       	subi	r30, 0xEB	; 235
    75da:	f4 4f       	sbci	r31, 0xF4	; 244
    75dc:	01 90       	ld	r0, Z+
    75de:	f0 81       	ld	r31, Z
    75e0:	e0 2d       	mov	r30, r0
	shm_cb *shm = name_to_bin(name);
	
	while(shm != NULL) {
		if(shm->name == name) {
			return shm;
		}
		shm = shm->next;
    75e2:	30 97       	sbiw	r30, 0x00	; 0
    75e4:	59 f0       	breq	.+22     	; 0x75fc
    75e6:	80 81       	ld	r24, Z
    75e8:	91 81       	ldd	r25, Z+1	; 0x01
    75ea:	82 17       	cp	r24, r18
    75ec:	93 07       	cpc	r25, r19
    75ee:	11 f4       	brne	.+4      	; 0x75f4
    75f0:	cf 01       	movw	r24, r30
    75f2:	08 95       	ret
    75f4:	07 80       	ldd	r0, Z+7	; 0x07
    75f6:	f0 85       	ldd	r31, Z+8	; 0x08
    75f8:	e0 2d       	mov	r30, r0
    75fa:	f3 cf       	rjmp	.-26     	; 0x75e2
	}
	return NULL;
    75fc:	80 e0       	ldi	r24, 0x00	; 0
    75fe:	90 e0       	ldi	r25, 0x00	; 0
}
    7600:	08 95       	ret
    7602:	08 95       	ret

00007604 <shm_send_event>:

//
// TODO: send message to the waiter
//
static void shm_send_event( shm_cb *cb, uint8_t type )
{
    7604:	af 92       	push	r10
    7606:	bf 92       	push	r11
    7608:	cf 92       	push	r12
    760a:	df 92       	push	r13
    760c:	ef 92       	push	r14
    760e:	ff 92       	push	r15
    7610:	0f 93       	push	r16
    7612:	1f 93       	push	r17
    7614:	cf 93       	push	r28
    7616:	df 93       	push	r29
    7618:	6c 01       	movw	r12, r24
    761a:	a6 2e       	mov	r10, r22
    761c:	ec 01       	movw	r28, r24
    761e:	25 96       	adiw	r28, 0x05	; 5
    7620:	81 e0       	ldi	r24, 0x01	; 1
    7622:	b8 2e       	mov	r11, r24
	uint8_t i;
	for( i = 0; i < SHM_NUM_WAITER; i++ ) {
		if( cb->waiter[i] != NULL_PID ) {
    7624:	89 91       	ld	r24, Y+
    7626:	8f 3f       	cpi	r24, 0xFF	; 255
    7628:	51 f0       	breq	.+20     	; 0x763e
			post_short( cb->waiter[i], KER_SHM_PID, MSG_SHM, type, cb->name, 0 );
    762a:	ee 24       	eor	r14, r14
    762c:	ff 24       	eor	r15, r15
    762e:	f6 01       	movw	r30, r12
    7630:	00 81       	ld	r16, Z
    7632:	11 81       	ldd	r17, Z+1	; 0x01
    7634:	2a 2d       	mov	r18, r10
    7636:	42 e1       	ldi	r20, 0x12	; 18
    7638:	63 e1       	ldi	r22, 0x13	; 19
    763a:	0e 94 50 18 	call	0x30a0
    763e:	ba 94       	dec	r11
    7640:	b7 fe       	sbrs	r11, 7
    7642:	f0 cf       	rjmp	.-32     	; 0x7624
    7644:	df 91       	pop	r29
    7646:	cf 91       	pop	r28
    7648:	1f 91       	pop	r17
    764a:	0f 91       	pop	r16
    764c:	ff 90       	pop	r15
    764e:	ef 90       	pop	r14
    7650:	df 90       	pop	r13
    7652:	cf 90       	pop	r12
    7654:	bf 90       	pop	r11
    7656:	af 90       	pop	r10
    7658:	08 95       	ret

0000765a <ker_shm_open>:
		}
	}
}

int8_t ker_shm_open(sos_pid_t pid, sos_shm_t name, void *shm)
{
    765a:	df 92       	push	r13
    765c:	ef 92       	push	r14
    765e:	ff 92       	push	r15
    7660:	0f 93       	push	r16
    7662:	1f 93       	push	r17
    7664:	cf 93       	push	r28
    7666:	df 93       	push	r29
    7668:	d8 2e       	mov	r13, r24
    766a:	eb 01       	movw	r28, r22
    766c:	8a 01       	movw	r16, r20
	shm_cb *cb;	
	uint8_t i;
	
	if(shm_lookup(name) != NULL) {
    766e:	cb 01       	movw	r24, r22
    7670:	0e 94 e6 3a 	call	0x75cc
    7674:	7c 01       	movw	r14, r24
    7676:	89 2b       	or	r24, r25
    7678:	19 f0       	breq	.+6      	; 0x7680
		return -EEXIST;
    767a:	8f ee       	ldi	r24, 0xEF	; 239
    767c:	9f ef       	ldi	r25, 0xFF	; 255
    767e:	24 c0       	rjmp	.+72     	; 0x76c8
	}

	cb = ker_slab_alloc( &shm_slab, KER_SHM_PID );
    7680:	63 e1       	ldi	r22, 0x13	; 19
    7682:	8d e1       	ldi	r24, 0x1D	; 29
    7684:	9b e0       	ldi	r25, 0x0B	; 11
    7686:	0e 94 80 3d 	call	0x7b00
    768a:	dc 01       	movw	r26, r24

	if( cb == NULL ) { return -ENOMEM; }
    768c:	00 97       	sbiw	r24, 0x00	; 0
    768e:	19 f4       	brne	.+6      	; 0x7696
    7690:	84 ef       	ldi	r24, 0xF4	; 244
    7692:	9f ef       	ldi	r25, 0xFF	; 255
    7694:	19 c0       	rjmp	.+50     	; 0x76c8
	
	cb->name = name;
    7696:	cd 93       	st	X+, r28
    7698:	dc 93       	st	X, r29
    769a:	11 97       	sbiw	r26, 0x01	; 1
	cb->mem = shm;
    769c:	fc 01       	movw	r30, r24
    769e:	02 83       	std	Z+2, r16	; 0x02
    76a0:	13 83       	std	Z+3, r17	; 0x03
	cb->owner = pid;
    76a2:	d4 82       	std	Z+4, r13	; 0x04
    76a4:	8f ef       	ldi	r24, 0xFF	; 255
	for( i = 0; i < SHM_NUM_WAITER; i++ ) {
		cb->waiter[i] = NULL_PID;
    76a6:	85 83       	std	Z+5, r24	; 0x05
    76a8:	86 83       	std	Z+6, r24	; 0x06
    76aa:	fe 01       	movw	r30, r28
    76ac:	e3 70       	andi	r30, 0x03	; 3
    76ae:	f0 70       	andi	r31, 0x00	; 0
    76b0:	ee 0f       	add	r30, r30
    76b2:	ff 1f       	adc	r31, r31
    76b4:	eb 5e       	subi	r30, 0xEB	; 235
    76b6:	f4 4f       	sbci	r31, 0xF4	; 244
    76b8:	80 81       	ld	r24, Z
    76ba:	91 81       	ldd	r25, Z+1	; 0x01
    76bc:	ed 01       	movw	r28, r26
    76be:	8f 83       	std	Y+7, r24	; 0x07
    76c0:	98 87       	std	Y+8, r25	; 0x08
    76c2:	a0 83       	st	Z, r26
    76c4:	b1 83       	std	Z+1, r27	; 0x01
	}

	cb->next = name_to_bin( name );
	shm_bin[ hash_bin( name ) ] = cb;
	return SOS_OK;	
    76c6:	c7 01       	movw	r24, r14
    76c8:	df 91       	pop	r29
    76ca:	cf 91       	pop	r28
    76cc:	1f 91       	pop	r17
    76ce:	0f 91       	pop	r16
    76d0:	ff 90       	pop	r15
    76d2:	ef 90       	pop	r14
    76d4:	df 90       	pop	r13
    76d6:	08 95       	ret

000076d8 <ker_shm_update>:
}

int8_t ker_shm_update(sos_pid_t pid, sos_shm_t name, void *shm)
{
    76d8:	cf 93       	push	r28
    76da:	df 93       	push	r29
    76dc:	cb 01       	movw	r24, r22
    76de:	ea 01       	movw	r28, r20
	shm_cb *cb = shm_lookup( name );
    76e0:	0e 94 e6 3a 	call	0x75cc
    76e4:	fc 01       	movw	r30, r24
	
	if( cb == NULL ) {
    76e6:	00 97       	sbiw	r24, 0x00	; 0
    76e8:	19 f4       	brne	.+6      	; 0x76f0
		return -EBADF;
    76ea:	87 ef       	ldi	r24, 0xF7	; 247
    76ec:	9f ef       	ldi	r25, 0xFF	; 255
    76ee:	07 c0       	rjmp	.+14     	; 0x76fe
	}
	
	cb->mem = shm;
    76f0:	c2 83       	std	Z+2, r28	; 0x02
    76f2:	d3 83       	std	Z+3, r29	; 0x03
	
	shm_send_event( cb, SHM_UPDATED );
    76f4:	61 e0       	ldi	r22, 0x01	; 1
    76f6:	0e 94 02 3b 	call	0x7604
	return SOS_OK;
    76fa:	80 e0       	ldi	r24, 0x00	; 0
    76fc:	90 e0       	ldi	r25, 0x00	; 0
    76fe:	df 91       	pop	r29
    7700:	cf 91       	pop	r28
    7702:	08 95       	ret

00007704 <ker_shm_close>:
}

int8_t ker_shm_close(sos_pid_t pid, sos_shm_t name)
{
    7704:	cf 93       	push	r28
    7706:	df 93       	push	r29
    7708:	28 2f       	mov	r18, r24
    770a:	fb 01       	movw	r30, r22
    770c:	e3 70       	andi	r30, 0x03	; 3
    770e:	f0 70       	andi	r31, 0x00	; 0
    7710:	ee 0f       	add	r30, r30
    7712:	ff 1f       	adc	r31, r31
    7714:	eb 5e       	subi	r30, 0xEB	; 235
    7716:	f4 4f       	sbci	r31, 0xF4	; 244
    7718:	01 90       	ld	r0, Z+
    771a:	f0 81       	ld	r31, Z
    771c:	e0 2d       	mov	r30, r0
	shm_cb *head = name_to_bin(name);
	shm_cb *prev;
	shm_cb *curr;

	if( head == NULL ) {
    771e:	30 97       	sbiw	r30, 0x00	; 0
    7720:	21 f4       	brne	.+8      	; 0x772a
    7722:	32 c0       	rjmp	.+100    	; 0x7788
		return -EBADF;
	}
	
	prev = head;
	curr = head;
	while(curr != NULL) {
		if( curr->name == name ) {
			if( pid != curr->owner ) {
				return -EPERM;
    7724:	8f ef       	ldi	r24, 0xFF	; 255
    7726:	9f ef       	ldi	r25, 0xFF	; 255
    7728:	31 c0       	rjmp	.+98     	; 0x778c
    772a:	ef 01       	movw	r28, r30
    772c:	df 01       	movw	r26, r30
    772e:	88 81       	ld	r24, Y
    7730:	99 81       	ldd	r25, Y+1	; 0x01
    7732:	86 17       	cp	r24, r22
    7734:	97 07       	cpc	r25, r23
    7736:	11 f5       	brne	.+68     	; 0x777c
    7738:	8c 81       	ldd	r24, Y+4	; 0x04
    773a:	28 17       	cp	r18, r24
    773c:	99 f7       	brne	.-26     	; 0x7724
    773e:	8f 81       	ldd	r24, Y+7	; 0x07
    7740:	98 85       	ldd	r25, Y+8	; 0x08
			}
			if( curr == head ) {
    7742:	ce 17       	cp	r28, r30
    7744:	df 07       	cpc	r29, r31
    7746:	59 f4       	brne	.+22     	; 0x775e
    7748:	63 70       	andi	r22, 0x03	; 3
    774a:	70 70       	andi	r23, 0x00	; 0
    774c:	66 0f       	add	r22, r22
    774e:	71 2d       	mov	r23, r1
    7750:	71 1d       	adc	r23, r1
    7752:	fb 01       	movw	r30, r22
    7754:	eb 5e       	subi	r30, 0xEB	; 235
    7756:	f4 4f       	sbci	r31, 0xF4	; 244
    7758:	80 83       	st	Z, r24
    775a:	91 83       	std	Z+1, r25	; 0x01
    775c:	03 c0       	rjmp	.+6      	; 0x7764
				//! remove head
				shm_bin[ hash_bin( name ) ] = head->next;
			} else {
				prev->next = curr->next;
    775e:	fd 01       	movw	r30, r26
    7760:	87 83       	std	Z+7, r24	; 0x07
    7762:	90 87       	std	Z+8, r25	; 0x08
			}
			shm_send_event( curr, SHM_CLOSED );
    7764:	62 e0       	ldi	r22, 0x02	; 2
    7766:	ce 01       	movw	r24, r28
    7768:	0e 94 02 3b 	call	0x7604
			ker_slab_free( &shm_slab, curr);
    776c:	be 01       	movw	r22, r28
    776e:	8d e1       	ldi	r24, 0x1D	; 29
    7770:	9b e0       	ldi	r25, 0x0B	; 11
    7772:	0e 94 e0 3d 	call	0x7bc0
			return SOS_OK;
    7776:	80 e0       	ldi	r24, 0x00	; 0
    7778:	90 e0       	ldi	r25, 0x00	; 0
    777a:	08 c0       	rjmp	.+16     	; 0x778c
		}
		prev = curr;
    777c:	de 01       	movw	r26, r28
		curr = curr->next;
    777e:	0f 80       	ldd	r0, Y+7	; 0x07
    7780:	d8 85       	ldd	r29, Y+8	; 0x08
    7782:	c0 2d       	mov	r28, r0
    7784:	20 97       	sbiw	r28, 0x00	; 0
    7786:	99 f6       	brne	.-90     	; 0x772e
	}
	return -EBADF;
    7788:	87 ef       	ldi	r24, 0xF7	; 247
    778a:	9f ef       	ldi	r25, 0xFF	; 255
    778c:	df 91       	pop	r29
    778e:	cf 91       	pop	r28
    7790:	08 95       	ret

00007792 <ker_shm_get>:
}

void* ker_shm_get(sos_pid_t pid, sos_shm_t name)
{
    7792:	cb 01       	movw	r24, r22
	shm_cb *cb = shm_lookup( name );
    7794:	0e 94 e6 3a 	call	0x75cc
    7798:	fc 01       	movw	r30, r24

	if(cb != NULL) return cb->mem;
    779a:	00 97       	sbiw	r24, 0x00	; 0
    779c:	19 f0       	breq	.+6      	; 0x77a4
    779e:	82 81       	ldd	r24, Z+2	; 0x02
    77a0:	93 81       	ldd	r25, Z+3	; 0x03
    77a2:	08 95       	ret
	return NULL;
}
    77a4:	08 95       	ret
    77a6:	08 95       	ret

000077a8 <ker_shm_wait>:

int8_t ker_shm_wait( sos_pid_t pid, sos_shm_t name )
{
    77a8:	cf 93       	push	r28
    77aa:	c8 2f       	mov	r28, r24
    77ac:	cb 01       	movw	r24, r22
	shm_cb *cb = shm_lookup( name );
    77ae:	0e 94 e6 3a 	call	0x75cc
	uint8_t i;
	
	if( cb == NULL ) {
    77b2:	00 97       	sbiw	r24, 0x00	; 0
    77b4:	39 f4       	brne	.+14     	; 0x77c4
		return -EBADF;
    77b6:	87 ef       	ldi	r24, 0xF7	; 247
    77b8:	9f ef       	ldi	r25, 0xFF	; 255
    77ba:	11 c0       	rjmp	.+34     	; 0x77de
	}
	
	for( i = 0; i < SHM_NUM_WAITER; i++ ) {
		if( cb->waiter[i] == NULL_PID ) {
			cb->waiter[i] = pid;
    77bc:	c5 83       	std	Z+5, r28	; 0x05
			return SOS_OK;
    77be:	80 e0       	ldi	r24, 0x00	; 0
    77c0:	90 e0       	ldi	r25, 0x00	; 0
    77c2:	0d c0       	rjmp	.+26     	; 0x77de
    77c4:	20 e0       	ldi	r18, 0x00	; 0
    77c6:	dc 01       	movw	r26, r24
    77c8:	15 96       	adiw	r26, 0x05	; 5
    77ca:	fc 01       	movw	r30, r24
    77cc:	8d 91       	ld	r24, X+
    77ce:	8f 3f       	cpi	r24, 0xFF	; 255
    77d0:	a9 f3       	breq	.-22     	; 0x77bc
    77d2:	2f 5f       	subi	r18, 0xFF	; 255
    77d4:	31 96       	adiw	r30, 0x01	; 1
    77d6:	22 30       	cpi	r18, 0x02	; 2
    77d8:	c8 f3       	brcs	.-14     	; 0x77cc
		}
	}
	return -ENOMEM;
    77da:	84 ef       	ldi	r24, 0xF4	; 244
    77dc:	9f ef       	ldi	r25, 0xFF	; 255
    77de:	cf 91       	pop	r28
    77e0:	08 95       	ret

000077e2 <ker_shm_stopwait>:
}

int8_t ker_shm_stopwait( sos_pid_t pid, sos_shm_t name )
{
    77e2:	cf 93       	push	r28
    77e4:	c8 2f       	mov	r28, r24
    77e6:	cb 01       	movw	r24, r22
	shm_cb *cb = shm_lookup( name );
    77e8:	0e 94 e6 3a 	call	0x75cc
	uint8_t i;
	
	if( cb == NULL ) {
    77ec:	00 97       	sbiw	r24, 0x00	; 0
    77ee:	41 f4       	brne	.+16     	; 0x7800
		return -EBADF;
    77f0:	87 ef       	ldi	r24, 0xF7	; 247
    77f2:	9f ef       	ldi	r25, 0xFF	; 255
    77f4:	12 c0       	rjmp	.+36     	; 0x781a
	}
	
	for( i = 0; i < SHM_NUM_WAITER; i++ ) {
		if( cb->waiter[i] == pid ) {
			cb->waiter[i] = NULL_PID;
    77f6:	8f ef       	ldi	r24, 0xFF	; 255
    77f8:	85 83       	std	Z+5, r24	; 0x05
			return SOS_OK;
    77fa:	80 e0       	ldi	r24, 0x00	; 0
    77fc:	90 e0       	ldi	r25, 0x00	; 0
    77fe:	0d c0       	rjmp	.+26     	; 0x781a
    7800:	20 e0       	ldi	r18, 0x00	; 0
    7802:	dc 01       	movw	r26, r24
    7804:	15 96       	adiw	r26, 0x05	; 5
    7806:	fc 01       	movw	r30, r24
    7808:	8d 91       	ld	r24, X+
    780a:	8c 17       	cp	r24, r28
    780c:	a1 f3       	breq	.-24     	; 0x77f6
    780e:	2f 5f       	subi	r18, 0xFF	; 255
    7810:	31 96       	adiw	r30, 0x01	; 1
    7812:	22 30       	cpi	r18, 0x02	; 2
    7814:	c8 f3       	brcs	.-14     	; 0x7808
		}
	}
	return -EINVAL;
    7816:	8a ee       	ldi	r24, 0xEA	; 234
    7818:	9f ef       	ldi	r25, 0xFF	; 255
    781a:	cf 91       	pop	r28
    781c:	08 95       	ret

0000781e <ker_sys_shm_open>:
}

#ifdef SOS_USE_PREEMPTION
int8_t ker_sys_shm_open( sos_shm_t name, void *shm )
{
  HAS_ATOMIC_PREEMPTION_SECTION;
  sos_pid_t my_id = ker_get_current_pid();
  ATOMIC_DISABLE_PREEMPTION();
  if( ker_shm_open( my_id, name, shm ) != SOS_OK ) {
    ATOMIC_ENABLE_PREEMPTION();
#ifdef SOS_TEST_SUITE
    return -EINVAL;
#else
    return ker_mod_panic( my_id );
#endif
  }
  ATOMIC_ENABLE_PREEMPTION();
  return SOS_OK;
}

int8_t ker_sys_shm_update( sos_shm_t name, void *shm )
{
  HAS_ATOMIC_PREEMPTION_SECTION;
  sos_pid_t my_id = ker_get_current_pid();
  ATOMIC_DISABLE_PREEMPTION();
  if( ker_shm_update( my_id, name, shm ) != SOS_OK ) {
    ATOMIC_ENABLE_PREEMPTION();
#ifdef SOS_TEST_SUITE
    return -EINVAL;
#else
    return ker_mod_panic( my_id );
#endif
  }
  ATOMIC_ENABLE_PREEMPTION();
  return SOS_OK;
}

int8_t ker_sys_shm_close( sos_shm_t name )
{
  HAS_ATOMIC_PREEMPTION_SECTION;
  sos_pid_t my_id = ker_get_current_pid();
  ATOMIC_DISABLE_PREEMPTION();
  if( ker_shm_close( my_id, name ) != SOS_OK ) {
    ATOMIC_ENABLE_PREEMPTION();
#ifdef SOS_TEST_SUITE
    return -EINVAL;
#else
    return ker_mod_panic( my_id );
#endif
  }
  ATOMIC_ENABLE_PREEMPTION();
  return SOS_OK;
}

void* ker_sys_shm_get( sos_shm_t name )
{
  HAS_ATOMIC_PREEMPTION_SECTION;
  sos_pid_t my_id = ker_get_current_pid();
  void* ret;
  ATOMIC_DISABLE_PREEMPTION();
  ret = ker_shm_get( my_id, name );
  ATOMIC_ENABLE_PREEMPTION();
  return ret;
}

int8_t ker_sys_shm_wait( sos_shm_t name )
{
  HAS_ATOMIC_PREEMPTION_SECTION;
  sos_pid_t my_id = ker_get_current_pid();
  ATOMIC_DISABLE_PREEMPTION();
  if( ker_shm_wait( my_id, name ) != SOS_OK ) {
    ATOMIC_ENABLE_PREEMPTION();
#ifdef SOS_TEST_SUITE
    return -EINVAL;
#else
    return ker_mod_panic( my_id );
#endif
  }
  ATOMIC_ENABLE_PREEMPTION();
  return SOS_OK;
}

int8_t ker_sys_shm_stopwait( sos_shm_t name )
{
  HAS_ATOMIC_PREEMPTION_SECTION;
  sos_pid_t my_id = ker_get_current_pid();
  ATOMIC_DISABLE_PREEMPTION();
  if( ker_shm_stopwait( my_id, name ) != SOS_OK ) {
    ATOMIC_ENABLE_PREEMPTION();
#ifdef SOS_TEST_SUITE
    return -EINVAL;
#else
    return ker_mod_panic( my_id );
#endif
  }
  ATOMIC_ENABLE_PREEMPTION();
  return SOS_OK;
}

#else
int8_t ker_sys_shm_open( sos_shm_t name, void *shm )
{
    781e:	ef 92       	push	r14
    7820:	ff 92       	push	r15
    7822:	0f 93       	push	r16
    7824:	1f 93       	push	r17
    7826:	cf 93       	push	r28
    7828:	7c 01       	movw	r14, r24
    782a:	8b 01       	movw	r16, r22
	sos_pid_t my_id = ker_get_current_pid();
    782c:	0e 94 e2 13 	call	0x27c4
    7830:	c8 2f       	mov	r28, r24
	
	if( ker_shm_open( my_id, name, shm ) != SOS_OK ) {
    7832:	a8 01       	movw	r20, r16
    7834:	b7 01       	movw	r22, r14
    7836:	0e 94 2d 3b 	call	0x765a
    783a:	88 23       	and	r24, r24
    783c:	39 f0       	breq	.+14     	; 0x784c
#ifdef SOS_TEST_SUITE
	    	return -EINVAL;
#else
		return ker_mod_panic( my_id );
    783e:	8c 2f       	mov	r24, r28
    7840:	0e 94 4a 18 	call	0x3094
    7844:	99 27       	eor	r25, r25
    7846:	87 fd       	sbrc	r24, 7
    7848:	90 95       	com	r25
    784a:	02 c0       	rjmp	.+4      	; 0x7850
#endif
	}
	return SOS_OK;
    784c:	80 e0       	ldi	r24, 0x00	; 0
    784e:	90 e0       	ldi	r25, 0x00	; 0
    7850:	cf 91       	pop	r28
    7852:	1f 91       	pop	r17
    7854:	0f 91       	pop	r16
    7856:	ff 90       	pop	r15
    7858:	ef 90       	pop	r14
    785a:	08 95       	ret

0000785c <ker_sys_shm_update>:
}

int8_t ker_sys_shm_update( sos_shm_t name, void *shm )
{
    785c:	ef 92       	push	r14
    785e:	ff 92       	push	r15
    7860:	0f 93       	push	r16
    7862:	1f 93       	push	r17
    7864:	cf 93       	push	r28
    7866:	7c 01       	movw	r14, r24
    7868:	8b 01       	movw	r16, r22
	sos_pid_t my_id = ker_get_current_pid();
    786a:	0e 94 e2 13 	call	0x27c4
    786e:	c8 2f       	mov	r28, r24
	
	if( ker_shm_update( my_id, name, shm ) != SOS_OK ) {
    7870:	a8 01       	movw	r20, r16
    7872:	b7 01       	movw	r22, r14
    7874:	0e 94 6c 3b 	call	0x76d8
    7878:	88 23       	and	r24, r24
    787a:	39 f0       	breq	.+14     	; 0x788a
#ifdef SOS_TEST_SUITE
	    	return -EINVAL;
#else
		return ker_mod_panic( my_id );
    787c:	8c 2f       	mov	r24, r28
    787e:	0e 94 4a 18 	call	0x3094
    7882:	99 27       	eor	r25, r25
    7884:	87 fd       	sbrc	r24, 7
    7886:	90 95       	com	r25
    7888:	02 c0       	rjmp	.+4      	; 0x788e
#endif
	}
	return SOS_OK;
    788a:	80 e0       	ldi	r24, 0x00	; 0
    788c:	90 e0       	ldi	r25, 0x00	; 0
    788e:	cf 91       	pop	r28
    7890:	1f 91       	pop	r17
    7892:	0f 91       	pop	r16
    7894:	ff 90       	pop	r15
    7896:	ef 90       	pop	r14
    7898:	08 95       	ret

0000789a <ker_sys_shm_close>:
}

int8_t ker_sys_shm_close( sos_shm_t name )
{
    789a:	0f 93       	push	r16
    789c:	1f 93       	push	r17
    789e:	cf 93       	push	r28
    78a0:	8c 01       	movw	r16, r24
	sos_pid_t my_id = ker_get_current_pid();
    78a2:	0e 94 e2 13 	call	0x27c4
    78a6:	c8 2f       	mov	r28, r24
	
	if( ker_shm_close( my_id, name ) != SOS_OK ) {
    78a8:	b8 01       	movw	r22, r16
    78aa:	0e 94 82 3b 	call	0x7704
    78ae:	88 23       	and	r24, r24
    78b0:	39 f0       	breq	.+14     	; 0x78c0
#ifdef SOS_TEST_SUITE
	    	return -EINVAL;
#else
		return ker_mod_panic( my_id );
    78b2:	8c 2f       	mov	r24, r28
    78b4:	0e 94 4a 18 	call	0x3094
    78b8:	99 27       	eor	r25, r25
    78ba:	87 fd       	sbrc	r24, 7
    78bc:	90 95       	com	r25
    78be:	02 c0       	rjmp	.+4      	; 0x78c4
#endif
	}
	return SOS_OK;
    78c0:	80 e0       	ldi	r24, 0x00	; 0
    78c2:	90 e0       	ldi	r25, 0x00	; 0
    78c4:	cf 91       	pop	r28
    78c6:	1f 91       	pop	r17
    78c8:	0f 91       	pop	r16
    78ca:	08 95       	ret

000078cc <ker_sys_shm_get>:
}

void* ker_sys_shm_get( sos_shm_t name )
{
    78cc:	0f 93       	push	r16
    78ce:	1f 93       	push	r17
    78d0:	8c 01       	movw	r16, r24
	sos_pid_t my_id = ker_get_current_pid();
    78d2:	0e 94 e2 13 	call	0x27c4
	
	return ker_shm_get( my_id, name );
    78d6:	b8 01       	movw	r22, r16
    78d8:	0e 94 c9 3b 	call	0x7792
    78dc:	1f 91       	pop	r17
    78de:	0f 91       	pop	r16
    78e0:	08 95       	ret

000078e2 <ker_sys_shm_wait>:
}

int8_t ker_sys_shm_wait( sos_shm_t name )
{
    78e2:	0f 93       	push	r16
    78e4:	1f 93       	push	r17
    78e6:	cf 93       	push	r28
    78e8:	8c 01       	movw	r16, r24
	sos_pid_t my_id = ker_get_current_pid();
    78ea:	0e 94 e2 13 	call	0x27c4
    78ee:	c8 2f       	mov	r28, r24
	
	if( ker_shm_wait( my_id, name ) != SOS_OK ) {
    78f0:	b8 01       	movw	r22, r16
    78f2:	0e 94 d4 3b 	call	0x77a8
    78f6:	88 23       	and	r24, r24
    78f8:	39 f0       	breq	.+14     	; 0x7908
#ifdef SOS_TEST_SUITE
	    	return -EINVAL;
#else
		return ker_mod_panic( my_id );
    78fa:	8c 2f       	mov	r24, r28
    78fc:	0e 94 4a 18 	call	0x3094
    7900:	99 27       	eor	r25, r25
    7902:	87 fd       	sbrc	r24, 7
    7904:	90 95       	com	r25
    7906:	02 c0       	rjmp	.+4      	; 0x790c
#endif
	}
	return SOS_OK;
    7908:	80 e0       	ldi	r24, 0x00	; 0
    790a:	90 e0       	ldi	r25, 0x00	; 0
    790c:	cf 91       	pop	r28
    790e:	1f 91       	pop	r17
    7910:	0f 91       	pop	r16
    7912:	08 95       	ret

00007914 <ker_sys_shm_stopwait>:
}

int8_t ker_sys_shm_stopwait( sos_shm_t name )
{
    7914:	0f 93       	push	r16
    7916:	1f 93       	push	r17
    7918:	cf 93       	push	r28
    791a:	8c 01       	movw	r16, r24
	sos_pid_t my_id = ker_get_current_pid();
    791c:	0e 94 e2 13 	call	0x27c4
    7920:	c8 2f       	mov	r28, r24
	
	if( ker_shm_stopwait( my_id, name ) != SOS_OK ) {
    7922:	b8 01       	movw	r22, r16
    7924:	0e 94 f1 3b 	call	0x77e2
    7928:	88 23       	and	r24, r24
    792a:	39 f0       	breq	.+14     	; 0x793a
#ifdef SOS_TEST_SUITE
	    	return -EINVAL;
#else
		return ker_mod_panic( my_id );
    792c:	8c 2f       	mov	r24, r28
    792e:	0e 94 4a 18 	call	0x3094
    7932:	99 27       	eor	r25, r25
    7934:	87 fd       	sbrc	r24, 7
    7936:	90 95       	com	r25
    7938:	02 c0       	rjmp	.+4      	; 0x793e
#endif
	}
	return SOS_OK;
    793a:	80 e0       	ldi	r24, 0x00	; 0
    793c:	90 e0       	ldi	r25, 0x00	; 0
    793e:	cf 91       	pop	r28
    7940:	1f 91       	pop	r17
    7942:	0f 91       	pop	r16
    7944:	08 95       	ret

00007946 <shm_remove_all>:
}
#endif
//
// Remove all data associated with the pid
//
int8_t shm_remove_all( sos_pid_t pid )
{
    7946:	af 92       	push	r10
    7948:	bf 92       	push	r11
    794a:	cf 92       	push	r12
    794c:	df 92       	push	r13
    794e:	ef 92       	push	r14
    7950:	ff 92       	push	r15
    7952:	0f 93       	push	r16
    7954:	1f 93       	push	r17
    7956:	cf 93       	push	r28
    7958:	df 93       	push	r29
    795a:	a8 2e       	mov	r10, r24
    795c:	23 e0       	ldi	r18, 0x03	; 3
    795e:	b2 2e       	mov	r11, r18
    7960:	95 e1       	ldi	r25, 0x15	; 21
    7962:	e9 2e       	mov	r14, r25
    7964:	9b e0       	ldi	r25, 0x0B	; 11
    7966:	f9 2e       	mov	r15, r25
	uint8_t i;
	
	for( i = 0; i < SHM_NUM_BINS; i++ ) {
		shm_cb *prev = NULL;
		shm_cb *curr = shm_bin[i];
    7968:	f7 01       	movw	r30, r14
    796a:	c0 81       	ld	r28, Z
    796c:	d1 81       	ldd	r29, Z+1	; 0x01
		prev = curr;
    796e:	6e 01       	movw	r12, r28
		
		while( curr != NULL ) {
			if( curr->owner == pid ) {
				shm_cb *tmp = curr;
				//
				// Remove the owner
				//
				if( curr == shm_bin[i] ) {
					//! remove head
					shm_bin[ i ] = curr->next;
				} else {
					prev->next = curr->next;
				}
				
				curr = curr->next;
				shm_send_event( tmp, SHM_CLOSED );
				ker_slab_free( &shm_slab, tmp );
				
			} else {
				uint8_t j;
				for( j = 0; j < SHM_NUM_WAITER; j++ ) {
					if( curr->waiter[j] == pid ) {
						curr->waiter[j] = NULL_PID;
					}
				}
				prev = curr;
				curr = curr->next;
    7970:	20 97       	sbiw	r28, 0x00	; 0
    7972:	79 f1       	breq	.+94     	; 0x79d2
    7974:	8c 81       	ldd	r24, Y+4	; 0x04
    7976:	8a 15       	cp	r24, r10
    7978:	e1 f4       	brne	.+56     	; 0x79b2
    797a:	8e 01       	movw	r16, r28
    797c:	f7 01       	movw	r30, r14
    797e:	80 81       	ld	r24, Z
    7980:	91 81       	ldd	r25, Z+1	; 0x01
    7982:	2f 81       	ldd	r18, Y+7	; 0x07
    7984:	38 85       	ldd	r19, Y+8	; 0x08
    7986:	c8 17       	cp	r28, r24
    7988:	d9 07       	cpc	r29, r25
    798a:	19 f4       	brne	.+6      	; 0x7992
    798c:	20 83       	st	Z, r18
    798e:	31 83       	std	Z+1, r19	; 0x01
    7990:	03 c0       	rjmp	.+6      	; 0x7998
    7992:	f6 01       	movw	r30, r12
    7994:	27 83       	std	Z+7, r18	; 0x07
    7996:	30 87       	std	Z+8, r19	; 0x08
    7998:	0f 80       	ldd	r0, Y+7	; 0x07
    799a:	d8 85       	ldd	r29, Y+8	; 0x08
    799c:	c0 2d       	mov	r28, r0
    799e:	62 e0       	ldi	r22, 0x02	; 2
    79a0:	c8 01       	movw	r24, r16
    79a2:	0e 94 02 3b 	call	0x7604
    79a6:	b8 01       	movw	r22, r16
    79a8:	8d e1       	ldi	r24, 0x1D	; 29
    79aa:	9b e0       	ldi	r25, 0x0B	; 11
    79ac:	0e 94 e0 3d 	call	0x7bc0
    79b0:	df cf       	rjmp	.-66     	; 0x7970
    79b2:	2f ef       	ldi	r18, 0xFF	; 255
    79b4:	fe 01       	movw	r30, r28
    79b6:	91 e0       	ldi	r25, 0x01	; 1
    79b8:	85 81       	ldd	r24, Z+5	; 0x05
    79ba:	8a 15       	cp	r24, r10
    79bc:	09 f4       	brne	.+2      	; 0x79c0
    79be:	25 83       	std	Z+5, r18	; 0x05
    79c0:	91 50       	subi	r25, 0x01	; 1
    79c2:	31 96       	adiw	r30, 0x01	; 1
    79c4:	97 ff       	sbrs	r25, 7
    79c6:	f8 cf       	rjmp	.-16     	; 0x79b8
    79c8:	6e 01       	movw	r12, r28
    79ca:	0f 80       	ldd	r0, Y+7	; 0x07
    79cc:	d8 85       	ldd	r29, Y+8	; 0x08
    79ce:	c0 2d       	mov	r28, r0
    79d0:	cf cf       	rjmp	.-98     	; 0x7970
    79d2:	ba 94       	dec	r11
    79d4:	82 e0       	ldi	r24, 0x02	; 2
    79d6:	90 e0       	ldi	r25, 0x00	; 0
    79d8:	e8 0e       	add	r14, r24
    79da:	f9 1e       	adc	r15, r25
    79dc:	b7 fe       	sbrs	r11, 7
    79de:	c4 cf       	rjmp	.-120    	; 0x7968
			}
		}
	}
	return SOS_OK;
}
    79e0:	80 e0       	ldi	r24, 0x00	; 0
    79e2:	90 e0       	ldi	r25, 0x00	; 0
    79e4:	df 91       	pop	r29
    79e6:	cf 91       	pop	r28
    79e8:	1f 91       	pop	r17
    79ea:	0f 91       	pop	r16
    79ec:	ff 90       	pop	r15
    79ee:	ef 90       	pop	r14
    79f0:	df 90       	pop	r13
    79f2:	cf 90       	pop	r12
    79f4:	bf 90       	pop	r11
    79f6:	af 90       	pop	r10
    79f8:	08 95       	ret

000079fa <shm_gc>:

void shm_gc( void )
{
    79fa:	ef 92       	push	r14
    79fc:	ff 92       	push	r15
    79fe:	1f 93       	push	r17
    7a00:	cf 93       	push	r28
    7a02:	df 93       	push	r29
    7a04:	13 e0       	ldi	r17, 0x03	; 3
    7a06:	35 e1       	ldi	r19, 0x15	; 21
    7a08:	e3 2e       	mov	r14, r19
    7a0a:	3b e0       	ldi	r19, 0x0B	; 11
    7a0c:	f3 2e       	mov	r15, r19
	uint8_t i;
	
	//
	// Mark all slab memory
	//
	for( i = 0; i < SHM_NUM_BINS; i++ ) {
		shm_cb *itr = shm_bin[i];
    7a0e:	f7 01       	movw	r30, r14
    7a10:	c1 91       	ld	r28, Z+
    7a12:	d1 91       	ld	r29, Z+
    7a14:	7f 01       	movw	r14, r30
		
		while( itr != NULL ) {
			slab_gc_mark( &shm_slab, itr );
			itr = itr->next;
    7a16:	20 97       	sbiw	r28, 0x00	; 0
    7a18:	49 f0       	breq	.+18     	; 0x7a2c
    7a1a:	be 01       	movw	r22, r28
    7a1c:	8d e1       	ldi	r24, 0x1D	; 29
    7a1e:	9b e0       	ldi	r25, 0x0B	; 11
    7a20:	0e 94 2a 3e 	call	0x7c54
    7a24:	0f 80       	ldd	r0, Y+7	; 0x07
    7a26:	d8 85       	ldd	r29, Y+8	; 0x08
    7a28:	c0 2d       	mov	r28, r0
    7a2a:	f5 cf       	rjmp	.-22     	; 0x7a16
    7a2c:	11 50       	subi	r17, 0x01	; 1
    7a2e:	17 ff       	sbrs	r17, 7
    7a30:	ee cf       	rjmp	.-36     	; 0x7a0e
		}
	}
	
	//
	// GC slab memory
	//
	slab_gc( &shm_slab, KER_SHM_PID );
    7a32:	63 e1       	ldi	r22, 0x13	; 19
    7a34:	8d e1       	ldi	r24, 0x1D	; 29
    7a36:	9b e0       	ldi	r25, 0x0B	; 11
    7a38:	0e 94 6e 3e 	call	0x7cdc
	//
	// GC the shm
	//
	malloc_gc( KER_SHM_PID );
    7a3c:	83 e1       	ldi	r24, 0x13	; 19
    7a3e:	0e 94 db 12 	call	0x25b6
    7a42:	df 91       	pop	r29
    7a44:	cf 91       	pop	r28
    7a46:	1f 91       	pop	r17
    7a48:	ff 90       	pop	r15
    7a4a:	ef 90       	pop	r14
    7a4c:	08 95       	ret

00007a4e <shm_init>:
}

int8_t shm_init( void )
{
    7a4e:	0f 93       	push	r16
    7a50:	23 e0       	ldi	r18, 0x03	; 3
    7a52:	e5 e1       	ldi	r30, 0x15	; 21
    7a54:	fb e0       	ldi	r31, 0x0B	; 11
	uint8_t i;
	
	for( i = 0; i < SHM_NUM_BINS; i++ ) {
		shm_bin[i] = NULL;
    7a56:	11 92       	st	Z+, r1
    7a58:	11 92       	st	Z+, r1
    7a5a:	21 50       	subi	r18, 0x01	; 1
    7a5c:	27 ff       	sbrs	r18, 7
    7a5e:	fb cf       	rjmp	.-10     	; 0x7a56
    7a60:	24 e0       	ldi	r18, 0x04	; 4
	}
	ker_slab_init( KER_SHM_PID, &shm_slab, sizeof( shm_cb ), 4, SLAB_LONGTERM );
    7a62:	00 e8       	ldi	r16, 0x80	; 128
    7a64:	49 e0       	ldi	r20, 0x09	; 9
    7a66:	6d e1       	ldi	r22, 0x1D	; 29
    7a68:	7b e0       	ldi	r23, 0x0B	; 11
    7a6a:	83 e1       	ldi	r24, 0x13	; 19
    7a6c:	0e 94 3c 3d 	call	0x7a78
	return SOS_OK;
}
    7a70:	80 e0       	ldi	r24, 0x00	; 0
    7a72:	90 e0       	ldi	r25, 0x00	; 0
    7a74:	0f 91       	pop	r16
    7a76:	08 95       	ret

00007a78 <ker_slab_init>:
#endif


int8_t ker_slab_init( sos_pid_t pid, slab_t *slab, uint8_t item_size, uint8_t items_per_pool, uint8_t flag )
{
    7a78:	0f 93       	push	r16
    7a7a:	cf 93       	push	r28
    7a7c:	df 93       	push	r29
    7a7e:	98 2f       	mov	r25, r24
    7a80:	eb 01       	movw	r28, r22
	uint8_t i;
	if( items_per_pool > 8 ) {
    7a82:	29 30       	cpi	r18, 0x09	; 9
    7a84:	18 f0       	brcs	.+6      	; 0x7a8c
		return -EINVAL;
    7a86:	8a ee       	ldi	r24, 0xEA	; 234
    7a88:	9f ef       	ldi	r25, 0xFF	; 255
    7a8a:	36 c0       	rjmp	.+108    	; 0x7af8
	}
	
	//
	// build empty vector
	//
	slab->head = NULL;
    7a8c:	18 82       	st	Y, r1
    7a8e:	19 82       	std	Y+1, r1	; 0x01
	slab->num_items_per_pool = items_per_pool;
    7a90:	2a 83       	std	Y+2, r18	; 0x02
	slab->empty_vector = 0;
    7a92:	1b 82       	std	Y+3, r1	; 0x03
	slab->item_size = item_size;
    7a94:	4c 83       	std	Y+4, r20	; 0x04
	slab->flag = flag;
    7a96:	0d 83       	std	Y+5, r16	; 0x05
	for( i = 0; i < items_per_pool; i++ ) {
    7a98:	8b 81       	ldd	r24, Y+3	; 0x03
    7a9a:	82 17       	cp	r24, r18
    7a9c:	38 f4       	brcc	.+14     	; 0x7aac
    7a9e:	38 2f       	mov	r19, r24
    7aa0:	82 2f       	mov	r24, r18
		slab->empty_vector <<= 1;
    7aa2:	33 0f       	add	r19, r19
		slab->empty_vector |= 0x01;
    7aa4:	31 60       	ori	r19, 0x01	; 1
    7aa6:	81 50       	subi	r24, 0x01	; 1
    7aa8:	e1 f7       	brne	.-8      	; 0x7aa2
    7aaa:	3b 83       	std	Y+3, r19	; 0x03
	}
	
	if( slab->flag & SLAB_LONGTERM ) {
    7aac:	8d 81       	ldd	r24, Y+5	; 0x05
    7aae:	24 9f       	mul	r18, r20
    7ab0:	90 01       	movw	r18, r0
    7ab2:	11 24       	eor	r1, r1
    7ab4:	87 ff       	sbrs	r24, 7
    7ab6:	07 c0       	rjmp	.+14     	; 0x7ac6
 * @warning this is used to allocate the memory for long time usage
 */
static inline void* malloc_longterm(uint16_t size, sos_pid_t id)
{
  return sos_blk_mem_longterm_alloc(size, id, true);
    7ab8:	41 e0       	ldi	r20, 0x01	; 1
    7aba:	69 2f       	mov	r22, r25
    7abc:	c9 01       	movw	r24, r18
    7abe:	04 96       	adiw	r24, 0x04	; 4
    7ac0:	0e 94 51 10 	call	0x20a2
    7ac4:	06 c0       	rjmp	.+12     	; 0x7ad2
    7ac6:	40 e0       	ldi	r20, 0x00	; 0
    7ac8:	69 2f       	mov	r22, r25
    7aca:	c9 01       	movw	r24, r18
    7acc:	04 96       	adiw	r24, 0x04	; 4
    7ace:	0e 94 14 11 	call	0x2228
    7ad2:	88 83       	st	Y, r24
    7ad4:	99 83       	std	Y+1, r25	; 0x01
		slab->head = malloc_longterm( sizeof( slab_item_t ) + items_per_pool * item_size, pid );
	} else {
		slab->head = ker_malloc( sizeof( slab_item_t ) + items_per_pool * item_size, pid );
	}
	
	if( slab->head == NULL ) {
    7ad6:	e8 81       	ld	r30, Y
    7ad8:	f9 81       	ldd	r31, Y+1	; 0x01
    7ada:	30 97       	sbiw	r30, 0x00	; 0
    7adc:	19 f4       	brne	.+6      	; 0x7ae4
		return -ENOMEM;
    7ade:	84 ef       	ldi	r24, 0xF4	; 244
    7ae0:	9f ef       	ldi	r25, 0xFF	; 255
    7ae2:	0a c0       	rjmp	.+20     	; 0x7af8
	}
	slab->head->next = NULL;
    7ae4:	10 82       	st	Z, r1
    7ae6:	11 82       	std	Z+1, r1	; 0x01
	slab->head->alloc = 0;
    7ae8:	e8 81       	ld	r30, Y
    7aea:	f9 81       	ldd	r31, Y+1	; 0x01
    7aec:	12 82       	std	Z+2, r1	; 0x02
	slab->head->gc_mark = 0;
    7aee:	e8 81       	ld	r30, Y
    7af0:	f9 81       	ldd	r31, Y+1	; 0x01
    7af2:	13 82       	std	Z+3, r1	; 0x03
	return SOS_OK;
    7af4:	80 e0       	ldi	r24, 0x00	; 0
    7af6:	90 e0       	ldi	r25, 0x00	; 0
    7af8:	df 91       	pop	r29
    7afa:	cf 91       	pop	r28
    7afc:	0f 91       	pop	r16
    7afe:	08 95       	ret

00007b00 <ker_slab_alloc>:
}

void* ker_slab_alloc( slab_t *slab, sos_pid_t pid )
{
    7b00:	0f 93       	push	r16
    7b02:	1f 93       	push	r17
    7b04:	cf 93       	push	r28
    7b06:	df 93       	push	r29
    7b08:	dc 01       	movw	r26, r24
	slab_item_t *itr = slab->head;
    7b0a:	ed 91       	ld	r30, X+
    7b0c:	fc 91       	ld	r31, X
    7b0e:	11 97       	sbiw	r26, 0x01	; 1
	slab_item_t *prev = slab->head;
    7b10:	8f 01       	movw	r16, r30
	
	
	while( itr != NULL ) {
		DEBUG(" itr->alloc = %x\n", itr->alloc);
		if( itr->alloc != slab->empty_vector ) {
			break;
		}
		prev = itr;
		itr = itr->next;
    7b12:	30 97       	sbiw	r30, 0x00	; 0
    7b14:	59 f0       	breq	.+22     	; 0x7b2c
    7b16:	ec 01       	movw	r28, r24
    7b18:	9b 81       	ldd	r25, Y+3	; 0x03
    7b1a:	82 81       	ldd	r24, Z+2	; 0x02
    7b1c:	89 17       	cp	r24, r25
    7b1e:	31 f4       	brne	.+12     	; 0x7b2c
    7b20:	8f 01       	movw	r16, r30
    7b22:	01 90       	ld	r0, Z+
    7b24:	f0 81       	ld	r31, Z
    7b26:	e0 2d       	mov	r30, r0
    7b28:	30 97       	sbiw	r30, 0x00	; 0
    7b2a:	b9 f7       	brne	.-18     	; 0x7b1a
	}
	
	if( itr == NULL ) {
    7b2c:	30 97       	sbiw	r30, 0x00	; 0
    7b2e:	99 f5       	brne	.+102    	; 0x7b96
		//
		// The pool is exhausted, create a new one
		//
		DEBUG("pool exhausted\n");
		if( slab->flag & SLAB_LONGTERM ) {
    7b30:	fd 01       	movw	r30, r26
    7b32:	85 81       	ldd	r24, Z+5	; 0x05
    7b34:	22 81       	ldd	r18, Z+2	; 0x02
    7b36:	94 81       	ldd	r25, Z+4	; 0x04
    7b38:	87 ff       	sbrs	r24, 7
    7b3a:	0b c0       	rjmp	.+22     	; 0x7b52
 * @brief malloc for long term usage
 * @warning this is used to allocate the memory for long time usage
 */
static inline void* malloc_longterm(uint16_t size, sos_pid_t id)
{
    7b3c:	29 9f       	mul	r18, r25
    7b3e:	c0 01       	movw	r24, r0
    7b40:	11 24       	eor	r1, r1
  return sos_blk_mem_longterm_alloc(size, id, true);
    7b42:	41 e0       	ldi	r20, 0x01	; 1
    7b44:	04 96       	adiw	r24, 0x04	; 4
    7b46:	0e 94 51 10 	call	0x20a2
    7b4a:	e8 01       	movw	r28, r16
    7b4c:	88 83       	st	Y, r24
    7b4e:	99 83       	std	Y+1, r25	; 0x01
    7b50:	0a c0       	rjmp	.+20     	; 0x7b66
    7b52:	29 9f       	mul	r18, r25
    7b54:	c0 01       	movw	r24, r0
    7b56:	11 24       	eor	r1, r1
    7b58:	40 e0       	ldi	r20, 0x00	; 0
    7b5a:	04 96       	adiw	r24, 0x04	; 4
    7b5c:	0e 94 14 11 	call	0x2228
    7b60:	f8 01       	movw	r30, r16
    7b62:	80 83       	st	Z, r24
    7b64:	91 83       	std	Z+1, r25	; 0x01
			prev->next = malloc_longterm( sizeof( slab_item_t ) + slab->num_items_per_pool * slab->item_size, pid );
		} else {
			prev->next = ker_malloc( sizeof( slab_item_t ) + slab->num_items_per_pool * slab->item_size, pid );
		}
		if( prev->next == NULL ) {
    7b66:	e8 01       	movw	r28, r16
    7b68:	88 81       	ld	r24, Y
    7b6a:	99 81       	ldd	r25, Y+1	; 0x01
    7b6c:	00 97       	sbiw	r24, 0x00	; 0
    7b6e:	19 f1       	breq	.+70     	; 0x7bb6
			DEBUG("alloc NULL\n");
			return NULL;
		}
		itr = prev->next;
    7b70:	fc 01       	movw	r30, r24
		itr->next = NULL;
    7b72:	10 82       	st	Z, r1
    7b74:	11 82       	std	Z+1, r1	; 0x01
		itr->alloc = 0x01;
    7b76:	81 e0       	ldi	r24, 0x01	; 1
    7b78:	82 83       	std	Z+2, r24	; 0x02
		itr->gc_mark = 0;
    7b7a:	13 82       	std	Z+3, r1	; 0x03
		return itr->mem;
    7b7c:	cf 01       	movw	r24, r30
    7b7e:	09 c0       	rjmp	.+18     	; 0x7b92
	} else {
		uint8_t i;
		uint8_t mask = 0x01;
		
		DEBUG("find free slot in pool\n");
		for( i = 0; i < slab->num_items_per_pool; i++, mask<<=1 ) {
			if( (itr->alloc & mask)  == 0 ) {
				itr->alloc |= mask;
    7b80:	23 2b       	or	r18, r19
    7b82:	22 83       	std	Z+2, r18	; 0x02
				return itr->mem + (i * slab->item_size);
    7b84:	ed 01       	movw	r28, r26
    7b86:	8c 81       	ldd	r24, Y+4	; 0x04
    7b88:	98 9f       	mul	r25, r24
    7b8a:	c0 01       	movw	r24, r0
    7b8c:	11 24       	eor	r1, r1
    7b8e:	8e 0f       	add	r24, r30
    7b90:	9f 1f       	adc	r25, r31
    7b92:	04 96       	adiw	r24, 0x04	; 4
    7b94:	10 c0       	rjmp	.+32     	; 0x7bb6
    7b96:	31 e0       	ldi	r19, 0x01	; 1
    7b98:	90 e0       	ldi	r25, 0x00	; 0
    7b9a:	ed 01       	movw	r28, r26
    7b9c:	4a 81       	ldd	r20, Y+2	; 0x02
    7b9e:	94 17       	cp	r25, r20
    7ba0:	40 f4       	brcc	.+16     	; 0x7bb2
    7ba2:	22 81       	ldd	r18, Z+2	; 0x02
    7ba4:	82 2f       	mov	r24, r18
    7ba6:	83 23       	and	r24, r19
    7ba8:	59 f3       	breq	.-42     	; 0x7b80
    7baa:	9f 5f       	subi	r25, 0xFF	; 255
    7bac:	33 0f       	add	r19, r19
    7bae:	94 17       	cp	r25, r20
    7bb0:	c8 f3       	brcs	.-14     	; 0x7ba4
			}
		}
	}
	return NULL;
    7bb2:	80 e0       	ldi	r24, 0x00	; 0
    7bb4:	90 e0       	ldi	r25, 0x00	; 0
    7bb6:	df 91       	pop	r29
    7bb8:	cf 91       	pop	r28
    7bba:	1f 91       	pop	r17
    7bbc:	0f 91       	pop	r16
    7bbe:	08 95       	ret

00007bc0 <ker_slab_free>:
}

void ker_slab_free( slab_t *slab, void* mem ) 
{
    7bc0:	0f 93       	push	r16
    7bc2:	1f 93       	push	r17
    7bc4:	cf 93       	push	r28
    7bc6:	df 93       	push	r29
    7bc8:	ec 01       	movw	r28, r24
	slab_item_t *itr = slab->head;
    7bca:	e8 81       	ld	r30, Y
    7bcc:	f9 81       	ldd	r31, Y+1	; 0x01
	slab_item_t *prev = NULL;
    7bce:	00 e0       	ldi	r16, 0x00	; 0
    7bd0:	10 e0       	ldi	r17, 0x00	; 0
	
	while( itr != NULL ) {
		if( ((uint8_t*)mem) >= itr->mem && ((uint8_t*)mem) < (itr->mem + slab->num_items_per_pool * slab->item_size) ) {
			uint8_t mask = 1 << ( ( ((uint8_t*)mem) - (itr->mem) ) / slab->item_size );
			
			itr->alloc &= ~mask;
			
			if( itr->alloc == 0 && itr != slab->head ) {
				prev->next = itr->next;
				ker_free( itr );
			}
			return;
		}
		prev = itr;
		itr = itr->next;
    7bd2:	30 97       	sbiw	r30, 0x00	; 0
    7bd4:	c1 f1       	breq	.+112    	; 0x7c46
    7bd6:	cf 01       	movw	r24, r30
    7bd8:	04 96       	adiw	r24, 0x04	; 4
    7bda:	68 17       	cp	r22, r24
    7bdc:	79 07       	cpc	r23, r25
    7bde:	70 f1       	brcs	.+92     	; 0x7c3c
    7be0:	8a 81       	ldd	r24, Y+2	; 0x02
    7be2:	2c 81       	ldd	r18, Y+4	; 0x04
    7be4:	82 9f       	mul	r24, r18
    7be6:	c0 01       	movw	r24, r0
    7be8:	11 24       	eor	r1, r1
    7bea:	8e 0f       	add	r24, r30
    7bec:	9f 1f       	adc	r25, r31
    7bee:	04 96       	adiw	r24, 0x04	; 4
    7bf0:	68 17       	cp	r22, r24
    7bf2:	79 07       	cpc	r23, r25
    7bf4:	18 f5       	brcc	.+70     	; 0x7c3c
    7bf6:	6e 1b       	sub	r22, r30
    7bf8:	7f 0b       	sbc	r23, r31
    7bfa:	33 27       	eor	r19, r19
    7bfc:	cb 01       	movw	r24, r22
    7bfe:	04 97       	sbiw	r24, 0x04	; 4
    7c00:	b9 01       	movw	r22, r18
    7c02:	0e 94 92 59 	call	0xb324
    7c06:	81 e0       	ldi	r24, 0x01	; 1
    7c08:	90 e0       	ldi	r25, 0x00	; 0
    7c0a:	02 c0       	rjmp	.+4      	; 0x7c10
    7c0c:	88 0f       	add	r24, r24
    7c0e:	99 1f       	adc	r25, r25
    7c10:	6a 95       	dec	r22
    7c12:	e2 f7       	brpl	.-8      	; 0x7c0c
    7c14:	80 95       	com	r24
    7c16:	62 81       	ldd	r22, Z+2	; 0x02
    7c18:	68 23       	and	r22, r24
    7c1a:	62 83       	std	Z+2, r22	; 0x02
    7c1c:	66 23       	and	r22, r22
    7c1e:	a9 f4       	brne	.+42     	; 0x7c4a
    7c20:	88 81       	ld	r24, Y
    7c22:	99 81       	ldd	r25, Y+1	; 0x01
    7c24:	e8 17       	cp	r30, r24
    7c26:	f9 07       	cpc	r31, r25
    7c28:	81 f0       	breq	.+32     	; 0x7c4a
    7c2a:	80 81       	ld	r24, Z
    7c2c:	91 81       	ldd	r25, Z+1	; 0x01
    7c2e:	d8 01       	movw	r26, r16
    7c30:	8d 93       	st	X+, r24
    7c32:	9c 93       	st	X, r25
 * @return void
 */
static inline void ker_free(void* ptr)
{
  sos_blk_mem_free(ptr, false);
    7c34:	cf 01       	movw	r24, r30
    7c36:	0e 94 98 11 	call	0x2330
    7c3a:	07 c0       	rjmp	.+14     	; 0x7c4a
    7c3c:	8f 01       	movw	r16, r30
    7c3e:	01 90       	ld	r0, Z+
    7c40:	f0 81       	ld	r31, Z
    7c42:	e0 2d       	mov	r30, r0
    7c44:	c6 cf       	rjmp	.-116    	; 0x7bd2
	}
	ker_panic();
    7c46:	0e 94 2f 18 	call	0x305e
    7c4a:	df 91       	pop	r29
    7c4c:	cf 91       	pop	r28
    7c4e:	1f 91       	pop	r17
    7c50:	0f 91       	pop	r16
    7c52:	08 95       	ret

00007c54 <slab_gc_mark>:
}

void slab_gc_mark( slab_t *slab, void *mem )
{
    7c54:	0f 93       	push	r16
    7c56:	1f 93       	push	r17
    7c58:	cf 93       	push	r28
    7c5a:	df 93       	push	r29
    7c5c:	dc 01       	movw	r26, r24
	slab_item_t *itr = slab->head;
    7c5e:	ed 91       	ld	r30, X+
    7c60:	fc 91       	ld	r31, X
    7c62:	11 97       	sbiw	r26, 0x01	; 1
	
	DEBUG_GC("slab: gc_mark\n");
	while( itr != NULL ) {
		if( ((uint8_t*)mem) >= itr->mem && ((uint8_t*)mem) < (itr->mem + slab->num_items_per_pool * slab->item_size) ) {
			if( (((uint8_t*)mem) - (itr->mem)) % slab->item_size == 0 ) {
				uint8_t mask = 1 << ( ( ((uint8_t*)mem) - (itr->mem) ) / slab->item_size );
				if( itr->alloc & mask ) {
					DEBUG_GC("slab mark: %d\n", (int) mem );
					itr->gc_mark |= mask;
				} else {
					DEBUG_GC("slab: used already freed memory %d\n", (int) mem );
					// use already freed memory?
					//itr->alloc |= mask;
					//itr->gc_mark |= mask;
				}
			} else {
				DEBUG_GC("slab: memory misalignment %d\n", (int) mem );
				// TODO: misalignment?  
			}
			return;
		}
		itr = itr->next;
    7c64:	30 97       	sbiw	r30, 0x00	; 0
    7c66:	a9 f1       	breq	.+106    	; 0x7cd2
    7c68:	01 e0       	ldi	r16, 0x01	; 1
    7c6a:	10 e0       	ldi	r17, 0x00	; 0
    7c6c:	cf 01       	movw	r24, r30
    7c6e:	04 96       	adiw	r24, 0x04	; 4
    7c70:	68 17       	cp	r22, r24
    7c72:	79 07       	cpc	r23, r25
    7c74:	48 f1       	brcs	.+82     	; 0x7cc8
    7c76:	ed 01       	movw	r28, r26
    7c78:	8a 81       	ldd	r24, Y+2	; 0x02
    7c7a:	4c 81       	ldd	r20, Y+4	; 0x04
    7c7c:	84 9f       	mul	r24, r20
    7c7e:	c0 01       	movw	r24, r0
    7c80:	11 24       	eor	r1, r1
    7c82:	8e 0f       	add	r24, r30
    7c84:	9f 1f       	adc	r25, r31
    7c86:	04 96       	adiw	r24, 0x04	; 4
    7c88:	68 17       	cp	r22, r24
    7c8a:	79 07       	cpc	r23, r25
    7c8c:	e8 f4       	brcc	.+58     	; 0x7cc8
    7c8e:	9b 01       	movw	r18, r22
    7c90:	2e 1b       	sub	r18, r30
    7c92:	3f 0b       	sbc	r19, r31
    7c94:	24 50       	subi	r18, 0x04	; 4
    7c96:	30 40       	sbci	r19, 0x00	; 0
    7c98:	c4 2f       	mov	r28, r20
    7c9a:	dd 27       	eor	r29, r29
    7c9c:	c9 01       	movw	r24, r18
    7c9e:	be 01       	movw	r22, r28
    7ca0:	0e 94 92 59 	call	0xb324
    7ca4:	89 2b       	or	r24, r25
    7ca6:	a9 f4       	brne	.+42     	; 0x7cd2
    7ca8:	c9 01       	movw	r24, r18
    7caa:	be 01       	movw	r22, r28
    7cac:	0e 94 92 59 	call	0xb324
    7cb0:	02 c0       	rjmp	.+4      	; 0x7cb6
    7cb2:	00 0f       	add	r16, r16
    7cb4:	11 1f       	adc	r17, r17
    7cb6:	6a 95       	dec	r22
    7cb8:	e2 f7       	brpl	.-8      	; 0x7cb2
    7cba:	82 81       	ldd	r24, Z+2	; 0x02
    7cbc:	80 23       	and	r24, r16
    7cbe:	49 f0       	breq	.+18     	; 0x7cd2
    7cc0:	83 81       	ldd	r24, Z+3	; 0x03
    7cc2:	80 2b       	or	r24, r16
    7cc4:	83 83       	std	Z+3, r24	; 0x03
    7cc6:	05 c0       	rjmp	.+10     	; 0x7cd2
    7cc8:	01 90       	ld	r0, Z+
    7cca:	f0 81       	ld	r31, Z
    7ccc:	e0 2d       	mov	r30, r0
    7cce:	30 97       	sbiw	r30, 0x00	; 0
    7cd0:	69 f6       	brne	.-102    	; 0x7c6c
    7cd2:	df 91       	pop	r29
    7cd4:	cf 91       	pop	r28
    7cd6:	1f 91       	pop	r17
    7cd8:	0f 91       	pop	r16
    7cda:	08 95       	ret

00007cdc <slab_gc>:
	}
	DEBUG_GC("cannot find memory %d\n", (int) mem);
	//exit(1);
}
#include <led.h>
void slab_gc( slab_t *slab, sos_pid_t pid )
{
    7cdc:	df 92       	push	r13
    7cde:	ef 92       	push	r14
    7ce0:	ff 92       	push	r15
    7ce2:	0f 93       	push	r16
    7ce4:	1f 93       	push	r17
    7ce6:	cf 93       	push	r28
    7ce8:	df 93       	push	r29
    7cea:	7c 01       	movw	r14, r24
    7cec:	d6 2e       	mov	r13, r22
	slab_item_t *itr = slab->head;
    7cee:	fc 01       	movw	r30, r24
    7cf0:	c0 81       	ld	r28, Z
    7cf2:	d1 81       	ldd	r29, Z+1	; 0x01
	slab_item_t *prev = NULL;
    7cf4:	00 e0       	ldi	r16, 0x00	; 0
    7cf6:	10 e0       	ldi	r17, 0x00	; 0
	//
	// Detect memory leak while marking the memory to malloc
	//
	while( itr != NULL ) {
		if( itr->alloc != itr->gc_mark ) {
			// leak!
			DEBUG_GC("leak in slab %d %d\n", itr->alloc, itr->gc_mark);
			led_red_toggle();
			itr->alloc = itr->gc_mark;
			
			if( itr->alloc == 0 && itr != slab->head ) {
				prev->next = itr->next;
				ker_free( itr );
				itr = prev;
			} else {
				// mark it used to malloc
				itr->gc_mark = 0;
				ker_gc_mark( pid, itr );
			}
		} else {
			itr->gc_mark = 0;
			ker_gc_mark( pid, itr );
		}
		prev = itr;
		itr = itr->next;
    7cf8:	20 97       	sbiw	r28, 0x00	; 0
    7cfa:	39 f1       	breq	.+78     	; 0x7d4a
    7cfc:	9a 81       	ldd	r25, Y+2	; 0x02
    7cfe:	8b 81       	ldd	r24, Y+3	; 0x03
    7d00:	98 17       	cp	r25, r24
    7d02:	c1 f0       	breq	.+48     	; 0x7d34
    7d04:	8b b3       	in	r24, 0x1b	; 27
    7d06:	94 e0       	ldi	r25, 0x04	; 4
    7d08:	89 27       	eor	r24, r25
    7d0a:	8b bb       	out	0x1b, r24	; 27
    7d0c:	6b 81       	ldd	r22, Y+3	; 0x03
    7d0e:	6a 83       	std	Y+2, r22	; 0x02
    7d10:	66 23       	and	r22, r22
    7d12:	81 f4       	brne	.+32     	; 0x7d34
    7d14:	f7 01       	movw	r30, r14
    7d16:	80 81       	ld	r24, Z
    7d18:	91 81       	ldd	r25, Z+1	; 0x01
    7d1a:	c8 17       	cp	r28, r24
    7d1c:	d9 07       	cpc	r29, r25
    7d1e:	51 f0       	breq	.+20     	; 0x7d34
    7d20:	88 81       	ld	r24, Y
    7d22:	99 81       	ldd	r25, Y+1	; 0x01
    7d24:	f8 01       	movw	r30, r16
    7d26:	80 83       	st	Z, r24
    7d28:	91 83       	std	Z+1, r25	; 0x01
 * @return void
 */
static inline void ker_free(void* ptr)
{
  sos_blk_mem_free(ptr, false);
    7d2a:	ce 01       	movw	r24, r28
    7d2c:	0e 94 98 11 	call	0x2330
    7d30:	e8 01       	movw	r28, r16
    7d32:	05 c0       	rjmp	.+10     	; 0x7d3e
    7d34:	1b 82       	std	Y+3, r1	; 0x03
    7d36:	be 01       	movw	r22, r28
    7d38:	8d 2d       	mov	r24, r13
    7d3a:	0e 94 9b 12 	call	0x2536
    7d3e:	8e 01       	movw	r16, r28
    7d40:	09 90       	ld	r0, Y+
    7d42:	d8 81       	ld	r29, Y
    7d44:	c0 2d       	mov	r28, r0
    7d46:	20 97       	sbiw	r28, 0x00	; 0
    7d48:	c9 f6       	brne	.-78     	; 0x7cfc
    7d4a:	df 91       	pop	r29
    7d4c:	cf 91       	pop	r28
    7d4e:	1f 91       	pop	r17
    7d50:	0f 91       	pop	r16
    7d52:	ff 90       	pop	r15
    7d54:	ef 90       	pop	r14
    7d56:	df 90       	pop	r13
    7d58:	08 95       	ret

00007d5a <error_v>:
/**
 * @brief error stub for function subscriber
 */
void error_v(func_cb_ptr p) 
{
    7d5a:	08 95       	ret

00007d5c <error_8>:
	DEBUG("error_v is called\n");
}

int8_t error_8(func_cb_ptr p) 
{
	DEBUG("error_8 is called\n");
	return -1;
}	
    7d5c:	8f ef       	ldi	r24, 0xFF	; 255
    7d5e:	9f ef       	ldi	r25, 0xFF	; 255
    7d60:	08 95       	ret

00007d62 <error_16>:

int16_t error_16(func_cb_ptr p)
{
	DEBUG("error_16 is called\n");
	return -1;
}
    7d62:	8f ef       	ldi	r24, 0xFF	; 255
    7d64:	9f ef       	ldi	r25, 0xFF	; 255
    7d66:	08 95       	ret

00007d68 <error_32>:

int32_t error_32(func_cb_ptr p)
{
	DEBUG("error_32 is called\n");
	return -1;
}	
    7d68:	6f ef       	ldi	r22, 0xFF	; 255
    7d6a:	7f ef       	ldi	r23, 0xFF	; 255
    7d6c:	8f ef       	ldi	r24, 0xFF	; 255
    7d6e:	9f ef       	ldi	r25, 0xFF	; 255
    7d70:	08 95       	ret

00007d72 <error_ptr>:

void* error_ptr(func_cb_ptr p)
{
	DEBUG("error_ptr is called\n");
	return NULL;
}
    7d72:	80 e0       	ldi	r24, 0x00	; 0
    7d74:	90 e0       	ldi	r25, 0x00	; 0
    7d76:	08 95       	ret

00007d78 <ker_led>:
#include <sos.h>
#include "led.h"

int8_t ker_led(uint8_t action){
	switch (action){
    7d78:	99 27       	eor	r25, r25
    7d7a:	85 30       	cpi	r24, 0x05	; 5
    7d7c:	91 05       	cpc	r25, r1
    7d7e:	31 f1       	breq	.+76     	; 0x7dcc
    7d80:	86 30       	cpi	r24, 0x06	; 6
    7d82:	91 05       	cpc	r25, r1
    7d84:	7c f4       	brge	.+30     	; 0x7da4
    7d86:	82 30       	cpi	r24, 0x02	; 2
    7d88:	91 05       	cpc	r25, r1
    7d8a:	d1 f0       	breq	.+52     	; 0x7dc0
    7d8c:	83 30       	cpi	r24, 0x03	; 3
    7d8e:	91 05       	cpc	r25, r1
    7d90:	1c f4       	brge	.+6      	; 0x7d98
    7d92:	01 97       	sbiw	r24, 0x01	; 1
    7d94:	99 f0       	breq	.+38     	; 0x7dbc
    7d96:	28 c0       	rjmp	.+80     	; 0x7de8
    7d98:	83 30       	cpi	r24, 0x03	; 3
    7d9a:	91 05       	cpc	r25, r1
    7d9c:	99 f0       	breq	.+38     	; 0x7dc4
    7d9e:	04 97       	sbiw	r24, 0x04	; 4
    7da0:	99 f0       	breq	.+38     	; 0x7dc8
    7da2:	22 c0       	rjmp	.+68     	; 0x7de8
    7da4:	87 30       	cpi	r24, 0x07	; 7
    7da6:	91 05       	cpc	r25, r1
    7da8:	a9 f0       	breq	.+42     	; 0x7dd4
    7daa:	87 30       	cpi	r24, 0x07	; 7
    7dac:	91 05       	cpc	r25, r1
    7dae:	84 f0       	brlt	.+32     	; 0x7dd0
    7db0:	88 30       	cpi	r24, 0x08	; 8
    7db2:	91 05       	cpc	r25, r1
    7db4:	91 f0       	breq	.+36     	; 0x7dda
    7db6:	09 97       	sbiw	r24, 0x09	; 9
    7db8:	99 f0       	breq	.+38     	; 0x7de0
    7dba:	16 c0       	rjmp	.+44     	; 0x7de8
		case LED_RED_ON:        led_red_on();        break;
    7dbc:	da 98       	cbi	0x1b, 2	; 27
    7dbe:	14 c0       	rjmp	.+40     	; 0x7de8
		case LED_GREEN_ON:      led_green_on();      break;
    7dc0:	d9 98       	cbi	0x1b, 1	; 27
    7dc2:	12 c0       	rjmp	.+36     	; 0x7de8
		case LED_YELLOW_ON:     led_yellow_on();     break;
    7dc4:	d8 98       	cbi	0x1b, 0	; 27
    7dc6:	10 c0       	rjmp	.+32     	; 0x7de8
		case LED_RED_OFF:       led_red_off();       break;
    7dc8:	da 9a       	sbi	0x1b, 2	; 27
    7dca:	0e c0       	rjmp	.+28     	; 0x7de8
		case LED_GREEN_OFF:     led_green_off();     break;
    7dcc:	d9 9a       	sbi	0x1b, 1	; 27
    7dce:	0c c0       	rjmp	.+24     	; 0x7de8
		case LED_YELLOW_OFF:    led_yellow_off();    break;
    7dd0:	d8 9a       	sbi	0x1b, 0	; 27
    7dd2:	0a c0       	rjmp	.+20     	; 0x7de8
		case LED_RED_TOGGLE:    led_red_toggle();    break;
    7dd4:	8b b3       	in	r24, 0x1b	; 27
    7dd6:	94 e0       	ldi	r25, 0x04	; 4
    7dd8:	05 c0       	rjmp	.+10     	; 0x7de4
		case LED_GREEN_TOGGLE:  led_green_toggle();  break;
    7dda:	8b b3       	in	r24, 0x1b	; 27
    7ddc:	92 e0       	ldi	r25, 0x02	; 2
    7dde:	02 c0       	rjmp	.+4      	; 0x7de4
		case LED_YELLOW_TOGGLE: led_yellow_toggle(); break;
    7de0:	8b b3       	in	r24, 0x1b	; 27
    7de2:	91 e0       	ldi	r25, 0x01	; 1
    7de4:	89 27       	eor	r24, r25
    7de6:	8b bb       	out	0x1b, r24	; 27
	}
	return 0;
}
    7de8:	80 e0       	ldi	r24, 0x00	; 0
    7dea:	90 e0       	ldi	r25, 0x00	; 0
    7dec:	08 95       	ret

00007dee <sos_uart_init>:


void sos_uart_init()
{
  s.state = SOS_UART_IDLE;
    7dee:	10 92 33 0b 	sts	0x0B33, r1
	s.msg_ptr = NULL;
    7df2:	10 92 35 0b 	sts	0x0B35, r1
    7df6:	10 92 34 0b 	sts	0x0B34, r1

	// set uart_address 
	set_uart_address(ker_id());
    7dfa:	0e 94 8c 35 	call	0x6b18
    7dfe:	0e 94 29 40 	call	0x8052
	ker_register_module(sos_get_header_address(mod_header));
    7e02:	84 eb       	ldi	r24, 0xB4	; 180
    7e04:	92 e0       	ldi	r25, 0x02	; 2
    7e06:	aa 27       	eor	r26, r26
    7e08:	97 fd       	sbrc	r25, 7
    7e0a:	a0 95       	com	r26
    7e0c:	ba 2f       	mov	r27, r26
    7e0e:	b6 95       	lsr	r27
    7e10:	a7 95       	ror	r26
    7e12:	97 95       	ror	r25
    7e14:	87 95       	ror	r24
    7e16:	0e 94 7e 15 	call	0x2afc

	mq_init(&uartpq);
    7e1a:	83 e2       	ldi	r24, 0x23	; 35
    7e1c:	9b e0       	ldi	r25, 0x0B	; 11
    7e1e:	0e 94 b9 19 	call	0x3372
    7e22:	08 95       	ret

00007e24 <uart_try_reserve_and_send>:
}


static void uart_try_reserve_and_send(Message *m) {
    7e24:	cf 93       	push	r28
    7e26:	df 93       	push	r29
    7e28:	ec 01       	movw	r28, r24
	if (ker_uart_reserve_bus(KER_UART_PID, UART_SYS_TX_FLAG|UART_SYS_SOS_MSG_FLAG) != SOS_OK) {
    7e2a:	60 ec       	ldi	r22, 0xC0	; 192
    7e2c:	88 e4       	ldi	r24, 0x48	; 72
    7e2e:	0e 94 99 53 	call	0xa732
    7e32:	88 23       	and	r24, r24
    7e34:	21 f0       	breq	.+8      	; 0x7e3e
		LED_DBG(LED_RED_ON);
		ker_uart_release_bus(KER_UART_PID);
    7e36:	88 e4       	ldi	r24, 0x48	; 72
    7e38:	0e 94 bd 53 	call	0xa77a
		goto queue_and_backoff;
    7e3c:	0b c0       	rjmp	.+22     	; 0x7e54
	}

	if (ker_uart_send_data((uint8_t*)m, m->len, KER_UART_PID) != SOS_OK) {
    7e3e:	48 e4       	ldi	r20, 0x48	; 72
    7e40:	6f 81       	ldd	r22, Y+7	; 0x07
    7e42:	ce 01       	movw	r24, r28
    7e44:	0e 94 01 54 	call	0xa802
    7e48:	88 23       	and	r24, r24
    7e4a:	21 f4       	brne	.+8      	; 0x7e54
		goto queue_and_backoff;
	}
	s.state = SOS_UART_TX_MSG;
    7e4c:	82 e0       	ldi	r24, 0x02	; 2
    7e4e:	80 93 33 0b 	sts	0x0B33, r24
	return;
    7e52:	10 c0       	rjmp	.+32     	; 0x7e74

queue_and_backoff:
	//DEBUG("UART backoff\n");
	s.state = SOS_UART_BACKOFF;
    7e54:	81 e0       	ldi	r24, 0x01	; 1
    7e56:	80 93 33 0b 	sts	0x0B33, r24
	mq_enqueue(&uartpq, m);
    7e5a:	be 01       	movw	r22, r28
    7e5c:	83 e2       	ldi	r24, 0x23	; 35
    7e5e:	9b e0       	ldi	r25, 0x0B	; 11
    7e60:	0e 94 cb 19 	call	0x3396
	ker_timer_restart(KER_UART_PID, SOS_UART_TID, SOS_UART_BACKOFF_TIME);
    7e64:	20 e0       	ldi	r18, 0x00	; 0
    7e66:	31 e0       	ldi	r19, 0x01	; 1
    7e68:	40 e0       	ldi	r20, 0x00	; 0
    7e6a:	50 e0       	ldi	r21, 0x00	; 0
    7e6c:	60 e0       	ldi	r22, 0x00	; 0
    7e6e:	88 e4       	ldi	r24, 0x48	; 72
    7e70:	0e 94 63 31 	call	0x62c6
    7e74:	df 91       	pop	r29
    7e76:	cf 91       	pop	r28
    7e78:	08 95       	ret

00007e7a <uart_msg_alloc>:
}

// Use this when the bus is already reserved
static void uart_try_send_reserved_bus(Message *m)
{
	if (ker_uart_send_data((uint8_t*)m, m->len, KER_UART_PID) != SOS_OK) {
		//DEBUG("UART backoff\n");
		s.state = SOS_UART_BACKOFF;
		mq_enqueue(&uartpq, m);
		ker_timer_restart(KER_UART_PID, SOS_UART_TID, SOS_UART_BACKOFF_TIME);
		return;
	} 
	//DEBUG("end of try send reserved bus\n");
	s.state = SOS_UART_TX_MSG;
}


void uart_msg_alloc(Message *m)
{
    7e7a:	1f 93       	push	r17
    7e7c:	cf 93       	push	r28
    7e7e:	df 93       	push	r29
    7e80:	ec 01       	movw	r28, r24
	HAS_CRITICAL_SECTION;
	//! change ownership
	if(flag_msg_release(m->flag)){
    7e82:	8a 85       	ldd	r24, Y+10	; 0x0a
    7e84:	9b 85       	ldd	r25, Y+11	; 0x0b
    7e86:	82 ff       	sbrs	r24, 2
    7e88:	06 c0       	rjmp	.+12     	; 0x7e96
 * Add check to prevent a change of ownership to the 'null' user.
 */
static inline int8_t ker_change_own(void* ptr, sos_pid_t id)
{
  return sos_blk_mem_change_own(ptr, id, false);
    7e8a:	40 e0       	ldi	r20, 0x00	; 0
    7e8c:	68 e4       	ldi	r22, 0x48	; 72
    7e8e:	88 85       	ldd	r24, Y+8	; 0x08
    7e90:	99 85       	ldd	r25, Y+9	; 0x09
    7e92:	0e 94 ee 0f 	call	0x1fdc
		ker_change_own(m->data, KER_UART_PID);
	}

  ENTER_CRITICAL_SECTION();
    7e96:	1f b7       	in	r17, 0x3f	; 63
    7e98:	f8 94       	cli
	//DEBUG("uart_msg_alloc %d\n", s.state);
	if(s.state == SOS_UART_IDLE) {
    7e9a:	80 91 33 0b 	lds	r24, 0x0B33
    7e9e:	88 23       	and	r24, r24
    7ea0:	41 f4       	brne	.+16     	; 0x7eb2
		s.msg_ptr = m;
    7ea2:	d0 93 35 0b 	sts	0x0B35, r29
    7ea6:	c0 93 34 0b 	sts	0x0B34, r28
		uart_try_reserve_and_send(s.msg_ptr);
    7eaa:	ce 01       	movw	r24, r28
    7eac:	0e 94 12 3f 	call	0x7e24
    7eb0:	05 c0       	rjmp	.+10     	; 0x7ebc
	} else {
		mq_enqueue(&uartpq, m);
    7eb2:	be 01       	movw	r22, r28
    7eb4:	83 e2       	ldi	r24, 0x23	; 35
    7eb6:	9b e0       	ldi	r25, 0x0B	; 11
    7eb8:	0e 94 cb 19 	call	0x3396
	}
	//DEBUG("end uart_msg_alloc %d\n", s.state);
	LEAVE_CRITICAL_SECTION();
    7ebc:	1f bf       	out	0x3f, r17	; 63
    7ebe:	df 91       	pop	r29
    7ec0:	cf 91       	pop	r28
    7ec2:	1f 91       	pop	r17
    7ec4:	08 95       	ret

00007ec6 <uart_gc>:
}

void uart_gc( void )
{
	mq_gc_mark_payload( &uartpq, KER_UART_PID );
    7ec6:	68 e4       	ldi	r22, 0x48	; 72
    7ec8:	83 e2       	ldi	r24, 0x23	; 35
    7eca:	9b e0       	ldi	r25, 0x0B	; 11
    7ecc:	0e 94 0b 1b 	call	0x3616
	if( s.msg_ptr != NULL && flag_msg_release(s.msg_ptr->flag)) {
    7ed0:	e0 91 34 0b 	lds	r30, 0x0B34
    7ed4:	f0 91 35 0b 	lds	r31, 0x0B35
    7ed8:	30 97       	sbiw	r30, 0x00	; 0
    7eda:	49 f0       	breq	.+18     	; 0x7eee
    7edc:	82 85       	ldd	r24, Z+10	; 0x0a
    7ede:	93 85       	ldd	r25, Z+11	; 0x0b
    7ee0:	82 ff       	sbrs	r24, 2
    7ee2:	05 c0       	rjmp	.+10     	; 0x7eee
		ker_gc_mark( KER_UART_PID, s.msg_ptr->data );
    7ee4:	60 85       	ldd	r22, Z+8	; 0x08
    7ee6:	71 85       	ldd	r23, Z+9	; 0x09
    7ee8:	88 e4       	ldi	r24, 0x48	; 72
    7eea:	0e 94 9b 12 	call	0x2536
	}
	malloc_gc( KER_UART_PID );
    7eee:	88 e4       	ldi	r24, 0x48	; 72
    7ef0:	0e 94 db 12 	call	0x25b6
    7ef4:	08 95       	ret

00007ef6 <uart_msg_gc>:
}

void uart_msg_gc( void )
{
	uart_rx_msg_gc();
    7ef6:	0e 94 62 4e 	call	0x9cc4
	if( s.msg_ptr != NULL ) {
    7efa:	80 91 34 0b 	lds	r24, 0x0B34
    7efe:	90 91 35 0b 	lds	r25, 0x0B35
    7f02:	00 97       	sbiw	r24, 0x00	; 0
    7f04:	11 f0       	breq	.+4      	; 0x7f0a
		mq_gc_mark_one_hdr( s.msg_ptr );
    7f06:	0e 94 84 1b 	call	0x3708
	}
	mq_gc_mark_hdr( &uartpq, KER_UART_PID );
    7f0a:	68 e4       	ldi	r22, 0x48	; 72
    7f0c:	83 e2       	ldi	r24, 0x23	; 35
    7f0e:	9b e0       	ldi	r25, 0x0B	; 11
    7f10:	0e 94 4f 1b 	call	0x369e
    7f14:	08 95       	ret

00007f16 <sos_uart_msg_handler>:
}

int8_t sos_uart_msg_handler(void *state, Message *msg) 
{
    7f16:	1f 93       	push	r17
    7f18:	cf 93       	push	r28
    7f1a:	df 93       	push	r29
    7f1c:	fb 01       	movw	r30, r22
	HAS_CRITICAL_SECTION;
  ENTER_CRITICAL_SECTION();
    7f1e:	1f b7       	in	r17, 0x3f	; 63
    7f20:	f8 94       	cli
	switch (msg->type) {
    7f22:	86 81       	ldd	r24, Z+6	; 0x06
    7f24:	99 27       	eor	r25, r25
    7f26:	86 30       	cpi	r24, 0x06	; 6
    7f28:	91 05       	cpc	r25, r1
    7f2a:	c9 f0       	breq	.+50     	; 0x7f5e
    7f2c:	87 30       	cpi	r24, 0x07	; 7
    7f2e:	91 05       	cpc	r25, r1
    7f30:	34 f4       	brge	.+12     	; 0x7f3e
    7f32:	00 97       	sbiw	r24, 0x00	; 0
    7f34:	61 f0       	breq	.+24     	; 0x7f4e
    7f36:	02 97       	sbiw	r24, 0x02	; 2
    7f38:	09 f4       	brne	.+2      	; 0x7f3c
    7f3a:	44 c0       	rjmp	.+136    	; 0x7fc4
    7f3c:	71 c0       	rjmp	.+226    	; 0x8020
    7f3e:	8f 30       	cpi	r24, 0x0F	; 15
    7f40:	91 05       	cpc	r25, r1
    7f42:	09 f4       	brne	.+2      	; 0x7f46
    7f44:	52 c0       	rjmp	.+164    	; 0x7fea
    7f46:	82 34       	cpi	r24, 0x42	; 66
    7f48:	91 05       	cpc	r25, r1
    7f4a:	71 f0       	breq	.+28     	; 0x7f68
    7f4c:	69 c0       	rjmp	.+210    	; 0x8020
		case MSG_INIT:
				s.state = SOS_UART_IDLE;
    7f4e:	10 92 33 0b 	sts	0x0B33, r1
				ker_timer_init(KER_UART_PID, SOS_UART_TID, TIMER_ONE_SHOT);
    7f52:	41 e0       	ldi	r20, 0x01	; 1
    7f54:	60 e0       	ldi	r22, 0x00	; 0
    7f56:	88 e4       	ldi	r24, 0x48	; 72
    7f58:	0e 94 63 30 	call	0x60c6
				break;
    7f5c:	65 c0       	rjmp	.+202    	; 0x8028

		case MSG_FINAL:
				ker_timer_stop(KER_UART_PID, 0);
    7f5e:	60 e0       	ldi	r22, 0x00	; 0
    7f60:	88 e4       	ldi	r24, 0x48	; 72
    7f62:	0e 94 40 30 	call	0x6080
				break;
    7f66:	60 c0       	rjmp	.+192    	; 0x8028

		case MSG_UART_SEND_DONE:
		{
				//DEBUG("end uart_send_done %d\n", s.state);
				//s.state = SOS_UART_IDLE;
				sos_uart_msg_senddone(flag_send_fail(msg->flag));

				break;
		}
		case MSG_TIMER_TIMEOUT:
		{
				// if message in queue start transmission
				//DEBUG("uart_timeout %d\n", s.state);
				s.msg_ptr = mq_dequeue(&uartpq);
				if (s.msg_ptr) {
					uart_try_reserve_and_send(s.msg_ptr);
				} else { // else free bus
					ker_uart_release_bus(KER_UART_PID);
					s.state = SOS_UART_IDLE;
				}
				//DEBUG("end uart_timeout %d\n", s.state);
				break;
		}
		case MSG_ERROR:
		{
					Message *msg_txed;
					//DEBUG("uart_error %d\n", s.state);
					// post error message to calling module
					ker_uart_release_bus(KER_UART_PID);

					msg_txed = s.msg_ptr;
					s.msg_ptr = NULL;
					msg_send_senddone(msg_txed, false, KER_UART_PID);

					s.state = SOS_UART_BACKOFF;
					ker_timer_restart(KER_UART_PID, SOS_UART_TID, SOS_UART_BACKOFF_TIME);
					//DEBUG("end uart_error %d\n", s.state);
					break;
		}

		default: 
		{
			LEAVE_CRITICAL_SECTION();
			return -EINVAL;
		}
	}

	LEAVE_CRITICAL_SECTION();
	return SOS_OK;
}

// this is from Interrupt handler
static void sos_uart_msg_senddone( bool failed )
{
    7f68:	82 85       	ldd	r24, Z+10	; 0x0a
	Message *msg_txed;   //! message just transmitted
	msg_txed = s.msg_ptr;
    7f6a:	20 91 34 0b 	lds	r18, 0x0B34
    7f6e:	30 91 35 0b 	lds	r19, 0x0B35
	s.msg_ptr = NULL;
    7f72:	10 92 35 0b 	sts	0x0B35, r1
    7f76:	10 92 34 0b 	sts	0x0B34, r1
	//DEBUG("uart_send_done %d\n", s.state);
	LED_DBG(LED_GREEN_TOGGLE);
	// post send done message to calling module
	msg_send_senddone(msg_txed, !failed, KER_UART_PID);
    7f7a:	60 e0       	ldi	r22, 0x00	; 0
    7f7c:	81 ff       	sbrs	r24, 1
    7f7e:	61 e0       	ldi	r22, 0x01	; 1
    7f80:	48 e4       	ldi	r20, 0x48	; 72
    7f82:	c9 01       	movw	r24, r18
    7f84:	0e 94 bc 1b 	call	0x3778
	s.msg_ptr = mq_dequeue(&uartpq);
    7f88:	83 e2       	ldi	r24, 0x23	; 35
    7f8a:	9b e0       	ldi	r25, 0x0B	; 11
    7f8c:	0e 94 21 1a 	call	0x3442
    7f90:	ec 01       	movw	r28, r24
    7f92:	90 93 35 0b 	sts	0x0B35, r25
    7f96:	80 93 34 0b 	sts	0x0B34, r24
	if (s.msg_ptr) {
    7f9a:	00 97       	sbiw	r24, 0x00	; 0
    7f9c:	01 f1       	breq	.+64     	; 0x7fde
    7f9e:	48 e4       	ldi	r20, 0x48	; 72
    7fa0:	6f 81       	ldd	r22, Y+7	; 0x07
    7fa2:	0e 94 01 54 	call	0xa802
    7fa6:	88 23       	and	r24, r24
    7fa8:	49 f0       	breq	.+18     	; 0x7fbc
    7faa:	81 e0       	ldi	r24, 0x01	; 1
    7fac:	80 93 33 0b 	sts	0x0B33, r24
    7fb0:	be 01       	movw	r22, r28
    7fb2:	83 e2       	ldi	r24, 0x23	; 35
    7fb4:	9b e0       	ldi	r25, 0x0B	; 11
    7fb6:	0e 94 cb 19 	call	0x3396
    7fba:	29 c0       	rjmp	.+82     	; 0x800e
    7fbc:	82 e0       	ldi	r24, 0x02	; 2
    7fbe:	80 93 33 0b 	sts	0x0B33, r24
    7fc2:	32 c0       	rjmp	.+100    	; 0x8028
    7fc4:	83 e2       	ldi	r24, 0x23	; 35
    7fc6:	9b e0       	ldi	r25, 0x0B	; 11
    7fc8:	0e 94 21 1a 	call	0x3442
    7fcc:	90 93 35 0b 	sts	0x0B35, r25
    7fd0:	80 93 34 0b 	sts	0x0B34, r24
    7fd4:	00 97       	sbiw	r24, 0x00	; 0
    7fd6:	19 f0       	breq	.+6      	; 0x7fde
    7fd8:	0e 94 12 3f 	call	0x7e24
    7fdc:	25 c0       	rjmp	.+74     	; 0x8028
    7fde:	88 e4       	ldi	r24, 0x48	; 72
    7fe0:	0e 94 bd 53 	call	0xa77a
    7fe4:	10 92 33 0b 	sts	0x0B33, r1
    7fe8:	1f c0       	rjmp	.+62     	; 0x8028
    7fea:	88 e4       	ldi	r24, 0x48	; 72
    7fec:	0e 94 bd 53 	call	0xa77a
    7ff0:	80 91 34 0b 	lds	r24, 0x0B34
    7ff4:	90 91 35 0b 	lds	r25, 0x0B35
    7ff8:	10 92 35 0b 	sts	0x0B35, r1
    7ffc:	10 92 34 0b 	sts	0x0B34, r1
    8000:	48 e4       	ldi	r20, 0x48	; 72
    8002:	60 e0       	ldi	r22, 0x00	; 0
    8004:	0e 94 bc 1b 	call	0x3778
    8008:	81 e0       	ldi	r24, 0x01	; 1
    800a:	80 93 33 0b 	sts	0x0B33, r24
    800e:	20 e0       	ldi	r18, 0x00	; 0
    8010:	31 e0       	ldi	r19, 0x01	; 1
    8012:	40 e0       	ldi	r20, 0x00	; 0
    8014:	50 e0       	ldi	r21, 0x00	; 0
    8016:	60 e0       	ldi	r22, 0x00	; 0
    8018:	88 e4       	ldi	r24, 0x48	; 72
    801a:	0e 94 63 31 	call	0x62c6
    801e:	04 c0       	rjmp	.+8      	; 0x8028
    8020:	1f bf       	out	0x3f, r17	; 63
    8022:	8a ee       	ldi	r24, 0xEA	; 234
    8024:	9f ef       	ldi	r25, 0xFF	; 255
    8026:	03 c0       	rjmp	.+6      	; 0x802e
    8028:	1f bf       	out	0x3f, r17	; 63
    802a:	80 e0       	ldi	r24, 0x00	; 0
    802c:	90 e0       	ldi	r25, 0x00	; 0
    802e:	df 91       	pop	r29
    8030:	cf 91       	pop	r28
    8032:	1f 91       	pop	r17
    8034:	08 95       	ret

00008036 <check_uart_address>:

static uint16_t uart_address = BCAST_ADDRESS;

int8_t check_uart_address(uint16_t addr) {
	if (addr != uart_address) {
    8036:	20 91 1a 01 	lds	r18, 0x011A
    803a:	30 91 1b 01 	lds	r19, 0x011B
    803e:	82 17       	cp	r24, r18
    8040:	93 07       	cpc	r25, r19
    8042:	19 f0       	breq	.+6      	; 0x804a
		return -EINVAL;
    8044:	8a ee       	ldi	r24, 0xEA	; 234
    8046:	9f ef       	ldi	r25, 0xFF	; 255
    8048:	08 95       	ret
	}
	return SOS_OK;
    804a:	80 e0       	ldi	r24, 0x00	; 0
    804c:	90 e0       	ldi	r25, 0x00	; 0
}
    804e:	08 95       	ret
    8050:	08 95       	ret

00008052 <set_uart_address>:

void set_uart_address(uint16_t addr) {
	uart_address = addr;
    8052:	90 93 1b 01 	sts	0x011B, r25
    8056:	80 93 1a 01 	sts	0x011A, r24
    805a:	08 95       	ret

0000805c <FlashSPI_txByte>:
#define OP(name) OPN(selected, name)          

// We use SPI mode 0 (clock low at select time)
/* async command */
static uint8_t FlashSPI_txByte(uint8_t spiOut) {
    805c:	98 2f       	mov	r25, r24
    uint8_t spiIn = 0;
    805e:	80 e0       	ldi	r24, 0x00	; 0
	HAS_CRITICAL_SECTION;

    // This critical section ensures integrity at the hardware level...
	ENTER_CRITICAL_SECTION();
    8060:	3f b7       	in	r19, 0x3f	; 63
    8062:	f8 94       	cli
	{
		BITINIT;
    8064:	22 b3       	in	r18, 0x12	; 18
    8066:	27 7d       	andi	r18, 0xD7	; 215

		BIT(7);
    8068:	22 bb       	out	0x12, r18	; 18
    806a:	97 fd       	sbrc	r25, 7
    806c:	93 9a       	sbi	0x12, 3	; 18
    806e:	95 9a       	sbi	0x12, 5	; 18
    8070:	82 99       	sbic	0x10, 2	; 16
    8072:	80 68       	ori	r24, 0x80	; 128
		BIT(6);
    8074:	22 bb       	out	0x12, r18	; 18
    8076:	96 fd       	sbrc	r25, 6
    8078:	93 9a       	sbi	0x12, 3	; 18
    807a:	95 9a       	sbi	0x12, 5	; 18
    807c:	82 99       	sbic	0x10, 2	; 16
    807e:	80 64       	ori	r24, 0x40	; 64
		BIT(5);
    8080:	22 bb       	out	0x12, r18	; 18
    8082:	95 fd       	sbrc	r25, 5
    8084:	93 9a       	sbi	0x12, 3	; 18
    8086:	95 9a       	sbi	0x12, 5	; 18
    8088:	82 99       	sbic	0x10, 2	; 16
    808a:	80 62       	ori	r24, 0x20	; 32
		BIT(4);
    808c:	22 bb       	out	0x12, r18	; 18
    808e:	94 fd       	sbrc	r25, 4
    8090:	93 9a       	sbi	0x12, 3	; 18
    8092:	95 9a       	sbi	0x12, 5	; 18
    8094:	82 99       	sbic	0x10, 2	; 16
    8096:	80 61       	ori	r24, 0x10	; 16
		BIT(3);
    8098:	22 bb       	out	0x12, r18	; 18
    809a:	93 fd       	sbrc	r25, 3
    809c:	93 9a       	sbi	0x12, 3	; 18
    809e:	95 9a       	sbi	0x12, 5	; 18
    80a0:	82 99       	sbic	0x10, 2	; 16
    80a2:	88 60       	ori	r24, 0x08	; 8
		BIT(2);
    80a4:	22 bb       	out	0x12, r18	; 18
    80a6:	92 fd       	sbrc	r25, 2
    80a8:	93 9a       	sbi	0x12, 3	; 18
    80aa:	95 9a       	sbi	0x12, 5	; 18
    80ac:	82 99       	sbic	0x10, 2	; 16
    80ae:	84 60       	ori	r24, 0x04	; 4
		BIT(1);
    80b0:	22 bb       	out	0x12, r18	; 18
    80b2:	91 fd       	sbrc	r25, 1
    80b4:	93 9a       	sbi	0x12, 3	; 18
    80b6:	95 9a       	sbi	0x12, 5	; 18
    80b8:	82 99       	sbic	0x10, 2	; 16
    80ba:	82 60       	ori	r24, 0x02	; 2
		BIT(0);
    80bc:	22 bb       	out	0x12, r18	; 18
    80be:	90 fd       	sbrc	r25, 0
    80c0:	93 9a       	sbi	0x12, 3	; 18
    80c2:	95 9a       	sbi	0x12, 5	; 18
    80c4:	82 99       	sbic	0x10, 2	; 16
    80c6:	81 60       	ori	r24, 0x01	; 1
	}
	LEAVE_CRITICAL_SECTION();
    80c8:	3f bf       	out	0x3f, r19	; 63
	return spiIn;
}
    80ca:	99 27       	eor	r25, r25
    80cc:	08 95       	ret

000080ce <__vector_3>:

/**
 * Check FLASH status byte.
 * @return true if the flash is ready, FALSE if not.
 *   In the true case, the full status byte may not have been
 *   read out of the flash, in the FALSE case it is fully read out.
 */

static bool FlashIdle_wait() {
	bool waits;
	HAS_CRITICAL_SECTION;

	// Setup interrupt on rising edge of flash in
	ENTER_CRITICAL_SECTION();
	{
		EIFR = 1 << 2; // clear any pending interrupt
		ENABLE_FLASH_INTERRUPT();
		CLR_FLASH_CLK();
		// We need to wait at least 2 cycles here (because of the signal
		// acquisition delay). It's also good to wait a few microseconds
		// to get the fast ("FAIL") exit from wait (reads are twice as fast
		// with a 2us delay...)
		TOSH_uwait(2);

		if (READ_FLASH_IN())
		{
			// already high
			DISABLE_FLASH_INTERRUPT();
			waits = false;
		}
		else {
			waits = true;
		}
	}
	LEAVE_CRITICAL_SECTION();
    return waits;
  }


SIGNAL(SIG_INTERRUPT2) {
    80ce:	1f 92       	push	r1
    80d0:	0f 92       	push	r0
    80d2:	0f b6       	in	r0, 0x3f	; 63
    80d4:	0f 92       	push	r0
    80d6:	11 24       	eor	r1, r1
    80d8:	ef 92       	push	r14
    80da:	ff 92       	push	r15
    80dc:	0f 93       	push	r16
    80de:	1f 93       	push	r17
    80e0:	2f 93       	push	r18
    80e2:	3f 93       	push	r19
    80e4:	4f 93       	push	r20
    80e6:	5f 93       	push	r21
    80e8:	6f 93       	push	r22
    80ea:	7f 93       	push	r23
    80ec:	8f 93       	push	r24
    80ee:	9f 93       	push	r25
    80f0:	af 93       	push	r26
    80f2:	bf 93       	push	r27
    80f4:	ef 93       	push	r30
    80f6:	ff 93       	push	r31
	DISABLE_FLASH_INTERRUPT();
    80f8:	89 b7       	in	r24, 0x39	; 57
    80fa:	8b 7f       	andi	r24, 0xFB	; 251
    80fc:	89 bf       	out	0x39, r24	; 57
	EIMSK &= ~_BV(2); // disable interrupt
    80fe:	89 b7       	in	r24, 0x39	; 57
    8100:	8b 7f       	andi	r24, 0xFB	; 251
    8102:	89 bf       	out	0x39, r24	; 57
	post_short(EXFLASH_PID, EXFLASH_PID, MSG_EXFLASH_AVAIL, 0, 0, 0);
    8104:	ee 24       	eor	r14, r14
    8106:	ff 24       	eor	r15, r15
    8108:	87 01       	movw	r16, r14
    810a:	20 e0       	ldi	r18, 0x00	; 0
    810c:	43 e8       	ldi	r20, 0x83	; 131
    810e:	65 e4       	ldi	r22, 0x45	; 69
    8110:	86 2f       	mov	r24, r22
    8112:	0e 94 50 18 	call	0x30a0
    8116:	ff 91       	pop	r31
    8118:	ef 91       	pop	r30
    811a:	bf 91       	pop	r27
    811c:	af 91       	pop	r26
    811e:	9f 91       	pop	r25
    8120:	8f 91       	pop	r24
    8122:	7f 91       	pop	r23
    8124:	6f 91       	pop	r22
    8126:	5f 91       	pop	r21
    8128:	4f 91       	pop	r20
    812a:	3f 91       	pop	r19
    812c:	2f 91       	pop	r18
    812e:	1f 91       	pop	r17
    8130:	0f 91       	pop	r16
    8132:	ff 90       	pop	r15
    8134:	ef 90       	pop	r14
    8136:	0f 90       	pop	r0
    8138:	0f be       	out	0x3f, r0	; 63
    813a:	0f 90       	pop	r0
    813c:	1f 90       	pop	r1
    813e:	18 95       	reti

00008140 <exflash_init>:
DEF_IO_PIN( PINA7, A, PA7);
DEF_IO_PIN( PINA6, A, PA6);
DEF_IO_PIN( PINA5, A, PA5);
DEF_IO_PIN( PINA4, A, PA4);
DEF_IO_PIN( PINA3, A, PA3);
    8140:	d3 9a       	sbi	0x1a, 3	; 26
    8142:	db 9a       	sbi	0x1b, 3	; 27
DEF_IO_PIN( PINA2, A, PA2);
DEF_IO_PIN( PINA1, A, PA1);
DEF_IO_PIN( PINA0, A, PA0);

/**
 * PORTB:
 */
DEF_IO_PIN( PINB7, B, PB7);
DEF_IO_PIN( PINB6, B, PB6);
DEF_IO_PIN( PINB5, B, PB5);
DEF_IO_PIN( PINB4, B, PB4);
DEF_IO_PIN( PINB3, B, PB3);
DEF_IO_PIN( PINB2, B, PB2);
DEF_IO_PIN( PINB1, B, PB1);
DEF_IO_PIN( PINB0, B, PB0);

/**
 * PORTC:
 */
DEF_IO_PIN( PINC7, C, PC7);
DEF_IO_PIN( PINC6, C, PC6);
DEF_IO_PIN( PINC5, C, PC5);
DEF_IO_PIN( PINC4, C, PC4);
DEF_IO_PIN( PINC3, C, PC3);
DEF_IO_PIN( PINC2, C, PC2);
DEF_IO_PIN( PINC1, C, PC1);
DEF_IO_PIN( PINC0, C, PC0);


/**
 * PORTD:
 */
DEF_IO_PIN( PIND7, D, PD7);
DEF_IO_PIN( PIND6, D, PD6);
DEF_IO_PIN( PIND5, D, PD5);
    8144:	8d 9a       	sbi	0x11, 5	; 17
    8146:	95 98       	cbi	0x12, 5	; 18
DEF_IO_PIN( PIND4, D, PD4);
DEF_IO_PIN( PIND3, D, PD3);
    8148:	8b 9a       	sbi	0x11, 3	; 17
    814a:	93 9a       	sbi	0x12, 3	; 18
DEF_IO_PIN( PIND2, D, PD2);
    814c:	8a 98       	cbi	0x11, 2	; 17
    814e:	92 98       	cbi	0x12, 2	; 18
}

static inline bool getCompareStatus() {
	SET_FLASH_CLK();
	CLR_FLASH_CLK();
	// Wait for compare value to propagate
	asm volatile("nop");
	asm volatile("nop");
	return !READ_FLASH_IN();
}

int8_t exflash_init() 
{
	SET_FLASH_SELECT_DD_OUT();
	SET_FLASH_SELECT();

	SET_FLASH_CLK_DD_OUT();
	CLR_FLASH_CLK();
	SET_FLASH_OUT_DD_OUT();
	SET_FLASH_OUT();
	SET_FLASH_IN_DD_IN();
	CLR_FLASH_IN();

	DISABLE_FLASH_INTERRUPT();
    8150:	89 b7       	in	r24, 0x39	; 57
    8152:	8b 7f       	andi	r24, 0xFB	; 251
    8154:	89 bf       	out	0x39, r24	; 57
	EICRA |= 0x30; // make flash in a rising-edge interrupt
    8156:	80 91 6a 00 	lds	r24, 0x006A
    815a:	80 63       	ori	r24, 0x30	; 48
    815c:	80 93 6a 00 	sts	0x006A, r24

	request = IDLE;
    8160:	10 92 3e 0b 	sts	0x0B3E, r1
	waiting = deselectRequested = false;
    8164:	10 92 47 0b 	sts	0x0B47, r1
    8168:	10 92 4b 0b 	sts	0x0B4B, r1
	flashBusy = true;
    816c:	81 e0       	ldi	r24, 0x01	; 1
    816e:	80 93 5f 0b 	sts	0x0B5F, r24

	// pretend we're on an invalid non-existent page
	buffer[0].page = buffer[1].page = EXFLASH_MAX_PAGES;
    8172:	80 e0       	ldi	r24, 0x00	; 0
    8174:	98 e0       	ldi	r25, 0x08	; 8
    8176:	90 93 5b 0b 	sts	0x0B5B, r25
    817a:	80 93 5a 0b 	sts	0x0B5A, r24
    817e:	90 93 58 0b 	sts	0x0B58, r25
    8182:	80 93 57 0b 	sts	0x0B57, r24
	buffer[0].busy = buffer[1].busy = false;
    8186:	80 91 5c 0b 	lds	r24, 0x0B5C
    818a:	90 91 59 0b 	lds	r25, 0x0B59
	buffer[0].clean = buffer[1].clean = true;
    818e:	82 60       	ori	r24, 0x02	; 2
    8190:	92 60       	ori	r25, 0x02	; 2
	buffer[0].unchecked = buffer[1].unchecked = 0;
	buffer[0].erased = buffer[1].erased = false;
    8192:	82 7e       	andi	r24, 0xE2	; 226
    8194:	80 93 5c 0b 	sts	0x0B5C, r24
    8198:	92 7e       	andi	r25, 0xE2	; 226
    819a:	90 93 59 0b 	sts	0x0B59, r25

	reqPid = NULL_PID;
    819e:	8f ef       	ldi	r24, 0xFF	; 255
    81a0:	80 93 60 0b 	sts	0x0B60, r24
#ifdef SOS_USE_PREEMPTION
	ker_register_module(sos_get_header_address(mod_header));
#else
	sched_register_kernel_module(&exflash_module, sos_get_header_address(mod_header), NULL);
    81a4:	84 ec       	ldi	r24, 0xC4	; 196
    81a6:	92 e0       	ldi	r25, 0x02	; 2
    81a8:	aa 27       	eor	r26, r26
    81aa:	97 fd       	sbrc	r25, 7
    81ac:	a0 95       	com	r26
    81ae:	ba 2f       	mov	r27, r26
    81b0:	b6 95       	lsr	r27
    81b2:	a7 95       	ror	r26
    81b4:	97 95       	ror	r25
    81b6:	87 95       	ror	r24
    81b8:	40 e0       	ldi	r20, 0x00	; 0
    81ba:	50 e0       	ldi	r21, 0x00	; 0
    81bc:	bc 01       	movw	r22, r24
    81be:	86 e3       	ldi	r24, 0x36	; 54
    81c0:	9b e0       	ldi	r25, 0x0B	; 11
    81c2:	0e 94 4a 14 	call	0x2894
#endif
	return SOS_OK;
}
    81c6:	80 e0       	ldi	r24, 0x00	; 0
    81c8:	90 e0       	ldi	r25, 0x00	; 0
    81ca:	08 95       	ret

000081cc <FlashIdle_available>:

/* Select Ex-Flash, start a SPI transaction */
static inline void selectFlash()
{
	CLR_FLASH_CLK(); // ensure SPI mode 0
	CLR_FLASH_SELECT();
}

/* Deselect Ex-Flash */
static inline void requestDeselect()
{
	deselectRequested = true;
	SET_FLASH_SELECT();

	post_short(EXFLASH_PID, EXFLASH_PID, MSG_EXFLASH_DESELECT, 0, 0, 0);
}

static void FlashIdle_available()
{
    81cc:	ef 92       	push	r14
    81ce:	ff 92       	push	r15
    81d0:	0f 93       	push	r16
    81d2:	1f 93       	push	r17
	if (cmdPhase == P_COMPARE_CHECK)
    81d4:	80 91 4a 0b 	lds	r24, 0x0B4A
    81d8:	88 30       	cpi	r24, 0x08	; 8
    81da:	91 f4       	brne	.+36     	; 0x8200
 * PORTD:
 */
DEF_IO_PIN( PIND7, D, PD7);
DEF_IO_PIN( PIND6, D, PD6);
DEF_IO_PIN( PIND5, D, PD5);
    81dc:	95 9a       	sbi	0x12, 5	; 18
    81de:	95 98       	cbi	0x12, 5	; 18
    81e0:	00 00       	nop
    81e2:	00 00       	nop
    81e4:	20 e0       	ldi	r18, 0x00	; 0
    81e6:	30 e0       	ldi	r19, 0x00	; 0
DEF_IO_PIN( PIND6, D, PD6);
DEF_IO_PIN( PIND5, D, PD5);
DEF_IO_PIN( PIND4, D, PD4);
DEF_IO_PIN( PIND3, D, PD3);
DEF_IO_PIN( PIND2, D, PD2);
    81e8:	80 b3       	in	r24, 0x10	; 16
    81ea:	99 27       	eor	r25, r25
    81ec:	96 95       	lsr	r25
    81ee:	87 95       	ror	r24
    81f0:	96 95       	lsr	r25
    81f2:	87 95       	ror	r24
// Flash assignments
ALIAS_IO_PIN( FLASH_SELECT, PINA3);
ALIAS_IO_PIN( FLASH_CLK, PIND5);
ALIAS_IO_PIN( FLASH_OUT, PIND3);
ALIAS_IO_PIN( FLASH_IN, PIND2);
    81f4:	80 fd       	sbrc	r24, 0
    81f6:	02 c0       	rjmp	.+4      	; 0x81fc
    81f8:	21 e0       	ldi	r18, 0x01	; 1
    81fa:	30 e0       	ldi	r19, 0x00	; 0
    81fc:	20 93 49 0b 	sts	0x0B49, r18
    8200:	81 e0       	ldi	r24, 0x01	; 1
    8202:	80 93 47 0b 	sts	0x0B47, r24
DEF_IO_PIN( PINA7, A, PA7);
DEF_IO_PIN( PINA6, A, PA6);
DEF_IO_PIN( PINA5, A, PA5);
DEF_IO_PIN( PINA4, A, PA4);
DEF_IO_PIN( PINA3, A, PA3);
    8206:	db 9a       	sbi	0x1b, 3	; 27
    8208:	ee 24       	eor	r14, r14
    820a:	ff 24       	eor	r15, r15
    820c:	87 01       	movw	r16, r14
    820e:	20 e0       	ldi	r18, 0x00	; 0
    8210:	42 e8       	ldi	r20, 0x82	; 130
    8212:	65 e4       	ldi	r22, 0x45	; 69
    8214:	86 2f       	mov	r24, r22
    8216:	0e 94 50 18 	call	0x30a0
    821a:	1f 91       	pop	r17
    821c:	0f 91       	pop	r16
    821e:	ff 90       	pop	r15
    8220:	ef 90       	pop	r14
    8222:	08 95       	ret

00008224 <requestFlashStatus>:
		compareOk = getCompareStatus();
	requestDeselect();
}

static void requestFlashStatus() {
	waiting = true;
    8224:	81 e0       	ldi	r24, 0x01	; 1
    8226:	80 93 4b 0b 	sts	0x0B4B, r24
 * PORTD:
 */
DEF_IO_PIN( PIND7, D, PD7);
DEF_IO_PIN( PIND6, D, PD6);
DEF_IO_PIN( PIND5, D, PD5);
    822a:	95 98       	cbi	0x12, 5	; 18
    822c:	db 98       	cbi	0x1b, 3	; 27
	selectFlash();

	FlashSPI_txByte(C_REQ_STATUS);
    822e:	87 ed       	ldi	r24, 0xD7	; 215
    8230:	0e 94 2e 40 	call	0x805c
    8234:	2f b7       	in	r18, 0x3f	; 63
    8236:	f8 94       	cli
    8238:	84 e0       	ldi	r24, 0x04	; 4
    823a:	88 bf       	out	0x38, r24	; 56
    823c:	89 b7       	in	r24, 0x39	; 57
    823e:	84 60       	ori	r24, 0x04	; 4
    8240:	89 bf       	out	0x39, r24	; 57
 * PORTD:
 */
DEF_IO_PIN( PIND7, D, PD7);
DEF_IO_PIN( PIND6, D, PD6);
DEF_IO_PIN( PIND5, D, PD5);
    8242:	95 98       	cbi	0x12, 5	; 18
    8244:	82 e0       	ldi	r24, 0x02	; 2
    8246:	90 e0       	ldi	r25, 0x00	; 0
	...
    8258:	01 97       	sbiw	r24, 0x01	; 1
    825a:	b1 f7       	brne	.-20     	; 0x8248
DEF_IO_PIN( PIND6, D, PD6);
DEF_IO_PIN( PIND5, D, PD5);
DEF_IO_PIN( PIND4, D, PD4);
DEF_IO_PIN( PIND3, D, PD3);
DEF_IO_PIN( PIND2, D, PD2);
    825c:	80 b3       	in	r24, 0x10	; 16
    825e:	99 27       	eor	r25, r25
    8260:	96 95       	lsr	r25
    8262:	87 95       	ror	r24
    8264:	96 95       	lsr	r25
    8266:	87 95       	ror	r24
// Flash assignments
ALIAS_IO_PIN( FLASH_SELECT, PINA3);
ALIAS_IO_PIN( FLASH_CLK, PIND5);
ALIAS_IO_PIN( FLASH_OUT, PIND3);
ALIAS_IO_PIN( FLASH_IN, PIND2);
    8268:	80 ff       	sbrs	r24, 0
    826a:	05 c0       	rjmp	.+10     	; 0x8276
    826c:	89 b7       	in	r24, 0x39	; 57
    826e:	8b 7f       	andi	r24, 0xFB	; 251
    8270:	89 bf       	out	0x39, r24	; 57
    8272:	80 e0       	ldi	r24, 0x00	; 0
    8274:	01 c0       	rjmp	.+2      	; 0x8278
    8276:	81 e0       	ldi	r24, 0x01	; 1
    8278:	2f bf       	out	0x3f, r18	; 63
    827a:	88 23       	and	r24, r24
    827c:	11 f4       	brne	.+4      	; 0x8282
	if (FlashIdle_wait() == false) // already done
		FlashIdle_available();
    827e:	0e 94 e6 40 	call	0x81cc
    8282:	08 95       	ret
    8284:	08 95       	ret

00008286 <sendFlashCommand>:
}

static void sendFlashCommand() {
    8286:	cf 92       	push	r12
    8288:	df 92       	push	r13
    828a:	ef 92       	push	r14
    828c:	ff 92       	push	r15
    828e:	0f 93       	push	r16
    8290:	1f 93       	push	r17
    8292:	cf 93       	push	r28
    8294:	df 93       	push	r29
	uint8_t in = 0, out = 0;
    8296:	90 e0       	ldi	r25, 0x00	; 0
    8298:	c9 2e       	mov	r12, r25
	uint8_t *ptr = cmd;
    829a:	ce e4       	ldi	r28, 0x4E	; 78
    829c:	db e0       	ldi	r29, 0x0B	; 11
	exflashoffset_t count = cmdCount;
    829e:	80 91 52 0b 	lds	r24, 0x0B52
    82a2:	08 2f       	mov	r16, r24
    82a4:	11 27       	eor	r17, r17
	uint16_t crc = 0;
    82a6:	ee 24       	eor	r14, r14
    82a8:	ff 24       	eor	r15, r15
	uint8_t lphase = P_SEND_CMD;
    82aa:	d9 2e       	mov	r13, r25
 * PORTD:
 */
DEF_IO_PIN( PIND7, D, PD7);
DEF_IO_PIN( PIND6, D, PD6);
DEF_IO_PIN( PIND5, D, PD5);
    82ac:	95 98       	cbi	0x12, 5	; 18
    82ae:	db 98       	cbi	0x1b, 3	; 27

	/* For a 3% speedup, we could use labels and goto *.
But: very gcc-specific. Also, need to do
asm ("ijmp" : : "z" (state))
instead of goto *state
	 */

	selectFlash();

	for (;;)
	{
		if (lphase == P_READCRC)
    82b0:	82 e0       	ldi	r24, 0x02	; 2
    82b2:	d8 16       	cp	r13, r24
    82b4:	e9 f4       	brne	.+58     	; 0x82f0
extern uint16_t crcTable[256] PROGMEM;  //!< this is defined in crc.c

static inline uint16_t crcByte(uint16_t oldCrc, uint8_t byte)
{
  uint8_t *magic = (uint8_t *)&crcTable[oldCrc >> 8 ^ byte];
    82b6:	ef 2d       	mov	r30, r15
    82b8:	ff 27       	eor	r31, r31
    82ba:	89 2f       	mov	r24, r25
    82bc:	99 27       	eor	r25, r25
    82be:	e8 27       	eor	r30, r24
    82c0:	f9 27       	eor	r31, r25
    82c2:	ee 0f       	add	r30, r30
    82c4:	ff 1f       	adc	r31, r31
    82c6:	ec 5c       	subi	r30, 0xCC	; 204
    82c8:	fc 4f       	sbci	r31, 0xFC	; 252

  return pgm_read_byte(magic) | ((uint8_t)oldCrc ^ pgm_read_byte(magic + 1)) << 8;
    82ca:	84 91       	lpm	r24, Z
    82cc:	28 2f       	mov	r18, r24
    82ce:	33 27       	eor	r19, r19
    82d0:	31 96       	adiw	r30, 0x01	; 1
    82d2:	84 91       	lpm	r24, Z
    82d4:	8e 25       	eor	r24, r14
    82d6:	99 27       	eor	r25, r25
    82d8:	f8 2e       	mov	r15, r24
    82da:	ee 24       	eor	r14, r14
    82dc:	e2 2a       	or	r14, r18
    82de:	f3 2a       	or	r15, r19
		{
			crc = crcByte(crc, in);

			--count;
    82e0:	01 50       	subi	r16, 0x01	; 1
    82e2:	10 40       	sbci	r17, 0x00	; 0
			if (!count)
    82e4:	39 f5       	brne	.+78     	; 0x8334
			{
				computedCrc = crc;
    82e6:	f0 92 56 0b 	sts	0x0B56, r15
    82ea:	e0 92 55 0b 	sts	0x0B55, r14
				break;
    82ee:	27 c0       	rjmp	.+78     	; 0x833e
			}
		}
		else if (lphase == P_SEND_CMD)
    82f0:	dd 20       	and	r13, r13
    82f2:	79 f4       	brne	.+30     	; 0x8312
		{
			out = *ptr++;
    82f4:	c9 90       	ld	r12, Y+
			count--;
    82f6:	01 50       	subi	r16, 0x01	; 1
    82f8:	10 40       	sbci	r17, 0x00	; 0
			if (!count)
    82fa:	e1 f4       	brne	.+56     	; 0x8334
			{
				lphase = cmdPhase;
    82fc:	d0 90 4a 0b 	lds	r13, 0x0B4A
				ptr = data;
    8300:	c0 91 4c 0b 	lds	r28, 0x0B4C
    8304:	d0 91 4d 0b 	lds	r29, 0x0B4D
				count = dataCount;
    8308:	00 91 53 0b 	lds	r16, 0x0B53
    830c:	10 91 54 0b 	lds	r17, 0x0B54
    8310:	11 c0       	rjmp	.+34     	; 0x8334
			}
		}
		else if (lphase == P_READ)
    8312:	81 e0       	ldi	r24, 0x01	; 1
    8314:	d8 16       	cp	r13, r24
    8316:	29 f4       	brne	.+10     	; 0x8322
		{
			*ptr++ = in;
    8318:	99 93       	st	Y+, r25
			--count;
    831a:	01 50       	subi	r16, 0x01	; 1
    831c:	10 40       	sbci	r17, 0x00	; 0
			if (!count)
    831e:	51 f4       	brne	.+20     	; 0x8334
				break;
    8320:	0e c0       	rjmp	.+28     	; 0x833e
		}
		else if (lphase == P_WRITE)
    8322:	83 e0       	ldi	r24, 0x03	; 3
    8324:	d8 16       	cp	r13, r24
    8326:	59 f4       	brne	.+22     	; 0x833e
		{
			if (!count)
    8328:	01 15       	cp	r16, r1
    832a:	11 05       	cpc	r17, r1
    832c:	41 f0       	breq	.+16     	; 0x833e
				break;

			out = *ptr++;
    832e:	c9 90       	ld	r12, Y+
			--count;
    8330:	01 50       	subi	r16, 0x01	; 1
    8332:	10 40       	sbci	r17, 0x00	; 0
		}
		else /* P_FILL, P_FLUSH, P_ERASE, P_COMPARE */
			break;

		in = FlashSPI_txByte(out);
    8334:	8c 2d       	mov	r24, r12
    8336:	0e 94 2e 40 	call	0x805c
    833a:	98 2f       	mov	r25, r24
    833c:	b9 cf       	rjmp	.-142    	; 0x82b0
    833e:	81 e0       	ldi	r24, 0x01	; 1
    8340:	80 93 47 0b 	sts	0x0B47, r24
DEF_IO_PIN( PINA7, A, PA7);
DEF_IO_PIN( PINA6, A, PA6);
DEF_IO_PIN( PINA5, A, PA5);
DEF_IO_PIN( PINA4, A, PA4);
DEF_IO_PIN( PINA3, A, PA3);
    8344:	db 9a       	sbi	0x1b, 3	; 27
    8346:	ee 24       	eor	r14, r14
    8348:	ff 24       	eor	r15, r15
    834a:	87 01       	movw	r16, r14
    834c:	20 e0       	ldi	r18, 0x00	; 0
    834e:	42 e8       	ldi	r20, 0x82	; 130
    8350:	65 e4       	ldi	r22, 0x45	; 69
    8352:	86 2f       	mov	r24, r22
    8354:	0e 94 50 18 	call	0x30a0
    8358:	df 91       	pop	r29
    835a:	cf 91       	pop	r28
    835c:	1f 91       	pop	r17
    835e:	0f 91       	pop	r16
    8360:	ff 90       	pop	r15
    8362:	ef 90       	pop	r14
    8364:	df 90       	pop	r13
    8366:	cf 90       	pop	r12
    8368:	08 95       	ret

0000836a <execCommand>:
	}

	requestDeselect();
}

static void checkBuffer(uint8_t buf) 
{                               
	cmdPhase = P_COMPARE;                                       
	checking = buf;                                             
	execCommand(true, OPN(buf, C_COMPARE_BUFFER), 0,            
			buffer[buf].page, 0);                                   
}                                                             

static void flushBuffer() 
{                                          
	cmdPhase = P_FLUSH;                                         
	execCommand(true, buffer[selected].erased ?                 
			OP(C_QFLUSH_BUFFER) :                                   
			OP(C_FLUSH_BUFFER), 0,                                  
			buffer[selected].page, 0);                              
}                                                  

static void flashCommandComplete() 
{
	if (waiting)
	{
		waiting = flashBusy = buffer[0].busy = buffer[1].busy = false;

		if (cmdPhase == P_COMPARE_CHECK)
		{
			if (compareOk)
				buffer[checking].unchecked = 0;
			else if (buffer[checking].unchecked < 2)
				buffer[checking].clean = false;
			else
			{
				broken = true; // write failed. refuse all further reqs
				requestDone(false);
				return;
			}
			handleRWRequest();
		}
		else
		{
			// Eager compare - this steals the current command
			if ((buffer[0].unchecked || buffer[1].unchecked) &&
					!(cmdPhase == P_COMPARE || cmdPhase == P_COMPARE_CHECK))
				checkBuffer(buffer[0].unchecked ? 0 : 1);
			else
				sendFlashCommand();
		}
		return;
	}
	switch (cmdPhase)
	{
		default: // shouldn't happen
			requestDone(false);
			break;

		case P_READ: case P_READCRC: case P_WRITE:
			requestDone(true);
			break;

		case P_FLUSH:
			flashBusy = true;
			buffer[selected].clean = buffer[selected].busy = true;
			buffer[selected].unchecked++;
			buffer[selected].erased = false;
			handleRWRequest();
			break;

		case P_COMPARE:
			cmdPhase = P_COMPARE_CHECK;
			flashBusy = true;
			buffer[checking].busy = true;
			// The 10us wait makes old mica motes (Atmega 103) happy, for
			// some mysterious reason (w/o this wait, the first compare
			// always fail, even though the compare after the rewrite
			// succeeds...)
			TOSH_uwait(10);
			requestFlashStatus();
			break;

		case P_FILL: // page load started                         
			flashBusy = true;                                           
			buffer[selected].page = reqPage;                            
			buffer[selected].clean = buffer[selected].busy = true;      
			buffer[selected].erased = false;                            
			handleRWRequest();                                          
			break;                                                      

		case P_ERASE:                                             
			flashBusy = true;                                           
			// The buffer contains garbage, but we don't care about the state
			// of bits on this page anyway (if we do, we'll perform a   
			// subsequent write)                                        
			buffer[selected].page = reqPage;                            
			buffer[selected].clean = true;                              
			buffer[selected].erased = true;                             
			requestDone(true);                                       
			break;                                                      
	}                                                         
}                                          

static bool FlashSelect_notifyHigh()
{                     
	if (deselectRequested)                                      
	{                                                         
		deselectRequested = false;                                  
		flashCommandComplete();                                     
	}                                                         
	return true;                                             
}                                                             

static void execCommand(bool wait, uint8_t reqCmd, uint8_t dontCare, 
		exflashpage_t page, exflashoffset_t offset)
{      
    836a:	0f 93       	push	r16
    836c:	1f 93       	push	r17
    836e:	96 2f       	mov	r25, r22
    8370:	e4 2f       	mov	r30, r20
    8372:	a9 01       	movw	r20, r18
	// page (2 bytes) and highest bit of offset                 
	cmd[0] = reqCmd;                                            
    8374:	90 93 4e 0b 	sts	0x0B4E, r25
	cmd[1] = page >> 7;                                         
    8378:	22 0f       	add	r18, r18
    837a:	23 2f       	mov	r18, r19
    837c:	22 1f       	adc	r18, r18
    837e:	33 0b       	sbc	r19, r19
    8380:	31 95       	neg	r19
    8382:	20 93 4f 0b 	sts	0x0B4F, r18
	cmd[2] = page << 1 | offset >> 8;                           
    8386:	94 2f       	mov	r25, r20
    8388:	99 0f       	add	r25, r25
    838a:	21 2f       	mov	r18, r17
    838c:	33 27       	eor	r19, r19
    838e:	92 2b       	or	r25, r18
    8390:	90 93 50 0b 	sts	0x0B50, r25
	cmd[3] = offset; // low-order 8 bits                        
    8394:	00 93 51 0b 	sts	0x0B51, r16
	cmdCount = 4 + dontCare;                                    
    8398:	ec 5f       	subi	r30, 0xFC	; 252
    839a:	e0 93 52 0b 	sts	0x0B52, r30

	if (wait && flashBusy)                                      
    839e:	88 23       	and	r24, r24
    83a0:	39 f0       	breq	.+14     	; 0x83b0
    83a2:	80 91 5f 0b 	lds	r24, 0x0B5F
    83a6:	88 23       	and	r24, r24
    83a8:	19 f0       	breq	.+6      	; 0x83b0
		requestFlashStatus();                                     
    83aa:	0e 94 12 41 	call	0x8224
    83ae:	02 c0       	rjmp	.+4      	; 0x83b4
	else                                                        
		sendFlashCommand();                                       
    83b0:	0e 94 43 41 	call	0x8286
    83b4:	1f 91       	pop	r17
    83b6:	0f 91       	pop	r16
    83b8:	08 95       	ret

000083ba <checkBuffer>:
    83ba:	0f 93       	push	r16
    83bc:	1f 93       	push	r17
    83be:	28 2f       	mov	r18, r24
    83c0:	87 e0       	ldi	r24, 0x07	; 7
    83c2:	80 93 4a 0b 	sts	0x0B4A, r24
    83c6:	20 93 5e 0b 	sts	0x0B5E, r18
    83ca:	82 2f       	mov	r24, r18
    83cc:	99 27       	eor	r25, r25
    83ce:	fc 01       	movw	r30, r24
    83d0:	ee 0f       	add	r30, r30
    83d2:	ff 1f       	adc	r31, r31
    83d4:	e8 0f       	add	r30, r24
    83d6:	f9 1f       	adc	r31, r25
    83d8:	e9 5a       	subi	r30, 0xA9	; 169
    83da:	f4 4f       	sbci	r31, 0xF4	; 244
    83dc:	22 23       	and	r18, r18
    83de:	11 f0       	breq	.+4      	; 0x83e4
    83e0:	60 e6       	ldi	r22, 0x60	; 96
    83e2:	01 c0       	rjmp	.+2      	; 0x83e6
    83e4:	61 e6       	ldi	r22, 0x61	; 97
    83e6:	00 e0       	ldi	r16, 0x00	; 0
    83e8:	10 e0       	ldi	r17, 0x00	; 0
    83ea:	20 81       	ld	r18, Z
    83ec:	31 81       	ldd	r19, Z+1	; 0x01
    83ee:	40 e0       	ldi	r20, 0x00	; 0
    83f0:	81 e0       	ldi	r24, 0x01	; 1
    83f2:	0e 94 b5 41 	call	0x836a
    83f6:	1f 91       	pop	r17
    83f8:	0f 91       	pop	r16
    83fa:	08 95       	ret

000083fc <flushBuffer>:
    83fc:	0f 93       	push	r16
    83fe:	1f 93       	push	r17
    8400:	84 e0       	ldi	r24, 0x04	; 4
    8402:	80 93 4a 0b 	sts	0x0B4A, r24
    8406:	40 91 5d 0b 	lds	r20, 0x0B5D
    840a:	24 2f       	mov	r18, r20
    840c:	33 27       	eor	r19, r19
    840e:	c9 01       	movw	r24, r18
    8410:	88 0f       	add	r24, r24
    8412:	99 1f       	adc	r25, r25
    8414:	82 0f       	add	r24, r18
    8416:	93 1f       	adc	r25, r19
    8418:	dc 01       	movw	r26, r24
    841a:	a9 5a       	subi	r26, 0xA9	; 169
    841c:	b4 4f       	sbci	r27, 0xF4	; 244
    841e:	fc 01       	movw	r30, r24
    8420:	e7 5a       	subi	r30, 0xA7	; 167
    8422:	f4 4f       	sbci	r31, 0xF4	; 244
    8424:	80 81       	ld	r24, Z
    8426:	82 ff       	sbrs	r24, 2
    8428:	06 c0       	rjmp	.+12     	; 0x8436
    842a:	44 23       	and	r20, r20
    842c:	11 f0       	breq	.+4      	; 0x8432
    842e:	68 e8       	ldi	r22, 0x88	; 136
    8430:	07 c0       	rjmp	.+14     	; 0x8440
    8432:	69 e8       	ldi	r22, 0x89	; 137
    8434:	05 c0       	rjmp	.+10     	; 0x8440
    8436:	44 23       	and	r20, r20
    8438:	11 f0       	breq	.+4      	; 0x843e
    843a:	63 e8       	ldi	r22, 0x83	; 131
    843c:	01 c0       	rjmp	.+2      	; 0x8440
    843e:	66 e8       	ldi	r22, 0x86	; 134
    8440:	00 e0       	ldi	r16, 0x00	; 0
    8442:	10 e0       	ldi	r17, 0x00	; 0
    8444:	2d 91       	ld	r18, X+
    8446:	3c 91       	ld	r19, X
    8448:	40 e0       	ldi	r20, 0x00	; 0
    844a:	81 e0       	ldi	r24, 0x01	; 1
    844c:	0e 94 b5 41 	call	0x836a
    8450:	1f 91       	pop	r17
    8452:	0f 91       	pop	r16
    8454:	08 95       	ret

00008456 <requestDone>:
}                                                             

static void execRWBuffer(uint8_t reqCmd, uint8_t dontCare, exflashoffset_t offset) 
{
	execCommand(buffer[selected].busy, reqCmd, dontCare, 0, offset);
}                                                             

static void handleRWRequest() 
{                                      
	if (reqPage == buffer[selected].page)  {                     
		switch (request)                                          
		{                                                           
			case R_ERASE:                                               
				switch (reqOffset)                                        
				{                                                       
					case EXFLASH_ERASE:                                  
						cmdPhase = P_ERASE;                                   
						execCommand(true, C_ERASE_PAGE, 0, reqPage, 0);       
						break;                                                
					case EXFLASH_PREVIOUSLY_ERASED:                      
						// We believe the user...                             
						buffer[selected].erased = true;                       
						/* Fallthrough */                                     
					case EXFLASH_DONT_ERASE:                             
						// The buffer contains garbage, but we don't care about the state   
						// of bits on this page anyway (if we do, we'll perform a 
						// subsequent write)                                  
						buffer[selected].clean = true;                        
						requestDone(true);                                 
						break;                                                
				}                                                       
				break;                                                    

			case R_SYNC: case R_SYNCALL:                                
				if (buffer[selected].clean && buffer[selected].unchecked) 
				{                                                       
					checkBuffer(selected);                                
					return;                                               
				}                                                       
				/* fall through */                                        
			case R_FLUSH: case R_FLUSHALL:                              
				if (!buffer[selected].clean) {
					flushBuffer();                                          
				} else if (request == R_FLUSH || request == R_SYNC) {
					requestDone(true);
				} else {                                                       
					// Check for more dirty pages                         
					uint8_t oreq = request;                               

					request = IDLE;                                       
					syncOrFlushAll(reqPid, oreq); 
				}                                                       
				break;                                                    

			case R_READ:                                                
				data = reqBuf;                                            
				dataCount = reqBytes;                                     
				cmdPhase = P_READ;                                        
				execRWBuffer(OP(C_READ_BUFFER), 2, reqOffset);            
				break;                                                    

			case R_READCRC:                                             
				dataCount = reqBytes;                                     
				cmdPhase = P_READCRC;                                     
				execRWBuffer(OP(C_READ_BUFFER), 2, 0);                    
				break;                                                    

			case R_WRITE:                                               
				data = reqBuf;                                            
				dataCount = reqBytes;                                     
				cmdPhase = P_WRITE;                                       
				buffer[selected].clean = false;                           
				buffer[selected].unchecked = 0;                           
				execRWBuffer(OP(C_WRITE_BUFFER), 0, reqOffset);           
				break;                                                    
		}                                                           
	} else if (!buffer[selected].clean) {                         
		flushBuffer();                                            
	} else if (buffer[selected].unchecked) {                     
		checkBuffer(selected);                                    
	} else {                                                         
		// just get the new page (except for erase)                 
		if (request == R_ERASE) { 
			buffer[selected].page = reqPage;                        
			handleRWRequest();                                      
		} else { 
			cmdPhase = P_FILL;                                      
			execCommand(true, OP(C_FILL_BUFFER), 0, reqPage, 0);    
		}                                                         
	}                                                         
}                                                             


static void requestDone(bool result)
{                           
    8456:	ef 92       	push	r14
    8458:	ff 92       	push	r15
    845a:	0f 93       	push	r16
    845c:	1f 93       	push	r17
    845e:	28 2f       	mov	r18, r24
	uint8_t orequest = request;                                 
    8460:	80 91 3e 0b 	lds	r24, 0x0B3E
	uint8_t msgtype;

	switch (orequest)                                           
    8464:	99 27       	eor	r25, r25
    8466:	83 30       	cpi	r24, 0x03	; 3
    8468:	91 05       	cpc	r25, r1
    846a:	e1 f0       	breq	.+56     	; 0x84a4
    846c:	84 30       	cpi	r24, 0x04	; 4
    846e:	91 05       	cpc	r25, r1
    8470:	34 f4       	brge	.+12     	; 0x847e
    8472:	81 30       	cpi	r24, 0x01	; 1
    8474:	91 05       	cpc	r25, r1
    8476:	61 f0       	breq	.+24     	; 0x8490
    8478:	02 97       	sbiw	r24, 0x02	; 2
    847a:	61 f0       	breq	.+24     	; 0x8494
    847c:	27 c0       	rjmp	.+78     	; 0x84cc
    847e:	85 30       	cpi	r24, 0x05	; 5
    8480:	91 05       	cpc	r25, r1
    8482:	91 f0       	breq	.+36     	; 0x84a8
    8484:	85 30       	cpi	r24, 0x05	; 5
    8486:	91 05       	cpc	r25, r1
    8488:	9c f0       	brlt	.+38     	; 0x84b0
    848a:	07 97       	sbiw	r24, 0x07	; 7
    848c:	79 f0       	breq	.+30     	; 0x84ac
    848e:	1e c0       	rjmp	.+60     	; 0x84cc
	{   
		case R_READ: msgtype = MSG_EXFLASH_READDONE; break;
    8490:	44 e8       	ldi	r20, 0x84	; 132
    8492:	0f c0       	rjmp	.+30     	; 0x84b2
		case R_READCRC: 
		{
			msgtype = MSG_EXFLASH_CRCDONE; 
    8494:	45 e8       	ldi	r20, 0x85	; 133
			post_short(reqPid, EXFLASH_PID, MSG_EXFLASH_CRCDONE, result, computedCrc, 0);
    8496:	ee 24       	eor	r14, r14
    8498:	ff 24       	eor	r15, r15
    849a:	00 91 55 0b 	lds	r16, 0x0B55
    849e:	10 91 56 0b 	lds	r17, 0x0B56
    84a2:	0a c0       	rjmp	.+20     	; 0x84b8
			request = IDLE;
			reqPid = NULL_PID;
			return;
		}
		case R_WRITE: msgtype = MSG_EXFLASH_WRITEDONE; break;
    84a4:	46 e8       	ldi	r20, 0x86	; 134
    84a6:	05 c0       	rjmp	.+10     	; 0x84b2
		case R_SYNC: msgtype = MSG_EXFLASH_SYNCDONE; break;
    84a8:	47 e8       	ldi	r20, 0x87	; 135
    84aa:	03 c0       	rjmp	.+6      	; 0x84b2
		case R_FLUSH: msgtype = MSG_EXFLASH_FLUSHDONE; break;
    84ac:	48 e8       	ldi	r20, 0x88	; 136
    84ae:	01 c0       	rjmp	.+2      	; 0x84b2
		case R_ERASE: msgtype = MSG_EXFLASH_ERASEDONE; break;
    84b0:	49 e8       	ldi	r20, 0x89	; 137
		default: return;
	}                                                         
	post_short(reqPid, EXFLASH_PID, msgtype, result, 0, 0);
    84b2:	ee 24       	eor	r14, r14
    84b4:	ff 24       	eor	r15, r15
    84b6:	87 01       	movw	r16, r14
    84b8:	65 e4       	ldi	r22, 0x45	; 69
    84ba:	80 91 60 0b 	lds	r24, 0x0B60
    84be:	0e 94 50 18 	call	0x30a0
	request = IDLE;
    84c2:	10 92 3e 0b 	sts	0x0B3E, r1
	reqPid = NULL_PID;
    84c6:	8f ef       	ldi	r24, 0xFF	; 255
    84c8:	80 93 60 0b 	sts	0x0B60, r24
    84cc:	1f 91       	pop	r17
    84ce:	0f 91       	pop	r16
    84d0:	ff 90       	pop	r15
    84d2:	ef 90       	pop	r14
    84d4:	08 95       	ret

000084d6 <execRWBuffer>:
    84d6:	0f 93       	push	r16
    84d8:	1f 93       	push	r17
    84da:	78 2f       	mov	r23, r24
    84dc:	80 91 5d 0b 	lds	r24, 0x0B5D
    84e0:	99 27       	eor	r25, r25
    84e2:	fc 01       	movw	r30, r24
    84e4:	ee 0f       	add	r30, r30
    84e6:	ff 1f       	adc	r31, r31
    84e8:	e8 0f       	add	r30, r24
    84ea:	f9 1f       	adc	r31, r25
    84ec:	e7 5a       	subi	r30, 0xA7	; 167
    84ee:	f4 4f       	sbci	r31, 0xF4	; 244
    84f0:	80 81       	ld	r24, Z
    84f2:	8a 01       	movw	r16, r20
    84f4:	20 e0       	ldi	r18, 0x00	; 0
    84f6:	30 e0       	ldi	r19, 0x00	; 0
    84f8:	46 2f       	mov	r20, r22
    84fa:	67 2f       	mov	r22, r23
    84fc:	81 70       	andi	r24, 0x01	; 1
    84fe:	0e 94 b5 41 	call	0x836a
    8502:	1f 91       	pop	r17
    8504:	0f 91       	pop	r16
    8506:	08 95       	ret

00008508 <syncOrFlushAll>:
}                                                             

static int8_t newRequest(sos_pid_t pid, 
		uint8_t req, exflashpage_t page,           
		exflashoffset_t offset,                        
		void *reqdata, exflashoffset_t n)
{            
	if (page >= EXFLASH_MAX_PAGES || offset >= EXFLASH_PAGE_SIZE ||     
			n > EXFLASH_PAGE_SIZE || offset + n > EXFLASH_PAGE_SIZE)
		return -EINVAL;                                              

	if (request != IDLE || reqPid != NULL_PID)  {                                       return -EBUSY;  
	}

	if (broken)  { 
		return -EIO; 
	}                                            

	reqPid = pid;
	request = req;                                              
	reqBuf = reqdata;                                           
	reqBytes = n;                                               
	reqPage = page;                                             
	reqOffset = offset;                                         

	if (page == buffer[0].page)                                 
		selected = 0;                                             
	else if (page == buffer[1].page)                            
		selected = 1;                                             
	else                                                        
		selected = !selected; // LRU with 2 buffers...            

	handleRWRequest();                                          

	return SOS_OK;                                             
}                                                         

static int8_t syncOrFlush(sos_pid_t pid, exflashpage_t page, uint8_t newReq)
{     
	if (request != IDLE || reqPid != NULL_PID) 
		return -EBUSY;                                              

	if (broken) {  
		return -EIO;                                             
	} else if (buffer[0].page == page)  
		selected = 0;                                             
	else if (buffer[1].page == page)                            
		selected = 1;                                             
	else {                                                         
		reqPid = pid;
		request = newReq;                                           
		requestDone(true);
		return SOS_OK; 
	}                                                         

	reqPid = pid;
	request = newReq;                                           
	buffer[selected].unchecked = 0;                             
	handleRWRequest();                                          

	return SOS_OK;                                             
}                                                             


static int8_t syncOrFlushAll(sos_pid_t pid, uint8_t newReq)
{                     
    8508:	28 2f       	mov	r18, r24
	if (request != IDLE)                                        
    850a:	80 91 3e 0b 	lds	r24, 0x0B3E
    850e:	88 23       	and	r24, r24
    8510:	19 f0       	breq	.+6      	; 0x8518
		return -EBUSY;                                              
    8512:	80 ef       	ldi	r24, 0xF0	; 240
    8514:	9f ef       	ldi	r25, 0xFF	; 255
    8516:	08 95       	ret

	if (broken) { 
    8518:	80 91 48 0b 	lds	r24, 0x0B48
    851c:	88 23       	and	r24, r24
    851e:	19 f0       	breq	.+6      	; 0x8526
		return -EIO;                                             
    8520:	8b ef       	ldi	r24, 0xFB	; 251
    8522:	9f ef       	ldi	r25, 0xFF	; 255
    8524:	08 95       	ret
	}                                                         
	else if (!buffer[0].clean)                                  
    8526:	80 91 59 0b 	lds	r24, 0x0B59
    852a:	98 2f       	mov	r25, r24
    852c:	92 70       	andi	r25, 0x02	; 2
    852e:	81 fd       	sbrc	r24, 1
    8530:	03 c0       	rjmp	.+6      	; 0x8538
		selected = 0;                                             
    8532:	90 93 5d 0b 	sts	0x0B5D, r25
    8536:	12 c0       	rjmp	.+36     	; 0x855c
	else if (!buffer[1].clean)                                  
    8538:	80 91 5c 0b 	lds	r24, 0x0B5C
    853c:	81 fd       	sbrc	r24, 1
    853e:	04 c0       	rjmp	.+8      	; 0x8548
		selected = 1;                                             
    8540:	81 e0       	ldi	r24, 0x01	; 1
    8542:	80 93 5d 0b 	sts	0x0B5D, r24
    8546:	0a c0       	rjmp	.+20     	; 0x855c
	else {  
		reqPid = pid;
    8548:	20 93 60 0b 	sts	0x0B60, r18
		request = newReq;                                           
    854c:	60 93 3e 0b 	sts	0x0B3E, r22
		requestDone(true);
    8550:	81 e0       	ldi	r24, 0x01	; 1
    8552:	0e 94 2b 42 	call	0x8456
		return SOS_OK;                                             
    8556:	80 e0       	ldi	r24, 0x00	; 0
    8558:	90 e0       	ldi	r25, 0x00	; 0
    855a:	08 95       	ret
	}                                                         

	reqPid = pid;
    855c:	20 93 60 0b 	sts	0x0B60, r18
	request = newReq;                                           
    8560:	60 93 3e 0b 	sts	0x0B3E, r22
	buffer[selected].unchecked = 0;                             
    8564:	80 91 5d 0b 	lds	r24, 0x0B5D
    8568:	99 27       	eor	r25, r25
    856a:	fc 01       	movw	r30, r24
    856c:	ee 0f       	add	r30, r30
    856e:	ff 1f       	adc	r31, r31
    8570:	e8 0f       	add	r30, r24
    8572:	f9 1f       	adc	r31, r25
    8574:	e7 5a       	subi	r30, 0xA7	; 167
    8576:	f4 4f       	sbci	r31, 0xF4	; 244
    8578:	80 81       	ld	r24, Z
    857a:	87 7e       	andi	r24, 0xE7	; 231
    857c:	80 83       	st	Z, r24
	handleRWRequest();                                          
    857e:	0e 94 c5 42 	call	0x858a

	return SOS_OK;                                             
    8582:	80 e0       	ldi	r24, 0x00	; 0
    8584:	90 e0       	ldi	r25, 0x00	; 0
}                                                             
    8586:	08 95       	ret
    8588:	08 95       	ret

0000858a <handleRWRequest>:
    858a:	0f 93       	push	r16
    858c:	1f 93       	push	r17
    858e:	40 91 5d 0b 	lds	r20, 0x0B5D
    8592:	84 2f       	mov	r24, r20
    8594:	99 27       	eor	r25, r25
    8596:	fc 01       	movw	r30, r24
    8598:	ee 0f       	add	r30, r30
    859a:	ff 1f       	adc	r31, r31
    859c:	e8 0f       	add	r30, r24
    859e:	f9 1f       	adc	r31, r25
    85a0:	df 01       	movw	r26, r30
    85a2:	a9 5a       	subi	r26, 0xA9	; 169
    85a4:	b4 4f       	sbci	r27, 0xF4	; 244
    85a6:	20 91 45 0b 	lds	r18, 0x0B45
    85aa:	30 91 46 0b 	lds	r19, 0x0B46
    85ae:	8d 91       	ld	r24, X+
    85b0:	9c 91       	ld	r25, X
    85b2:	11 97       	sbiw	r26, 0x01	; 1
    85b4:	28 17       	cp	r18, r24
    85b6:	39 07       	cpc	r19, r25
    85b8:	09 f0       	breq	.+2      	; 0x85bc
    85ba:	c0 c0       	rjmp	.+384    	; 0x873c
    85bc:	60 91 3e 0b 	lds	r22, 0x0B3E
    85c0:	86 2f       	mov	r24, r22
    85c2:	99 27       	eor	r25, r25
    85c4:	84 30       	cpi	r24, 0x04	; 4
    85c6:	91 05       	cpc	r25, r1
    85c8:	b1 f0       	breq	.+44     	; 0x85f6
    85ca:	85 30       	cpi	r24, 0x05	; 5
    85cc:	91 05       	cpc	r25, r1
    85ce:	64 f4       	brge	.+24     	; 0x85e8
    85d0:	82 30       	cpi	r24, 0x02	; 2
    85d2:	91 05       	cpc	r25, r1
    85d4:	09 f4       	brne	.+2      	; 0x85d8
    85d6:	79 c0       	rjmp	.+242    	; 0x86ca
    85d8:	83 30       	cpi	r24, 0x03	; 3
    85da:	91 05       	cpc	r25, r1
    85dc:	0c f0       	brlt	.+2      	; 0x85e0
    85de:	89 c0       	rjmp	.+274    	; 0x86f2
    85e0:	01 97       	sbiw	r24, 0x01	; 1
    85e2:	09 f4       	brne	.+2      	; 0x85e6
    85e4:	55 c0       	rjmp	.+170    	; 0x8690
    85e6:	d4 c0       	rjmp	.+424    	; 0x8790
    85e8:	87 30       	cpi	r24, 0x07	; 7
    85ea:	91 05       	cpc	r25, r1
    85ec:	5c f1       	brlt	.+86     	; 0x8644
    85ee:	09 97       	sbiw	r24, 0x09	; 9
    85f0:	0c f0       	brlt	.+2      	; 0x85f4
    85f2:	ce c0       	rjmp	.+412    	; 0x8790
    85f4:	32 c0       	rjmp	.+100    	; 0x865a
    85f6:	80 91 41 0b 	lds	r24, 0x0B41
    85fa:	90 91 42 0b 	lds	r25, 0x0B42
    85fe:	81 30       	cpi	r24, 0x01	; 1
    8600:	91 05       	cpc	r25, r1
    8602:	99 f0       	breq	.+38     	; 0x862a
    8604:	81 30       	cpi	r24, 0x01	; 1
    8606:	91 05       	cpc	r25, r1
    8608:	18 f0       	brcs	.+6      	; 0x8610
    860a:	02 97       	sbiw	r24, 0x02	; 2
    860c:	49 f0       	breq	.+18     	; 0x8620
    860e:	c0 c0       	rjmp	.+384    	; 0x8790
    8610:	86 e0       	ldi	r24, 0x06	; 6
    8612:	80 93 4a 0b 	sts	0x0B4A, r24
    8616:	00 e0       	ldi	r16, 0x00	; 0
    8618:	10 e0       	ldi	r17, 0x00	; 0
    861a:	40 e0       	ldi	r20, 0x00	; 0
    861c:	61 e8       	ldi	r22, 0x81	; 129
    861e:	b5 c0       	rjmp	.+362    	; 0x878a
    8620:	e7 5a       	subi	r30, 0xA7	; 167
    8622:	f4 4f       	sbci	r31, 0xF4	; 244
    8624:	80 81       	ld	r24, Z
    8626:	84 60       	ori	r24, 0x04	; 4
    8628:	80 83       	st	Z, r24
    862a:	84 2f       	mov	r24, r20
    862c:	99 27       	eor	r25, r25
    862e:	fc 01       	movw	r30, r24
    8630:	ee 0f       	add	r30, r30
    8632:	ff 1f       	adc	r31, r31
    8634:	e8 0f       	add	r30, r24
    8636:	f9 1f       	adc	r31, r25
    8638:	e7 5a       	subi	r30, 0xA7	; 167
    863a:	f4 4f       	sbci	r31, 0xF4	; 244
    863c:	80 81       	ld	r24, Z
    863e:	82 60       	ori	r24, 0x02	; 2
    8640:	80 83       	st	Z, r24
    8642:	1b c0       	rjmp	.+54     	; 0x867a
    8644:	e7 5a       	subi	r30, 0xA7	; 167
    8646:	f4 4f       	sbci	r31, 0xF4	; 244
    8648:	80 81       	ld	r24, Z
    864a:	81 ff       	sbrs	r24, 1
    864c:	06 c0       	rjmp	.+12     	; 0x865a
    864e:	86 95       	lsr	r24
    8650:	86 95       	lsr	r24
    8652:	86 95       	lsr	r24
    8654:	83 70       	andi	r24, 0x03	; 3
    8656:	09 f0       	breq	.+2      	; 0x865a
    8658:	7e c0       	rjmp	.+252    	; 0x8756
    865a:	84 2f       	mov	r24, r20
    865c:	99 27       	eor	r25, r25
    865e:	fc 01       	movw	r30, r24
    8660:	ee 0f       	add	r30, r30
    8662:	ff 1f       	adc	r31, r31
    8664:	e8 0f       	add	r30, r24
    8666:	f9 1f       	adc	r31, r25
    8668:	e7 5a       	subi	r30, 0xA7	; 167
    866a:	f4 4f       	sbci	r31, 0xF4	; 244
    866c:	80 81       	ld	r24, Z
    866e:	81 ff       	sbrs	r24, 1
    8670:	6a c0       	rjmp	.+212    	; 0x8746
    8672:	67 30       	cpi	r22, 0x07	; 7
    8674:	11 f0       	breq	.+4      	; 0x867a
    8676:	65 30       	cpi	r22, 0x05	; 5
    8678:	21 f4       	brne	.+8      	; 0x8682
    867a:	81 e0       	ldi	r24, 0x01	; 1
    867c:	0e 94 2b 42 	call	0x8456
    8680:	87 c0       	rjmp	.+270    	; 0x8790
    8682:	10 92 3e 0b 	sts	0x0B3E, r1
    8686:	80 91 60 0b 	lds	r24, 0x0B60
    868a:	0e 94 84 42 	call	0x8508
    868e:	80 c0       	rjmp	.+256    	; 0x8790
    8690:	80 91 3f 0b 	lds	r24, 0x0B3F
    8694:	90 91 40 0b 	lds	r25, 0x0B40
    8698:	90 93 4d 0b 	sts	0x0B4D, r25
    869c:	80 93 4c 0b 	sts	0x0B4C, r24
    86a0:	80 91 43 0b 	lds	r24, 0x0B43
    86a4:	90 91 44 0b 	lds	r25, 0x0B44
    86a8:	90 93 54 0b 	sts	0x0B54, r25
    86ac:	80 93 53 0b 	sts	0x0B53, r24
    86b0:	81 e0       	ldi	r24, 0x01	; 1
    86b2:	80 93 4a 0b 	sts	0x0B4A, r24
    86b6:	44 23       	and	r20, r20
    86b8:	11 f0       	breq	.+4      	; 0x86be
    86ba:	84 ed       	ldi	r24, 0xD4	; 212
    86bc:	01 c0       	rjmp	.+2      	; 0x86c0
    86be:	86 ed       	ldi	r24, 0xD6	; 214
    86c0:	40 91 41 0b 	lds	r20, 0x0B41
    86c4:	50 91 42 0b 	lds	r21, 0x0B42
    86c8:	12 c0       	rjmp	.+36     	; 0x86ee
    86ca:	80 91 43 0b 	lds	r24, 0x0B43
    86ce:	90 91 44 0b 	lds	r25, 0x0B44
    86d2:	90 93 54 0b 	sts	0x0B54, r25
    86d6:	80 93 53 0b 	sts	0x0B53, r24
    86da:	82 e0       	ldi	r24, 0x02	; 2
    86dc:	80 93 4a 0b 	sts	0x0B4A, r24
    86e0:	44 23       	and	r20, r20
    86e2:	11 f0       	breq	.+4      	; 0x86e8
    86e4:	84 ed       	ldi	r24, 0xD4	; 212
    86e6:	01 c0       	rjmp	.+2      	; 0x86ea
    86e8:	86 ed       	ldi	r24, 0xD6	; 214
    86ea:	40 e0       	ldi	r20, 0x00	; 0
    86ec:	50 e0       	ldi	r21, 0x00	; 0
    86ee:	62 e0       	ldi	r22, 0x02	; 2
    86f0:	22 c0       	rjmp	.+68     	; 0x8736
    86f2:	80 91 3f 0b 	lds	r24, 0x0B3F
    86f6:	90 91 40 0b 	lds	r25, 0x0B40
    86fa:	90 93 4d 0b 	sts	0x0B4D, r25
    86fe:	80 93 4c 0b 	sts	0x0B4C, r24
    8702:	80 91 43 0b 	lds	r24, 0x0B43
    8706:	90 91 44 0b 	lds	r25, 0x0B44
    870a:	90 93 54 0b 	sts	0x0B54, r25
    870e:	80 93 53 0b 	sts	0x0B53, r24
    8712:	83 e0       	ldi	r24, 0x03	; 3
    8714:	80 93 4a 0b 	sts	0x0B4A, r24
    8718:	e7 5a       	subi	r30, 0xA7	; 167
    871a:	f4 4f       	sbci	r31, 0xF4	; 244
    871c:	80 81       	ld	r24, Z
    871e:	85 7e       	andi	r24, 0xE5	; 229
    8720:	80 83       	st	Z, r24
    8722:	44 23       	and	r20, r20
    8724:	11 f0       	breq	.+4      	; 0x872a
    8726:	84 e8       	ldi	r24, 0x84	; 132
    8728:	01 c0       	rjmp	.+2      	; 0x872c
    872a:	87 e8       	ldi	r24, 0x87	; 135
    872c:	40 91 41 0b 	lds	r20, 0x0B41
    8730:	50 91 42 0b 	lds	r21, 0x0B42
    8734:	60 e0       	ldi	r22, 0x00	; 0
    8736:	0e 94 6b 42 	call	0x84d6
    873a:	2a c0       	rjmp	.+84     	; 0x8790
    873c:	e7 5a       	subi	r30, 0xA7	; 167
    873e:	f4 4f       	sbci	r31, 0xF4	; 244
    8740:	80 81       	ld	r24, Z
    8742:	81 fd       	sbrc	r24, 1
    8744:	03 c0       	rjmp	.+6      	; 0x874c
    8746:	0e 94 fe 41 	call	0x83fc
    874a:	22 c0       	rjmp	.+68     	; 0x8790
    874c:	86 95       	lsr	r24
    874e:	86 95       	lsr	r24
    8750:	86 95       	lsr	r24
    8752:	83 70       	andi	r24, 0x03	; 3
    8754:	21 f0       	breq	.+8      	; 0x875e
    8756:	84 2f       	mov	r24, r20
    8758:	0e 94 dd 41 	call	0x83ba
    875c:	19 c0       	rjmp	.+50     	; 0x8790
    875e:	80 91 3e 0b 	lds	r24, 0x0B3E
    8762:	84 30       	cpi	r24, 0x04	; 4
    8764:	19 f4       	brne	.+6      	; 0x876c
    8766:	2d 93       	st	X+, r18
    8768:	3c 93       	st	X, r19
    876a:	11 cf       	rjmp	.-478    	; 0x858e
    876c:	85 e0       	ldi	r24, 0x05	; 5
    876e:	80 93 4a 0b 	sts	0x0B4A, r24
    8772:	44 23       	and	r20, r20
    8774:	11 f0       	breq	.+4      	; 0x877a
    8776:	63 e5       	ldi	r22, 0x53	; 83
    8778:	01 c0       	rjmp	.+2      	; 0x877c
    877a:	65 e5       	ldi	r22, 0x55	; 85
    877c:	00 e0       	ldi	r16, 0x00	; 0
    877e:	10 e0       	ldi	r17, 0x00	; 0
    8780:	20 91 45 0b 	lds	r18, 0x0B45
    8784:	30 91 46 0b 	lds	r19, 0x0B46
    8788:	40 e0       	ldi	r20, 0x00	; 0
    878a:	81 e0       	ldi	r24, 0x01	; 1
    878c:	0e 94 b5 41 	call	0x836a
    8790:	1f 91       	pop	r17
    8792:	0f 91       	pop	r16
    8794:	08 95       	ret

00008796 <exflash_handler>:
    8796:	fb 01       	movw	r30, r22
    8798:	86 81       	ldd	r24, Z+6	; 0x06
    879a:	99 27       	eor	r25, r25
    879c:	82 38       	cpi	r24, 0x82	; 130
    879e:	91 05       	cpc	r25, r1
    87a0:	29 f0       	breq	.+10     	; 0x87ac
    87a2:	83 38       	cpi	r24, 0x83	; 131
    87a4:	91 05       	cpc	r25, r1
    87a6:	09 f4       	brne	.+2      	; 0x87aa
    87a8:	f4 c0       	rjmp	.+488    	; 0x8992
    87aa:	f5 c0       	rjmp	.+490    	; 0x8996
    87ac:	80 91 47 0b 	lds	r24, 0x0B47
    87b0:	88 23       	and	r24, r24
    87b2:	09 f4       	brne	.+2      	; 0x87b6
    87b4:	f0 c0       	rjmp	.+480    	; 0x8996
    87b6:	10 92 47 0b 	sts	0x0B47, r1
    87ba:	80 91 4b 0b 	lds	r24, 0x0B4B
    87be:	20 91 4a 0b 	lds	r18, 0x0B4A
    87c2:	88 23       	and	r24, r24
    87c4:	09 f4       	brne	.+2      	; 0x87c8
    87c6:	4b c0       	rjmp	.+150    	; 0x885e
    87c8:	90 91 5c 0b 	lds	r25, 0x0B5C
    87cc:	89 2f       	mov	r24, r25
    87ce:	8e 7f       	andi	r24, 0xFE	; 254
    87d0:	80 93 5c 0b 	sts	0x0B5C, r24
    87d4:	30 91 59 0b 	lds	r19, 0x0B59
    87d8:	83 2f       	mov	r24, r19
    87da:	8e 7f       	andi	r24, 0xFE	; 254
    87dc:	80 93 59 0b 	sts	0x0B59, r24
    87e0:	10 92 5f 0b 	sts	0x0B5F, r1
    87e4:	10 92 4b 0b 	sts	0x0B4B, r1
    87e8:	28 30       	cpi	r18, 0x08	; 8
    87ea:	41 f5       	brne	.+80     	; 0x883c
    87ec:	20 91 49 0b 	lds	r18, 0x0B49
    87f0:	80 91 5e 0b 	lds	r24, 0x0B5E
    87f4:	22 23       	and	r18, r18
    87f6:	59 f0       	breq	.+22     	; 0x880e
    87f8:	99 27       	eor	r25, r25
    87fa:	fc 01       	movw	r30, r24
    87fc:	ee 0f       	add	r30, r30
    87fe:	ff 1f       	adc	r31, r31
    8800:	e8 0f       	add	r30, r24
    8802:	f9 1f       	adc	r31, r25
    8804:	e7 5a       	subi	r30, 0xA7	; 167
    8806:	f4 4f       	sbci	r31, 0xF4	; 244
    8808:	80 81       	ld	r24, Z
    880a:	87 7e       	andi	r24, 0xE7	; 231
    880c:	9b c0       	rjmp	.+310    	; 0x8944
    880e:	99 27       	eor	r25, r25
    8810:	fc 01       	movw	r30, r24
    8812:	ee 0f       	add	r30, r30
    8814:	ff 1f       	adc	r31, r31
    8816:	e8 0f       	add	r30, r24
    8818:	f9 1f       	adc	r31, r25
    881a:	e7 5a       	subi	r30, 0xA7	; 167
    881c:	f4 4f       	sbci	r31, 0xF4	; 244
    881e:	90 81       	ld	r25, Z
    8820:	89 2f       	mov	r24, r25
    8822:	86 95       	lsr	r24
    8824:	86 95       	lsr	r24
    8826:	86 95       	lsr	r24
    8828:	83 70       	andi	r24, 0x03	; 3
    882a:	82 30       	cpi	r24, 0x02	; 2
    882c:	10 f4       	brcc	.+4      	; 0x8832
    882e:	9d 7f       	andi	r25, 0xFD	; 253
    8830:	4a c0       	rjmp	.+148    	; 0x88c6
    8832:	81 e0       	ldi	r24, 0x01	; 1
    8834:	80 93 48 0b 	sts	0x0B48, r24
    8838:	82 2f       	mov	r24, r18
    883a:	a8 c0       	rjmp	.+336    	; 0x898c
    883c:	38 71       	andi	r19, 0x18	; 24
    883e:	11 f4       	brne	.+4      	; 0x8844
    8840:	98 71       	andi	r25, 0x18	; 24
    8842:	51 f0       	breq	.+20     	; 0x8858
    8844:	27 50       	subi	r18, 0x07	; 7
    8846:	22 30       	cpi	r18, 0x02	; 2
    8848:	38 f0       	brcs	.+14     	; 0x8858
    884a:	80 e0       	ldi	r24, 0x00	; 0
    884c:	33 23       	and	r19, r19
    884e:	09 f4       	brne	.+2      	; 0x8852
    8850:	81 e0       	ldi	r24, 0x01	; 1
    8852:	0e 94 dd 41 	call	0x83ba
    8856:	9f c0       	rjmp	.+318    	; 0x8996
    8858:	0e 94 43 41 	call	0x8286
    885c:	9c c0       	rjmp	.+312    	; 0x8996
    885e:	82 2f       	mov	r24, r18
    8860:	99 27       	eor	r25, r25
    8862:	84 30       	cpi	r24, 0x04	; 4
    8864:	91 05       	cpc	r25, r1
    8866:	a1 f0       	breq	.+40     	; 0x8890
    8868:	85 30       	cpi	r24, 0x05	; 5
    886a:	91 05       	cpc	r25, r1
    886c:	1c f4       	brge	.+6      	; 0x8874
    886e:	01 97       	sbiw	r24, 0x01	; 1
    8870:	5c f0       	brlt	.+22     	; 0x8888
    8872:	0c c0       	rjmp	.+24     	; 0x888c
    8874:	86 30       	cpi	r24, 0x06	; 6
    8876:	91 05       	cpc	r25, r1
    8878:	09 f4       	brne	.+2      	; 0x887c
    887a:	68 c0       	rjmp	.+208    	; 0x894c
    887c:	86 30       	cpi	r24, 0x06	; 6
    887e:	91 05       	cpc	r25, r1
    8880:	0c f4       	brge	.+2      	; 0x8884
    8882:	45 c0       	rjmp	.+138    	; 0x890e
    8884:	07 97       	sbiw	r24, 0x07	; 7
    8886:	09 f1       	breq	.+66     	; 0x88ca
    8888:	80 e0       	ldi	r24, 0x00	; 0
    888a:	80 c0       	rjmp	.+256    	; 0x898c
    888c:	81 e0       	ldi	r24, 0x01	; 1
    888e:	7e c0       	rjmp	.+252    	; 0x898c
    8890:	81 e0       	ldi	r24, 0x01	; 1
    8892:	80 93 5f 0b 	sts	0x0B5F, r24
    8896:	80 91 5d 0b 	lds	r24, 0x0B5D
    889a:	99 27       	eor	r25, r25
    889c:	fc 01       	movw	r30, r24
    889e:	ee 0f       	add	r30, r30
    88a0:	ff 1f       	adc	r31, r31
    88a2:	e8 0f       	add	r30, r24
    88a4:	f9 1f       	adc	r31, r25
    88a6:	e7 5a       	subi	r30, 0xA7	; 167
    88a8:	f4 4f       	sbci	r31, 0xF4	; 244
    88aa:	90 81       	ld	r25, Z
    88ac:	93 60       	ori	r25, 0x03	; 3
    88ae:	89 2f       	mov	r24, r25
    88b0:	86 95       	lsr	r24
    88b2:	86 95       	lsr	r24
    88b4:	86 95       	lsr	r24
    88b6:	83 70       	andi	r24, 0x03	; 3
    88b8:	8f 5f       	subi	r24, 0xFF	; 255
    88ba:	83 70       	andi	r24, 0x03	; 3
    88bc:	88 0f       	add	r24, r24
    88be:	88 0f       	add	r24, r24
    88c0:	88 0f       	add	r24, r24
    88c2:	93 7e       	andi	r25, 0xE3	; 227
    88c4:	98 2b       	or	r25, r24
    88c6:	90 83       	st	Z, r25
    88c8:	3e c0       	rjmp	.+124    	; 0x8946
    88ca:	88 e0       	ldi	r24, 0x08	; 8
    88cc:	80 93 4a 0b 	sts	0x0B4A, r24
    88d0:	81 e0       	ldi	r24, 0x01	; 1
    88d2:	80 93 5f 0b 	sts	0x0B5F, r24
    88d6:	80 91 5e 0b 	lds	r24, 0x0B5E
    88da:	99 27       	eor	r25, r25
    88dc:	fc 01       	movw	r30, r24
    88de:	ee 0f       	add	r30, r30
    88e0:	ff 1f       	adc	r31, r31
    88e2:	e8 0f       	add	r30, r24
    88e4:	f9 1f       	adc	r31, r25
    88e6:	e7 5a       	subi	r30, 0xA7	; 167
    88e8:	f4 4f       	sbci	r31, 0xF4	; 244
    88ea:	80 81       	ld	r24, Z
    88ec:	81 60       	ori	r24, 0x01	; 1
    88ee:	80 83       	st	Z, r24
    88f0:	8a e0       	ldi	r24, 0x0A	; 10
    88f2:	90 e0       	ldi	r25, 0x00	; 0
	...
    8904:	01 97       	sbiw	r24, 0x01	; 1
    8906:	b1 f7       	brne	.-20     	; 0x88f4
    8908:	0e 94 12 41 	call	0x8224
    890c:	44 c0       	rjmp	.+136    	; 0x8996
    890e:	81 e0       	ldi	r24, 0x01	; 1
    8910:	80 93 5f 0b 	sts	0x0B5F, r24
    8914:	80 91 5d 0b 	lds	r24, 0x0B5D
    8918:	28 2f       	mov	r18, r24
    891a:	33 27       	eor	r19, r19
    891c:	c9 01       	movw	r24, r18
    891e:	88 0f       	add	r24, r24
    8920:	99 1f       	adc	r25, r25
    8922:	82 0f       	add	r24, r18
    8924:	93 1f       	adc	r25, r19
    8926:	fc 01       	movw	r30, r24
    8928:	e9 5a       	subi	r30, 0xA9	; 169
    892a:	f4 4f       	sbci	r31, 0xF4	; 244
    892c:	20 91 45 0b 	lds	r18, 0x0B45
    8930:	30 91 46 0b 	lds	r19, 0x0B46
    8934:	20 83       	st	Z, r18
    8936:	31 83       	std	Z+1, r19	; 0x01
    8938:	fc 01       	movw	r30, r24
    893a:	e7 5a       	subi	r30, 0xA7	; 167
    893c:	f4 4f       	sbci	r31, 0xF4	; 244
    893e:	80 81       	ld	r24, Z
    8940:	83 60       	ori	r24, 0x03	; 3
    8942:	8b 7f       	andi	r24, 0xFB	; 251
    8944:	80 83       	st	Z, r24
    8946:	0e 94 c5 42 	call	0x858a
    894a:	25 c0       	rjmp	.+74     	; 0x8996
    894c:	41 e0       	ldi	r20, 0x01	; 1
    894e:	40 93 5f 0b 	sts	0x0B5F, r20
    8952:	80 91 5d 0b 	lds	r24, 0x0B5D
    8956:	28 2f       	mov	r18, r24
    8958:	33 27       	eor	r19, r19
    895a:	c9 01       	movw	r24, r18
    895c:	04 2e       	mov	r0, r20
    895e:	02 c0       	rjmp	.+4      	; 0x8964
    8960:	88 0f       	add	r24, r24
    8962:	99 1f       	adc	r25, r25
    8964:	0a 94       	dec	r0
    8966:	e2 f7       	brpl	.-8      	; 0x8960
    8968:	82 0f       	add	r24, r18
    896a:	93 1f       	adc	r25, r19
    896c:	fc 01       	movw	r30, r24
    896e:	e9 5a       	subi	r30, 0xA9	; 169
    8970:	f4 4f       	sbci	r31, 0xF4	; 244
    8972:	20 91 45 0b 	lds	r18, 0x0B45
    8976:	30 91 46 0b 	lds	r19, 0x0B46
    897a:	20 83       	st	Z, r18
    897c:	31 83       	std	Z+1, r19	; 0x01
    897e:	fc 01       	movw	r30, r24
    8980:	e7 5a       	subi	r30, 0xA7	; 167
    8982:	f4 4f       	sbci	r31, 0xF4	; 244
    8984:	80 81       	ld	r24, Z
    8986:	86 60       	ori	r24, 0x06	; 6
    8988:	80 83       	st	Z, r24
    898a:	84 2f       	mov	r24, r20
    898c:	0e 94 2b 42 	call	0x8456
    8990:	02 c0       	rjmp	.+4      	; 0x8996
    8992:	0e 94 e6 40 	call	0x81cc
    8996:	80 e0       	ldi	r24, 0x00	; 0
    8998:	90 e0       	ldi	r25, 0x00	; 0
    899a:	08 95       	ret

0000899c <newRequest>:
    899c:	ef 92       	push	r14
    899e:	ff 92       	push	r15
    89a0:	0f 93       	push	r16
    89a2:	1f 93       	push	r17
    89a4:	e8 2f       	mov	r30, r24
    89a6:	78 e0       	ldi	r23, 0x08	; 8
    89a8:	40 30       	cpi	r20, 0x00	; 0
    89aa:	57 07       	cpc	r21, r23
    89ac:	78 f4       	brcc	.+30     	; 0x89cc
    89ae:	81 e0       	ldi	r24, 0x01	; 1
    89b0:	28 30       	cpi	r18, 0x08	; 8
    89b2:	38 07       	cpc	r19, r24
    89b4:	58 f4       	brcc	.+22     	; 0x89cc
    89b6:	79 e0       	ldi	r23, 0x09	; 9
    89b8:	e7 16       	cp	r14, r23
    89ba:	71 e0       	ldi	r23, 0x01	; 1
    89bc:	f7 06       	cpc	r15, r23
    89be:	30 f4       	brcc	.+12     	; 0x89cc
    89c0:	c9 01       	movw	r24, r18
    89c2:	8e 0d       	add	r24, r14
    89c4:	9f 1d       	adc	r25, r15
    89c6:	89 50       	subi	r24, 0x09	; 9
    89c8:	91 40       	sbci	r25, 0x01	; 1
    89ca:	18 f0       	brcs	.+6      	; 0x89d2
    89cc:	8a ee       	ldi	r24, 0xEA	; 234
    89ce:	9f ef       	ldi	r25, 0xFF	; 255
    89d0:	47 c0       	rjmp	.+142    	; 0x8a60
    89d2:	80 91 3e 0b 	lds	r24, 0x0B3E
    89d6:	88 23       	and	r24, r24
    89d8:	21 f4       	brne	.+8      	; 0x89e2
    89da:	80 91 60 0b 	lds	r24, 0x0B60
    89de:	8f 3f       	cpi	r24, 0xFF	; 255
    89e0:	19 f0       	breq	.+6      	; 0x89e8
    89e2:	80 ef       	ldi	r24, 0xF0	; 240
    89e4:	9f ef       	ldi	r25, 0xFF	; 255
    89e6:	3c c0       	rjmp	.+120    	; 0x8a60
    89e8:	70 91 48 0b 	lds	r23, 0x0B48
    89ec:	77 23       	and	r23, r23
    89ee:	19 f0       	breq	.+6      	; 0x89f6
    89f0:	8b ef       	ldi	r24, 0xFB	; 251
    89f2:	9f ef       	ldi	r25, 0xFF	; 255
    89f4:	35 c0       	rjmp	.+106    	; 0x8a60
    89f6:	e0 93 60 0b 	sts	0x0B60, r30
    89fa:	60 93 3e 0b 	sts	0x0B3E, r22
    89fe:	10 93 40 0b 	sts	0x0B40, r17
    8a02:	00 93 3f 0b 	sts	0x0B3F, r16
    8a06:	f0 92 44 0b 	sts	0x0B44, r15
    8a0a:	e0 92 43 0b 	sts	0x0B43, r14
    8a0e:	50 93 46 0b 	sts	0x0B46, r21
    8a12:	40 93 45 0b 	sts	0x0B45, r20
    8a16:	30 93 42 0b 	sts	0x0B42, r19
    8a1a:	20 93 41 0b 	sts	0x0B41, r18
    8a1e:	80 91 57 0b 	lds	r24, 0x0B57
    8a22:	90 91 58 0b 	lds	r25, 0x0B58
    8a26:	48 17       	cp	r20, r24
    8a28:	59 07       	cpc	r21, r25
    8a2a:	19 f4       	brne	.+6      	; 0x8a32
    8a2c:	70 93 5d 0b 	sts	0x0B5D, r23
    8a30:	13 c0       	rjmp	.+38     	; 0x8a58
    8a32:	80 91 5a 0b 	lds	r24, 0x0B5A
    8a36:	90 91 5b 0b 	lds	r25, 0x0B5B
    8a3a:	48 17       	cp	r20, r24
    8a3c:	59 07       	cpc	r21, r25
    8a3e:	21 f4       	brne	.+8      	; 0x8a48
    8a40:	81 e0       	ldi	r24, 0x01	; 1
    8a42:	80 93 5d 0b 	sts	0x0B5D, r24
    8a46:	08 c0       	rjmp	.+16     	; 0x8a58
    8a48:	97 2f       	mov	r25, r23
    8a4a:	80 91 5d 0b 	lds	r24, 0x0B5D
    8a4e:	88 23       	and	r24, r24
    8a50:	09 f4       	brne	.+2      	; 0x8a54
    8a52:	91 e0       	ldi	r25, 0x01	; 1
    8a54:	90 93 5d 0b 	sts	0x0B5D, r25
    8a58:	0e 94 c5 42 	call	0x858a
    8a5c:	80 e0       	ldi	r24, 0x00	; 0
    8a5e:	90 e0       	ldi	r25, 0x00	; 0
    8a60:	1f 91       	pop	r17
    8a62:	0f 91       	pop	r16
    8a64:	ff 90       	pop	r15
    8a66:	ef 90       	pop	r14
    8a68:	08 95       	ret

00008a6a <syncOrFlush>:
    8a6a:	38 2f       	mov	r19, r24
    8a6c:	80 91 3e 0b 	lds	r24, 0x0B3E
    8a70:	88 23       	and	r24, r24
    8a72:	21 f4       	brne	.+8      	; 0x8a7c
    8a74:	80 91 60 0b 	lds	r24, 0x0B60
    8a78:	8f 3f       	cpi	r24, 0xFF	; 255
    8a7a:	19 f0       	breq	.+6      	; 0x8a82
    8a7c:	80 ef       	ldi	r24, 0xF0	; 240
    8a7e:	9f ef       	ldi	r25, 0xFF	; 255
    8a80:	08 95       	ret
    8a82:	20 91 48 0b 	lds	r18, 0x0B48
    8a86:	22 23       	and	r18, r18
    8a88:	19 f0       	breq	.+6      	; 0x8a90
    8a8a:	8b ef       	ldi	r24, 0xFB	; 251
    8a8c:	9f ef       	ldi	r25, 0xFF	; 255
    8a8e:	08 95       	ret
    8a90:	80 91 57 0b 	lds	r24, 0x0B57
    8a94:	90 91 58 0b 	lds	r25, 0x0B58
    8a98:	86 17       	cp	r24, r22
    8a9a:	97 07       	cpc	r25, r23
    8a9c:	19 f4       	brne	.+6      	; 0x8aa4
    8a9e:	20 93 5d 0b 	sts	0x0B5D, r18
    8aa2:	15 c0       	rjmp	.+42     	; 0x8ace
    8aa4:	80 91 5a 0b 	lds	r24, 0x0B5A
    8aa8:	90 91 5b 0b 	lds	r25, 0x0B5B
    8aac:	86 17       	cp	r24, r22
    8aae:	97 07       	cpc	r25, r23
    8ab0:	21 f4       	brne	.+8      	; 0x8aba
    8ab2:	81 e0       	ldi	r24, 0x01	; 1
    8ab4:	80 93 5d 0b 	sts	0x0B5D, r24
    8ab8:	0a c0       	rjmp	.+20     	; 0x8ace
    8aba:	30 93 60 0b 	sts	0x0B60, r19
    8abe:	40 93 3e 0b 	sts	0x0B3E, r20
    8ac2:	81 e0       	ldi	r24, 0x01	; 1
    8ac4:	0e 94 2b 42 	call	0x8456
    8ac8:	80 e0       	ldi	r24, 0x00	; 0
    8aca:	90 e0       	ldi	r25, 0x00	; 0
    8acc:	08 95       	ret
    8ace:	30 93 60 0b 	sts	0x0B60, r19
    8ad2:	40 93 3e 0b 	sts	0x0B3E, r20
    8ad6:	80 91 5d 0b 	lds	r24, 0x0B5D
    8ada:	99 27       	eor	r25, r25
    8adc:	fc 01       	movw	r30, r24
    8ade:	ee 0f       	add	r30, r30
    8ae0:	ff 1f       	adc	r31, r31
    8ae2:	e8 0f       	add	r30, r24
    8ae4:	f9 1f       	adc	r31, r25
    8ae6:	e7 5a       	subi	r30, 0xA7	; 167
    8ae8:	f4 4f       	sbci	r31, 0xF4	; 244
    8aea:	80 81       	ld	r24, Z
    8aec:	87 7e       	andi	r24, 0xE7	; 231
    8aee:	80 83       	st	Z, r24
    8af0:	0e 94 c5 42 	call	0x858a
    8af4:	80 e0       	ldi	r24, 0x00	; 0
    8af6:	90 e0       	ldi	r25, 0x00	; 0
    8af8:	08 95       	ret
    8afa:	08 95       	ret

00008afc <ker_exflash_read>:



/*---------------------------------------------------------------------*/
/* Function Definitions (External)                                     */
/*---------------------------------------------------------------------*/

int8_t ker_exflash_read(sos_pid_t pid, 
		exflashpage_t page, exflashoffset_t offset,
		void *reqdata, exflashoffset_t n)
{       
    8afc:	ef 92       	push	r14
    8afe:	ff 92       	push	r15
    8b00:	0f 93       	push	r16
    8b02:	1f 93       	push	r17
    8b04:	fb 01       	movw	r30, r22
    8b06:	ba 01       	movw	r22, r20
    8b08:	a9 01       	movw	r20, r18
	return newRequest(pid, R_READ, page, offset, reqdata, n);        
    8b0a:	78 01       	movw	r14, r16
    8b0c:	8a 01       	movw	r16, r20
    8b0e:	9b 01       	movw	r18, r22
    8b10:	af 01       	movw	r20, r30
    8b12:	61 e0       	ldi	r22, 0x01	; 1
    8b14:	0e 94 ce 44 	call	0x899c
}                                                             
    8b18:	99 27       	eor	r25, r25
    8b1a:	87 fd       	sbrc	r24, 7
    8b1c:	90 95       	com	r25
    8b1e:	1f 91       	pop	r17
    8b20:	0f 91       	pop	r16
    8b22:	ff 90       	pop	r15
    8b24:	ef 90       	pop	r14
    8b26:	08 95       	ret

00008b28 <ker_exflash_computeCrc>:


int8_t ker_exflash_computeCrc(sos_pid_t pid, 
		exflashpage_t page,     
		exflashoffset_t offset,                 
		exflashoffset_t n) 
{                    
    8b28:	ef 92       	push	r14
    8b2a:	ff 92       	push	r15
    8b2c:	0f 93       	push	r16
    8b2e:	1f 93       	push	r17
    8b30:	79 01       	movw	r14, r18
	if (n == 0) {  
    8b32:	21 15       	cp	r18, r1
    8b34:	31 05       	cpc	r19, r1
    8b36:	69 f4       	brne	.+26     	; 0x8b52
		reqPid = pid;
    8b38:	80 93 60 0b 	sts	0x0B60, r24
		request = R_READCRC;                                        
    8b3c:	82 e0       	ldi	r24, 0x02	; 2
    8b3e:	80 93 3e 0b 	sts	0x0B3E, r24
		computedCrc = 0;                                            
    8b42:	30 93 56 0b 	sts	0x0B56, r19
    8b46:	20 93 55 0b 	sts	0x0B55, r18
		requestDone(true);
    8b4a:	81 e0       	ldi	r24, 0x01	; 1
    8b4c:	0e 94 2b 42 	call	0x8456
		return SOS_OK;                                             
    8b50:	0b c0       	rjmp	.+22     	; 0x8b68
	}                                                         
	else                                                        
		return newRequest(pid, R_READCRC, page, offset, NULL, n);      
    8b52:	00 e0       	ldi	r16, 0x00	; 0
    8b54:	10 e0       	ldi	r17, 0x00	; 0
    8b56:	9a 01       	movw	r18, r20
    8b58:	ab 01       	movw	r20, r22
    8b5a:	62 e0       	ldi	r22, 0x02	; 2
    8b5c:	0e 94 ce 44 	call	0x899c
    8b60:	e8 2e       	mov	r14, r24
    8b62:	ff 24       	eor	r15, r15
    8b64:	e7 fc       	sbrc	r14, 7
    8b66:	f0 94       	com	r15
}                                                             
    8b68:	c7 01       	movw	r24, r14
    8b6a:	1f 91       	pop	r17
    8b6c:	0f 91       	pop	r16
    8b6e:	ff 90       	pop	r15
    8b70:	ef 90       	pop	r14
    8b72:	08 95       	ret

00008b74 <ker_exflash_write>:

int8_t ker_exflash_write(sos_pid_t pid, 
		exflashpage_t page, exflashoffset_t offset,
		void *reqdata, exflashoffset_t n)
{      
    8b74:	ef 92       	push	r14
    8b76:	ff 92       	push	r15
    8b78:	0f 93       	push	r16
    8b7a:	1f 93       	push	r17
    8b7c:	fb 01       	movw	r30, r22
    8b7e:	ba 01       	movw	r22, r20
    8b80:	a9 01       	movw	r20, r18
	return newRequest(pid, R_WRITE, page, offset, reqdata, n);       
    8b82:	78 01       	movw	r14, r16
    8b84:	8a 01       	movw	r16, r20
    8b86:	9b 01       	movw	r18, r22
    8b88:	af 01       	movw	r20, r30
    8b8a:	63 e0       	ldi	r22, 0x03	; 3
    8b8c:	0e 94 ce 44 	call	0x899c
}                                                             
    8b90:	99 27       	eor	r25, r25
    8b92:	87 fd       	sbrc	r24, 7
    8b94:	90 95       	com	r25
    8b96:	1f 91       	pop	r17
    8b98:	0f 91       	pop	r16
    8b9a:	ff 90       	pop	r15
    8b9c:	ef 90       	pop	r14
    8b9e:	08 95       	ret

00008ba0 <ker_exflash_erase>:

int8_t ker_exflash_erase(sos_pid_t pid, exflashpage_t page, uint8_t eraseKind)
{
    8ba0:	ef 92       	push	r14
    8ba2:	ff 92       	push	r15
    8ba4:	0f 93       	push	r16
    8ba6:	1f 93       	push	r17
	return newRequest(pid, R_ERASE, page, eraseKind, NULL, 0);       
    8ba8:	24 2f       	mov	r18, r20
    8baa:	33 27       	eor	r19, r19
    8bac:	ee 24       	eor	r14, r14
    8bae:	ff 24       	eor	r15, r15
    8bb0:	87 01       	movw	r16, r14
    8bb2:	ab 01       	movw	r20, r22
    8bb4:	64 e0       	ldi	r22, 0x04	; 4
    8bb6:	0e 94 ce 44 	call	0x899c
}                                                             
    8bba:	99 27       	eor	r25, r25
    8bbc:	87 fd       	sbrc	r24, 7
    8bbe:	90 95       	com	r25
    8bc0:	1f 91       	pop	r17
    8bc2:	0f 91       	pop	r16
    8bc4:	ff 90       	pop	r15
    8bc6:	ef 90       	pop	r14
    8bc8:	08 95       	ret

00008bca <ker_exflash_sync>:

int8_t ker_exflash_sync(sos_pid_t pid, exflashpage_t page)
{         
	return syncOrFlush(pid, page, R_SYNC);                           
    8bca:	45 e0       	ldi	r20, 0x05	; 5
    8bcc:	0e 94 35 45 	call	0x8a6a
}                                                             
    8bd0:	99 27       	eor	r25, r25
    8bd2:	87 fd       	sbrc	r24, 7
    8bd4:	90 95       	com	r25
    8bd6:	08 95       	ret

00008bd8 <ker_exflash_flush>:

int8_t ker_exflash_flush(sos_pid_t pid, exflashpage_t page)
{        
	return syncOrFlush(pid, page, R_FLUSH);                          
    8bd8:	47 e0       	ldi	r20, 0x07	; 7
    8bda:	0e 94 35 45 	call	0x8a6a
} 
    8bde:	99 27       	eor	r25, r25
    8be0:	87 fd       	sbrc	r24, 7
    8be2:	90 95       	com	r25
    8be4:	08 95       	ret

00008be6 <ker_exflash_syncAll>:

int8_t ker_exflash_syncAll(sos_pid_t pid)
{                       
	return syncOrFlushAll(pid, R_SYNCALL);                           
    8be6:	66 e0       	ldi	r22, 0x06	; 6
    8be8:	0e 94 84 42 	call	0x8508
}                                                             
    8bec:	99 27       	eor	r25, r25
    8bee:	87 fd       	sbrc	r24, 7
    8bf0:	90 95       	com	r25
    8bf2:	08 95       	ret

00008bf4 <ker_exflash_flushAll>:

int8_t ker_exflash_flushAll(sos_pid_t pid)
{                      
	return syncOrFlushAll(pid, R_FLUSHALL);                          
    8bf4:	68 e0       	ldi	r22, 0x08	; 8
    8bf6:	0e 94 84 42 	call	0x8508
}                                                  
    8bfa:	99 27       	eor	r25, r25
    8bfc:	87 fd       	sbrc	r24, 7
    8bfe:	90 95       	com	r25
    8c00:	08 95       	ret

00008c02 <adc_proc_hardware_init>:
// INITIALIZE ADC hardware
int8_t adc_proc_hardware_init() {
  HAS_CRITICAL_SECTION;

  ENTER_CRITICAL_SECTION();
    8c02:	9f b7       	in	r25, 0x3f	; 63
    8c04:	f8 94       	cli
	ADMUX = (DEFAULT_VREF | DEFAULT_MUX_CH);
    8c06:	8f e1       	ldi	r24, 0x1F	; 31
    8c08:	87 b9       	out	0x07, r24	; 7

	// disable ADC, clear any pending interrupts and enable ADC
	ADCSR &= ~_BV(ADEN);
    8c0a:	37 98       	cbi	0x06, 7	; 6
	ADCSR |= DEFAULT_PRESCALER;
    8c0c:	86 b1       	in	r24, 0x06	; 6
    8c0e:	86 60       	ori	r24, 0x06	; 6
    8c10:	86 b9       	out	0x06, r24	; 6
	LEAVE_CRITICAL_SECTION();
    8c12:	9f bf       	out	0x3f, r25	; 63

	return SOS_OK;
}
    8c14:	80 e0       	ldi	r24, 0x00	; 0
    8c16:	90 e0       	ldi	r25, 0x00	; 0
    8c18:	08 95       	ret

00008c1a <adc_proc_msg_handler>:


static int8_t adc_proc_msg_handler(void *state, Message *msg) {
	return -EINVAL;
}
    8c1a:	8a ee       	ldi	r24, 0xEA	; 234
    8c1c:	9f ef       	ldi	r25, 0xFF	; 255
    8c1e:	08 95       	ret

00008c20 <adc_proc_init>:


int8_t adc_proc_init() {
    8c20:	cf 93       	push	r28
  HAS_CRITICAL_SECTION;
	int i;
	
	ENTER_CRITICAL_SECTION();
    8c22:	cf b7       	in	r28, 0x3f	; 63
    8c24:	f8 94       	cli
	s.state = ADC_PROC_INIT_BUSY;
    8c26:	81 e0       	ldi	r24, 0x01	; 1
    8c28:	80 93 75 0b 	sts	0x0B75, r24
	
  adc_proc_hardware_init();
    8c2c:	0e 94 01 46 	call	0x8c02
    8c30:	8f ef       	ldi	r24, 0xFF	; 255
    8c32:	e1 e6       	ldi	r30, 0x61	; 97
    8c34:	fb e0       	ldi	r31, 0x0B	; 11
  
	// set the defaults to single ended
	for (i = 0; i < ADC_PROC_EXTENDED_PORTMAPSIZE; i++){
		s.portmap[i] = ADC_PROC_HW_NULL_PORT;
    8c36:	85 8b       	std	Z+21, r24	; 0x15
		s.calling_pid[i] = NULL_PID;
    8c38:	87 8f       	std	Z+31, r24	; 0x1f
    8c3a:	31 96       	adiw	r30, 0x01	; 1
    8c3c:	9b e0       	ldi	r25, 0x0B	; 11
    8c3e:	ea 36       	cpi	r30, 0x6A	; 106
    8c40:	f9 07       	cpc	r31, r25
    8c42:	c9 f3       	breq	.-14     	; 0x8c36
    8c44:	c4 f3       	brlt	.-16     	; 0x8c36
	}
#ifdef SOS_USE_PREEMPTION
	ker_register_module(sos_get_header_address(mod_header));
	s.cb = ker_get_module_state(KER_SENSOR_PID);
#else
	sched_register_kernel_module(&adc_proc_module, sos_get_header_address(mod_header), &s.cb);
    8c46:	84 ed       	ldi	r24, 0xD4	; 212
    8c48:	92 e0       	ldi	r25, 0x02	; 2
    8c4a:	aa 27       	eor	r26, r26
    8c4c:	97 fd       	sbrc	r25, 7
    8c4e:	a0 95       	com	r26
    8c50:	ba 2f       	mov	r27, r26
    8c52:	b6 95       	lsr	r27
    8c54:	a7 95       	ror	r26
    8c56:	97 95       	ror	r25
    8c58:	87 95       	ror	r24
    8c5a:	41 e6       	ldi	r20, 0x61	; 97
    8c5c:	5b e0       	ldi	r21, 0x0B	; 11
    8c5e:	bc 01       	movw	r22, r24
    8c60:	8e e9       	ldi	r24, 0x9E	; 158
    8c62:	9b e0       	ldi	r25, 0x0B	; 11
    8c64:	0e 94 4a 14 	call	0x2894
#endif
	
	s.portMask = 0;
    8c68:	10 92 97 0b 	sts	0x0B97, r1
    8c6c:	10 92 96 0b 	sts	0x0B96, r1
	s.reqMask = 0;
    8c70:	10 92 99 0b 	sts	0x0B99, r1
    8c74:	10 92 98 0b 	sts	0x0B98, r1
	// wtf???
	s.refVal = 0x17d; // Reference value assuming 3.3 Volt power source
    8c78:	8d e7       	ldi	r24, 0x7D	; 125
    8c7a:	91 e0       	ldi	r25, 0x01	; 1
    8c7c:	90 93 9b 0b 	sts	0x0B9B, r25
    8c80:	80 93 9a 0b 	sts	0x0B9A, r24
	s.state = ADC_PROC_IDLE;
    8c84:	82 e0       	ldi	r24, 0x02	; 2
    8c86:	80 93 75 0b 	sts	0x0B75, r24
	LEAVE_CRITICAL_SECTION();
    8c8a:	cf bf       	out	0x3f, r28	; 63
	
	return SOS_OK;
}
    8c8c:	80 e0       	ldi	r24, 0x00	; 0
    8c8e:	90 e0       	ldi	r25, 0x00	; 0
    8c90:	cf 91       	pop	r28
    8c92:	08 95       	ret

00008c94 <ker_adc_proc_bindPort>:


int8_t ker_adc_proc_bindPort(uint8_t port, uint8_t adcPort, sos_pid_t calling_id, uint8_t cb_fid){
    8c94:	0f 93       	push	r16
    8c96:	1f 93       	push	r17
    8c98:	cf 93       	push	r28
    8c9a:	df 93       	push	r29
    8c9c:	98 2f       	mov	r25, r24
    8c9e:	06 2f       	mov	r16, r22
    8ca0:	14 2f       	mov	r17, r20
    8ca2:	42 2f       	mov	r20, r18
	HAS_CRITICAL_SECTION;

  if ((port > ADC_PROC_EXTENDED_PORTMAPSIZE) || (adcPort > ADC_PROC_HW_CH_MAX)) {
    8ca4:	8b 30       	cpi	r24, 0x0B	; 11
    8ca6:	d0 f4       	brcc	.+52     	; 0x8cdc
    8ca8:	61 32       	cpi	r22, 0x21	; 33
    8caa:	c0 f4       	brcc	.+48     	; 0x8cdc
		return -EINVAL;
	}
	if ((s.state != ADC_PROC_IDLE) || ((s.calling_pid[port] != NULL_PID) && (s.calling_pid[port] != calling_id))) {
    8cac:	80 91 75 0b 	lds	r24, 0x0B75
    8cb0:	82 30       	cpi	r24, 0x02	; 2
    8cb2:	51 f4       	brne	.+20     	; 0x8cc8
    8cb4:	c9 2f       	mov	r28, r25
    8cb6:	dd 27       	eor	r29, r29
    8cb8:	fe 01       	movw	r30, r28
    8cba:	ef 59       	subi	r30, 0x9F	; 159
    8cbc:	f4 4f       	sbci	r31, 0xF4	; 244
    8cbe:	87 8d       	ldd	r24, Z+31	; 0x1f
    8cc0:	8f 3f       	cpi	r24, 0xFF	; 255
    8cc2:	29 f0       	breq	.+10     	; 0x8cce
    8cc4:	81 17       	cp	r24, r17
    8cc6:	19 f0       	breq	.+6      	; 0x8cce
		return -EBUSY;
    8cc8:	80 ef       	ldi	r24, 0xF0	; 240
    8cca:	9f ef       	ldi	r25, 0xFF	; 255
    8ccc:	2a c0       	rjmp	.+84     	; 0x8d22
	}

	// try to register all necessary function calls
	if(ker_fntable_subscribe(ADC_PROC_PID, calling_id, cb_fid, port) < 0) {
    8cce:	29 2f       	mov	r18, r25
    8cd0:	61 2f       	mov	r22, r17
    8cd2:	83 e4       	ldi	r24, 0x43	; 67
    8cd4:	0e 94 26 29 	call	0x524c
    8cd8:	87 ff       	sbrs	r24, 7
    8cda:	03 c0       	rjmp	.+6      	; 0x8ce2
		return -EINVAL;
    8cdc:	8a ee       	ldi	r24, 0xEA	; 234
    8cde:	9f ef       	ldi	r25, 0xFF	; 255
    8ce0:	20 c0       	rjmp	.+64     	; 0x8d22
	}

	ENTER_CRITICAL_SECTION();
    8ce2:	4f b7       	in	r20, 0x3f	; 63
    8ce4:	f8 94       	cli
	s.portmap[port] = adcPort;
    8ce6:	fe 01       	movw	r30, r28
    8ce8:	ef 59       	subi	r30, 0x9F	; 159
    8cea:	f4 4f       	sbci	r31, 0xF4	; 244
    8cec:	05 8b       	std	Z+21, r16	; 0x15
	s.calling_pid[port] = calling_id;
    8cee:	17 8f       	std	Z+31, r17	; 0x1f

	if (s.portMask == 0) {
    8cf0:	20 91 96 0b 	lds	r18, 0x0B96
    8cf4:	30 91 97 0b 	lds	r19, 0x0B97
    8cf8:	21 15       	cp	r18, r1
    8cfa:	31 05       	cpc	r19, r1
    8cfc:	11 f4       	brne	.+4      	; 0x8d02
		// if first user, clear any pending interrupts and enable ADC
		// to allow for startup delay (may need additional stabalization time)
		ADCSRA = (_BV(ADEN) | ADC_PROC_PRESCALER);
    8cfe:	86 e8       	ldi	r24, 0x86	; 134
    8d00:	86 b9       	out	0x06, r24	; 6
	}
	s.portMask |= (1<<port);
    8d02:	81 e0       	ldi	r24, 0x01	; 1
    8d04:	90 e0       	ldi	r25, 0x00	; 0
    8d06:	02 c0       	rjmp	.+4      	; 0x8d0c
    8d08:	88 0f       	add	r24, r24
    8d0a:	99 1f       	adc	r25, r25
    8d0c:	ca 95       	dec	r28
    8d0e:	e2 f7       	brpl	.-8      	; 0x8d08
    8d10:	28 2b       	or	r18, r24
    8d12:	39 2b       	or	r19, r25
    8d14:	30 93 97 0b 	sts	0x0B97, r19
    8d18:	20 93 96 0b 	sts	0x0B96, r18
	LEAVE_CRITICAL_SECTION();
    8d1c:	4f bf       	out	0x3f, r20	; 63

	return SOS_OK;
    8d1e:	80 e0       	ldi	r24, 0x00	; 0
    8d20:	90 e0       	ldi	r25, 0x00	; 0
    8d22:	df 91       	pop	r29
    8d24:	cf 91       	pop	r28
    8d26:	1f 91       	pop	r17
    8d28:	0f 91       	pop	r16
    8d2a:	08 95       	ret

00008d2c <ker_adc_proc_unbindPort>:
}


int8_t ker_adc_proc_unbindPort(uint8_t port, sos_pid_t pid) {
	HAS_CRITICAL_SECTION;
	
  if ((port > ADC_PROC_EXTENDED_PORTMAPSIZE) || (s.calling_pid[port] != pid)) {
    8d2c:	8b 30       	cpi	r24, 0x0B	; 11
    8d2e:	40 f4       	brcc	.+16     	; 0x8d40
    8d30:	48 2f       	mov	r20, r24
    8d32:	55 27       	eor	r21, r21
    8d34:	fa 01       	movw	r30, r20
    8d36:	ef 59       	subi	r30, 0x9F	; 159
    8d38:	f4 4f       	sbci	r31, 0xF4	; 244
    8d3a:	87 8d       	ldd	r24, Z+31	; 0x1f
    8d3c:	86 17       	cp	r24, r22
    8d3e:	19 f0       	breq	.+6      	; 0x8d46
		return -EINVAL;
    8d40:	8a ee       	ldi	r24, 0xEA	; 234
    8d42:	9f ef       	ldi	r25, 0xFF	; 255
    8d44:	08 95       	ret
	}

	ENTER_CRITICAL_SECTION();
    8d46:	6f b7       	in	r22, 0x3f	; 63
    8d48:	f8 94       	cli
	s.portmap[port] = ADC_PROC_HW_NULL_PORT;
    8d4a:	8f ef       	ldi	r24, 0xFF	; 255
    8d4c:	85 8b       	std	Z+21, r24	; 0x15
	s.calling_pid[port] = NULL_PID;
    8d4e:	87 8f       	std	Z+31, r24	; 0x1f
	s.portMask &= ~(1<<port);
    8d50:	21 e0       	ldi	r18, 0x01	; 1
    8d52:	30 e0       	ldi	r19, 0x00	; 0
    8d54:	02 c0       	rjmp	.+4      	; 0x8d5a
    8d56:	22 0f       	add	r18, r18
    8d58:	33 1f       	adc	r19, r19
    8d5a:	4a 95       	dec	r20
    8d5c:	e2 f7       	brpl	.-8      	; 0x8d56
    8d5e:	20 95       	com	r18
    8d60:	30 95       	com	r19
    8d62:	80 91 96 0b 	lds	r24, 0x0B96
    8d66:	90 91 97 0b 	lds	r25, 0x0B97
    8d6a:	82 23       	and	r24, r18
    8d6c:	93 23       	and	r25, r19
    8d6e:	90 93 97 0b 	sts	0x0B97, r25
    8d72:	80 93 96 0b 	sts	0x0B96, r24
	if (s.portMask == 0) {
    8d76:	89 2b       	or	r24, r25
    8d78:	09 f4       	brne	.+2      	; 0x8d7c
		// if no users, clear any pending interrupts and disable everything
		ADCSRA &= ~_BV(ADEN);
    8d7a:	37 98       	cbi	0x06, 7	; 6
	}
	LEAVE_CRITICAL_SECTION();
    8d7c:	6f bf       	out	0x3f, r22	; 63

	return SOS_OK;
    8d7e:	80 e0       	ldi	r24, 0x00	; 0
    8d80:	90 e0       	ldi	r25, 0x00	; 0
}
    8d82:	08 95       	ret
    8d84:	08 95       	ret

00008d86 <ker_adc_proc_getData>:


int8_t ker_adc_proc_getData(uint8_t port, uint8_t flags) {
    8d86:	48 2f       	mov	r20, r24
  HAS_CRITICAL_SECTION;

	if ((port > ADC_PROC_EXTENDED_PORTMAPSIZE) || (!(s.portMask & (1<<port)))) {
    8d88:	8b 30       	cpi	r24, 0x0B	; 11
    8d8a:	90 f4       	brcc	.+36     	; 0x8db0
    8d8c:	e8 2f       	mov	r30, r24
    8d8e:	ff 27       	eor	r31, r31
    8d90:	21 e0       	ldi	r18, 0x01	; 1
    8d92:	30 e0       	ldi	r19, 0x00	; 0
    8d94:	0e 2e       	mov	r0, r30
    8d96:	02 c0       	rjmp	.+4      	; 0x8d9c
    8d98:	22 0f       	add	r18, r18
    8d9a:	33 1f       	adc	r19, r19
    8d9c:	0a 94       	dec	r0
    8d9e:	e2 f7       	brpl	.-8      	; 0x8d98
    8da0:	80 91 96 0b 	lds	r24, 0x0B96
    8da4:	90 91 97 0b 	lds	r25, 0x0B97
    8da8:	82 23       	and	r24, r18
    8daa:	93 23       	and	r25, r19
    8dac:	89 2b       	or	r24, r25
    8dae:	19 f4       	brne	.+6      	; 0x8db6
		return -EINVAL;
    8db0:	8a ee       	ldi	r24, 0xEA	; 234
    8db2:	9f ef       	ldi	r25, 0xFF	; 255
    8db4:	08 95       	ret
	}

	ENTER_CRITICAL_SECTION();
    8db6:	2f b7       	in	r18, 0x3f	; 63
    8db8:	f8 94       	cli
	switch (s.state) {
    8dba:	80 91 75 0b 	lds	r24, 0x0B75
    8dbe:	99 27       	eor	r25, r25
    8dc0:	82 30       	cpi	r24, 0x02	; 2
    8dc2:	91 05       	cpc	r25, r1
    8dc4:	e9 f0       	breq	.+58     	; 0x8e00
    8dc6:	83 30       	cpi	r24, 0x03	; 3
    8dc8:	91 05       	cpc	r25, r1
    8dca:	14 f0       	brlt	.+4      	; 0x8dd0
    8dcc:	03 97       	sbiw	r24, 0x03	; 3
    8dce:	41 f5       	brne	.+80     	; 0x8e20
		case ADC_PROC_INIT:
		case ADC_PROC_INIT_BUSY:
		case ADC_PROC_BUSY:
			s.reqMask |= (1 << port);
    8dd0:	21 e0       	ldi	r18, 0x01	; 1
    8dd2:	30 e0       	ldi	r19, 0x00	; 0
    8dd4:	0e 2e       	mov	r0, r30
    8dd6:	02 c0       	rjmp	.+4      	; 0x8ddc
    8dd8:	22 0f       	add	r18, r18
    8dda:	33 1f       	adc	r19, r19
    8ddc:	0a 94       	dec	r0
    8dde:	e2 f7       	brpl	.-8      	; 0x8dd8
    8de0:	80 91 98 0b 	lds	r24, 0x0B98
    8de4:	90 91 99 0b 	lds	r25, 0x0B99
    8de8:	82 2b       	or	r24, r18
    8dea:	93 2b       	or	r25, r19
    8dec:	90 93 99 0b 	sts	0x0B99, r25
    8df0:	80 93 98 0b 	sts	0x0B98, r24
			s.pending_flag[port] = flags;
    8df4:	ef 59       	subi	r30, 0x9F	; 159
    8df6:	f4 4f       	sbci	r31, 0xF4	; 244
    8df8:	61 a7       	std	Z+41, r22	; 0x29
			return SOS_OK;
    8dfa:	80 e0       	ldi	r24, 0x00	; 0
    8dfc:	90 e0       	ldi	r25, 0x00	; 0
    8dfe:	08 95       	ret
			break;
			
		case ADC_PROC_IDLE:
			s.state = ADC_PROC_BUSY;
    8e00:	83 e0       	ldi	r24, 0x03	; 3
    8e02:	80 93 75 0b 	sts	0x0B75, r24
			s.reqPort = port;
    8e06:	40 93 95 0b 	sts	0x0B95, r20
			s.sampleCnt = 1;
    8e0a:	81 e0       	ldi	r24, 0x01	; 1
    8e0c:	80 93 9c 0b 	sts	0x0B9C, r24
			s.calling_flags = flags;
    8e10:	60 93 94 0b 	sts	0x0B94, r22
			ADMUX = (ADC_PROC_VREF | s.portmap[port]);
    8e14:	ef 59       	subi	r30, 0x9F	; 159
    8e16:	f4 4f       	sbci	r31, 0xF4	; 244
    8e18:	85 89       	ldd	r24, Z+21	; 0x15
    8e1a:	87 b9       	out	0x07, r24	; 7
			// only allow sane conversions
			// for crapy resolution way fast, use getPerodicData with a single sample
			//
			// simon: this is likely to be general bug than Avrora specific...
			// there should be no reason to set ADIF unless you want to 
			// kick start ADC interrupt...
			//
			//ADCSRA |= _BV(ADIF)|_BV(ADIE);
			ADCSRA |= _BV(ADIE);
    8e1c:	33 9a       	sbi	0x06, 3	; 6
			ADCSRA |= _BV(ADSC);  // start conversion
    8e1e:	36 9a       	sbi	0x06, 6	; 6
			break;

		case ADC_PROC_ERROR:
		default:
			break;
	}
	LEAVE_CRITICAL_SECTION();
    8e20:	2f bf       	out	0x3f, r18	; 63

	return SOS_OK;
    8e22:	80 e0       	ldi	r24, 0x00	; 0
    8e24:	90 e0       	ldi	r25, 0x00	; 0
}
    8e26:	08 95       	ret
    8e28:	08 95       	ret

00008e2a <ker_adc_proc_getPerodicData>:


int8_t ker_adc_proc_getPerodicData(uint8_t port, uint8_t prescaler, uint16_t count) {
  HAS_CRITICAL_SECTION;
  
	if ((port > ADC_PROC_EXTENDED_PORTMAPSIZE) || (!(s.portMask & (1<<port))) || (prescaler > ADC_PROC_CLK_128) || (count == 0)) {
    8e2a:	8b 30       	cpi	r24, 0x0B	; 11
    8e2c:	b8 f4       	brcc	.+46     	; 0x8e5c
    8e2e:	e8 2f       	mov	r30, r24
    8e30:	ff 27       	eor	r31, r31
    8e32:	21 e0       	ldi	r18, 0x01	; 1
    8e34:	30 e0       	ldi	r19, 0x00	; 0
    8e36:	0e 2e       	mov	r0, r30
    8e38:	02 c0       	rjmp	.+4      	; 0x8e3e
    8e3a:	22 0f       	add	r18, r18
    8e3c:	33 1f       	adc	r19, r19
    8e3e:	0a 94       	dec	r0
    8e40:	e2 f7       	brpl	.-8      	; 0x8e3a
    8e42:	80 91 96 0b 	lds	r24, 0x0B96
    8e46:	90 91 97 0b 	lds	r25, 0x0B97
    8e4a:	82 23       	and	r24, r18
    8e4c:	93 23       	and	r25, r19
    8e4e:	89 2b       	or	r24, r25
    8e50:	29 f0       	breq	.+10     	; 0x8e5c
    8e52:	68 30       	cpi	r22, 0x08	; 8
    8e54:	18 f4       	brcc	.+6      	; 0x8e5c
    8e56:	41 15       	cp	r20, r1
    8e58:	51 05       	cpc	r21, r1
    8e5a:	19 f4       	brne	.+6      	; 0x8e62
		return -EINVAL;
    8e5c:	8a ee       	ldi	r24, 0xEA	; 234
    8e5e:	9f ef       	ldi	r25, 0xFF	; 255
    8e60:	08 95       	ret
	}

  ENTER_CRITICAL_SECTION();
    8e62:	2f b7       	in	r18, 0x3f	; 63
    8e64:	f8 94       	cli
	switch (s.state) {
    8e66:	80 91 75 0b 	lds	r24, 0x0B75
    8e6a:	99 27       	eor	r25, r25
    8e6c:	82 30       	cpi	r24, 0x02	; 2
    8e6e:	91 05       	cpc	r25, r1
    8e70:	41 f0       	breq	.+16     	; 0x8e82
    8e72:	83 30       	cpi	r24, 0x03	; 3
    8e74:	91 05       	cpc	r25, r1
    8e76:	14 f0       	brlt	.+4      	; 0x8e7c
    8e78:	03 97       	sbiw	r24, 0x03	; 3
    8e7a:	b9 f4       	brne	.+46     	; 0x8eaa
		case ADC_PROC_INIT:
		case ADC_PROC_INIT_BUSY:
		case ADC_PROC_BUSY:
			return -EBUSY;
    8e7c:	80 ef       	ldi	r24, 0xF0	; 240
    8e7e:	9f ef       	ldi	r25, 0xFF	; 255
    8e80:	08 95       	ret
			break;
			
		case ADC_PROC_IDLE:
			s.state = ADC_PROC_BUSY;
    8e82:	83 e0       	ldi	r24, 0x03	; 3
    8e84:	80 93 75 0b 	sts	0x0B75, r24
			s.sampleCnt = count;
    8e88:	40 93 9c 0b 	sts	0x0B9C, r20
			ADMUX = (ADC_PROC_VREF | s.portmap[port]);
    8e8c:	ef 59       	subi	r30, 0x9F	; 159
    8e8e:	f4 4f       	sbci	r31, 0xF4	; 244
    8e90:	85 89       	ldd	r24, Z+21	; 0x15
    8e92:	87 b9       	out	0x07, r24	; 7
			if (prescaler != ADC_PROC_CLK_NULL) {
    8e94:	66 23       	and	r22, r22
    8e96:	31 f0       	breq	.+12     	; 0x8ea4
				ADCSRA &= ~(ADC_PROC_CLK_MSK); // clear current prescaler
    8e98:	86 b1       	in	r24, 0x06	; 6
    8e9a:	88 7f       	andi	r24, 0xF8	; 248
    8e9c:	86 b9       	out	0x06, r24	; 6
				ADCSRA |= prescaler;
    8e9e:	86 b1       	in	r24, 0x06	; 6
    8ea0:	86 2b       	or	r24, r22
    8ea2:	86 b9       	out	0x06, r24	; 6
			}
			ADCSRA |= _BV(ADFR); // put into free running mode
    8ea4:	35 9a       	sbi	0x06, 5	; 6
			ADCSRA |= _BV(ADIE); // enable iterrupts
    8ea6:	33 9a       	sbi	0x06, 3	; 6
			ADCSRA |= _BV(ADSC); // start conversion
    8ea8:	36 9a       	sbi	0x06, 6	; 6
			break;

		case ADC_PROC_ERROR:
		default:
			break;
	}
	LEAVE_CRITICAL_SECTION();
    8eaa:	2f bf       	out	0x3f, r18	; 63
	
	return SOS_OK;
    8eac:	80 e0       	ldi	r24, 0x00	; 0
    8eae:	90 e0       	ldi	r25, 0x00	; 0
}
    8eb0:	08 95       	ret
    8eb2:	08 95       	ret

00008eb4 <ker_adc_proc_stopPerodicData>:


int8_t ker_adc_proc_stopPerodicData(uint8_t port) {
  HAS_CRITICAL_SECTION;

	if (port > ADC_PROC_EXTENDED_PORTMAPSIZE) {
    8eb4:	8b 30       	cpi	r24, 0x0B	; 11
    8eb6:	18 f0       	brcs	.+6      	; 0x8ebe
		return -EINVAL;
    8eb8:	8a ee       	ldi	r24, 0xEA	; 234
    8eba:	9f ef       	ldi	r25, 0xFF	; 255
    8ebc:	08 95       	ret
	}
	
  ENTER_CRITICAL_SECTION();
    8ebe:	9f b7       	in	r25, 0x3f	; 63
    8ec0:	f8 94       	cli
	s.state = ADC_PROC_IDLE;
    8ec2:	82 e0       	ldi	r24, 0x02	; 2
    8ec4:	80 93 75 0b 	sts	0x0B75, r24
	ADCSRA &= ~_BV(ADFR);
    8ec8:	35 98       	cbi	0x06, 5	; 6
	ADCSRA &= ~_BV(ADIE);
    8eca:	33 98       	cbi	0x06, 3	; 6
	LEAVE_CRITICAL_SECTION();
    8ecc:	9f bf       	out	0x3f, r25	; 63
	
	return SOS_OK;
    8ece:	80 e0       	ldi	r24, 0x00	; 0
    8ed0:	90 e0       	ldi	r25, 0x00	; 0
}
    8ed2:	08 95       	ret
    8ed4:	08 95       	ret

00008ed6 <__vector_21>:
#include <led.h>

adc_proc_interrupt() {
    8ed6:	1f 92       	push	r1
    8ed8:	0f 92       	push	r0
    8eda:	0f b6       	in	r0, 0x3f	; 63
    8edc:	0f 92       	push	r0
    8ede:	11 24       	eor	r1, r1
    8ee0:	2f 93       	push	r18
    8ee2:	3f 93       	push	r19
    8ee4:	4f 93       	push	r20
    8ee6:	5f 93       	push	r21
    8ee8:	6f 93       	push	r22
    8eea:	7f 93       	push	r23
    8eec:	8f 93       	push	r24
    8eee:	9f 93       	push	r25
    8ef0:	af 93       	push	r26
    8ef2:	bf 93       	push	r27
    8ef4:	ef 93       	push	r30
    8ef6:	ff 93       	push	r31
#ifdef SOS_USE_PREEMPTION
	HAS_PREEMPTION_SECTION;
	DISABLE_PREEMPTION();
#endif
	uint16_t adcValue;

	if (s.state != ADC_PROC_BUSY) {
    8ef8:	80 91 75 0b 	lds	r24, 0x0B75
    8efc:	83 30       	cpi	r24, 0x03	; 3
    8efe:	f9 f0       	breq	.+62     	; 0x8f3e
		s.state = ADC_PROC_IDLE;
    8f00:	82 e0       	ldi	r24, 0x02	; 2
    8f02:	80 93 75 0b 	sts	0x0B75, r24
		return;
    8f06:	5a c0       	rjmp	.+180    	; 0x8fbc
	}
	s.state = ADC_PROC_DATA_RDY;

	adcValue = 0x3ff & ADC;
	s.sampleCnt--;
	
	if (s.portmap[s.reqPort] == ADC_PROC_BANDGAP) {
		s.refVal = adcValue;
	}
	SOS_CALL(s.cb[s.reqPort], adc10_cb_t, s.reqPort, adcValue, s.calling_flags);

	if (!(s.sampleCnt > 0)) {
		s.state = ADC_PROC_IDLE;
		ADCSRA &= ~_BV(ADIE);
	} else {
		return;
	}

	if( s.reqMask != 0 ) {
		// we have pending request
		uint8_t i;
		uint16_t m = 1;
		for( i = 0; i < ADC_PROC_EXTENDED_PORTMAPSIZE; i++, m<<=1) {
			if( m & s.reqMask ) {
				s.reqMask &= ~m;
    8f08:	20 95       	com	r18
    8f0a:	30 95       	com	r19
    8f0c:	42 23       	and	r20, r18
    8f0e:	53 23       	and	r21, r19
    8f10:	50 93 99 0b 	sts	0x0B99, r21
    8f14:	40 93 98 0b 	sts	0x0B98, r20
				s.state = ADC_PROC_BUSY;
    8f18:	83 e0       	ldi	r24, 0x03	; 3
    8f1a:	80 93 75 0b 	sts	0x0B75, r24
				s.reqPort = i;
    8f1e:	e0 93 95 0b 	sts	0x0B95, r30
				s.sampleCnt = 1;
    8f22:	81 e0       	ldi	r24, 0x01	; 1
    8f24:	80 93 9c 0b 	sts	0x0B9C, r24
				s.calling_flags = s.pending_flag[i];
    8f28:	ff 27       	eor	r31, r31
    8f2a:	ef 59       	subi	r30, 0x9F	; 159
    8f2c:	f4 4f       	sbci	r31, 0xF4	; 244
    8f2e:	81 a5       	ldd	r24, Z+41	; 0x29
    8f30:	80 93 94 0b 	sts	0x0B94, r24
				ADMUX = (ADC_PROC_VREF | s.portmap[i]);
    8f34:	85 89       	ldd	r24, Z+21	; 0x15
    8f36:	87 b9       	out	0x07, r24	; 7
				ADCSRA |= _BV(ADIE);        
    8f38:	33 9a       	sbi	0x06, 3	; 6
				ADCSRA |= _BV(ADSC);  // start conversion
    8f3a:	36 9a       	sbi	0x06, 6	; 6
				return;
    8f3c:	3f c0       	rjmp	.+126    	; 0x8fbc
    8f3e:	84 e0       	ldi	r24, 0x04	; 4
    8f40:	80 93 75 0b 	sts	0x0B75, r24
    8f44:	44 b1       	in	r20, 0x04	; 4
    8f46:	55 b1       	in	r21, 0x05	; 5
    8f48:	53 70       	andi	r21, 0x03	; 3
    8f4a:	80 91 9c 0b 	lds	r24, 0x0B9C
    8f4e:	81 50       	subi	r24, 0x01	; 1
    8f50:	80 93 9c 0b 	sts	0x0B9C, r24
    8f54:	60 91 95 0b 	lds	r22, 0x0B95
    8f58:	a6 2f       	mov	r26, r22
    8f5a:	bb 27       	eor	r27, r27
    8f5c:	fd 01       	movw	r30, r26
    8f5e:	ef 59       	subi	r30, 0x9F	; 159
    8f60:	f4 4f       	sbci	r31, 0xF4	; 244
    8f62:	85 89       	ldd	r24, Z+21	; 0x15
    8f64:	8e 31       	cpi	r24, 0x1E	; 30
    8f66:	21 f4       	brne	.+8      	; 0x8f70
    8f68:	50 93 9b 0b 	sts	0x0B9B, r21
    8f6c:	40 93 9a 0b 	sts	0x0B9A, r20
    8f70:	aa 0f       	add	r26, r26
    8f72:	bb 1f       	adc	r27, r27
    8f74:	af 59       	subi	r26, 0x9F	; 159
    8f76:	b4 4f       	sbci	r27, 0xF4	; 244
    8f78:	20 91 94 0b 	lds	r18, 0x0B94
    8f7c:	8d 91       	ld	r24, X+
    8f7e:	9c 91       	ld	r25, X
    8f80:	0e 94 46 00 	call	0x8c
    8f84:	e0 91 9c 0b 	lds	r30, 0x0B9C
    8f88:	ee 23       	and	r30, r30
    8f8a:	c1 f4       	brne	.+48     	; 0x8fbc
    8f8c:	82 e0       	ldi	r24, 0x02	; 2
    8f8e:	80 93 75 0b 	sts	0x0B75, r24
    8f92:	33 98       	cbi	0x06, 3	; 6
    8f94:	40 91 98 0b 	lds	r20, 0x0B98
    8f98:	50 91 99 0b 	lds	r21, 0x0B99
    8f9c:	41 15       	cp	r20, r1
    8f9e:	51 05       	cpc	r21, r1
    8fa0:	69 f0       	breq	.+26     	; 0x8fbc
    8fa2:	21 e0       	ldi	r18, 0x01	; 1
    8fa4:	30 e0       	ldi	r19, 0x00	; 0
    8fa6:	c9 01       	movw	r24, r18
    8fa8:	84 23       	and	r24, r20
    8faa:	95 23       	and	r25, r21
    8fac:	89 2b       	or	r24, r25
    8fae:	09 f0       	breq	.+2      	; 0x8fb2
    8fb0:	ab cf       	rjmp	.-170    	; 0x8f08
    8fb2:	ef 5f       	subi	r30, 0xFF	; 255
    8fb4:	22 0f       	add	r18, r18
    8fb6:	33 1f       	adc	r19, r19
    8fb8:	ea 30       	cpi	r30, 0x0A	; 10
    8fba:	a8 f3       	brcs	.-22     	; 0x8fa6
    8fbc:	ff 91       	pop	r31
    8fbe:	ef 91       	pop	r30
    8fc0:	bf 91       	pop	r27
    8fc2:	af 91       	pop	r26
    8fc4:	9f 91       	pop	r25
    8fc6:	8f 91       	pop	r24
    8fc8:	7f 91       	pop	r23
    8fca:	6f 91       	pop	r22
    8fcc:	5f 91       	pop	r21
    8fce:	4f 91       	pop	r20
    8fd0:	3f 91       	pop	r19
    8fd2:	2f 91       	pop	r18
    8fd4:	0f 90       	pop	r0
    8fd6:	0f be       	out	0x3f, r0	; 63
    8fd8:	0f 90       	pop	r0
    8fda:	1f 90       	pop	r1
    8fdc:	18 95       	reti

00008fde <i2c_hardware_init>:

int8_t i2c_hardware_init() {
	HAS_CRITICAL_SECTION;

	if (i2c_initialized == false) {
    8fde:	20 91 a7 0b 	lds	r18, 0x0BA7
    8fe2:	22 23       	and	r18, r18
    8fe4:	71 f4       	brne	.+28     	; 0x9002
		ENTER_CRITICAL_SECTION();
    8fe6:	9f b7       	in	r25, 0x3f	; 63
    8fe8:	f8 94       	cli

		PORTD |= 0x03; // Enable the internal TWI pull up registers
    8fea:	82 b3       	in	r24, 0x12	; 18
    8fec:	83 60       	ori	r24, 0x03	; 3
    8fee:	82 bb       	out	0x12, r24	; 18
		i2c_setCtrlReg(0); // TWI Interface disabled
    8ff0:	20 93 74 00 	sts	0x0074, r18

		// need to fix this to be dynamic
		TWBR = TWI_TWBR; // Set bit rate register (Baudrate). Defined in header file.
    8ff4:	8a e0       	ldi	r24, 0x0A	; 10
    8ff6:	80 93 70 00 	sts	0x0070, r24
		//TWSR = TWI_TWPS; // Not used. Driver presumes prescaler to be 00.
		LEAVE_CRITICAL_SECTION();
    8ffa:	9f bf       	out	0x3f, r25	; 63

		i2c_initialized = true;
    8ffc:	81 e0       	ldi	r24, 0x01	; 1
    8ffe:	80 93 a7 0b 	sts	0x0BA7, r24
	}

    return SOS_OK;
}
    9002:	80 e0       	ldi	r24, 0x00	; 0
    9004:	90 e0       	ldi	r25, 0x00	; 0
    9006:	08 95       	ret

00009008 <i2c_initTransceiver>:


int8_t i2c_initTransceiver(uint8_t ownAddress, uint8_t flags) {
	HAS_CRITICAL_SECTION;

    // Set own TWI slave address. Accept TWI General Calls.
	i2c.ownAddr = ((ownAddress<<1)&0xFE);
    9008:	98 2f       	mov	r25, r24
    900a:	99 0f       	add	r25, r25
    900c:	90 93 ab 0b 	sts	0x0BAB, r25

	if (ownAddress != 0x7f) {
    9010:	8f 37       	cpi	r24, 0x7F	; 127
    9012:	21 f0       	breq	.+8      	; 0x901c
		// 1111xxx is reserved addres space so 0x7f is an
		// invalid address and it is safe to use it as a flag
		// we will also enable the general call recognition bit
		TWAR = i2c.ownAddr|(1<<TWGCE);
    9014:	91 60       	ori	r25, 0x01	; 1
    9016:	90 93 72 00 	sts	0x0072, r25
    901a:	05 c0       	rjmp	.+10     	; 0x9026
	} else {
		if (!(flags&I2C_MASTER_FLAG)){
    901c:	64 fd       	sbrc	r22, 4
    901e:	03 c0       	rjmp	.+6      	; 0x9026
			// can not give a slave an invalid address
			return -EINVAL;
    9020:	8a ee       	ldi	r24, 0xEA	; 234
    9022:	9f ef       	ldi	r25, 0xFF	; 255
    9024:	08 95       	ret
		}
	}

	// get flag settings from the upper layer
	i2c.flags = I2C_SYS_SHARED_FLAGS_MSK & flags;
    9026:	61 7f       	andi	r22, 0xF1	; 241
    9028:	60 93 b9 0b 	sts	0x0BB9, r22

	// do some clean up
	i2c.msgLen = 0;
    902c:	10 92 af 0b 	sts	0x0BAF, r1
	i2c.txPending = 0;
    9030:	10 92 b7 0b 	sts	0x0BB7, r1
	i2c.idx = 0;
    9034:	10 92 b0 0b 	sts	0x0BB0, r1

	// free all allocated buffers
	if (i2c.msgBuf != NULL) {
    9038:	80 91 b1 0b 	lds	r24, 0x0BB1
    903c:	90 91 b2 0b 	lds	r25, 0x0BB2
    9040:	89 2b       	or	r24, r25
    9042:	41 f0       	breq	.+16     	; 0x9054
		i2c.dataBuf = NULL;
    9044:	10 92 b4 0b 	sts	0x0BB4, r1
    9048:	10 92 b3 0b 	sts	0x0BB3, r1
		i2c.msgBuf = NULL;
    904c:	10 92 b2 0b 	sts	0x0BB2, r1
    9050:	10 92 b1 0b 	sts	0x0BB1, r1
	}
	i2c.msg_state = SOS_MSG_NO_STATE;
    9054:	10 92 aa 0b 	sts	0x0BAA, r1
	

  /**
   * \bug I2C system may want to NULL the i2c.dataBuf after i2c_send_done,
   * i2c_read_done, and any error.  We could then verify that i2c.dataBuf is
   * null in i2c_initTranceiver and call ker_panic if it is not null.  Same
   * goes for the rxDataBuf
   */
  // Roy: This results in a hard to track bug.  If the user frees I2C data
  // after the I2C sends a MSG_I2C_SEND_DONE, this will free it a second time.
  // Kernel messaging avoids this by explitily setting i2c.dataBuff to null.
  // Well, maybe.  Maybe not...  Regardless, this is bad!  
  //
  // if (i2c.dataBuf != NULL) {
  //  ker_free(i2c.dataBuf);
	//}

  // The problem described abave is NOT a problem with the i2c.rxDataBuf.  A
  // call to i2c_read_done creates a deep copy of the rxDataBuf that is
  // SOS_MSG_RELEASE'ed.  Thus, the rxDataBuff can hang around.  A down side
  // to the current implementation is that the rxDataBuf is not released with
  // when the buffer is released.  We do not leak this data, but it is not
  // made availible to the system. 
  //
  // pre allocate recieve buffer
  if (i2c.rxDataBuf != NULL) {
    9058:	80 91 b5 0b 	lds	r24, 0x0BB5
    905c:	90 91 b6 0b 	lds	r25, 0x0BB6
    9060:	00 97       	sbiw	r24, 0x00	; 0
    9062:	21 f0       	breq	.+8      	; 0x906c
 * @return void
 */
static inline void ker_free(void* ptr)
{
  sos_blk_mem_free(ptr, false);
    9064:	60 91 aa 0b 	lds	r22, 0x0BAA
    9068:	0e 94 98 11 	call	0x2330
    906c:	40 e0       	ldi	r20, 0x00	; 0
    906e:	61 e4       	ldi	r22, 0x41	; 65
    9070:	80 e8       	ldi	r24, 0x80	; 128
    9072:	90 e0       	ldi	r25, 0x00	; 0
    9074:	0e 94 14 11 	call	0x2228
    9078:	90 93 b6 0b 	sts	0x0BB6, r25
    907c:	80 93 b5 0b 	sts	0x0BB5, r24
    ker_free(i2c.rxDataBuf);
	}
  
	i2c.rxDataBuf = ker_malloc(I2C_MAX_MSG_LEN, I2C_PID);
	if (i2c.rxDataBuf == NULL) {
    9080:	89 2b       	or	r24, r25
    9082:	19 f4       	brne	.+6      	; 0x908a
		return -ENOMEM;
    9084:	84 ef       	ldi	r24, 0xF4	; 244
    9086:	9f ef       	ldi	r25, 0xFF	; 255
    9088:	08 95       	ret
	}

	ENTER_CRITICAL_SECTION();
    908a:	9f b7       	in	r25, 0x3f	; 63
    908c:	f8 94       	cli
	if (i2c.flags & I2C_MASTER_FLAG) {
    908e:	80 91 b9 0b 	lds	r24, 0x0BB9
    9092:	84 ff       	sbrs	r24, 4
    9094:	02 c0       	rjmp	.+4      	; 0x909a
		i2c.state = I2C_MASTER_IDLE;
    9096:	81 e0       	ldi	r24, 0x01	; 1
    9098:	01 c0       	rjmp	.+2      	; 0x909c
	} else {
		i2c.state = I2C_SLAVE_IDLE;
    909a:	82 e0       	ldi	r24, 0x02	; 2
    909c:	80 93 a9 0b 	sts	0x0BA9, r24
	}
	// enable TWI interrupt and ack
	i2c_setCtrlReg((1<<TWINT)|(1<<TWEA)|(1<<TWEN)|(1<<TWIE));
    90a0:	85 ec       	ldi	r24, 0xC5	; 197
    90a2:	80 93 74 00 	sts	0x0074, r24
	LEAVE_CRITICAL_SECTION();
    90a6:	9f bf       	out	0x3f, r25	; 63

	return SOS_OK;
    90a8:	80 e0       	ldi	r24, 0x00	; 0
    90aa:	90 e0       	ldi	r25, 0x00	; 0
}
    90ac:	08 95       	ret
    90ae:	08 95       	ret

000090b0 <i2c_startTransceiverTx>:


int8_t i2c_startTransceiverTx(
		uint8_t addr,
		uint8_t *msg,
		uint8_t msg_len,
		uint8_t flags) {
    90b0:	98 2f       	mov	r25, r24
    90b2:	fb 01       	movw	r30, r22

	HAS_CRITICAL_SECTION;

	uint8_t alt_state = (i2c.flags & I2C_MASTER_FLAG)?I2C_MASTER_IDLE:I2C_SLAVE_IDLE;
    90b4:	80 91 b9 0b 	lds	r24, 0x0BB9
    90b8:	84 ff       	sbrs	r24, 4
    90ba:	02 c0       	rjmp	.+4      	; 0x90c0
    90bc:	81 e0       	ldi	r24, 0x01	; 1
    90be:	01 c0       	rjmp	.+2      	; 0x90c2
    90c0:	82 e0       	ldi	r24, 0x02	; 2

	if (!((i2c.state == I2C_IDLE) || (i2c.state == alt_state))) {
    90c2:	30 91 a9 0b 	lds	r19, 0x0BA9
    90c6:	33 23       	and	r19, r19
    90c8:	29 f0       	breq	.+10     	; 0x90d4
    90ca:	38 17       	cp	r19, r24
    90cc:	19 f0       	breq	.+6      	; 0x90d4
		return -EBUSY;
    90ce:	80 ef       	ldi	r24, 0xF0	; 240
    90d0:	9f ef       	ldi	r25, 0xFF	; 255
    90d2:	08 95       	ret
	}
	ENTER_CRITICAL_SECTION();
    90d4:	5f b7       	in	r21, 0x3f	; 63
    90d6:	f8 94       	cli
	i2c.flags = (I2C_SYS_SHARED_FLAGS_MSK & flags)|I2C_BUFF_DIRTY_FLAG;
    90d8:	82 2f       	mov	r24, r18
    90da:	81 7f       	andi	r24, 0xF1	; 241
    90dc:	88 60       	ori	r24, 0x08	; 8
    90de:	80 93 b9 0b 	sts	0x0BB9, r24
    i2c.addr = (addr<<1);  // shift destination address once (and only once!)
    90e2:	99 0f       	add	r25, r25
    90e4:	90 93 ac 0b 	sts	0x0BAC, r25

	if (i2c.flags & I2C_SOS_MSG_FLAG) {
    90e8:	87 ff       	sbrs	r24, 7
    90ea:	11 c0       	rjmp	.+34     	; 0x910e
		i2c.msgBuf = (Message*)msg;
    90ec:	f0 93 b2 0b 	sts	0x0BB2, r31
    90f0:	e0 93 b1 0b 	sts	0x0BB1, r30
		i2c.msgLen = i2c.msgBuf->len;  // expected msg len
    90f4:	87 81       	ldd	r24, Z+7	; 0x07
    90f6:	80 93 af 0b 	sts	0x0BAF, r24
		i2c.txPending = SOS_MSG_HEADER_SIZE + i2c.msgLen + SOS_MSG_CRC_SIZE;
    90fa:	86 5f       	subi	r24, 0xF6	; 246
    90fc:	80 93 b7 0b 	sts	0x0BB7, r24
		i2c.dataBuf = i2c.msgBuf->data;
    9100:	80 85       	ldd	r24, Z+8	; 0x08
    9102:	91 85       	ldd	r25, Z+9	; 0x09
    9104:	90 93 b4 0b 	sts	0x0BB4, r25
    9108:	80 93 b3 0b 	sts	0x0BB3, r24
    910c:	08 c0       	rjmp	.+16     	; 0x911e
	} else {
		i2c.dataBuf = msg;
    910e:	f0 93 b4 0b 	sts	0x0BB4, r31
    9112:	e0 93 b3 0b 	sts	0x0BB3, r30
		i2c.msgLen = msg_len;
    9116:	40 93 af 0b 	sts	0x0BAF, r20
		i2c.txPending = i2c.msgLen;
    911a:	40 93 b7 0b 	sts	0x0BB7, r20
	}
	i2c.msg_state = SOS_MSG_WAIT;
    911e:	81 e0       	ldi	r24, 0x01	; 1
    9120:	80 93 aa 0b 	sts	0x0BAA, r24
	i2c.idx = 0;
    9124:	10 92 b0 0b 	sts	0x0BB0, r1
    9128:	30 93 a6 0b 	sts	0x0BA6, r19

    // TWI Interface enabled.
    // Enable TWI Interupt and clear the flag.
    // Initiate a START condition.
	saveState(i2c.state);
	if (i2c.flags & I2C_MASTER_FLAG) {
    912c:	80 91 b9 0b 	lds	r24, 0x0BB9
    9130:	84 ff       	sbrs	r24, 4
    9132:	05 c0       	rjmp	.+10     	; 0x913e
		i2c.state = I2C_MASTER_ARB;
    9134:	83 e0       	ldi	r24, 0x03	; 3
    9136:	80 93 a9 0b 	sts	0x0BA9, r24
		i2c_setCtrlReg((1<<TWINT)|(1<<TWSTA)|(1<<TWEN)|(1<<TWIE));
    913a:	85 ea       	ldi	r24, 0xA5	; 165
    913c:	04 c0       	rjmp	.+8      	; 0x9146
	} else { // else sit and wait
		i2c.state = I2C_SLAVE_WAIT;
    913e:	86 e0       	ldi	r24, 0x06	; 6
    9140:	80 93 a9 0b 	sts	0x0BA9, r24
		i2c_setCtrlReg((1<<TWEA)|(1<<TWEN)|(1<<TWIE));
    9144:	85 e4       	ldi	r24, 0x45	; 69
    9146:	80 93 74 00 	sts	0x0074, r24
	}
	LEAVE_CRITICAL_SECTION();
    914a:	5f bf       	out	0x3f, r21	; 63

	return SOS_OK;
    914c:	80 e0       	ldi	r24, 0x00	; 0
    914e:	90 e0       	ldi	r25, 0x00	; 0
}
    9150:	08 95       	ret
    9152:	08 95       	ret

00009154 <i2c_startTransceiverRx>:


int8_t i2c_startTransceiverRx(uint8_t addr,
		uint8_t rx_msg_len,
		uint8_t flags) {
    9154:	1f 93       	push	r17
    9156:	cf 93       	push	r28
    9158:	18 2f       	mov	r17, r24
    915a:	c6 2f       	mov	r28, r22

	HAS_CRITICAL_SECTION;

	uint8_t alt_state = (i2c.flags & I2C_MASTER_FLAG)?I2C_MASTER_IDLE:I2C_SLAVE_IDLE;
    915c:	80 91 b9 0b 	lds	r24, 0x0BB9
    9160:	84 ff       	sbrs	r24, 4
    9162:	02 c0       	rjmp	.+4      	; 0x9168
    9164:	91 e0       	ldi	r25, 0x01	; 1
    9166:	01 c0       	rjmp	.+2      	; 0x916a
    9168:	92 e0       	ldi	r25, 0x02	; 2

	while (!((i2c.state == I2C_IDLE) || (i2c.state == alt_state))) {
		return -EBUSY;
    916a:	80 91 a9 0b 	lds	r24, 0x0BA9
    916e:	88 23       	and	r24, r24
    9170:	29 f0       	breq	.+10     	; 0x917c
    9172:	89 17       	cp	r24, r25
    9174:	19 f0       	breq	.+6      	; 0x917c
    9176:	80 ef       	ldi	r24, 0xF0	; 240
    9178:	9f ef       	ldi	r25, 0xFF	; 255
    917a:	3e c0       	rjmp	.+124    	; 0x91f8
	}
	if (flags & I2C_SOS_MSG_FLAG) {
    917c:	47 ff       	sbrs	r20, 7
    917e:	03 c0       	rjmp	.+6      	; 0x9186
		return -EINVAL;
    9180:	8a ee       	ldi	r24, 0xEA	; 234
    9182:	9f ef       	ldi	r25, 0xFF	; 255
    9184:	39 c0       	rjmp	.+114    	; 0x91f8
	}
	i2c.flags = I2C_SYS_SHARED_FLAGS_MSK & flags;
    9186:	41 7f       	andi	r20, 0xF1	; 241
    9188:	40 93 b9 0b 	sts	0x0BB9, r20

	if (rx_msg_len >= I2C_MAX_MSG_LEN) {
    918c:	c7 fd       	sbrc	r28, 7
    918e:	0c c0       	rjmp	.+24     	; 0x91a8
 * Will return a NULL pointer if the call to sys_malloc fails.
 */
static inline void *ker_malloc(uint16_t size, sos_pid_t id)
{
  return sos_blk_mem_alloc(size, id, false);
    9190:	40 e0       	ldi	r20, 0x00	; 0
    9192:	61 e4       	ldi	r22, 0x41	; 65
    9194:	8c 2f       	mov	r24, r28
    9196:	99 27       	eor	r25, r25
    9198:	0e 94 14 11 	call	0x2228
    919c:	90 93 b4 0b 	sts	0x0BB4, r25
    91a0:	80 93 b3 0b 	sts	0x0BB3, r24
    91a4:	89 2b       	or	r24, r25
    91a6:	19 f4       	brne	.+6      	; 0x91ae
		return -ENOMEM;
	}
 
  /** 
   * \bug Um, maybe this check is not such a good idea.  i2c.dataBuf needs to
   * be null.  This should be stronger and take the form of an assert such as:
   *
   * assert(i2c.dataBuf == NULL);
   *
   * But no asserts for us :-(
   */
  //if (i2c.dataBuf == NULL) {
    if ((i2c.dataBuf = ker_malloc(rx_msg_len, I2C_PID)) == NULL) { 
      return -ENOMEM; 
    91a8:	84 ef       	ldi	r24, 0xF4	; 244
    91aa:	9f ef       	ldi	r25, 0xFF	; 255
    91ac:	25 c0       	rjmp	.+74     	; 0x91f8
    }
  //}
  i2c.msgLen = rx_msg_len; i2c.idx = 0;
    91ae:	c0 93 af 0b 	sts	0x0BAF, r28
    91b2:	10 92 b0 0b 	sts	0x0BB0, r1

	ENTER_CRITICAL_SECTION();
    91b6:	9f b7       	in	r25, 0x3f	; 63
    91b8:	f8 94       	cli
	i2c.addr = (addr<<1);  // shift destination address once (and only once!)
    91ba:	11 0f       	add	r17, r17
    91bc:	10 93 ac 0b 	sts	0x0BAC, r17

	i2c.msg_state = SOS_MSG_WAIT;
    91c0:	81 e0       	ldi	r24, 0x01	; 1
    91c2:	80 93 aa 0b 	sts	0x0BAA, r24
    91c6:	80 91 a9 0b 	lds	r24, 0x0BA9
    91ca:	80 93 a6 0b 	sts	0x0BA6, r24

	saveState(i2c.state);
	if (i2c.flags & I2C_MASTER_FLAG) {
    91ce:	80 91 b9 0b 	lds	r24, 0x0BB9
    91d2:	84 ff       	sbrs	r24, 4
    91d4:	05 c0       	rjmp	.+10     	; 0x91e0
		i2c.state = I2C_MASTER_ARB;
    91d6:	83 e0       	ldi	r24, 0x03	; 3
    91d8:	80 93 a9 0b 	sts	0x0BA9, r24
		i2c_setCtrlReg((1<<TWINT)|(1<<TWSTA)|(1<<TWEN)|(1<<TWIE));
    91dc:	85 ea       	ldi	r24, 0xA5	; 165
    91de:	04 c0       	rjmp	.+8      	; 0x91e8
	} else { // else sit and wait
		i2c.state = I2C_SLAVE_WAIT;
    91e0:	86 e0       	ldi	r24, 0x06	; 6
    91e2:	80 93 a9 0b 	sts	0x0BA9, r24
		i2c_setCtrlReg((1<<TWEA)|(1<<TWEN)|(1<<TWIE));
    91e6:	85 e4       	ldi	r24, 0x45	; 69
    91e8:	80 93 74 00 	sts	0x0074, r24
	}
	i2c.msg_state = SOS_MSG_RX_START;
    91ec:	8c e0       	ldi	r24, 0x0C	; 12
    91ee:	80 93 aa 0b 	sts	0x0BAA, r24
	LEAVE_CRITICAL_SECTION();
    91f2:	9f bf       	out	0x3f, r25	; 63

	return SOS_OK;
    91f4:	80 e0       	ldi	r24, 0x00	; 0
    91f6:	90 e0       	ldi	r25, 0x00	; 0
    91f8:	cf 91       	pop	r28
    91fa:	1f 91       	pop	r17
    91fc:	08 95       	ret

000091fe <__vector_33>:
}


// ********* Interrupt Handlers ********** //

/**
 * This function is the Interrupt Service Routine (ISR), and called when the
 * TWI interrupt is triggered; that is whenever a TWI event has occurred. This
 * function should not be called directly from the main application.
 */
#define MAX_ADDR_FAIL 3

i2c_interrupt() 
{
    91fe:	1f 92       	push	r1
    9200:	0f 92       	push	r0
    9202:	0f b6       	in	r0, 0x3f	; 63
    9204:	0f 92       	push	r0
    9206:	11 24       	eor	r1, r1
    9208:	2f 93       	push	r18
    920a:	3f 93       	push	r19
    920c:	4f 93       	push	r20
    920e:	5f 93       	push	r21
    9210:	6f 93       	push	r22
    9212:	7f 93       	push	r23
    9214:	8f 93       	push	r24
    9216:	9f 93       	push	r25
    9218:	af 93       	push	r26
    921a:	bf 93       	push	r27
    921c:	ef 93       	push	r30
    921e:	ff 93       	push	r31
#ifdef SOS_USE_PREEMPTION
  HAS_PREEMPTION_SECTION;
  DISABLE_PREEMPTION();
#endif
	static uint8_t addrFailCnt;
	
	SOS_MEASUREMENT_IDLE_END();
	
	// TWSR & TW_STATUS_MASK
	switch (TWSR) {
    9220:	80 91 71 00 	lds	r24, 0x0071
    9224:	99 27       	eor	r25, r25
    9226:	88 36       	cpi	r24, 0x68	; 104
    9228:	91 05       	cpc	r25, r1
    922a:	09 f4       	brne	.+2      	; 0x922e
    922c:	4f c2       	rjmp	.+1182   	; 0x96cc
    922e:	89 36       	cpi	r24, 0x69	; 105
    9230:	91 05       	cpc	r25, r1
    9232:	0c f0       	brlt	.+2      	; 0x9236
    9234:	3f c0       	rjmp	.+126    	; 0x92b4
    9236:	80 33       	cpi	r24, 0x30	; 48
    9238:	91 05       	cpc	r25, r1
    923a:	09 f4       	brne	.+2      	; 0x923e
    923c:	75 c1       	rjmp	.+746    	; 0x9528
    923e:	81 33       	cpi	r24, 0x31	; 49
    9240:	91 05       	cpc	r25, r1
    9242:	bc f4       	brge	.+46     	; 0x9272
    9244:	88 31       	cpi	r24, 0x18	; 24
    9246:	91 05       	cpc	r25, r1
    9248:	09 f4       	brne	.+2      	; 0x924c
    924a:	84 c0       	rjmp	.+264    	; 0x9354
    924c:	89 31       	cpi	r24, 0x19	; 25
    924e:	91 05       	cpc	r25, r1
    9250:	44 f4       	brge	.+16     	; 0x9262
    9252:	88 30       	cpi	r24, 0x08	; 8
    9254:	91 05       	cpc	r25, r1
    9256:	09 f4       	brne	.+2      	; 0x925a
    9258:	6e c0       	rjmp	.+220    	; 0x9336
    925a:	40 97       	sbiw	r24, 0x10	; 16
    925c:	09 f4       	brne	.+2      	; 0x9260
    925e:	6f c0       	rjmp	.+222    	; 0x933e
    9260:	a5 c2       	rjmp	.+1354   	; 0x97ac
    9262:	80 32       	cpi	r24, 0x20	; 32
    9264:	91 05       	cpc	r25, r1
    9266:	09 f4       	brne	.+2      	; 0x926a
    9268:	4d c1       	rjmp	.+666    	; 0x9504
    926a:	88 97       	sbiw	r24, 0x28	; 40
    926c:	09 f4       	brne	.+2      	; 0x9270
    926e:	94 c0       	rjmp	.+296    	; 0x9398
    9270:	9d c2       	rjmp	.+1338   	; 0x97ac
    9272:	88 34       	cpi	r24, 0x48	; 72
    9274:	91 05       	cpc	r25, r1
    9276:	09 f4       	brne	.+2      	; 0x927a
    9278:	8f c1       	rjmp	.+798    	; 0x9598
    927a:	89 34       	cpi	r24, 0x49	; 73
    927c:	91 05       	cpc	r25, r1
    927e:	4c f4       	brge	.+18     	; 0x9292
    9280:	88 33       	cpi	r24, 0x38	; 56
    9282:	91 05       	cpc	r25, r1
    9284:	09 f4       	brne	.+2      	; 0x9288
    9286:	90 c1       	rjmp	.+800    	; 0x95a8
    9288:	80 34       	cpi	r24, 0x40	; 64
    928a:	91 05       	cpc	r25, r1
    928c:	09 f4       	brne	.+2      	; 0x9290
    928e:	5b c1       	rjmp	.+694    	; 0x9546
    9290:	8d c2       	rjmp	.+1306   	; 0x97ac
    9292:	88 35       	cpi	r24, 0x58	; 88
    9294:	91 05       	cpc	r25, r1
    9296:	09 f4       	brne	.+2      	; 0x929a
    9298:	8f c1       	rjmp	.+798    	; 0x95b8
    929a:	89 35       	cpi	r24, 0x59	; 89
    929c:	91 05       	cpc	r25, r1
    929e:	2c f4       	brge	.+10     	; 0x92aa
    92a0:	80 35       	cpi	r24, 0x50	; 80
    92a2:	91 05       	cpc	r25, r1
    92a4:	09 f4       	brne	.+2      	; 0x92a8
    92a6:	5e c1       	rjmp	.+700    	; 0x9564
    92a8:	81 c2       	rjmp	.+1282   	; 0x97ac
    92aa:	80 36       	cpi	r24, 0x60	; 96
    92ac:	91 05       	cpc	r25, r1
    92ae:	09 f4       	brne	.+2      	; 0x92b2
    92b0:	0d c2       	rjmp	.+1050   	; 0x96cc
    92b2:	7c c2       	rjmp	.+1272   	; 0x97ac
    92b4:	88 39       	cpi	r24, 0x98	; 152
    92b6:	91 05       	cpc	r25, r1
    92b8:	09 f4       	brne	.+2      	; 0x92bc
    92ba:	3d c2       	rjmp	.+1146   	; 0x9736
    92bc:	89 39       	cpi	r24, 0x99	; 153
    92be:	91 05       	cpc	r25, r1
    92c0:	cc f4       	brge	.+50     	; 0x92f4
    92c2:	80 38       	cpi	r24, 0x80	; 128
    92c4:	91 05       	cpc	r25, r1
    92c6:	09 f4       	brne	.+2      	; 0x92ca
    92c8:	0e c2       	rjmp	.+1052   	; 0x96e6
    92ca:	81 38       	cpi	r24, 0x81	; 129
    92cc:	91 05       	cpc	r25, r1
    92ce:	4c f4       	brge	.+18     	; 0x92e2
    92d0:	80 37       	cpi	r24, 0x70	; 112
    92d2:	91 05       	cpc	r25, r1
    92d4:	09 f4       	brne	.+2      	; 0x92d8
    92d6:	f7 c1       	rjmp	.+1006   	; 0x96c6
    92d8:	88 37       	cpi	r24, 0x78	; 120
    92da:	91 05       	cpc	r25, r1
    92dc:	09 f4       	brne	.+2      	; 0x92e0
    92de:	f3 c1       	rjmp	.+998    	; 0x96c6
    92e0:	65 c2       	rjmp	.+1226   	; 0x97ac
    92e2:	88 38       	cpi	r24, 0x88	; 136
    92e4:	91 05       	cpc	r25, r1
    92e6:	09 f4       	brne	.+2      	; 0x92ea
    92e8:	26 c2       	rjmp	.+1100   	; 0x9736
    92ea:	80 39       	cpi	r24, 0x90	; 144
    92ec:	91 05       	cpc	r25, r1
    92ee:	09 f4       	brne	.+2      	; 0x92f2
    92f0:	fa c1       	rjmp	.+1012   	; 0x96e6
    92f2:	5c c2       	rjmp	.+1208   	; 0x97ac
    92f4:	80 3b       	cpi	r24, 0xB0	; 176
    92f6:	91 05       	cpc	r25, r1
    92f8:	09 f4       	brne	.+2      	; 0x92fc
    92fa:	8b c1       	rjmp	.+790    	; 0x9612
    92fc:	81 3b       	cpi	r24, 0xB1	; 177
    92fe:	91 05       	cpc	r25, r1
    9300:	4c f4       	brge	.+18     	; 0x9314
    9302:	80 3a       	cpi	r24, 0xA0	; 160
    9304:	91 05       	cpc	r25, r1
    9306:	09 f4       	brne	.+2      	; 0x930a
    9308:	33 c2       	rjmp	.+1126   	; 0x9770
    930a:	88 3a       	cpi	r24, 0xA8	; 168
    930c:	91 05       	cpc	r25, r1
    930e:	09 f4       	brne	.+2      	; 0x9312
    9310:	80 c1       	rjmp	.+768    	; 0x9612
    9312:	4c c2       	rjmp	.+1176   	; 0x97ac
    9314:	80 3c       	cpi	r24, 0xC0	; 192
    9316:	91 05       	cpc	r25, r1
    9318:	09 f4       	brne	.+2      	; 0x931c
    931a:	ad c1       	rjmp	.+858    	; 0x9676
    931c:	81 3c       	cpi	r24, 0xC1	; 193
    931e:	91 05       	cpc	r25, r1
    9320:	2c f4       	brge	.+10     	; 0x932c
    9322:	88 3b       	cpi	r24, 0xB8	; 184
    9324:	91 05       	cpc	r25, r1
    9326:	09 f4       	brne	.+2      	; 0x932a
    9328:	84 c1       	rjmp	.+776    	; 0x9632
    932a:	40 c2       	rjmp	.+1152   	; 0x97ac
    932c:	88 3c       	cpi	r24, 0xC8	; 200
    932e:	91 05       	cpc	r25, r1
    9330:	09 f4       	brne	.+2      	; 0x9334
    9332:	c0 c1       	rjmp	.+896    	; 0x96b4
    9334:	3b c2       	rjmp	.+1142   	; 0x97ac
		/*************************
		 * Master General States *
		 *************************/
	case TWI_START: /* 0x08 */
		addrFailCnt = 0;
    9336:	10 92 a8 0b 	sts	0x0BA8, r1
		i2c.idx = 0;
    933a:	10 92 b0 0b 	sts	0x0BB0, r1
		// Fall through!
		
	case TWI_REP_START: /* 0x10 */
		i2c_setByte(i2c.addr|((i2c.flags & I2C_TX_FLAG)?0:1));  // only set R/W bit if reading
    933e:	80 91 ac 0b 	lds	r24, 0x0BAC
    9342:	28 2f       	mov	r18, r24
    9344:	33 27       	eor	r19, r19
    9346:	80 91 b9 0b 	lds	r24, 0x0BB9
    934a:	86 ff       	sbrs	r24, 6
    934c:	21 60       	ori	r18, 0x01	; 1
    934e:	20 93 73 00 	sts	0x0073, r18
    9352:	1d c0       	rjmp	.+58     	; 0x938e
		i2c_setCtrlReg((1<<TWINT)|(1<<TWEN)|(1<<TWIE));
		break;
		
	case TWI_ARB_LOST: /* 0x38 */
		i2c_setCtrlReg((1<<TWINT)|(1<<TWSTA)|(1<<TWEN)|(1<<TWIE)); // Initate a (RE)START condition
		// TWI hardware will resend start when bus is free and signal TWI_RESTART
		break;
		
		
		
		/*****************************
		 * Master Transmitter States *
		 *****************************/
	case TWI_MTX_ADR_ACK: /* 0x18 */
		i2c.state = I2C_MASTER_TX;
    9354:	84 e0       	ldi	r24, 0x04	; 4
    9356:	80 93 a9 0b 	sts	0x0BA9, r24
		if (i2c.flags & I2C_SOS_MSG_FLAG) {
    935a:	80 91 b9 0b 	lds	r24, 0x0BB9
    935e:	87 ff       	sbrs	r24, 7
    9360:	18 c0       	rjmp	.+48     	; 0x9392
			// this is a difference between the i2c and uart
			// uart uses a protocol byte for BOTH raw and sos_msgs
			// i2c ONLY sends a protocol byte in the case of a sos_msg
			i2c_setByte(HDLC_SOS_MSG);
    9362:	81 e0       	ldi	r24, 0x01	; 1
    9364:	80 93 73 00 	sts	0x0073, r24
			i2c.msg_state = SOS_MSG_TX_HDR;
    9368:	87 e0       	ldi	r24, 0x07	; 7
    936a:	80 93 aa 0b 	sts	0x0BAA, r24
extern uint16_t crcTable[256] PROGMEM;  //!< this is defined in crc.c

static inline uint16_t crcByte(uint16_t oldCrc, uint8_t byte)
{
  uint8_t *magic = (uint8_t *)&crcTable[oldCrc >> 8 ^ byte];
    936e:	e6 e3       	ldi	r30, 0x36	; 54
    9370:	f3 e0       	ldi	r31, 0x03	; 3

  return pgm_read_byte(magic) | ((uint8_t)oldCrc ^ pgm_read_byte(magic + 1)) << 8;
    9372:	84 91       	lpm	r24, Z
    9374:	28 2f       	mov	r18, r24
    9376:	33 27       	eor	r19, r19
    9378:	31 96       	adiw	r30, 0x01	; 1
    937a:	84 91       	lpm	r24, Z
    937c:	99 27       	eor	r25, r25
    937e:	98 2f       	mov	r25, r24
    9380:	88 27       	eor	r24, r24
    9382:	28 2b       	or	r18, r24
    9384:	39 2b       	or	r19, r25
    9386:	30 93 ae 0b 	sts	0x0BAE, r19
    938a:	20 93 ad 0b 	sts	0x0BAD, r18
			// this is a sos_msg so a crc is required
			i2c.crc = crcByte(0, HDLC_SOS_MSG);
			i2c_setCtrlReg((1<<TWINT)|(1<<TWEN)|(1<<TWIE));
    938e:	85 e8       	ldi	r24, 0x85	; 133
    9390:	ec c1       	rjmp	.+984    	; 0x976a
			break;
		} else {
			i2c.msg_state = SOS_MSG_TX_RAW;
    9392:	82 e0       	ldi	r24, 0x02	; 2
    9394:	80 93 aa 0b 	sts	0x0BAA, r24
		} // fall through
		
	case TWI_MTX_DATA_ACK: /* 0x28 */
		switch (i2c.msg_state) {
    9398:	80 91 aa 0b 	lds	r24, 0x0BAA
    939c:	99 27       	eor	r25, r25
    939e:	88 30       	cpi	r24, 0x08	; 8
    93a0:	91 05       	cpc	r25, r1
    93a2:	09 f4       	brne	.+2      	; 0x93a6
    93a4:	4e c0       	rjmp	.+156    	; 0x9442
    93a6:	89 30       	cpi	r24, 0x09	; 9
    93a8:	91 05       	cpc	r25, r1
    93aa:	3c f4       	brge	.+14     	; 0x93ba
    93ac:	82 30       	cpi	r24, 0x02	; 2
    93ae:	91 05       	cpc	r25, r1
    93b0:	09 f4       	brne	.+2      	; 0x93b4
    93b2:	47 c0       	rjmp	.+142    	; 0x9442
    93b4:	07 97       	sbiw	r24, 0x07	; 7
    93b6:	69 f0       	breq	.+26     	; 0x93d2
    93b8:	ea cf       	rjmp	.-44     	; 0x938e
    93ba:	8a 30       	cpi	r24, 0x0A	; 10
    93bc:	91 05       	cpc	r25, r1
    93be:	09 f4       	brne	.+2      	; 0x93c2
    93c0:	8a c0       	rjmp	.+276    	; 0x94d6
    93c2:	8a 30       	cpi	r24, 0x0A	; 10
    93c4:	91 05       	cpc	r25, r1
    93c6:	0c f4       	brge	.+2      	; 0x93ca
    93c8:	7b c0       	rjmp	.+246    	; 0x94c0
    93ca:	0b 97       	sbiw	r24, 0x0b	; 11
    93cc:	09 f4       	brne	.+2      	; 0x93d0
    93ce:	94 c0       	rjmp	.+296    	; 0x94f8
    93d0:	de cf       	rjmp	.-68     	; 0x938e
		case SOS_MSG_TX_HDR:
			i2c_setByte(((uint8_t*)(i2c.msgBuf))[i2c.idx]);
    93d2:	60 91 b0 0b 	lds	r22, 0x0BB0
    93d6:	e0 91 b1 0b 	lds	r30, 0x0BB1
    93da:	f0 91 b2 0b 	lds	r31, 0x0BB2
    93de:	e6 0f       	add	r30, r22
    93e0:	f1 1d       	adc	r31, r1
    93e2:	80 81       	ld	r24, Z
    93e4:	80 93 73 00 	sts	0x0073, r24

extern uint16_t crcTable[256] PROGMEM;  //!< this is defined in crc.c

static inline uint16_t crcByte(uint16_t oldCrc, uint8_t byte)
{
    93e8:	40 91 ad 0b 	lds	r20, 0x0BAD
    93ec:	50 91 ae 0b 	lds	r21, 0x0BAE
    93f0:	80 81       	ld	r24, Z
  uint8_t *magic = (uint8_t *)&crcTable[oldCrc >> 8 ^ byte];
    93f2:	e5 2f       	mov	r30, r21
    93f4:	ff 27       	eor	r31, r31
    93f6:	99 27       	eor	r25, r25
    93f8:	e8 27       	eor	r30, r24
    93fa:	f9 27       	eor	r31, r25
    93fc:	ee 0f       	add	r30, r30
    93fe:	ff 1f       	adc	r31, r31
    9400:	ec 5c       	subi	r30, 0xCC	; 204
    9402:	fc 4f       	sbci	r31, 0xFC	; 252

  return pgm_read_byte(magic) | ((uint8_t)oldCrc ^ pgm_read_byte(magic + 1)) << 8;
    9404:	84 91       	lpm	r24, Z
    9406:	28 2f       	mov	r18, r24
    9408:	33 27       	eor	r19, r19
    940a:	31 96       	adiw	r30, 0x01	; 1
    940c:	84 91       	lpm	r24, Z
    940e:	84 27       	eor	r24, r20
    9410:	99 27       	eor	r25, r25
    9412:	98 2f       	mov	r25, r24
    9414:	88 27       	eor	r24, r24
    9416:	28 2b       	or	r18, r24
    9418:	39 2b       	or	r19, r25
    941a:	30 93 ae 0b 	sts	0x0BAE, r19
    941e:	20 93 ad 0b 	sts	0x0BAD, r18
			// this is a sos_msg so a crc is required
			i2c.crc = crcByte(i2c.crc, ((uint8_t*)(i2c.msgBuf))[i2c.idx]);
			i2c.idx++;
    9422:	6f 5f       	subi	r22, 0xFF	; 255
    9424:	60 93 b0 0b 	sts	0x0BB0, r22
			if (i2c.idx == SOS_MSG_HEADER_SIZE) {
    9428:	68 30       	cpi	r22, 0x08	; 8
    942a:	09 f0       	breq	.+2      	; 0x942e
    942c:	b0 cf       	rjmp	.-160    	; 0x938e
				i2c.idx = 0;
    942e:	10 92 b0 0b 	sts	0x0BB0, r1
				i2c.txPending = i2c.msgLen + SOS_MSG_CRC_SIZE;
    9432:	80 91 af 0b 	lds	r24, 0x0BAF
    9436:	8e 5f       	subi	r24, 0xFE	; 254
    9438:	80 93 b7 0b 	sts	0x0BB7, r24
				i2c.msg_state = SOS_MSG_TX_DATA;
    943c:	60 93 aa 0b 	sts	0x0BAA, r22
			}
			break;
    9440:	a6 cf       	rjmp	.-180    	; 0x938e
			
		case SOS_MSG_TX_RAW:
		case SOS_MSG_TX_DATA:
			i2c_setByte(i2c.dataBuf[i2c.idx]);
    9442:	60 91 b0 0b 	lds	r22, 0x0BB0
    9446:	e0 91 b3 0b 	lds	r30, 0x0BB3
    944a:	f0 91 b4 0b 	lds	r31, 0x0BB4
    944e:	e6 0f       	add	r30, r22
    9450:	f1 1d       	adc	r31, r1
    9452:	80 81       	ld	r24, Z
    9454:	80 93 73 00 	sts	0x0073, r24
			if (i2c.flags & I2C_CRC_FLAG) {
    9458:	70 91 b9 0b 	lds	r23, 0x0BB9
    945c:	77 ff       	sbrs	r23, 7
    945e:	1d c0       	rjmp	.+58     	; 0x949a

extern uint16_t crcTable[256] PROGMEM;  //!< this is defined in crc.c

static inline uint16_t crcByte(uint16_t oldCrc, uint8_t byte)
{
    9460:	40 91 ad 0b 	lds	r20, 0x0BAD
    9464:	50 91 ae 0b 	lds	r21, 0x0BAE
    9468:	80 81       	ld	r24, Z
  uint8_t *magic = (uint8_t *)&crcTable[oldCrc >> 8 ^ byte];
    946a:	e5 2f       	mov	r30, r21
    946c:	ff 27       	eor	r31, r31
    946e:	99 27       	eor	r25, r25
    9470:	e8 27       	eor	r30, r24
    9472:	f9 27       	eor	r31, r25
    9474:	ee 0f       	add	r30, r30
    9476:	ff 1f       	adc	r31, r31
    9478:	ec 5c       	subi	r30, 0xCC	; 204
    947a:	fc 4f       	sbci	r31, 0xFC	; 252

  return pgm_read_byte(magic) | ((uint8_t)oldCrc ^ pgm_read_byte(magic + 1)) << 8;
    947c:	84 91       	lpm	r24, Z
    947e:	28 2f       	mov	r18, r24
    9480:	33 27       	eor	r19, r19
    9482:	31 96       	adiw	r30, 0x01	; 1
    9484:	84 91       	lpm	r24, Z
    9486:	84 27       	eor	r24, r20
    9488:	99 27       	eor	r25, r25
    948a:	98 2f       	mov	r25, r24
    948c:	88 27       	eor	r24, r24
    948e:	28 2b       	or	r18, r24
    9490:	39 2b       	or	r19, r25
    9492:	30 93 ae 0b 	sts	0x0BAE, r19
    9496:	20 93 ad 0b 	sts	0x0BAD, r18
				i2c.crc = crcByte(i2c.crc, i2c.dataBuf[i2c.idx]);
			}
			i2c.idx++;
    949a:	96 2f       	mov	r25, r22
    949c:	9f 5f       	subi	r25, 0xFF	; 255
    949e:	90 93 b0 0b 	sts	0x0BB0, r25
			if (i2c.idx == i2c.msgLen) {
    94a2:	80 91 af 0b 	lds	r24, 0x0BAF
    94a6:	98 17       	cp	r25, r24
    94a8:	09 f0       	breq	.+2      	; 0x94ac
    94aa:	71 cf       	rjmp	.-286    	; 0x938e
				if (!(i2c.flags & I2C_CRC_FLAG)) {
    94ac:	77 fd       	sbrc	r23, 7
    94ae:	03 c0       	rjmp	.+6      	; 0x94b6
					// send stop bit and reset interface to ready state
					i2c.txPending = 0;
    94b0:	10 92 b7 0b 	sts	0x0BB7, r1
    94b4:	1d c0       	rjmp	.+58     	; 0x94f0
					i2c.msg_state = SOS_MSG_TX_END;
				} else {
					i2c.txPending = SOS_MSG_CRC_SIZE;  // no unsent bytes
    94b6:	82 e0       	ldi	r24, 0x02	; 2
    94b8:	80 93 b7 0b 	sts	0x0BB7, r24
					i2c.msg_state = SOS_MSG_TX_CRC_LOW;
    94bc:	89 e0       	ldi	r24, 0x09	; 9
    94be:	19 c0       	rjmp	.+50     	; 0x94f2
				}
			}
			break;
			
		case SOS_MSG_TX_CRC_LOW:
			i2c_setByte((uint8_t)(i2c.crc));
    94c0:	80 91 ad 0b 	lds	r24, 0x0BAD
    94c4:	80 93 73 00 	sts	0x0073, r24
			i2c.txPending--;
    94c8:	80 91 b7 0b 	lds	r24, 0x0BB7
    94cc:	81 50       	subi	r24, 0x01	; 1
    94ce:	80 93 b7 0b 	sts	0x0BB7, r24
			i2c.msg_state = SOS_MSG_TX_CRC_HIGH;
    94d2:	8a e0       	ldi	r24, 0x0A	; 10
    94d4:	0e c0       	rjmp	.+28     	; 0x94f2
			break;
			
		case SOS_MSG_TX_CRC_HIGH:
			i2c_setByte((uint8_t)(i2c.crc>>8));
    94d6:	80 91 ad 0b 	lds	r24, 0x0BAD
    94da:	90 91 ae 0b 	lds	r25, 0x0BAE
    94de:	89 2f       	mov	r24, r25
    94e0:	99 27       	eor	r25, r25
    94e2:	80 93 73 00 	sts	0x0073, r24
						i2c.txPending--;
    94e6:	80 91 b7 0b 	lds	r24, 0x0BB7
    94ea:	81 50       	subi	r24, 0x01	; 1
    94ec:	80 93 b7 0b 	sts	0x0BB7, r24
						i2c.msg_state = SOS_MSG_TX_END;
    94f0:	8b e0       	ldi	r24, 0x0B	; 11
    94f2:	80 93 aa 0b 	sts	0x0BAA, r24
						break;
    94f6:	4b cf       	rjmp	.-362    	; 0x938e

					case SOS_MSG_TX_END:
						// send stop bit and reset interface to ready state
						i2c_setCtrlReg((1<<TWINT)|(1<<TWEA)|(1<<TWSTO)|(1<<TWEN)|(1<<TWIE));
    94f8:	85 ed       	ldi	r24, 0xD5	; 213
    94fa:	80 93 74 00 	sts	0x0074, r24
						i2c_send_done(i2c.flags);
    94fe:	80 91 b9 0b 	lds	r24, 0x0BB9
    9502:	0f c0       	rjmp	.+30     	; 0x9522
						i2c.state = restoreState();
						return;
					default:
						break;
				}
				// normal send byte all stop conditions must return and not get here
				i2c_setCtrlReg((1<<TWINT)|(1<<TWEN)|(1<<TWIE));
				break;

			case TWI_MTX_ADR_NACK: /* 0x20 */
				if (addrFailCnt++ < MAX_ADDR_FAIL) {
    9504:	80 91 a8 0b 	lds	r24, 0x0BA8
    9508:	98 2f       	mov	r25, r24
    950a:	8f 5f       	subi	r24, 0xFF	; 255
    950c:	80 93 a8 0b 	sts	0x0BA8, r24
    9510:	93 30       	cpi	r25, 0x03	; 3
    9512:	08 f4       	brcc	.+2      	; 0x9516
    9514:	49 c0       	rjmp	.+146    	; 0x95a8
					// try restarting MAX_ADDR_FAIL times then fail
					i2c_setCtrlReg((1<<TWINT)|(1<<TWSTA)|(1<<TWEN)|(1<<TWIE));
				} else {
					// reset i2c and send msg fail to process
					i2c_setCtrlReg((1<<TWINT)|(1<<TWEA)|(1<<TWSTO)|(1<<TWEN)|(1<<TWIE));
    9516:	85 ed       	ldi	r24, 0xD5	; 213
    9518:	80 93 74 00 	sts	0x0074, r24
					i2c_send_done(i2c.flags|I2C_ERROR_FLAG);
    951c:	80 91 b9 0b 	lds	r24, 0x0BB9
    9520:	81 60       	ori	r24, 0x01	; 1
    9522:	0e 94 e6 4c 	call	0x99cc
    9526:	3d c1       	rjmp	.+634    	; 0x97a2
					i2c.state = restoreState();
				}
				break;

			case TWI_MTX_DATA_NACK: /* 0x30 */
				// reset i2c and send msg fail to process
				i2c_setCtrlReg((1<<TWINT)|(1<<TWEA)|(1<<TWSTO)|(1<<TWEN)|(1<<TWIE));
    9528:	85 ed       	ldi	r24, 0xD5	; 213
    952a:	80 93 74 00 	sts	0x0074, r24
				i2c.txPending = i2c.txPending - i2c.idx + 1; // last byte failed
    952e:	80 91 b7 0b 	lds	r24, 0x0BB7
    9532:	90 91 b0 0b 	lds	r25, 0x0BB0
    9536:	89 1b       	sub	r24, r25
    9538:	8f 5f       	subi	r24, 0xFF	; 255
    953a:	80 93 b7 0b 	sts	0x0BB7, r24
				i2c_send_done(i2c.flags|I2C_BUFF_ERR_FLAG);
    953e:	80 91 b9 0b 	lds	r24, 0x0BB9
    9542:	82 60       	ori	r24, 0x02	; 2
    9544:	ee cf       	rjmp	.-36     	; 0x9522
				i2c.state = restoreState();
				break;


			
				/***************************
				 * Master Receiver  States *
				 ***************************/
			case TWI_MRX_ADR_ACK: /* 0x40 */
				i2c.state = I2C_MASTER_RX;
    9546:	85 e0       	ldi	r24, 0x05	; 5
    9548:	80 93 a9 0b 	sts	0x0BA9, r24
				i2c.rxStatus = i2c.flags;
    954c:	80 91 b9 0b 	lds	r24, 0x0BB9
    9550:	80 93 b8 0b 	sts	0x0BB8, r24
				// all master rx are done in raw mode with NO protocol byte
				i2c.msg_state = SOS_MSG_RX_RAW;
    9554:	83 e0       	ldi	r24, 0x03	; 3
    9556:	80 93 aa 0b 	sts	0x0BAA, r24
				// a sos message will never be recieved as a manster
				if (i2c.msgLen == 1) {
    955a:	80 91 af 0b 	lds	r24, 0x0BAF
    955e:	81 30       	cpi	r24, 0x01	; 1
    9560:	c9 f0       	breq	.+50     	; 0x9594
    9562:	02 c1       	rjmp	.+516    	; 0x9768
					i2c.msg_state = SOS_MSG_RX_END;
					i2c_setCtrlReg((1<<TWINT)|(1<<TWEN)|(1<<TWIE));
				} else {
					i2c_setCtrlReg((1<<TWINT)|(1<<TWEA)|(1<<TWEN)|(1<<TWIE));
				}
				break;

			case TWI_MRX_DATA_ACK: /* 0x50 */
				i2c.dataBuf[i2c.idx++] = i2c_getByte();
    9564:	90 91 b0 0b 	lds	r25, 0x0BB0
    9568:	e0 91 b3 0b 	lds	r30, 0x0BB3
    956c:	f0 91 b4 0b 	lds	r31, 0x0BB4
    9570:	e9 0f       	add	r30, r25
    9572:	f1 1d       	adc	r31, r1
    9574:	80 91 73 00 	lds	r24, 0x0073
    9578:	80 83       	st	Z, r24
    957a:	9f 5f       	subi	r25, 0xFF	; 255
    957c:	90 93 b0 0b 	sts	0x0BB0, r25

				if (i2c.idx < (i2c.msgLen-1)) {
    9580:	29 2f       	mov	r18, r25
    9582:	33 27       	eor	r19, r19
    9584:	80 91 af 0b 	lds	r24, 0x0BAF
    9588:	99 27       	eor	r25, r25
    958a:	01 97       	sbiw	r24, 0x01	; 1
    958c:	28 17       	cp	r18, r24
    958e:	39 07       	cpc	r19, r25
    9590:	0c f4       	brge	.+2      	; 0x9594
    9592:	ea c0       	rjmp	.+468    	; 0x9768
					i2c_setCtrlReg((1<<TWINT)|(1<<TWEA)|(1<<TWEN)|(1<<TWIE));
				} else { // unset TWEA (Send NACK after next/last byte)
					i2c.msg_state = SOS_MSG_RX_END;
    9594:	81 e1       	ldi	r24, 0x11	; 17
    9596:	ad cf       	rjmp	.-166    	; 0x94f2
					i2c_setCtrlReg((1<<TWINT)|(1<<TWEN)|(1<<TWIE));
				}
				break;

			case TWI_MRX_ADR_NACK: /* 0x48 */
				if (addrFailCnt++ < MAX_ADDR_FAIL) {
    9598:	80 91 a8 0b 	lds	r24, 0x0BA8
    959c:	98 2f       	mov	r25, r24
    959e:	8f 5f       	subi	r24, 0xFF	; 255
    95a0:	80 93 a8 0b 	sts	0x0BA8, r24
    95a4:	93 30       	cpi	r25, 0x03	; 3
    95a6:	10 f4       	brcc	.+4      	; 0x95ac
					// tryrestarting MAX_ADDR_FAIL times then fail
					i2c_setCtrlReg((1<<TWINT)|(1<<TWSTA)|(1<<TWEN)|(1<<TWIE));
    95a8:	85 ea       	ldi	r24, 0xA5	; 165
    95aa:	df c0       	rjmp	.+446    	; 0x976a
					break;
				}
				i2c_setCtrlReg((1<<TWINT)|(1<<TWEA)|(1<<TWSTO)|(1<<TWEN)|(1<<TWIE));
    95ac:	85 ed       	ldi	r24, 0xD5	; 213
    95ae:	80 93 74 00 	sts	0x0074, r24

				// return data
				i2c_read_done(i2c.dataBuf, i2c.idx, i2c.rxStatus);
    95b2:	40 91 b8 0b 	lds	r20, 0x0BB8
    95b6:	20 c0       	rjmp	.+64     	; 0x95f8
				i2c.idx = 0;
				i2c.rxStatus = 0;

				i2c.state = restoreState();
				break;

			case TWI_MRX_DATA_NACK: /* 0x58 */
				i2c.dataBuf[i2c.idx++] = i2c_getByte();
    95b8:	90 91 b0 0b 	lds	r25, 0x0BB0
    95bc:	e0 91 b3 0b 	lds	r30, 0x0BB3
    95c0:	f0 91 b4 0b 	lds	r31, 0x0BB4
    95c4:	e9 0f       	add	r30, r25
    95c6:	f1 1d       	adc	r31, r1
    95c8:	80 91 73 00 	lds	r24, 0x0073
    95cc:	80 83       	st	Z, r24
    95ce:	9f 5f       	subi	r25, 0xFF	; 255
    95d0:	90 93 b0 0b 	sts	0x0BB0, r25

				if (i2c.idx < i2c.msgLen) {
    95d4:	80 91 af 0b 	lds	r24, 0x0BAF
    95d8:	98 17       	cp	r25, r24
    95da:	28 f4       	brcc	.+10     	; 0x95e6
					// nack from master indication rx done
					// send stop bit, clear interrupt and reset interface to ready state
					i2c.rxStatus |= I2C_BUFF_ERR_FLAG;
    95dc:	80 91 b8 0b 	lds	r24, 0x0BB8
    95e0:	82 60       	ori	r24, 0x02	; 2
    95e2:	80 93 b8 0b 	sts	0x0BB8, r24
				}

				// set flags and return data
				i2c.rxStatus |= I2C_BUFF_DIRTY_FLAG;
    95e6:	80 91 b8 0b 	lds	r24, 0x0BB8
    95ea:	88 60       	ori	r24, 0x08	; 8
    95ec:	80 93 b8 0b 	sts	0x0BB8, r24
				
				i2c_setCtrlReg((1<<TWINT)|(1<<TWEA)|(1<<TWSTO)|(1<<TWEN)|(1<<TWIE));
    95f0:	95 ed       	ldi	r25, 0xD5	; 213
    95f2:	90 93 74 00 	sts	0x0074, r25
				
				i2c_read_done(i2c.dataBuf, i2c.idx, i2c.rxStatus);
    95f6:	48 2f       	mov	r20, r24
    95f8:	60 91 b0 0b 	lds	r22, 0x0BB0
    95fc:	80 91 b3 0b 	lds	r24, 0x0BB3
    9600:	90 91 b4 0b 	lds	r25, 0x0BB4
    9604:	0e 94 2c 4d 	call	0x9a58
				i2c.idx = 0;
    9608:	10 92 b0 0b 	sts	0x0BB0, r1
				i2c.rxStatus = 0;
    960c:	10 92 b8 0b 	sts	0x0BB8, r1
    9610:	c8 c0       	rjmp	.+400    	; 0x97a2
				
				i2c.state = restoreState();
				break;


			
				/****************************
				 * Slave Transmitter States *
				 ****************************/
			case TWI_STX_ADR_ACK: /* 0xA8 */
			case TWI_STX_ADR_ACK_M_ARB_LOST: /* 0xB0 */
				if (i2c.state != I2C_SLAVE_WAIT) {
    9612:	80 91 a9 0b 	lds	r24, 0x0BA9
    9616:	86 30       	cpi	r24, 0x06	; 6
    9618:	21 f0       	breq	.+8      	; 0x9622
					i2c_send_done(i2c.flags|I2C_ERROR_FLAG);
    961a:	80 91 b9 0b 	lds	r24, 0x0BB9
    961e:	81 60       	ori	r24, 0x01	; 1
    9620:	cd c0       	rjmp	.+410    	; 0x97bc
    9622:	80 93 a6 0b 	sts	0x0BA6, r24
					break;
				} else {
					saveState(i2c.state);
					i2c.state = I2C_SLAVE_TX;
    9626:	87 e0       	ldi	r24, 0x07	; 7
    9628:	80 93 a9 0b 	sts	0x0BA9, r24
					i2c.msg_state = SOS_MSG_TX_RAW;
    962c:	82 e0       	ldi	r24, 0x02	; 2
    962e:	80 93 aa 0b 	sts	0x0BAA, r24
				}
				// fall through

			case TWI_STX_DATA_ACK: /* 0xB8 */
				if (i2c.msg_state == SOS_MSG_TX_RAW) {
    9632:	80 91 aa 0b 	lds	r24, 0x0BAA
    9636:	82 30       	cpi	r24, 0x02	; 2
    9638:	09 f0       	breq	.+2      	; 0x963c
    963a:	c2 c0       	rjmp	.+388    	; 0x97c0
					i2c_setByte(i2c.dataBuf[i2c.idx++]);
    963c:	90 91 b0 0b 	lds	r25, 0x0BB0
    9640:	e0 91 b3 0b 	lds	r30, 0x0BB3
    9644:	f0 91 b4 0b 	lds	r31, 0x0BB4
    9648:	e9 0f       	add	r30, r25
    964a:	f1 1d       	adc	r31, r1
    964c:	9f 5f       	subi	r25, 0xFF	; 255
    964e:	90 93 b0 0b 	sts	0x0BB0, r25
    9652:	80 81       	ld	r24, Z
    9654:	80 93 73 00 	sts	0x0073, r24

					// unset TWEA (Send NACK after next/last byte)
					if (i2c.msgLen == i2c.idx) {
    9658:	80 91 af 0b 	lds	r24, 0x0BAF
    965c:	89 17       	cp	r24, r25
    965e:	09 f0       	breq	.+2      	; 0x9662
    9660:	83 c0       	rjmp	.+262    	; 0x9768
						i2c_setCtrlReg((1<<TWINT)|(1<<TWEN)|(1<<TWIE));
    9662:	85 e8       	ldi	r24, 0x85	; 133
    9664:	80 93 74 00 	sts	0x0074, r24
						i2c.txPending = 1; // last byte failed
    9668:	81 e0       	ldi	r24, 0x01	; 1
    966a:	80 93 b7 0b 	sts	0x0BB7, r24
						i2c.msg_state = SOS_MSG_TX_END;
    966e:	8b e0       	ldi	r24, 0x0B	; 11
    9670:	80 93 aa 0b 	sts	0x0BAA, r24
    9674:	a5 c0       	rjmp	.+330    	; 0x97c0
					} else { // Reset the TWI Interupt to wait to ack next byte
						i2c_setCtrlReg((1<<TWINT)|(1<<TWEA)|(1<<TWEN)|(1<<TWIE));
					}
				}
				break;

			case TWI_STX_DATA_NACK: /* 0xC0 */
				// Master has sent a NACK before expected amount of data was sent.
				// set dirty bit on send buffer go to end state and issue send done
				if (i2c.msg_state != SOS_MSG_TX_END) { 
    9676:	80 91 aa 0b 	lds	r24, 0x0BAA
    967a:	8b 30       	cpi	r24, 0x0B	; 11
    967c:	61 f0       	breq	.+24     	; 0x9696
					i2c.txPending = i2c.txPending - i2c.idx + 1; // last byte failed
    967e:	80 91 b7 0b 	lds	r24, 0x0BB7
    9682:	90 91 b0 0b 	lds	r25, 0x0BB0
    9686:	89 1b       	sub	r24, r25
    9688:	8f 5f       	subi	r24, 0xFF	; 255
    968a:	80 93 b7 0b 	sts	0x0BB7, r24
					i2c.msg_state = SOS_MSG_TX_END;
    968e:	8b e0       	ldi	r24, 0x0B	; 11
    9690:	80 93 aa 0b 	sts	0x0BAA, r24
    9694:	02 c0       	rjmp	.+4      	; 0x969a
				} else {
					i2c.txPending = 0;
    9696:	10 92 b7 0b 	sts	0x0BB7, r1
				}

				i2c_setCtrlReg((1<<TWINT)|(1<<TWEA)|(1<<TWEN)|(1<<TWIE));
    969a:	85 ec       	ldi	r24, 0xC5	; 197
    969c:	80 93 74 00 	sts	0x0074, r24

				if (i2c.msg_state == SOS_MSG_TX_END) {
    96a0:	80 91 aa 0b 	lds	r24, 0x0BAA
    96a4:	8b 30       	cpi	r24, 0x0B	; 11
    96a6:	09 f0       	breq	.+2      	; 0x96aa
    96a8:	8b c0       	rjmp	.+278    	; 0x97c0
					i2c.msg_state = SOS_MSG_NO_STATE;
    96aa:	10 92 aa 0b 	sts	0x0BAA, r1
					i2c_send_done(i2c.flags);
    96ae:	80 91 b9 0b 	lds	r24, 0x0BB9
    96b2:	84 c0       	rjmp	.+264    	; 0x97bc
				}
				break;

			case TWI_STX_DATA_ACK_LAST_BYTE: /* 0xC8 */
				i2c.msg_state = SOS_MSG_NO_STATE;
    96b4:	10 92 aa 0b 	sts	0x0BAA, r1
				i2c_setCtrlReg((1<<TWINT)|(1<<TWEA)|(1<<TWEN)|(1<<TWIE));
    96b8:	85 ec       	ldi	r24, 0xC5	; 197
    96ba:	80 93 74 00 	sts	0x0074, r24
				i2c_send_done(i2c.flags|I2C_BUFF_ERR_FLAG);
    96be:	80 91 b9 0b 	lds	r24, 0x0BB9
    96c2:	82 60       	ori	r24, 0x02	; 2
    96c4:	7b c0       	rjmp	.+246    	; 0x97bc
				break;



				/*************************
				 * Slave Receiver States *
				 *************************/
				// all receptions are done in a raw mode
				// if it is a sos message it it will be packed later
			case TWI_SRX_GEN_ACK: /* 0x70 */
			case TWI_SRX_GEN_ACK_M_ARB_LOST: /* 0x78 */
				i2c.rxStatus = I2C_GEN_ADDR_FLAG;
    96c6:	84 e0       	ldi	r24, 0x04	; 4
    96c8:	80 93 b8 0b 	sts	0x0BB8, r24
    96cc:	80 91 a9 0b 	lds	r24, 0x0BA9
    96d0:	80 93 a6 0b 	sts	0x0BA6, r24
				// fall through

			case TWI_SRX_ADR_ACK: /* 0x60 */
			case TWI_SRX_ADR_ACK_M_ARB_LOST: /* 0x68 */
				saveState(i2c.state);
				i2c.state = I2C_SLAVE_RX;
    96d4:	88 e0       	ldi	r24, 0x08	; 8
    96d6:	80 93 a9 0b 	sts	0x0BA9, r24
				i2c.msg_state = SOS_MSG_RX_RAW;
    96da:	83 e0       	ldi	r24, 0x03	; 3
    96dc:	80 93 aa 0b 	sts	0x0BAA, r24
				i2c.idx = 0;
    96e0:	10 92 b0 0b 	sts	0x0BB0, r1
    96e4:	41 c0       	rjmp	.+130    	; 0x9768
				i2c_setCtrlReg((1<<TWINT)|(1<<TWEA)|(1<<TWEN)|(1<<TWIE));
				break;

			case TWI_SRX_ADR_DATA_ACK: /* 0x80 */
			case TWI_SRX_GEN_DATA_ACK: /* 0x90 */
				if (i2c.msg_state == SOS_MSG_RX_RAW) {
    96e6:	80 91 aa 0b 	lds	r24, 0x0BAA
    96ea:	83 30       	cpi	r24, 0x03	; 3
    96ec:	e9 f5       	brne	.+122    	; 0x9768
					i2c.rxDataBuf[i2c.idx++] = i2c_getByte();
    96ee:	60 91 b0 0b 	lds	r22, 0x0BB0
    96f2:	e0 91 b5 0b 	lds	r30, 0x0BB5
    96f6:	f0 91 b6 0b 	lds	r31, 0x0BB6
    96fa:	e6 0f       	add	r30, r22
    96fc:	f1 1d       	adc	r31, r1
    96fe:	80 91 73 00 	lds	r24, 0x0073
    9702:	80 83       	st	Z, r24
    9704:	6f 5f       	subi	r22, 0xFF	; 255
    9706:	60 93 b0 0b 	sts	0x0BB0, r22
					if (i2c.idx >= I2C_MAX_MSG_LEN) { // buffer overflow
    970a:	67 ff       	sbrs	r22, 7
    970c:	2d c0       	rjmp	.+90     	; 0x9768
						i2c.msg_state = SOS_MSG_RX_END;
    970e:	81 e1       	ldi	r24, 0x11	; 17
    9710:	80 93 aa 0b 	sts	0x0BAA, r24
						
						// set flags and return data
						i2c.rxStatus |= (I2C_BUFF_DIRTY_FLAG|I2C_BUFF_ERR_FLAG);
    9714:	80 91 b8 0b 	lds	r24, 0x0BB8
    9718:	8a 60       	ori	r24, 0x0A	; 10
    971a:	80 93 b8 0b 	sts	0x0BB8, r24
						i2c_read_done(i2c.rxDataBuf, i2c.idx, i2c.rxStatus);
    971e:	48 2f       	mov	r20, r24
    9720:	80 91 b5 0b 	lds	r24, 0x0BB5
    9724:	90 91 b6 0b 	lds	r25, 0x0BB6
    9728:	0e 94 2c 4d 	call	0x9a58
						i2c.idx = 0;
    972c:	10 92 b0 0b 	sts	0x0BB0, r1
						i2c.rxStatus = 0;
    9730:	10 92 b8 0b 	sts	0x0BB8, r1
    9734:	19 c0       	rjmp	.+50     	; 0x9768
					}
				}
				i2c_setCtrlReg((1<<TWINT)|(1<<TWEA)|(1<<TWEN)|(1<<TWIE));
				break;

			case TWI_SRX_ADR_DATA_NACK: /* 0x88 */
			case TWI_SRX_GEN_DATA_NACK: /* 0x98 */
				// switch to not addressed mode
				if (i2c.msg_state == SOS_MSG_RX_RAW) {
    9736:	80 91 aa 0b 	lds	r24, 0x0BAA
    973a:	83 30       	cpi	r24, 0x03	; 3
    973c:	a9 f4       	brne	.+42     	; 0x9768
					
					// set flags and return data
					i2c.rxStatus |= I2C_BUFF_DIRTY_FLAG;
    973e:	80 91 b8 0b 	lds	r24, 0x0BB8
    9742:	88 60       	ori	r24, 0x08	; 8
    9744:	80 93 b8 0b 	sts	0x0BB8, r24
					i2c_read_done(i2c.rxDataBuf, i2c.idx, i2c.rxStatus);
    9748:	48 2f       	mov	r20, r24
    974a:	60 91 b0 0b 	lds	r22, 0x0BB0
    974e:	80 91 b5 0b 	lds	r24, 0x0BB5
    9752:	90 91 b6 0b 	lds	r25, 0x0BB6
    9756:	0e 94 2c 4d 	call	0x9a58
					i2c.idx = 0;
    975a:	10 92 b0 0b 	sts	0x0BB0, r1
					i2c.rxStatus = 0;
    975e:	10 92 b8 0b 	sts	0x0BB8, r1
					i2c.msg_state = SOS_MSG_RX_END;
    9762:	81 e1       	ldi	r24, 0x11	; 17
    9764:	80 93 aa 0b 	sts	0x0BAA, r24
				}
				i2c_setCtrlReg((1<<TWINT)|(1<<TWEA)|(1<<TWEN)|(1<<TWIE));
    9768:	85 ec       	ldi	r24, 0xC5	; 197
    976a:	80 93 74 00 	sts	0x0074, r24
				break;
    976e:	28 c0       	rjmp	.+80     	; 0x97c0

			case TWI_SRX_STOP_RESTART: /* 0xA0 */
				// reset reciever
				i2c.msg_state = SOS_MSG_NO_STATE;
    9770:	10 92 aa 0b 	sts	0x0BAA, r1
				if (i2c.idx > 0) {
    9774:	60 91 b0 0b 	lds	r22, 0x0BB0
    9778:	66 23       	and	r22, r22
    977a:	81 f0       	breq	.+32     	; 0x979c
					// need to make sure data has been read
					i2c.rxStatus |= I2C_BUFF_DIRTY_FLAG;
    977c:	80 91 b8 0b 	lds	r24, 0x0BB8
    9780:	88 60       	ori	r24, 0x08	; 8
    9782:	80 93 b8 0b 	sts	0x0BB8, r24
					i2c_read_done(i2c.rxDataBuf, i2c.idx, i2c.rxStatus);
    9786:	48 2f       	mov	r20, r24
    9788:	80 91 b5 0b 	lds	r24, 0x0BB5
    978c:	90 91 b6 0b 	lds	r25, 0x0BB6
    9790:	0e 94 2c 4d 	call	0x9a58
					i2c.idx = 0;
    9794:	10 92 b0 0b 	sts	0x0BB0, r1
					i2c.rxStatus = 0;
    9798:	10 92 b8 0b 	sts	0x0BB8, r1
				}
				i2c_setCtrlReg((1<<TWINT)|(1<<TWEA)|(1<<TWEN)|(1<<TWIE));
    979c:	85 ec       	ldi	r24, 0xC5	; 197
    979e:	80 93 74 00 	sts	0x0074, r24
    97a2:	80 91 a6 0b 	lds	r24, 0x0BA6
    97a6:	80 93 a9 0b 	sts	0x0BA9, r24
				i2c.state = restoreState();
				break;
    97aa:	0a c0       	rjmp	.+20     	; 0x97c0

				
			
				/***************
				 * Misc States *
				 ***************/
				//case TWI_NO_STATE: /* 0xF8 */
			case TWI_BUS_ERROR: /* 0x00 */
			default:
				{
					uint8_t twiStatus=0;
					// Store TWSR and automatically sets clears noErrors bit.
					twiStatus = TWSR;
    97ac:	80 91 71 00 	lds	r24, 0x0071
					// Clear TWINT and reset TWI Interface
					i2c_setCtrlReg((1<<TWINT)|(1<<TWEA)|(1<<TWEN)|(1<<TWIE));
    97b0:	85 ec       	ldi	r24, 0xC5	; 197
    97b2:	80 93 74 00 	sts	0x0074, r24
					i2c.state = I2C_IDLE;
    97b6:	10 92 a9 0b 	sts	0x0BA9, r1
					// should really be i2c_error
					i2c_send_done(I2C_NULL_FLAG);
    97ba:	80 e0       	ldi	r24, 0x00	; 0
    97bc:	0e 94 e6 4c 	call	0x99cc
    97c0:	ff 91       	pop	r31
    97c2:	ef 91       	pop	r30
    97c4:	bf 91       	pop	r27
    97c6:	af 91       	pop	r26
    97c8:	9f 91       	pop	r25
    97ca:	8f 91       	pop	r24
    97cc:	7f 91       	pop	r23
    97ce:	6f 91       	pop	r22
    97d0:	5f 91       	pop	r21
    97d2:	4f 91       	pop	r20
    97d4:	3f 91       	pop	r19
    97d6:	2f 91       	pop	r18
    97d8:	0f 90       	pop	r0
    97da:	0f be       	out	0x3f, r0	; 63
    97dc:	0f 90       	pop	r0
    97de:	1f 90       	pop	r1
    97e0:	18 95       	reti

000097e2 <i2c_system_init>:
 ****************************************
 */
int8_t i2c_system_init() {

	i2c_sys.state = I2C_SYS_INIT;
    97e2:	10 92 bb 0b 	sts	0x0BBB, r1

	i2c_hardware_init();
    97e6:	0e 94 ef 47 	call	0x8fde
	
	i2c_sys.calling_mod_id = NULL_PID;
    97ea:	8f ef       	ldi	r24, 0xFF	; 255
    97ec:	80 93 ba 0b 	sts	0x0BBA, r24
	i2c_sys.flags = I2C_SYS_NULL_FLAG;
    97f0:	10 92 c3 0b 	sts	0x0BC3, r1
	i2c_sys.msgBuf = NULL;
    97f4:	10 92 bf 0b 	sts	0x0BBF, r1
    97f8:	10 92 be 0b 	sts	0x0BBE, r1
	i2c_sys.dataBuf = NULL;
    97fc:	10 92 c1 0b 	sts	0x0BC1, r1
    9800:	10 92 c0 0b 	sts	0x0BC0, r1
	i2c_sys.rxLen = 0;
    9804:	10 92 c2 0b 	sts	0x0BC2, r1
	i2c_sys.addr = I2C_BCAST_ADDRESS;
    9808:	10 92 bd 0b 	sts	0x0BBD, r1

	i2c_sys.ownAddr = I2C_ADDRESS;
    980c:	82 e0       	ldi	r24, 0x02	; 2
    980e:	80 93 bc 0b 	sts	0x0BBC, r24
	i2c_initTransceiver(I2C_ADDRESS, I2C_SYS_MASTER_FLAG);
    9812:	60 e1       	ldi	r22, 0x10	; 16
    9814:	0e 94 04 48 	call	0x9008

	i2c_sys.state = I2C_SYS_IDLE;
    9818:	81 e0       	ldi	r24, 0x01	; 1
    981a:	80 93 bb 0b 	sts	0x0BBB, r24

	return SOS_OK;
}
    981e:	80 e0       	ldi	r24, 0x00	; 0
    9820:	90 e0       	ldi	r25, 0x00	; 0
    9822:	08 95       	ret

00009824 <ker_i2c_reserve_bus>:


/**
 ****************************************
 SOS Specific Interface to the i2c
 ****************************************
 */
int8_t ker_i2c_reserve_bus(uint8_t calling_id, uint8_t ownAddress, uint8_t flags) {
    9824:	26 2f       	mov	r18, r22

	// can only reserve bus for raw use
	// all incoming sos_msgs will be handed off to the scheduler
	// this means that a module can not reserve the bus to read sos_msgs
	if ((flags & I2C_SYS_SOS_MSG_FLAG) && !(flags & I2C_SYS_TX_FLAG)) {
    9826:	47 ff       	sbrs	r20, 7
    9828:	05 c0       	rjmp	.+10     	; 0x9834
    982a:	46 fd       	sbrc	r20, 6
    982c:	03 c0       	rjmp	.+6      	; 0x9834
		return -EINVAL;
    982e:	8a ee       	ldi	r24, 0xEA	; 234
    9830:	9f ef       	ldi	r25, 0xFF	; 255
    9832:	08 95       	ret
	}

	// if it is already reaserved AND
	// it was reserved by another module OR it is currently busy
	if ((i2c_sys.calling_mod_id != NULL_PID) &&
    9834:	90 91 ba 0b 	lds	r25, 0x0BBA
    9838:	9f 3f       	cpi	r25, 0xFF	; 255
    983a:	59 f0       	breq	.+22     	; 0x9852
    983c:	98 17       	cp	r25, r24
    983e:	31 f4       	brne	.+12     	; 0x984c
    9840:	90 91 bb 0b 	lds	r25, 0x0BBB
    9844:	95 30       	cpi	r25, 0x05	; 5
    9846:	29 f0       	breq	.+10     	; 0x9852
    9848:	92 30       	cpi	r25, 0x02	; 2
    984a:	19 f0       	breq	.+6      	; 0x9852
			((i2c_sys.calling_mod_id != calling_id) || ((i2c_sys.state != I2C_SYS_SLAVE_WAIT) && (i2c_sys.state != I2C_SYS_MASTER_WAIT)))) {
		LED_DBG(LED_RED_TOGGLE);
		return -EBUSY;
    984c:	80 ef       	ldi	r24, 0xF0	; 240
    984e:	9f ef       	ldi	r25, 0xFF	; 255
    9850:	08 95       	ret
	}
	i2c_sys.calling_mod_id = calling_id;
    9852:	80 93 ba 0b 	sts	0x0BBA, r24

	i2c_sys.ownAddr = ownAddress;
    9856:	20 93 bc 0b 	sts	0x0BBC, r18
	i2c_sys.flags = flags;
    985a:	40 93 c3 0b 	sts	0x0BC3, r20

	i2c_initTransceiver(ownAddress, i2c_sys.flags);
    985e:	64 2f       	mov	r22, r20
    9860:	82 2f       	mov	r24, r18
    9862:	0e 94 04 48 	call	0x9008

	if (i2c_sys.flags & I2C_SYS_MASTER_FLAG) {
    9866:	80 91 c3 0b 	lds	r24, 0x0BC3
    986a:	84 ff       	sbrs	r24, 4
    986c:	02 c0       	rjmp	.+4      	; 0x9872
		i2c_sys.state = I2C_SYS_MASTER_WAIT;
    986e:	82 e0       	ldi	r24, 0x02	; 2
    9870:	01 c0       	rjmp	.+2      	; 0x9874
	} else {
		i2c_sys.state = I2C_SYS_SLAVE_WAIT;
    9872:	85 e0       	ldi	r24, 0x05	; 5
    9874:	80 93 bb 0b 	sts	0x0BBB, r24
	}

	LED_DBG(LED_GREEN_TOGGLE);
	return SOS_OK;
    9878:	80 e0       	ldi	r24, 0x00	; 0
    987a:	90 e0       	ldi	r25, 0x00	; 0
}
    987c:	08 95       	ret
    987e:	08 95       	ret

00009880 <ker_i2c_release_bus>:


int8_t ker_i2c_release_bus(uint8_t calling_id) {
    9880:	98 2f       	mov	r25, r24

    // Always allow i2c_module to release i2c
    // Otherwise, check that the correct module is calling the resease and
    // that the i2c is not busy.
    if (calling_id != I2C_PID) {
    9882:	81 34       	cpi	r24, 0x41	; 65
    9884:	91 f0       	breq	.+36     	; 0x98aa
			if (i2c_sys.calling_mod_id != calling_id) {
    9886:	80 91 ba 0b 	lds	r24, 0x0BBA
    988a:	89 17       	cp	r24, r25
    988c:	19 f0       	breq	.+6      	; 0x9894
				return -EPERM;
    988e:	8f ef       	ldi	r24, 0xFF	; 255
    9890:	9f ef       	ldi	r25, 0xFF	; 255
    9892:	08 95       	ret
			}
      if ((i2c_sys.state != I2C_SYS_IDLE) && (i2c_sys.state != I2C_SYS_SLAVE_WAIT) && (i2c_sys.state != I2C_SYS_MASTER_WAIT)) {
    9894:	80 91 bb 0b 	lds	r24, 0x0BBB
    9898:	81 30       	cpi	r24, 0x01	; 1
    989a:	39 f0       	breq	.+14     	; 0x98aa
    989c:	85 30       	cpi	r24, 0x05	; 5
    989e:	29 f0       	breq	.+10     	; 0x98aa
    98a0:	82 30       	cpi	r24, 0x02	; 2
    98a2:	19 f0       	breq	.+6      	; 0x98aa
				return -EBUSY;
    98a4:	80 ef       	ldi	r24, 0xF0	; 240
    98a6:	9f ef       	ldi	r25, 0xFF	; 255
    98a8:	08 95       	ret
			}
		}
		// release the i2c
    i2c_sys.flags = 0;
    98aa:	10 92 c3 0b 	sts	0x0BC3, r1
		i2c_sys.rxLen = 0;
    98ae:	10 92 c2 0b 	sts	0x0BC2, r1
    i2c_sys.calling_mod_id = NULL_PID;
    98b2:	8f ef       	ldi	r24, 0xFF	; 255
    98b4:	80 93 ba 0b 	sts	0x0BBA, r24
    i2c_sys.state = I2C_SYS_IDLE;
    98b8:	81 e0       	ldi	r24, 0x01	; 1
    98ba:	80 93 bb 0b 	sts	0x0BBB, r24

    return SOS_OK;
    98be:	80 e0       	ldi	r24, 0x00	; 0
    98c0:	90 e0       	ldi	r25, 0x00	; 0
}
    98c2:	08 95       	ret
    98c4:	08 95       	ret

000098c6 <ker_i2c_send_data>:


/**
 * Send data over the i2c
 */
int8_t ker_i2c_send_data(
		uint8_t dest_addr,
		uint8_t *buff,
		uint8_t msg_size,
		uint8_t calling_id) {
    98c6:	98 2f       	mov	r25, r24
    98c8:	fb 01       	movw	r30, r22

	// Check if others are using the i2c
	if (i2c_sys.state == I2C_SYS_IDLE) {  // bus not initialized??
    98ca:	30 91 bb 0b 	lds	r19, 0x0BBB
    98ce:	31 30       	cpi	r19, 0x01	; 1
    98d0:	e1 f0       	breq	.+56     	; 0x990a
		return -EINVAL;
	}
	if ((i2c_sys.calling_mod_id != calling_id) ||
    98d2:	80 91 ba 0b 	lds	r24, 0x0BBA
    98d6:	82 17       	cp	r24, r18
    98d8:	21 f4       	brne	.+8      	; 0x98e2
    98da:	35 30       	cpi	r19, 0x05	; 5
    98dc:	29 f0       	breq	.+10     	; 0x98e8
    98de:	32 30       	cpi	r19, 0x02	; 2
    98e0:	19 f0       	breq	.+6      	; 0x98e8
			((i2c_sys.state != I2C_SYS_SLAVE_WAIT) && (i2c_sys.state != I2C_SYS_MASTER_WAIT))) {
		return -EBUSY;
    98e2:	80 ef       	ldi	r24, 0xF0	; 240
    98e4:	9f ef       	ldi	r25, 0xFF	; 255
    98e6:	08 95       	ret
	}
	
	// get a handle to the outgoing data
	i2c_sys.addr = dest_addr;
    98e8:	90 93 bd 0b 	sts	0x0BBD, r25
	if (i2c_sys.flags & I2C_SYS_SOS_MSG_FLAG) {
    98ec:	80 91 c3 0b 	lds	r24, 0x0BC3
    98f0:	87 ff       	sbrs	r24, 7
    98f2:	15 c0       	rjmp	.+42     	; 0x991e
		i2c_sys.msgBuf = (Message*)buff;
    98f4:	f0 93 bf 0b 	sts	0x0BBF, r31
    98f8:	e0 93 be 0b 	sts	0x0BBE, r30
		if (i2c_sys.msgBuf->len != msg_size) { // invalid msg packet
    98fc:	87 81       	ldd	r24, Z+7	; 0x07
    98fe:	84 17       	cp	r24, r20
    9900:	39 f0       	breq	.+14     	; 0x9910
			i2c_sys.msgBuf = NULL;
    9902:	10 92 bf 0b 	sts	0x0BBF, r1
    9906:	10 92 be 0b 	sts	0x0BBE, r1
			return -EINVAL;
    990a:	8a ee       	ldi	r24, 0xEA	; 234
    990c:	9f ef       	ldi	r25, 0xFF	; 255
    990e:	08 95       	ret
		}
		i2c_sys.dataBuf = i2c_sys.msgBuf->data;
    9910:	80 85       	ldd	r24, Z+8	; 0x08
    9912:	91 85       	ldd	r25, Z+9	; 0x09
    9914:	90 93 c1 0b 	sts	0x0BC1, r25
    9918:	80 93 c0 0b 	sts	0x0BC0, r24
    991c:	04 c0       	rjmp	.+8      	; 0x9926
	} else {
		i2c_sys.dataBuf = buff;
    991e:	f0 93 c1 0b 	sts	0x0BC1, r31
    9922:	e0 93 c0 0b 	sts	0x0BC0, r30
	}

	if (i2c_sys.state == I2C_SYS_MASTER_WAIT) {
    9926:	32 30       	cpi	r19, 0x02	; 2
    9928:	59 f4       	brne	.+22     	; 0x9940
		if (i2c_startTransceiverTx(i2c_sys.addr, buff, msg_size, i2c_sys.flags) == SOS_OK) {
    992a:	20 91 c3 0b 	lds	r18, 0x0BC3
    992e:	bf 01       	movw	r22, r30
    9930:	80 91 bd 0b 	lds	r24, 0x0BBD
    9934:	0e 94 58 48 	call	0x90b0
    9938:	88 23       	and	r24, r24
    993a:	89 f4       	brne	.+34     	; 0x995e
			i2c_sys.state = I2C_SYS_MASTER_TX;
    993c:	83 e0       	ldi	r24, 0x03	; 3
    993e:	0a c0       	rjmp	.+20     	; 0x9954
			return SOS_OK;
		}
	} else {
		if (i2c_startTransceiverTx(i2c_sys.addr, buff, msg_size, i2c_sys.flags) == SOS_OK) {
    9940:	20 91 c3 0b 	lds	r18, 0x0BC3
    9944:	bf 01       	movw	r22, r30
    9946:	80 91 bd 0b 	lds	r24, 0x0BBD
    994a:	0e 94 58 48 	call	0x90b0
    994e:	88 23       	and	r24, r24
    9950:	31 f4       	brne	.+12     	; 0x995e
			i2c_sys.state = I2C_SYS_SLAVE_TX;
    9952:	86 e0       	ldi	r24, 0x06	; 6
    9954:	80 93 bb 0b 	sts	0x0BBB, r24
			return SOS_OK;
    9958:	80 e0       	ldi	r24, 0x00	; 0
    995a:	90 e0       	ldi	r25, 0x00	; 0
    995c:	08 95       	ret
		}
	}
	// lower layer busy (async slave recieve?)
	return -EBUSY;
    995e:	80 ef       	ldi	r24, 0xF0	; 240
    9960:	9f ef       	ldi	r25, 0xFF	; 255
}
    9962:	08 95       	ret
    9964:	08 95       	ret

00009966 <ker_i2c_read_data>:


/**
 * Read data from the i2c.
 */
int8_t ker_i2c_read_data(uint8_t dest_addr, uint8_t read_size, uint8_t calling_id) {
    9966:	28 2f       	mov	r18, r24

	if (i2c_sys.state == I2C_SYS_IDLE) {  // bus not initialized??
    9968:	90 91 bb 0b 	lds	r25, 0x0BBB
    996c:	91 30       	cpi	r25, 0x01	; 1
    996e:	19 f4       	brne	.+6      	; 0x9976
		return -EINVAL;
    9970:	8a ee       	ldi	r24, 0xEA	; 234
    9972:	9f ef       	ldi	r25, 0xFF	; 255
    9974:	08 95       	ret
	}
	// Check if others are using the i2c
	if ((i2c_sys.calling_mod_id != calling_id) ||
    9976:	80 91 ba 0b 	lds	r24, 0x0BBA
    997a:	84 17       	cp	r24, r20
    997c:	21 f4       	brne	.+8      	; 0x9986
    997e:	95 30       	cpi	r25, 0x05	; 5
    9980:	29 f0       	breq	.+10     	; 0x998c
    9982:	92 30       	cpi	r25, 0x02	; 2
    9984:	19 f0       	breq	.+6      	; 0x998c
			((i2c_sys.state != I2C_SYS_SLAVE_WAIT) && (i2c_sys.state != I2C_SYS_MASTER_WAIT))) {
		return -EBUSY;
    9986:	80 ef       	ldi	r24, 0xF0	; 240
    9988:	9f ef       	ldi	r25, 0xFF	; 255
    998a:	08 95       	ret
	}
	i2c_sys.addr = dest_addr;
    998c:	20 93 bd 0b 	sts	0x0BBD, r18
	i2c_sys.rxLen = read_size;
    9990:	60 93 c2 0b 	sts	0x0BC2, r22

	if (i2c_sys.state == I2C_SYS_MASTER_WAIT) {
    9994:	92 30       	cpi	r25, 0x02	; 2
    9996:	49 f4       	brne	.+18     	; 0x99aa
		if (i2c_startTransceiverRx(i2c_sys.addr, read_size, i2c_sys.flags) == SOS_OK) {
    9998:	40 91 c3 0b 	lds	r20, 0x0BC3
    999c:	82 2f       	mov	r24, r18
    999e:	0e 94 aa 48 	call	0x9154
    99a2:	88 23       	and	r24, r24
    99a4:	79 f4       	brne	.+30     	; 0x99c4
			i2c_sys.state = I2C_SYS_MASTER_RX;
    99a6:	84 e0       	ldi	r24, 0x04	; 4
    99a8:	08 c0       	rjmp	.+16     	; 0x99ba
			return SOS_OK;
		}
	} else {
		if (i2c_startTransceiverRx(i2c_sys.addr, read_size, i2c_sys.flags) == SOS_OK) {
    99aa:	40 91 c3 0b 	lds	r20, 0x0BC3
    99ae:	82 2f       	mov	r24, r18
    99b0:	0e 94 aa 48 	call	0x9154
    99b4:	88 23       	and	r24, r24
    99b6:	31 f4       	brne	.+12     	; 0x99c4
			i2c_sys.state = I2C_SYS_SLAVE_RX;
    99b8:	87 e0       	ldi	r24, 0x07	; 7
    99ba:	80 93 bb 0b 	sts	0x0BBB, r24
			return SOS_OK;
    99be:	80 e0       	ldi	r24, 0x00	; 0
    99c0:	90 e0       	ldi	r25, 0x00	; 0
    99c2:	08 95       	ret
		}
	}
	// lower layer busy (async slave recieve?)
	return -EBUSY;
    99c4:	80 ef       	ldi	r24, 0xF0	; 240
    99c6:	9f ef       	ldi	r25, 0xFF	; 255
}
    99c8:	08 95       	ret
    99ca:	08 95       	ret

000099cc <i2c_send_done>:


static inline void resetTransceiver() {
	i2c_initTransceiver(i2c_sys.ownAddr, i2c_sys.flags);
	if(i2c_sys.flags & I2C_SYS_MASTER_FLAG) {
		i2c_sys.state = I2C_SYS_MASTER_WAIT;
	} else {
		i2c_sys.state = I2C_SYS_SLAVE_WAIT;
	}
}


/**
 * Send MSG_I2C_SEND_DONE
 */
void i2c_send_done(uint8_t status) {
    99cc:	ef 92       	push	r14
    99ce:	ff 92       	push	r15
    99d0:	0f 93       	push	r16
    99d2:	1f 93       	push	r17
    99d4:	98 2f       	mov	r25, r24

	// figure out if we have someone to send this message to
	if ((i2c_sys.calling_mod_id != NULL_PID) &&
    99d6:	80 91 ba 0b 	lds	r24, 0x0BBA
    99da:	8f 3f       	cpi	r24, 0xFF	; 255
    99dc:	c1 f1       	breq	.+112    	; 0x9a4e
    99de:	80 91 bb 0b 	lds	r24, 0x0BBB
    99e2:	83 30       	cpi	r24, 0x03	; 3
    99e4:	19 f4       	brne	.+6      	; 0x99ec
    99e6:	94 fd       	sbrc	r25, 4
    99e8:	03 c0       	rjmp	.+6      	; 0x99f0
    99ea:	31 c0       	rjmp	.+98     	; 0x9a4e
    99ec:	86 30       	cpi	r24, 0x06	; 6
    99ee:	79 f5       	brne	.+94     	; 0x9a4e
			(((i2c_sys.state == I2C_SYS_MASTER_TX) && (status & I2C_SYS_MASTER_FLAG)) || ((i2c_sys.state == I2C_SYS_SLAVE_TX)))) {
		/* bus was reserved by someone AND
		 * bus reserved as master and a send was requested, packet transmited as a master
		 * OR bus reserved as slave and a send was requested */
		
		if (status & I2C_SYS_ERROR_FLAG) {
    99f0:	89 2f       	mov	r24, r25
    99f2:	99 27       	eor	r25, r25
    99f4:	80 ff       	sbrs	r24, 0
    99f6:	06 c0       	rjmp	.+12     	; 0x9a04
			post_short(i2c_sys.calling_mod_id, I2C_PID, MSG_I2C_SEND_DONE, 0, 0, SOS_MSG_SEND_FAIL|SOS_MSG_HIGH_PRIORITY);
    99f8:	32 e4       	ldi	r19, 0x42	; 66
    99fa:	e3 2e       	mov	r14, r19
    99fc:	f1 2c       	mov	r15, r1
    99fe:	00 e0       	ldi	r16, 0x00	; 0
    9a00:	10 e0       	ldi	r17, 0x00	; 0
    9a02:	15 c0       	rjmp	.+42     	; 0x9a2e
		} else if(status & I2C_SYS_RX_PEND_FLAG) {
    9a04:	25 e0       	ldi	r18, 0x05	; 5
    9a06:	96 95       	lsr	r25
    9a08:	87 95       	ror	r24
    9a0a:	2a 95       	dec	r18
    9a0c:	e1 f7       	brne	.-8      	; 0x9a06
    9a0e:	8c 01       	movw	r16, r24
    9a10:	01 70       	andi	r16, 0x01	; 1
    9a12:	10 70       	andi	r17, 0x00	; 0
    9a14:	80 ff       	sbrs	r24, 0
    9a16:	08 c0       	rjmp	.+16     	; 0x9a28
			// This is the result of a read request done sending the destination
			// address and now waiting for the read done
			i2c_sys.state = (i2c_sys.flags & I2C_SYS_MASTER_FLAG)?I2C_SYS_MASTER_RX:I2C_SYS_SLAVE_RX;
    9a18:	80 91 c3 0b 	lds	r24, 0x0BC3
    9a1c:	84 ff       	sbrs	r24, 4
    9a1e:	02 c0       	rjmp	.+4      	; 0x9a24
    9a20:	84 e0       	ldi	r24, 0x04	; 4
    9a22:	13 c0       	rjmp	.+38     	; 0x9a4a
    9a24:	87 e0       	ldi	r24, 0x07	; 7
    9a26:	11 c0       	rjmp	.+34     	; 0x9a4a
			return;
		} else {
			post_short(i2c_sys.calling_mod_id, I2C_PID, MSG_I2C_SEND_DONE, 0, 0, SOS_MSG_HIGH_PRIORITY);
    9a28:	80 e4       	ldi	r24, 0x40	; 64
    9a2a:	e8 2e       	mov	r14, r24
    9a2c:	f1 2c       	mov	r15, r1
    9a2e:	20 e0       	ldi	r18, 0x00	; 0
    9a30:	40 e4       	ldi	r20, 0x40	; 64
    9a32:	61 e4       	ldi	r22, 0x41	; 65
    9a34:	80 91 ba 0b 	lds	r24, 0x0BBA
    9a38:	0e 94 50 18 	call	0x30a0
		}
		i2c_sys.state = (i2c_sys.flags & I2C_SYS_MASTER_FLAG)?I2C_SYS_MASTER_WAIT:I2C_SYS_SLAVE_WAIT;
    9a3c:	80 91 c3 0b 	lds	r24, 0x0BC3
    9a40:	84 ff       	sbrs	r24, 4
    9a42:	02 c0       	rjmp	.+4      	; 0x9a48
    9a44:	82 e0       	ldi	r24, 0x02	; 2
    9a46:	01 c0       	rjmp	.+2      	; 0x9a4a
    9a48:	85 e0       	ldi	r24, 0x05	; 5
    9a4a:	80 93 bb 0b 	sts	0x0BBB, r24
    9a4e:	1f 91       	pop	r17
    9a50:	0f 91       	pop	r16
    9a52:	ff 90       	pop	r15
    9a54:	ef 90       	pop	r14
    9a56:	08 95       	ret

00009a58 <i2c_read_done>:
	}
}


/**
 * Send MSG_I2C_READ_DONE
 */
void i2c_read_done(uint8_t *buff, uint8_t len, uint8_t status) {
    9a58:	af 92       	push	r10
    9a5a:	bf 92       	push	r11
    9a5c:	cf 92       	push	r12
    9a5e:	df 92       	push	r13
    9a60:	ef 92       	push	r14
    9a62:	ff 92       	push	r15
    9a64:	0f 93       	push	r16
    9a66:	1f 93       	push	r17
    9a68:	cf 93       	push	r28
    9a6a:	df 93       	push	r29
    9a6c:	6c 01       	movw	r12, r24

	uint8_t *bufPtr = NULL;
	Message *msgPtr = NULL;

	// this is a problem that should be handled
	if (buff == NULL) {
    9a6e:	89 2b       	or	r24, r25
    9a70:	09 f4       	brne	.+2      	; 0x9a74
    9a72:	ea c0       	rjmp	.+468    	; 0x9c48
		return;
	}

	if ((i2c_sys.calling_mod_id != NULL_PID) && (status & I2C_SYS_ERROR_FLAG)) {
    9a74:	80 91 ba 0b 	lds	r24, 0x0BBA
    9a78:	8f 3f       	cpi	r24, 0xFF	; 255
    9a7a:	11 f0       	breq	.+4      	; 0x9a80
    9a7c:	40 fd       	sbrc	r20, 0
    9a7e:	d8 c0       	rjmp	.+432    	; 0x9c30
		goto post_error_msg;
	}

	// the bus was reserved the read was of the length we requested
	if ((i2c_sys.calling_mod_id != NULL_PID) && (len == i2c_sys.rxLen) && 
    9a80:	8f 3f       	cpi	r24, 0xFF	; 255
    9a82:	21 f1       	breq	.+72     	; 0x9acc
    9a84:	80 91 c2 0b 	lds	r24, 0x0BC2
    9a88:	68 17       	cp	r22, r24
    9a8a:	01 f5       	brne	.+64     	; 0x9acc
    9a8c:	80 91 bb 0b 	lds	r24, 0x0BBB
    9a90:	84 30       	cpi	r24, 0x04	; 4
    9a92:	19 f4       	brne	.+6      	; 0x9a9a
    9a94:	44 fd       	sbrc	r20, 4
    9a96:	05 c0       	rjmp	.+10     	; 0x9aa2
    9a98:	19 c0       	rjmp	.+50     	; 0x9acc
    9a9a:	87 30       	cpi	r24, 0x07	; 7
    9a9c:	b9 f4       	brne	.+46     	; 0x9acc
    9a9e:	44 fd       	sbrc	r20, 4
    9aa0:	15 c0       	rjmp	.+42     	; 0x9acc
			// the data was recieved in the correct mode
			(((i2c_sys.state == I2C_SYS_MASTER_RX) && (I2C_SYS_MASTER_FLAG & status)) ||
			 ((i2c_sys.state == I2C_SYS_SLAVE_RX) && !(I2C_SYS_MASTER_FLAG & status)))) {

		// reserved read done will only be raw reads, wrap in message and send
		post_long(
    9aa2:	c4 e4       	ldi	r28, 0x44	; 68
    9aa4:	ec 2e       	mov	r14, r28
    9aa6:	f1 2c       	mov	r15, r1
    9aa8:	86 01       	movw	r16, r12
    9aaa:	26 2f       	mov	r18, r22
    9aac:	41 e4       	ldi	r20, 0x41	; 65
    9aae:	64 2f       	mov	r22, r20
    9ab0:	80 91 ba 0b 	lds	r24, 0x0BBA
    9ab4:	0e 94 c7 18 	call	0x318e
				i2c_sys.calling_mod_id,
				I2C_PID,
				MSG_I2C_READ_DONE,
				len,
				buff,
				SOS_MSG_RELEASE|SOS_MSG_HIGH_PRIORITY);
		i2c_sys.state = (i2c_sys.flags & I2C_SYS_MASTER_FLAG)?I2C_SYS_MASTER_WAIT:I2C_SYS_SLAVE_WAIT;
    9ab8:	80 91 c3 0b 	lds	r24, 0x0BC3
    9abc:	84 ff       	sbrs	r24, 4
    9abe:	02 c0       	rjmp	.+4      	; 0x9ac4
    9ac0:	82 e0       	ldi	r24, 0x02	; 2
    9ac2:	01 c0       	rjmp	.+2      	; 0x9ac6
    9ac4:	85 e0       	ldi	r24, 0x05	; 5
    9ac6:	80 93 bb 0b 	sts	0x0BBB, r24
		return;
    9aca:	be c0       	rjmp	.+380    	; 0x9c48
	}

	// there appers to be a bug in avr-gcc this a work around to make sure
	// the cast to message works correctly
	// the following code seems to cat the value 0x800008 independent of what
	// buff actually ii2c_sys.  this has no correlation to the data in buff or the 
	// value of the pointer the cast (along with many others that should) works
	// in gdb but fail to execute correctly when compilied
	/* bufPtr = &buff[HDLC_PROTOCOL_SIZE]; */

	// DO NOT CHANGE THIS SECTION OF CODE
	// start of section
	bufPtr = buff+1;
    9acc:	86 01       	movw	r16, r12
    9ace:	0f 5f       	subi	r16, 0xFF	; 255
    9ad0:	1f 4f       	sbci	r17, 0xFF	; 255
    9ad2:	58 01       	movw	r10, r16
	// end of DO NOT CHANGE SECTION
		
	// if it passes sanity checks give it to the scheduler
	if (!(I2C_SYS_MASTER_FLAG & status) && (len >= SOS_MSG_HEADER_SIZE) && (buff[0] == HDLC_SOS_MSG)) {
    9ad4:	44 fd       	sbrc	r20, 4
    9ad6:	ac c0       	rjmp	.+344    	; 0x9c30
    9ad8:	68 30       	cpi	r22, 0x08	; 8
    9ada:	08 f4       	brcc	.+2      	; 0x9ade
    9adc:	a9 c0       	rjmp	.+338    	; 0x9c30
    9ade:	f6 01       	movw	r30, r12
    9ae0:	80 81       	ld	r24, Z
    9ae2:	81 30       	cpi	r24, 0x01	; 1
    9ae4:	09 f0       	breq	.+2      	; 0x9ae8
    9ae6:	a4 c0       	rjmp	.+328    	; 0x9c30

		if ((len >= (HDLC_PROTOCOL_SIZE + SOS_MSG_HEADER_SIZE + ((Message*)bufPtr)->len + SOS_MSG_CRC_SIZE)) &&
    9ae8:	26 2f       	mov	r18, r22
    9aea:	33 27       	eor	r19, r19
    9aec:	f8 01       	movw	r30, r16
    9aee:	87 81       	ldd	r24, Z+7	; 0x07
    9af0:	99 27       	eor	r25, r25
    9af2:	0b 96       	adiw	r24, 0x0b	; 11
    9af4:	28 17       	cp	r18, r24
    9af6:	39 07       	cpc	r19, r25
    9af8:	08 f4       	brcc	.+2      	; 0x9afc
    9afa:	9a c0       	rjmp	.+308    	; 0x9c30
    9afc:	61 38       	cpi	r22, 0x81	; 129
    9afe:	08 f0       	brcs	.+2      	; 0x9b02
    9b00:	97 c0       	rjmp	.+302    	; 0x9c30
				(len <= I2C_MAX_MSG_LEN)) {

			// please do not edit the next line
			bufPtr = buff;
			// we have enough bytes for it to be a message, lets start the copy out
			// XXX msgPtr = (Message*)ker_malloc(sizeof(Message), I2C_PID);
			msgPtr = msg_create();
    9b02:	0e 94 8b 1b 	call	0x3716
    9b06:	ec 01       	movw	r28, r24
			if (msgPtr !=NULL) {
    9b08:	89 2b       	or	r24, r25
    9b0a:	09 f4       	brne	.+2      	; 0x9b0e
    9b0c:	91 c0       	rjmp	.+290    	; 0x9c30

extern uint16_t crcTable[256] PROGMEM;  //!< this is defined in crc.c

static inline uint16_t crcByte(uint16_t oldCrc, uint8_t byte)
{
    9b0e:	f6 01       	movw	r30, r12
    9b10:	80 81       	ld	r24, Z
  uint8_t *magic = (uint8_t *)&crcTable[oldCrc >> 8 ^ byte];
    9b12:	e8 2f       	mov	r30, r24
    9b14:	ff 27       	eor	r31, r31
    9b16:	ee 0f       	add	r30, r30
    9b18:	ff 1f       	adc	r31, r31
    9b1a:	ec 5c       	subi	r30, 0xCC	; 204
    9b1c:	fc 4f       	sbci	r31, 0xFC	; 252

  return pgm_read_byte(magic) | ((uint8_t)oldCrc ^ pgm_read_byte(magic + 1)) << 8;
    9b1e:	84 91       	lpm	r24, Z
    9b20:	e8 2e       	mov	r14, r24
    9b22:	ff 24       	eor	r15, r15
    9b24:	31 96       	adiw	r30, 0x01	; 1
    9b26:	84 91       	lpm	r24, Z
    9b28:	99 27       	eor	r25, r25
    9b2a:	98 2f       	mov	r25, r24
    9b2c:	88 27       	eor	r24, r24
    9b2e:	e8 2a       	or	r14, r24
    9b30:	f9 2a       	or	r15, r25
    9b32:	be 01       	movw	r22, r28
    9b34:	d5 01       	movw	r26, r10
    9b36:	47 e0       	ldi	r20, 0x07	; 7
				uint8_t i=0;
				uint16_t runningCRC=0, crc_in=0;

				// extract the protocol field
				for (i=0; i<HDLC_PROTOCOL_SIZE; i++) {
					runningCRC = crcByte(runningCRC, bufPtr[i]);
				}

				// extract the header
				bufPtr = &buff[HDLC_PROTOCOL_SIZE];
				for (i=0; i<SOS_MSG_HEADER_SIZE; i++) {
					((uint8_t*)msgPtr)[i] = bufPtr[i];
    9b38:	8c 91       	ld	r24, X
    9b3a:	fb 01       	movw	r30, r22
    9b3c:	81 93       	st	Z+, r24
    9b3e:	bf 01       	movw	r22, r30

extern uint16_t crcTable[256] PROGMEM;  //!< this is defined in crc.c

static inline uint16_t crcByte(uint16_t oldCrc, uint8_t byte)
{
    9b40:	8d 91       	ld	r24, X+
  uint8_t *magic = (uint8_t *)&crcTable[oldCrc >> 8 ^ byte];
    9b42:	ef 2d       	mov	r30, r15
    9b44:	ff 27       	eor	r31, r31
    9b46:	99 27       	eor	r25, r25
    9b48:	e8 27       	eor	r30, r24
    9b4a:	f9 27       	eor	r31, r25
    9b4c:	ee 0f       	add	r30, r30
    9b4e:	ff 1f       	adc	r31, r31
    9b50:	ec 5c       	subi	r30, 0xCC	; 204
    9b52:	fc 4f       	sbci	r31, 0xFC	; 252

  return pgm_read_byte(magic) | ((uint8_t)oldCrc ^ pgm_read_byte(magic + 1)) << 8;
    9b54:	84 91       	lpm	r24, Z
    9b56:	28 2f       	mov	r18, r24
    9b58:	33 27       	eor	r19, r19
    9b5a:	31 96       	adiw	r30, 0x01	; 1
    9b5c:	84 91       	lpm	r24, Z
    9b5e:	8e 25       	eor	r24, r14
    9b60:	99 27       	eor	r25, r25
    9b62:	f8 2e       	mov	r15, r24
    9b64:	ee 24       	eor	r14, r14
    9b66:	e2 2a       	or	r14, r18
    9b68:	f3 2a       	or	r15, r19
    9b6a:	41 50       	subi	r20, 0x01	; 1
    9b6c:	47 ff       	sbrs	r20, 7
    9b6e:	e4 cf       	rjmp	.-56     	; 0x9b38
					runningCRC = crcByte(runningCRC, bufPtr[i]);
				}

				// extract the data if it exists
				if (msgPtr->len != 0) {
    9b70:	8f 81       	ldd	r24, Y+7	; 0x07
    9b72:	88 23       	and	r24, r24
    9b74:	99 f1       	breq	.+102    	; 0x9bdc
 * Will return a NULL pointer if the call to sys_malloc fails.
 */
static inline void *ker_malloc(uint16_t size, sos_pid_t id)
{
  return sos_blk_mem_alloc(size, id, false);
    9b76:	40 e0       	ldi	r20, 0x00	; 0
    9b78:	61 e4       	ldi	r22, 0x41	; 65
    9b7a:	99 27       	eor	r25, r25
    9b7c:	0e 94 14 11 	call	0x2228
					uint8_t *dataPtr;
					dataPtr = ker_malloc(((Message*)msgPtr)->len, I2C_PID);

					if (dataPtr != NULL) {
    9b80:	00 97       	sbiw	r24, 0x00	; 0
    9b82:	09 f4       	brne	.+2      	; 0x9b86
    9b84:	51 c0       	rjmp	.+162    	; 0x9c28

						msgPtr->data = dataPtr;
    9b86:	88 87       	std	Y+8, r24	; 0x08
    9b88:	99 87       	std	Y+9, r25	; 0x09

						bufPtr = &buff[HDLC_PROTOCOL_SIZE+SOS_MSG_HEADER_SIZE];
    9b8a:	86 01       	movw	r16, r12
    9b8c:	07 5f       	subi	r16, 0xF7	; 247
    9b8e:	1f 4f       	sbci	r17, 0xFF	; 255
						for (i=0; i<msgPtr->len; i++) {
    9b90:	40 e0       	ldi	r20, 0x00	; 0
    9b92:	8f 81       	ldd	r24, Y+7	; 0x07
    9b94:	48 17       	cp	r20, r24
    9b96:	20 f5       	brcc	.+72     	; 0x9be0
							msgPtr->data[i] = bufPtr[i];
    9b98:	84 2f       	mov	r24, r20
    9b9a:	99 27       	eor	r25, r25
    9b9c:	e8 85       	ldd	r30, Y+8	; 0x08
    9b9e:	f9 85       	ldd	r31, Y+9	; 0x09
    9ba0:	e8 0f       	add	r30, r24
    9ba2:	f9 1f       	adc	r31, r25
    9ba4:	d8 01       	movw	r26, r16
    9ba6:	a8 0f       	add	r26, r24
    9ba8:	b9 1f       	adc	r27, r25
    9baa:	8c 91       	ld	r24, X
    9bac:	80 83       	st	Z, r24

extern uint16_t crcTable[256] PROGMEM;  //!< this is defined in crc.c

static inline uint16_t crcByte(uint16_t oldCrc, uint8_t byte)
{
    9bae:	8c 91       	ld	r24, X
  uint8_t *magic = (uint8_t *)&crcTable[oldCrc >> 8 ^ byte];
    9bb0:	ef 2d       	mov	r30, r15
    9bb2:	ff 27       	eor	r31, r31
    9bb4:	99 27       	eor	r25, r25
    9bb6:	e8 27       	eor	r30, r24
    9bb8:	f9 27       	eor	r31, r25
    9bba:	ee 0f       	add	r30, r30
    9bbc:	ff 1f       	adc	r31, r31
    9bbe:	ec 5c       	subi	r30, 0xCC	; 204
    9bc0:	fc 4f       	sbci	r31, 0xFC	; 252

  return pgm_read_byte(magic) | ((uint8_t)oldCrc ^ pgm_read_byte(magic + 1)) << 8;
    9bc2:	84 91       	lpm	r24, Z
    9bc4:	28 2f       	mov	r18, r24
    9bc6:	33 27       	eor	r19, r19
    9bc8:	31 96       	adiw	r30, 0x01	; 1
    9bca:	84 91       	lpm	r24, Z
    9bcc:	8e 25       	eor	r24, r14
    9bce:	99 27       	eor	r25, r25
    9bd0:	f8 2e       	mov	r15, r24
    9bd2:	ee 24       	eor	r14, r14
    9bd4:	e2 2a       	or	r14, r18
    9bd6:	f3 2a       	or	r15, r19
    9bd8:	4f 5f       	subi	r20, 0xFF	; 255
    9bda:	db cf       	rjmp	.-74     	; 0x9b92
							runningCRC = crcByte(runningCRC, bufPtr[i]);
						}
					} else { // -ENOMEM
						ker_free(msgPtr);
						goto post_error_msg;
					}
				} else {
					msgPtr->data = NULL;
    9bdc:	18 86       	std	Y+8, r1	; 0x08
    9bde:	19 86       	std	Y+9, r1	; 0x09
				}

				// get the CRC and check it
				bufPtr = &buff[HDLC_PROTOCOL_SIZE+SOS_MSG_HEADER_SIZE+msgPtr->len];
    9be0:	8f 81       	ldd	r24, Y+7	; 0x07
    9be2:	f6 01       	movw	r30, r12
    9be4:	e8 0f       	add	r30, r24
    9be6:	f1 1d       	adc	r31, r1
				crc_in = bufPtr[0] | (bufPtr[1]<<8);
    9be8:	81 85       	ldd	r24, Z+9	; 0x09
    9bea:	28 2f       	mov	r18, r24
    9bec:	33 27       	eor	r19, r19
    9bee:	82 85       	ldd	r24, Z+10	; 0x0a
    9bf0:	99 27       	eor	r25, r25
    9bf2:	98 2f       	mov	r25, r24
    9bf4:	88 27       	eor	r24, r24
    9bf6:	28 2b       	or	r18, r24
    9bf8:	39 2b       	or	r19, r25
    9bfa:	88 85       	ldd	r24, Y+8	; 0x08
    9bfc:	99 85       	ldd	r25, Y+9	; 0x09

				if (crc_in == runningCRC) {
    9bfe:	2e 15       	cp	r18, r14
    9c00:	3f 05       	cpc	r19, r15
    9c02:	79 f4       	brne	.+30     	; 0x9c22
					// message passed all sanity checks including crc
					LED_DBG(LED_YELLOW_TOGGLE);
					if(msgPtr->data != NULL ) {
    9c04:	89 2b       	or	r24, r25
    9c06:	21 f0       	breq	.+8      	; 0x9c10
						msgPtr->flag = SOS_MSG_RELEASE;
    9c08:	84 e0       	ldi	r24, 0x04	; 4
    9c0a:	90 e0       	ldi	r25, 0x00	; 0
    9c0c:	8a 87       	std	Y+10, r24	; 0x0a
    9c0e:	9b 87       	std	Y+11, r25	; 0x0b

static inline void handle_incoming_msg(Message *msg, uint16_t channel_flag)
{
  //   DEBUG("<NET STACK> Received message from network\n");
  msg->flag |= SOS_MSG_FROM_NETWORK | channel_flag;
    9c10:	8a 85       	ldd	r24, Y+10	; 0x0a
    9c12:	9b 85       	ldd	r25, Y+11	; 0x0b
    9c14:	95 60       	ori	r25, 0x05	; 5
    9c16:	8a 87       	std	Y+10, r24	; 0x0a
    9c18:	9b 87       	std	Y+11, r25	; 0x0b
  msg->daddr = entohs(msg->daddr);
  msg->saddr = entohs(msg->saddr);
  sched_msg_alloc(msg);
    9c1a:	ce 01       	movw	r24, r28
    9c1c:	0e 94 ec 16 	call	0x2dd8
					}
					handle_incoming_msg(msgPtr, SOS_MSG_I2C_IO);
					return;
    9c20:	13 c0       	rjmp	.+38     	; 0x9c48
 * @return void
 */
static inline void ker_free(void* ptr)
{
  sos_blk_mem_free(ptr, false);
    9c22:	60 e0       	ldi	r22, 0x00	; 0
    9c24:	0e 94 98 11 	call	0x2330
    9c28:	60 e0       	ldi	r22, 0x00	; 0
    9c2a:	ce 01       	movw	r24, r28
    9c2c:	0e 94 98 11 	call	0x2330
				} else { // clean up
					ker_free(msgPtr->data);
					ker_free(msgPtr);
				}
			}
		}
	}

	// if we make it to here return error message
post_error_msg:
	post_short(
    9c30:	40 e4       	ldi	r20, 0x40	; 64
    9c32:	e4 2e       	mov	r14, r20
    9c34:	f1 2c       	mov	r15, r1
    9c36:	00 e0       	ldi	r16, 0x00	; 0
    9c38:	10 e0       	ldi	r17, 0x00	; 0
    9c3a:	20 e0       	ldi	r18, 0x00	; 0
    9c3c:	4f e0       	ldi	r20, 0x0F	; 15
    9c3e:	61 e4       	ldi	r22, 0x41	; 65
    9c40:	80 91 ba 0b 	lds	r24, 0x0BBA
    9c44:	0e 94 50 18 	call	0x30a0
    9c48:	df 91       	pop	r29
    9c4a:	cf 91       	pop	r28
    9c4c:	1f 91       	pop	r17
    9c4e:	0f 91       	pop	r16
    9c50:	ff 90       	pop	r15
    9c52:	ef 90       	pop	r14
    9c54:	df 90       	pop	r13
    9c56:	cf 90       	pop	r12
    9c58:	bf 90       	pop	r11
    9c5a:	af 90       	pop	r10
    9c5c:	08 95       	ret

00009c5e <uart_hardware_init>:

int8_t uart_hardware_init(void){
	HAS_CRITICAL_SECTION;

	if(uart_initialized == false) {
    9c5e:	80 91 c4 0b 	lds	r24, 0x0BC4
    9c62:	88 23       	and	r24, r24
    9c64:	89 f4       	brne	.+34     	; 0x9c88
		ENTER_CRITICAL_SECTION();
    9c66:	9f b7       	in	r25, 0x3f	; 63
    9c68:	f8 94       	cli
#ifndef DISABLE_UART
#ifndef USE_UART1
		//! UART will run at: 115kbps, N-8-1
		//! Set 115.2 KBps
		// Warning: 115.2 may cause problems with MIB510 type files
        //UBRR0H = (uint8_t) (BAUD_115_2k_U2X>>8);
		//UBRR0L = (uint8_t) (BAUD_115_2k_U2X);
		//! Set 57.6 KBps
		UBRR0H = (uint8_t) (BAUD_57_6k_U2X>>8);
    9c6a:	80 93 90 00 	sts	0x0090, r24
		UBRR0L = (uint8_t) (BAUD_57_6k_U2X);
    9c6e:	8f e0       	ldi	r24, 0x0F	; 15
    9c70:	89 b9       	out	0x09, r24	; 9

		//! Set UART double speed
		UCSR0A = (1 << U2X);
    9c72:	82 e0       	ldi	r24, 0x02	; 2
    9c74:	8b b9       	out	0x0b, r24	; 11
		//! Set frame format: 8 data-bits, 1 stop-bit
		UCSR0C = ((1 << UCSZ1) | (1 << UCSZ0));
    9c76:	86 e0       	ldi	r24, 0x06	; 6
    9c78:	80 93 95 00 	sts	0x0095, r24
		/**
		 * Enable reciever and transmitter and their interrupts
		 * transmit interrupt will be disabled until there is 
		 * packet to send.
		 */

		UCSR0B = ((1 << RXCIE) | (1 << RXEN) | (1 << TXEN));
    9c7c:	88 e9       	ldi	r24, 0x98	; 152
    9c7e:	8a b9       	out	0x0a, r24	; 10
#else

		UBRR1H = (uint8_t) (BAUD_57_6k_U2X>>8);
		UBRR1L = (uint8_t) (BAUD_57_6k_U2X);
		UCSR1A = (1 << U2X);
		UCSR1C = ((1 << UCSZ1) | (1 << UCSZ0));
		UCSR1B = ((1 << RXCIE) | (1 << RXEN) | (1 << TXEN));
#endif

#ifdef SOS_USE_PRINTF
		fdevopen(uart_putchar, NULL, 0);
#endif
#else
		uart_disable();
#endif

		LEAVE_CRITICAL_SECTION();
    9c80:	9f bf       	out	0x3f, r25	; 63
		uart_initialized = true;
    9c82:	81 e0       	ldi	r24, 0x01	; 1
    9c84:	80 93 c4 0b 	sts	0x0BC4, r24
	}
	return SOS_OK;
}
    9c88:	80 e0       	ldi	r24, 0x00	; 0
    9c8a:	90 e0       	ldi	r25, 0x00	; 0
    9c8c:	08 95       	ret

00009c8e <uart_init>:
static uart_state_t state[2];

void uart_init(void) {
	
	uint8_t i=0;
    9c8e:	80 e0       	ldi	r24, 0x00	; 0

	state[TX].state = UART_INIT;
    9c90:	80 93 c9 0b 	sts	0x0BC9, r24
	state[RX].state = UART_INIT;
    9c94:	80 93 d5 0b 	sts	0x0BD5, r24

	uart_hardware_init();
    9c98:	0e 94 2f 4e 	call	0x9c5e
    9c9c:	91 e0       	ldi	r25, 0x01	; 1
    9c9e:	e9 ec       	ldi	r30, 0xC9	; 201
    9ca0:	fb e0       	ldi	r31, 0x0B	; 11
    9ca2:	89 2f       	mov	r24, r25

	for (i=0;i<2; i++) {
		state[i].msgHdr = NULL;
    9ca4:	13 82       	std	Z+3, r1	; 0x03
    9ca6:	14 82       	std	Z+4, r1	; 0x04
		state[i].crc = 0;
    9ca8:	17 82       	std	Z+7, r1	; 0x07
    9caa:	10 86       	std	Z+8, r1	; 0x08
		state[i].buff = NULL;
    9cac:	15 82       	std	Z+5, r1	; 0x05
    9cae:	16 82       	std	Z+6, r1	; 0x06
		state[i].idx = 0;
    9cb0:	12 86       	std	Z+10, r1	; 0x0a

		state[i].flags = 0;
    9cb2:	13 86       	std	Z+11, r1	; 0x0b
		
		state[i].msg_state = SOS_MSG_NO_STATE;
    9cb4:	11 82       	std	Z+1, r1	; 0x01
		state[i].hdlc_state = HDLC_IDLE;
    9cb6:	12 82       	std	Z+2, r1	; 0x02
		state[i].state = UART_IDLE;
    9cb8:	90 83       	st	Z, r25
    9cba:	81 50       	subi	r24, 0x01	; 1
    9cbc:	3c 96       	adiw	r30, 0x0c	; 12
    9cbe:	87 ff       	sbrs	r24, 7
    9cc0:	f1 cf       	rjmp	.-30     	; 0x9ca4
    9cc2:	08 95       	ret

00009cc4 <uart_rx_msg_gc>:
	}
}

void uart_rx_msg_gc( void )
{
	if( state[RX].msgHdr != NULL ) {
    9cc4:	80 91 d8 0b 	lds	r24, 0x0BD8
    9cc8:	90 91 d9 0b 	lds	r25, 0x0BD9
    9ccc:	00 97       	sbiw	r24, 0x00	; 0
    9cce:	11 f0       	breq	.+4      	; 0x9cd4
		mq_gc_mark_one_hdr( state[RX].msgHdr );
    9cd0:	0e 94 84 1b 	call	0x3708
    9cd4:	08 95       	ret
    9cd6:	08 95       	ret

00009cd8 <uart_getState>:
	}
}

static inline void uart_send_byte(uint8_t byte) {
	static uint8_t saved_state;

	if ((state[TX].flags & UART_CRC_FLAG) && (state[TX].hdlc_state == HDLC_DATA)) {
		state[TX].crc = crcByte(state[TX].crc, byte);
	}
	if (state[TX].hdlc_state == HDLC_ESCAPE) {
		uart_setByte(0x20 ^ byte);
		state[TX].hdlc_state = saved_state;
	} else if ((byte == HDLC_FLAG) || (byte == HDLC_CTR_ESC) || (byte == HDLC_EXT)) {
		saved_state = state[TX].hdlc_state;
		state[TX].hdlc_state = HDLC_ESCAPE;
		uart_setByte(HDLC_CTR_ESC);
		return;
	} else {
		uart_setByte(byte);
	}
	state[TX].idx++;
}


uint8_t uart_getState(uint8_t flags) {
	if (flags & UART_SYS_TX_FLAG) {
    9cd8:	86 ff       	sbrs	r24, 6
    9cda:	04 c0       	rjmp	.+8      	; 0x9ce4
		return state[TX].state;
    9cdc:	80 91 c9 0b 	lds	r24, 0x0BC9
    9ce0:	99 27       	eor	r25, r25
    9ce2:	08 95       	ret
	}
	return state[RX].state;
    9ce4:	80 91 d5 0b 	lds	r24, 0x0BD5
    9ce8:	99 27       	eor	r25, r25
}
    9cea:	08 95       	ret
    9cec:	08 95       	ret

00009cee <uart_startTransceiverTx>:


int8_t uart_startTransceiverTx( uint8_t *msg, uint8_t msg_len, uint8_t flags) {
    9cee:	fc 01       	movw	r30, r24

	if (state[TX].state != UART_IDLE) {
    9cf0:	80 91 c9 0b 	lds	r24, 0x0BC9
    9cf4:	81 30       	cpi	r24, 0x01	; 1
    9cf6:	19 f0       	breq	.+6      	; 0x9cfe
		//DEBUG("uart_startTransceiverTx Fail!!! ***\n");
		return -EBUSY;
    9cf8:	80 ef       	ldi	r24, 0xF0	; 240
    9cfa:	9f ef       	ldi	r25, 0xFF	; 255
    9cfc:	08 95       	ret
	}
  
  state[TX].flags = UART_SYS_SHARED_FLAGS_MSK & flags;  // get shared flags
    9cfe:	84 2f       	mov	r24, r20
    9d00:	81 7d       	andi	r24, 0xD1	; 209
    9d02:	80 93 d4 0b 	sts	0x0BD4, r24
	if (state[TX].flags & UART_SOS_MSG_FLAG) {
    9d06:	87 ff       	sbrs	r24, 7
    9d08:	0e c0       	rjmp	.+28     	; 0x9d26
		state[TX].msgHdr = (Message*)msg;
    9d0a:	f0 93 cd 0b 	sts	0x0BCD, r31
    9d0e:	e0 93 cc 0b 	sts	0x0BCC, r30
		state[TX].msgLen = state[TX].msgHdr->len; // if msg->len != msg_len ???
    9d12:	87 81       	ldd	r24, Z+7	; 0x07
    9d14:	80 93 d2 0b 	sts	0x0BD2, r24
		state[TX].buff = state[TX].msgHdr->data;
    9d18:	80 85       	ldd	r24, Z+8	; 0x08
    9d1a:	91 85       	ldd	r25, Z+9	; 0x09
    9d1c:	90 93 cf 0b 	sts	0x0BCF, r25
    9d20:	80 93 ce 0b 	sts	0x0BCE, r24
    9d24:	06 c0       	rjmp	.+12     	; 0x9d32
	} else {
		state[TX].buff = msg;
    9d26:	f0 93 cf 0b 	sts	0x0BCF, r31
    9d2a:	e0 93 ce 0b 	sts	0x0BCE, r30
		state[TX].msgLen = msg_len;
    9d2e:	60 93 d2 0b 	sts	0x0BD2, r22
	}
	state[TX].idx = 0;
    9d32:	10 92 d3 0b 	sts	0x0BD3, r1
	state[TX].state = UART_HDLC_START;
    9d36:	82 e0       	ldi	r24, 0x02	; 2
    9d38:	80 93 c9 0b 	sts	0x0BC9, r24
	state[TX].hdlc_state = HDLC_START;
    9d3c:	81 e0       	ldi	r24, 0x01	; 1
    9d3e:	80 93 cb 0b 	sts	0x0BCB, r24

  if(state[TX].msgHdr->type == MSG_TIMESTAMP){
    9d42:	e0 91 cc 0b 	lds	r30, 0x0BCC
    9d46:	f0 91 cd 0b 	lds	r31, 0x0BCD
    9d4a:	86 81       	ldd	r24, Z+6	; 0x06
    9d4c:	80 31       	cpi	r24, 0x10	; 16
    9d4e:	79 f4       	brne	.+30     	; 0x9d6e
    uint32_t timestp = ker_systime32();
    9d50:	0e 94 12 55 	call	0xaa24
    9d54:	dc 01       	movw	r26, r24
    9d56:	cb 01       	movw	r24, r22
    memcpy(state[TX].msgHdr->data, (uint8_t*)(&timestp),sizeof(uint32_t));
    9d58:	e0 91 cc 0b 	lds	r30, 0x0BCC
    9d5c:	f0 91 cd 0b 	lds	r31, 0x0BCD
    9d60:	00 84       	ldd	r0, Z+8	; 0x08
    9d62:	f1 85       	ldd	r31, Z+9	; 0x09
    9d64:	e0 2d       	mov	r30, r0
    9d66:	80 83       	st	Z, r24
    9d68:	91 83       	std	Z+1, r25	; 0x01
    9d6a:	a2 83       	std	Z+2, r26	; 0x02
    9d6c:	b3 83       	std	Z+3, r27	; 0x03
  }
	
	uart_enable_tx();
    9d6e:	56 9a       	sbi	0x0a, 6	; 10
	uart_setByte(HDLC_FLAG);
    9d70:	8e e7       	ldi	r24, 0x7E	; 126
    9d72:	8c b9       	out	0x0c, r24	; 12
	//DEBUG("uart_startTransceiverTx Start!!! ***\n");

	return SOS_OK;
    9d74:	80 e0       	ldi	r24, 0x00	; 0
    9d76:	90 e0       	ldi	r25, 0x00	; 0
}
    9d78:	08 95       	ret
    9d7a:	08 95       	ret

00009d7c <uart_startTransceiverRx>:


int8_t uart_startTransceiverRx( uint8_t rx_len, uint8_t flags) {
    9d7c:	cf 93       	push	r28
    9d7e:	c8 2f       	mov	r28, r24

	if (state[RX].state != UART_IDLE) {
    9d80:	80 91 d5 0b 	lds	r24, 0x0BD5
    9d84:	81 30       	cpi	r24, 0x01	; 1
    9d86:	19 f0       	breq	.+6      	; 0x9d8e
		return -EBUSY;
    9d88:	80 ef       	ldi	r24, 0xF0	; 240
    9d8a:	9f ef       	ldi	r25, 0xFF	; 255
    9d8c:	2d c0       	rjmp	.+90     	; 0x9de8
	}

	state[RX].flags = UART_SYS_SHARED_FLAGS_MSK & flags;  // get shared flags
    9d8e:	86 2f       	mov	r24, r22
    9d90:	81 7d       	andi	r24, 0xD1	; 209
    9d92:	80 93 e0 0b 	sts	0x0BE0, r24
	if (flags & UART_SOS_MSG_FLAG) {
    9d96:	67 ff       	sbrs	r22, 7
    9d98:	07 c0       	rjmp	.+14     	; 0x9da8
		state[RX].msgHdr = msg_create();
    9d9a:	0e 94 8b 1b 	call	0x3716
    9d9e:	90 93 d9 0b 	sts	0x0BD9, r25
    9da2:	80 93 d8 0b 	sts	0x0BD8, r24
    9da6:	0a c0       	rjmp	.+20     	; 0x9dbc
 * Will return a NULL pointer if the call to sys_malloc fails.
 */
static inline void *ker_malloc(uint16_t size, sos_pid_t id)
{
  return sos_blk_mem_alloc(size, id, false);
    9da8:	40 e0       	ldi	r20, 0x00	; 0
    9daa:	62 e4       	ldi	r22, 0x42	; 66
    9dac:	8c 2f       	mov	r24, r28
    9dae:	99 27       	eor	r25, r25
    9db0:	0e 94 14 11 	call	0x2228
    9db4:	90 93 db 0b 	sts	0x0BDB, r25
    9db8:	80 93 da 0b 	sts	0x0BDA, r24
		if (state[RX].msgHdr == NULL) {
			return -ENOMEM;
		}
	} else {
		state[RX].buff = ker_malloc(rx_len, UART_PID);
		if (state[RX].buff == NULL) {
    9dbc:	89 2b       	or	r24, r25
    9dbe:	19 f4       	brne	.+6      	; 0x9dc6
			return -ENOMEM;
    9dc0:	84 ef       	ldi	r24, 0xF4	; 244
    9dc2:	9f ef       	ldi	r25, 0xFF	; 255
    9dc4:	11 c0       	rjmp	.+34     	; 0x9de8
		}
	}
	state[RX].msgLen = rx_len;  // expected rx_len
    9dc6:	c0 93 de 0b 	sts	0x0BDE, r28

	state[RX].idx = 0;
    9dca:	10 92 df 0b 	sts	0x0BDF, r1
	state[RX].crc = 0;
    9dce:	10 92 dd 0b 	sts	0x0BDD, r1
    9dd2:	10 92 dc 0b 	sts	0x0BDC, r1
	state[RX].state = UART_HDLC_START;
    9dd6:	82 e0       	ldi	r24, 0x02	; 2
    9dd8:	80 93 d5 0b 	sts	0x0BD5, r24
	state[RX].hdlc_state = HDLC_START;
    9ddc:	81 e0       	ldi	r24, 0x01	; 1
    9dde:	80 93 d7 0b 	sts	0x0BD7, r24
	
	uart_enable_rx();
    9de2:	57 9a       	sbi	0x0a, 7	; 10
	
	return SOS_OK;
    9de4:	80 e0       	ldi	r24, 0x00	; 0
    9de6:	90 e0       	ldi	r25, 0x00	; 0
    9de8:	cf 91       	pop	r28
    9dea:	08 95       	ret

00009dec <uart_getRecievedData>:
}


uint8_t *uart_getRecievedData(void) {
	HAS_CRITICAL_SECTION;

	if (state[RX].flags & UART_DATA_RDY_FLAG) {
    9dec:	40 91 e0 0b 	lds	r20, 0x0BE0
    9df0:	84 2f       	mov	r24, r20
    9df2:	99 27       	eor	r25, r25
    9df4:	25 e0       	ldi	r18, 0x05	; 5
    9df6:	96 95       	lsr	r25
    9df8:	87 95       	ror	r24
    9dfa:	2a 95       	dec	r18
    9dfc:	e1 f7       	brne	.-8      	; 0x9df6
    9dfe:	9c 01       	movw	r18, r24
    9e00:	21 70       	andi	r18, 0x01	; 1
    9e02:	30 70       	andi	r19, 0x00	; 0
    9e04:	80 ff       	sbrs	r24, 0
    9e06:	14 c0       	rjmp	.+40     	; 0x9e30
		ENTER_CRITICAL_SECTION();
    9e08:	8f b7       	in	r24, 0x3f	; 63
    9e0a:	f8 94       	cli
		state[RX].flags &= ~UART_DATA_RDY_FLAG;
    9e0c:	4f 7d       	andi	r20, 0xDF	; 223
    9e0e:	40 93 e0 0b 	sts	0x0BE0, r20
		LEAVE_CRITICAL_SECTION();
    9e12:	8f bf       	out	0x3f, r24	; 63

		return (state[RX].flags & UART_SOS_MSG_FLAG)?(uint8_t*)state[RX].msgHdr:state[RX].buff;
    9e14:	80 91 e0 0b 	lds	r24, 0x0BE0
    9e18:	87 ff       	sbrs	r24, 7
    9e1a:	05 c0       	rjmp	.+10     	; 0x9e26
    9e1c:	80 91 d8 0b 	lds	r24, 0x0BD8
    9e20:	90 91 d9 0b 	lds	r25, 0x0BD9
    9e24:	08 95       	ret
    9e26:	80 91 da 0b 	lds	r24, 0x0BDA
    9e2a:	90 91 db 0b 	lds	r25, 0x0BDB
    9e2e:	08 95       	ret
	}

	return NULL;
    9e30:	c9 01       	movw	r24, r18
}
    9e32:	08 95       	ret
    9e34:	08 95       	ret

00009e36 <__vector_20>:


/* ISR for transmittion */
#ifndef DISABLE_UART
uart_send_interrupt() {
    9e36:	1f 92       	push	r1
    9e38:	0f 92       	push	r0
    9e3a:	0f b6       	in	r0, 0x3f	; 63
    9e3c:	0f 92       	push	r0
    9e3e:	11 24       	eor	r1, r1
    9e40:	2f 93       	push	r18
    9e42:	3f 93       	push	r19
    9e44:	4f 93       	push	r20
    9e46:	5f 93       	push	r21
    9e48:	6f 93       	push	r22
    9e4a:	7f 93       	push	r23
    9e4c:	8f 93       	push	r24
    9e4e:	9f 93       	push	r25
    9e50:	af 93       	push	r26
    9e52:	bf 93       	push	r27
    9e54:	ef 93       	push	r30
    9e56:	ff 93       	push	r31
#ifdef SOS_USE_PREEMPTION
	HAS_PREEMPTION_SECTION;
	DISABLE_PREEMPTION();
#endif
	SOS_MEASUREMENT_IDLE_END();
	LED_DBG(LED_GREEN_TOGGLE);

	//DEBUG("uart_send_interrupt %d %d %d\n", state[TX].state, state[TX].msg_state,
	//		state[TX].hdlc_state);
	switch (state[TX].state) {
    9e58:	80 91 c9 0b 	lds	r24, 0x0BC9
    9e5c:	99 27       	eor	r25, r25
    9e5e:	84 30       	cpi	r24, 0x04	; 4
    9e60:	91 05       	cpc	r25, r1
    9e62:	09 f4       	brne	.+2      	; 0x9e66
    9e64:	3e c0       	rjmp	.+124    	; 0x9ee2
    9e66:	85 30       	cpi	r24, 0x05	; 5
    9e68:	91 05       	cpc	r25, r1
    9e6a:	34 f4       	brge	.+12     	; 0x9e78
    9e6c:	82 30       	cpi	r24, 0x02	; 2
    9e6e:	91 05       	cpc	r25, r1
    9e70:	59 f0       	breq	.+22     	; 0x9e88
    9e72:	03 97       	sbiw	r24, 0x03	; 3
    9e74:	51 f1       	breq	.+84     	; 0x9eca
    9e76:	c5 c1       	rjmp	.+906    	; 0xa202
    9e78:	85 30       	cpi	r24, 0x05	; 5
    9e7a:	91 05       	cpc	r25, r1
    9e7c:	09 f4       	brne	.+2      	; 0x9e80
    9e7e:	b0 c1       	rjmp	.+864    	; 0xa1e0
    9e80:	06 97       	sbiw	r24, 0x06	; 6
    9e82:	09 f4       	brne	.+2      	; 0x9e86
    9e84:	b5 c1       	rjmp	.+874    	; 0xa1f0
    9e86:	bd c1       	rjmp	.+890    	; 0xa202
		case UART_HDLC_START:
			uart_setByte((state[TX].flags & UART_SOS_MSG_FLAG)?HDLC_SOS_MSG:HDLC_RAW);
    9e88:	90 91 d4 0b 	lds	r25, 0x0BD4
    9e8c:	97 ff       	sbrs	r25, 7
    9e8e:	02 c0       	rjmp	.+4      	; 0x9e94
    9e90:	81 e0       	ldi	r24, 0x01	; 1
    9e92:	01 c0       	rjmp	.+2      	; 0x9e96
    9e94:	85 e0       	ldi	r24, 0x05	; 5
    9e96:	8c b9       	out	0x0c, r24	; 12
			state[TX].hdlc_state = HDLC_DATA;
    9e98:	86 e0       	ldi	r24, 0x06	; 6
    9e9a:	80 93 cb 0b 	sts	0x0BCB, r24
			state[TX].state = UART_PROTOCOL;
    9e9e:	83 e0       	ldi	r24, 0x03	; 3
    9ea0:	80 93 c9 0b 	sts	0x0BC9, r24
			if (state[TX].flags & UART_CRC_FLAG) {
    9ea4:	97 ff       	sbrs	r25, 7
    9ea6:	bc c1       	rjmp	.+888    	; 0xa220
extern uint16_t crcTable[256] PROGMEM;  //!< this is defined in crc.c

static inline uint16_t crcByte(uint16_t oldCrc, uint8_t byte)
{
  uint8_t *magic = (uint8_t *)&crcTable[oldCrc >> 8 ^ byte];
    9ea8:	e6 e3       	ldi	r30, 0x36	; 54
    9eaa:	f3 e0       	ldi	r31, 0x03	; 3

  return pgm_read_byte(magic) | ((uint8_t)oldCrc ^ pgm_read_byte(magic + 1)) << 8;
    9eac:	84 91       	lpm	r24, Z
    9eae:	28 2f       	mov	r18, r24
    9eb0:	33 27       	eor	r19, r19
    9eb2:	31 96       	adiw	r30, 0x01	; 1
    9eb4:	84 91       	lpm	r24, Z
    9eb6:	99 27       	eor	r25, r25
    9eb8:	98 2f       	mov	r25, r24
    9eba:	88 27       	eor	r24, r24
    9ebc:	28 2b       	or	r18, r24
    9ebe:	39 2b       	or	r19, r25
    9ec0:	30 93 d1 0b 	sts	0x0BD1, r19
    9ec4:	20 93 d0 0b 	sts	0x0BD0, r18
				state[TX].crc = crcByte(0, (state[TX].flags & UART_SOS_MSG_FLAG)?HDLC_SOS_MSG:HDLC_RAW);
			}
			break;
    9ec8:	ab c1       	rjmp	.+854    	; 0xa220

		case UART_PROTOCOL:
			state[TX].state = UART_DATA;
    9eca:	84 e0       	ldi	r24, 0x04	; 4
    9ecc:	80 93 c9 0b 	sts	0x0BC9, r24
			if (state[TX].flags & UART_SOS_MSG_FLAG) {
    9ed0:	80 91 d4 0b 	lds	r24, 0x0BD4
    9ed4:	87 ff       	sbrs	r24, 7
    9ed6:	02 c0       	rjmp	.+4      	; 0x9edc
				state[TX].msg_state = SOS_MSG_TX_HDR;
    9ed8:	87 e0       	ldi	r24, 0x07	; 7
    9eda:	01 c0       	rjmp	.+2      	; 0x9ede
			} else {
				state[TX].msg_state = SOS_MSG_TX_RAW;
    9edc:	82 e0       	ldi	r24, 0x02	; 2
    9ede:	80 93 ca 0b 	sts	0x0BCA, r24
			}
			// set state and fall through
		case UART_DATA:
			switch (state[TX].msg_state) {
    9ee2:	80 91 ca 0b 	lds	r24, 0x0BCA
    9ee6:	99 27       	eor	r25, r25
    9ee8:	88 30       	cpi	r24, 0x08	; 8
    9eea:	91 05       	cpc	r25, r1
    9eec:	09 f4       	brne	.+2      	; 0x9ef0
    9eee:	73 c0       	rjmp	.+230    	; 0x9fd6
    9ef0:	89 30       	cpi	r24, 0x09	; 9
    9ef2:	91 05       	cpc	r25, r1
    9ef4:	3c f4       	brge	.+14     	; 0x9f04
    9ef6:	82 30       	cpi	r24, 0x02	; 2
    9ef8:	91 05       	cpc	r25, r1
    9efa:	09 f4       	brne	.+2      	; 0x9efe
    9efc:	6c c0       	rjmp	.+216    	; 0x9fd6
    9efe:	07 97       	sbiw	r24, 0x07	; 7
    9f00:	49 f0       	breq	.+18     	; 0x9f14
    9f02:	8e c1       	rjmp	.+796    	; 0xa220
    9f04:	89 30       	cpi	r24, 0x09	; 9
    9f06:	91 05       	cpc	r25, r1
    9f08:	09 f4       	brne	.+2      	; 0x9f0c
    9f0a:	c9 c0       	rjmp	.+402    	; 0xa09e
    9f0c:	0a 97       	sbiw	r24, 0x0a	; 10
    9f0e:	09 f4       	brne	.+2      	; 0x9f12
    9f10:	16 c1       	rjmp	.+556    	; 0xa13e
    9f12:	86 c1       	rjmp	.+780    	; 0xa220
    9f14:	70 91 d3 0b 	lds	r23, 0x0BD3
    9f18:	a0 91 cc 0b 	lds	r26, 0x0BCC
    9f1c:	b0 91 cd 0b 	lds	r27, 0x0BCD
    9f20:	fd 01       	movw	r30, r26
    9f22:	e7 0f       	add	r30, r23
    9f24:	f1 1d       	adc	r31, r1
    9f26:	60 81       	ld	r22, Z
    9f28:	80 91 d4 0b 	lds	r24, 0x0BD4
    9f2c:	87 ff       	sbrs	r24, 7
    9f2e:	21 c0       	rjmp	.+66     	; 0x9f72
    9f30:	80 91 cb 0b 	lds	r24, 0x0BCB
    9f34:	86 30       	cpi	r24, 0x06	; 6
    9f36:	e9 f4       	brne	.+58     	; 0x9f72

extern uint16_t crcTable[256] PROGMEM;  //!< this is defined in crc.c

static inline uint16_t crcByte(uint16_t oldCrc, uint8_t byte)
{
    9f38:	40 91 d0 0b 	lds	r20, 0x0BD0
    9f3c:	50 91 d1 0b 	lds	r21, 0x0BD1
  uint8_t *magic = (uint8_t *)&crcTable[oldCrc >> 8 ^ byte];
    9f40:	e5 2f       	mov	r30, r21
    9f42:	ff 27       	eor	r31, r31
    9f44:	86 2f       	mov	r24, r22
    9f46:	99 27       	eor	r25, r25
    9f48:	e8 27       	eor	r30, r24
    9f4a:	f9 27       	eor	r31, r25
    9f4c:	ee 0f       	add	r30, r30
    9f4e:	ff 1f       	adc	r31, r31
    9f50:	ec 5c       	subi	r30, 0xCC	; 204
    9f52:	fc 4f       	sbci	r31, 0xFC	; 252

  return pgm_read_byte(magic) | ((uint8_t)oldCrc ^ pgm_read_byte(magic + 1)) << 8;
    9f54:	84 91       	lpm	r24, Z
    9f56:	28 2f       	mov	r18, r24
    9f58:	33 27       	eor	r19, r19
    9f5a:	31 96       	adiw	r30, 0x01	; 1
    9f5c:	84 91       	lpm	r24, Z
    9f5e:	84 27       	eor	r24, r20
    9f60:	99 27       	eor	r25, r25
    9f62:	98 2f       	mov	r25, r24
    9f64:	88 27       	eor	r24, r24
    9f66:	28 2b       	or	r18, r24
    9f68:	39 2b       	or	r19, r25
    9f6a:	30 93 d1 0b 	sts	0x0BD1, r19
    9f6e:	20 93 d0 0b 	sts	0x0BD0, r18
    9f72:	90 91 cb 0b 	lds	r25, 0x0BCB
    9f76:	97 30       	cpi	r25, 0x07	; 7
    9f78:	41 f4       	brne	.+16     	; 0x9f8a
    9f7a:	80 e2       	ldi	r24, 0x20	; 32
    9f7c:	68 27       	eor	r22, r24
    9f7e:	6c b9       	out	0x0c, r22	; 12
    9f80:	80 91 c5 0b 	lds	r24, 0x0BC5
    9f84:	80 93 cb 0b 	sts	0x0BCB, r24
    9f88:	0f c0       	rjmp	.+30     	; 0x9fa8
    9f8a:	86 2f       	mov	r24, r22
    9f8c:	8d 57       	subi	r24, 0x7D	; 125
    9f8e:	82 30       	cpi	r24, 0x02	; 2
    9f90:	10 f0       	brcs	.+4      	; 0x9f96
    9f92:	63 30       	cpi	r22, 0x03	; 3
    9f94:	41 f4       	brne	.+16     	; 0x9fa6
    9f96:	90 93 c5 0b 	sts	0x0BC5, r25
    9f9a:	87 e0       	ldi	r24, 0x07	; 7
    9f9c:	80 93 cb 0b 	sts	0x0BCB, r24
    9fa0:	8d e7       	ldi	r24, 0x7D	; 125
    9fa2:	8c b9       	out	0x0c, r24	; 12
    9fa4:	04 c0       	rjmp	.+8      	; 0x9fae
    9fa6:	6c b9       	out	0x0c, r22	; 12
    9fa8:	7f 5f       	subi	r23, 0xFF	; 255
    9faa:	70 93 d3 0b 	sts	0x0BD3, r23
				case SOS_MSG_TX_HDR:
					uart_send_byte(((uint8_t*)(state[TX].msgHdr))[state[TX].idx]);
					if ((state[TX].idx == SOS_MSG_HEADER_SIZE) && (state[TX].hdlc_state != HDLC_ESCAPE)) {
    9fae:	90 91 d3 0b 	lds	r25, 0x0BD3
    9fb2:	98 30       	cpi	r25, 0x08	; 8
    9fb4:	09 f0       	breq	.+2      	; 0x9fb8
    9fb6:	34 c1       	rjmp	.+616    	; 0xa220
    9fb8:	80 91 cb 0b 	lds	r24, 0x0BCB
    9fbc:	87 30       	cpi	r24, 0x07	; 7
    9fbe:	09 f4       	brne	.+2      	; 0x9fc2
    9fc0:	2f c1       	rjmp	.+606    	; 0xa220
						state[TX].idx = 0;
    9fc2:	10 92 d3 0b 	sts	0x0BD3, r1
						if (state[TX].msgHdr->len != 0) {
    9fc6:	fd 01       	movw	r30, r26
    9fc8:	87 81       	ldd	r24, Z+7	; 0x07
    9fca:	88 23       	and	r24, r24
    9fcc:	09 f4       	brne	.+2      	; 0x9fd0
    9fce:	5d c0       	rjmp	.+186    	; 0xa08a
							state[TX].msg_state = SOS_MSG_TX_DATA;
    9fd0:	90 93 ca 0b 	sts	0x0BCA, r25
    9fd4:	25 c1       	rjmp	.+586    	; 0xa220
    9fd6:	70 91 d3 0b 	lds	r23, 0x0BD3
    9fda:	e0 91 ce 0b 	lds	r30, 0x0BCE
    9fde:	f0 91 cf 0b 	lds	r31, 0x0BCF
    9fe2:	e7 0f       	add	r30, r23
    9fe4:	f1 1d       	adc	r31, r1
    9fe6:	60 81       	ld	r22, Z
    9fe8:	a0 91 d4 0b 	lds	r26, 0x0BD4
    9fec:	a7 ff       	sbrs	r26, 7
    9fee:	21 c0       	rjmp	.+66     	; 0xa032
    9ff0:	80 91 cb 0b 	lds	r24, 0x0BCB
    9ff4:	86 30       	cpi	r24, 0x06	; 6
    9ff6:	e9 f4       	brne	.+58     	; 0xa032

extern uint16_t crcTable[256] PROGMEM;  //!< this is defined in crc.c

static inline uint16_t crcByte(uint16_t oldCrc, uint8_t byte)
{
    9ff8:	40 91 d0 0b 	lds	r20, 0x0BD0
    9ffc:	50 91 d1 0b 	lds	r21, 0x0BD1
  uint8_t *magic = (uint8_t *)&crcTable[oldCrc >> 8 ^ byte];
    a000:	e5 2f       	mov	r30, r21
    a002:	ff 27       	eor	r31, r31
    a004:	86 2f       	mov	r24, r22
    a006:	99 27       	eor	r25, r25
    a008:	e8 27       	eor	r30, r24
    a00a:	f9 27       	eor	r31, r25
    a00c:	ee 0f       	add	r30, r30
    a00e:	ff 1f       	adc	r31, r31
    a010:	ec 5c       	subi	r30, 0xCC	; 204
    a012:	fc 4f       	sbci	r31, 0xFC	; 252

  return pgm_read_byte(magic) | ((uint8_t)oldCrc ^ pgm_read_byte(magic + 1)) << 8;
    a014:	84 91       	lpm	r24, Z
    a016:	28 2f       	mov	r18, r24
    a018:	33 27       	eor	r19, r19
    a01a:	31 96       	adiw	r30, 0x01	; 1
    a01c:	84 91       	lpm	r24, Z
    a01e:	84 27       	eor	r24, r20
    a020:	99 27       	eor	r25, r25
    a022:	98 2f       	mov	r25, r24
    a024:	88 27       	eor	r24, r24
    a026:	28 2b       	or	r18, r24
    a028:	39 2b       	or	r19, r25
    a02a:	30 93 d1 0b 	sts	0x0BD1, r19
    a02e:	20 93 d0 0b 	sts	0x0BD0, r18
    a032:	90 91 cb 0b 	lds	r25, 0x0BCB
    a036:	97 30       	cpi	r25, 0x07	; 7
    a038:	41 f4       	brne	.+16     	; 0xa04a
    a03a:	80 e2       	ldi	r24, 0x20	; 32
    a03c:	68 27       	eor	r22, r24
    a03e:	6c b9       	out	0x0c, r22	; 12
    a040:	80 91 c5 0b 	lds	r24, 0x0BC5
    a044:	80 93 cb 0b 	sts	0x0BCB, r24
    a048:	0f c0       	rjmp	.+30     	; 0xa068
    a04a:	86 2f       	mov	r24, r22
    a04c:	8d 57       	subi	r24, 0x7D	; 125
    a04e:	82 30       	cpi	r24, 0x02	; 2
    a050:	10 f0       	brcs	.+4      	; 0xa056
    a052:	63 30       	cpi	r22, 0x03	; 3
    a054:	41 f4       	brne	.+16     	; 0xa066
    a056:	90 93 c5 0b 	sts	0x0BC5, r25
    a05a:	87 e0       	ldi	r24, 0x07	; 7
    a05c:	80 93 cb 0b 	sts	0x0BCB, r24
    a060:	8d e7       	ldi	r24, 0x7D	; 125
    a062:	8c b9       	out	0x0c, r24	; 12
    a064:	04 c0       	rjmp	.+8      	; 0xa06e
    a066:	6c b9       	out	0x0c, r22	; 12
    a068:	7f 5f       	subi	r23, 0xFF	; 255
    a06a:	70 93 d3 0b 	sts	0x0BD3, r23
						} else {
							state[TX].hdlc_state = HDLC_CRC;
							state[TX].msg_state = SOS_MSG_TX_CRC_LOW;
						}
					}
					break;

				case SOS_MSG_TX_DATA:
				case SOS_MSG_TX_RAW:
					uart_send_byte(state[TX].buff[state[TX].idx]);
					if ((state[TX].idx == state[TX].msgLen) && (state[TX].hdlc_state != HDLC_ESCAPE)) {
    a06e:	90 91 d3 0b 	lds	r25, 0x0BD3
    a072:	80 91 d2 0b 	lds	r24, 0x0BD2
    a076:	98 17       	cp	r25, r24
    a078:	09 f0       	breq	.+2      	; 0xa07c
    a07a:	d2 c0       	rjmp	.+420    	; 0xa220
    a07c:	80 91 cb 0b 	lds	r24, 0x0BCB
    a080:	87 30       	cpi	r24, 0x07	; 7
    a082:	09 f4       	brne	.+2      	; 0xa086
    a084:	cd c0       	rjmp	.+410    	; 0xa220
						if (state[TX].flags & UART_CRC_FLAG) {
    a086:	a7 ff       	sbrs	r26, 7
    a088:	04 c0       	rjmp	.+8      	; 0xa092
							state[TX].hdlc_state = HDLC_CRC;
    a08a:	89 e0       	ldi	r24, 0x09	; 9
    a08c:	80 93 cb 0b 	sts	0x0BCB, r24
    a090:	53 c0       	rjmp	.+166    	; 0xa138
							state[TX].msg_state = SOS_MSG_TX_CRC_LOW;
						} else { // no crc
							state[TX].state = UART_END;
    a092:	86 e0       	ldi	r24, 0x06	; 6
    a094:	80 93 c9 0b 	sts	0x0BC9, r24
							uart_setByte(HDLC_FLAG);
    a098:	8e e7       	ldi	r24, 0x7E	; 126
    a09a:	8c b9       	out	0x0c, r24	; 12
						}
					}
					break;
    a09c:	c1 c0       	rjmp	.+386    	; 0xa220
    a09e:	60 91 d0 0b 	lds	r22, 0x0BD0
    a0a2:	80 91 d4 0b 	lds	r24, 0x0BD4
    a0a6:	87 ff       	sbrs	r24, 7
    a0a8:	21 c0       	rjmp	.+66     	; 0xa0ec
    a0aa:	80 91 cb 0b 	lds	r24, 0x0BCB
    a0ae:	86 30       	cpi	r24, 0x06	; 6
    a0b0:	e9 f4       	brne	.+58     	; 0xa0ec

extern uint16_t crcTable[256] PROGMEM;  //!< this is defined in crc.c

static inline uint16_t crcByte(uint16_t oldCrc, uint8_t byte)
{
    a0b2:	40 91 d0 0b 	lds	r20, 0x0BD0
    a0b6:	50 91 d1 0b 	lds	r21, 0x0BD1
  uint8_t *magic = (uint8_t *)&crcTable[oldCrc >> 8 ^ byte];
    a0ba:	e5 2f       	mov	r30, r21
    a0bc:	ff 27       	eor	r31, r31
    a0be:	86 2f       	mov	r24, r22
    a0c0:	99 27       	eor	r25, r25
    a0c2:	e8 27       	eor	r30, r24
    a0c4:	f9 27       	eor	r31, r25
    a0c6:	ee 0f       	add	r30, r30
    a0c8:	ff 1f       	adc	r31, r31
    a0ca:	ec 5c       	subi	r30, 0xCC	; 204
    a0cc:	fc 4f       	sbci	r31, 0xFC	; 252

  return pgm_read_byte(magic) | ((uint8_t)oldCrc ^ pgm_read_byte(magic + 1)) << 8;
    a0ce:	84 91       	lpm	r24, Z
    a0d0:	28 2f       	mov	r18, r24
    a0d2:	33 27       	eor	r19, r19
    a0d4:	31 96       	adiw	r30, 0x01	; 1
    a0d6:	84 91       	lpm	r24, Z
    a0d8:	84 27       	eor	r24, r20
    a0da:	99 27       	eor	r25, r25
    a0dc:	98 2f       	mov	r25, r24
    a0de:	88 27       	eor	r24, r24
    a0e0:	28 2b       	or	r18, r24
    a0e2:	39 2b       	or	r19, r25
    a0e4:	30 93 d1 0b 	sts	0x0BD1, r19
    a0e8:	20 93 d0 0b 	sts	0x0BD0, r18
    a0ec:	90 91 cb 0b 	lds	r25, 0x0BCB
    a0f0:	97 30       	cpi	r25, 0x07	; 7
    a0f2:	41 f4       	brne	.+16     	; 0xa104
    a0f4:	80 e2       	ldi	r24, 0x20	; 32
    a0f6:	68 27       	eor	r22, r24
    a0f8:	6c b9       	out	0x0c, r22	; 12
    a0fa:	80 91 c5 0b 	lds	r24, 0x0BC5
    a0fe:	80 93 cb 0b 	sts	0x0BCB, r24
    a102:	0f c0       	rjmp	.+30     	; 0xa122
    a104:	86 2f       	mov	r24, r22
    a106:	8d 57       	subi	r24, 0x7D	; 125
    a108:	82 30       	cpi	r24, 0x02	; 2
    a10a:	10 f0       	brcs	.+4      	; 0xa110
    a10c:	63 30       	cpi	r22, 0x03	; 3
    a10e:	41 f4       	brne	.+16     	; 0xa120
    a110:	90 93 c5 0b 	sts	0x0BC5, r25
    a114:	87 e0       	ldi	r24, 0x07	; 7
    a116:	80 93 cb 0b 	sts	0x0BCB, r24
    a11a:	8d e7       	ldi	r24, 0x7D	; 125
    a11c:	8c b9       	out	0x0c, r24	; 12
    a11e:	06 c0       	rjmp	.+12     	; 0xa12c
    a120:	6c b9       	out	0x0c, r22	; 12
    a122:	80 91 d3 0b 	lds	r24, 0x0BD3
    a126:	8f 5f       	subi	r24, 0xFF	; 255
    a128:	80 93 d3 0b 	sts	0x0BD3, r24

				case SOS_MSG_TX_CRC_LOW:
					uart_send_byte((uint8_t)(state[TX].crc));
					if (state[TX].hdlc_state != HDLC_ESCAPE) { //! crc was escaped, resend
    a12c:	80 91 cb 0b 	lds	r24, 0x0BCB
    a130:	87 30       	cpi	r24, 0x07	; 7
    a132:	09 f4       	brne	.+2      	; 0xa136
    a134:	75 c0       	rjmp	.+234    	; 0xa220
						state[TX].msg_state = SOS_MSG_TX_CRC_HIGH;
    a136:	8a e0       	ldi	r24, 0x0A	; 10
    a138:	80 93 ca 0b 	sts	0x0BCA, r24
					}
					break;
    a13c:	71 c0       	rjmp	.+226    	; 0xa220
    a13e:	60 91 d0 0b 	lds	r22, 0x0BD0
    a142:	70 91 d1 0b 	lds	r23, 0x0BD1
    a146:	27 2f       	mov	r18, r23
    a148:	33 27       	eor	r19, r19
    a14a:	42 2f       	mov	r20, r18
    a14c:	80 91 d4 0b 	lds	r24, 0x0BD4
    a150:	87 ff       	sbrs	r24, 7
    a152:	1b c0       	rjmp	.+54     	; 0xa18a
    a154:	80 91 cb 0b 	lds	r24, 0x0BCB
    a158:	86 30       	cpi	r24, 0x06	; 6
    a15a:	b9 f4       	brne	.+46     	; 0xa18a
extern uint16_t crcTable[256] PROGMEM;  //!< this is defined in crc.c

static inline uint16_t crcByte(uint16_t oldCrc, uint8_t byte)
{
  uint8_t *magic = (uint8_t *)&crcTable[oldCrc >> 8 ^ byte];
    a15c:	e2 2f       	mov	r30, r18
    a15e:	ff 27       	eor	r31, r31
    a160:	e2 27       	eor	r30, r18
    a162:	f3 27       	eor	r31, r19
    a164:	ee 0f       	add	r30, r30
    a166:	ff 1f       	adc	r31, r31
    a168:	ec 5c       	subi	r30, 0xCC	; 204
    a16a:	fc 4f       	sbci	r31, 0xFC	; 252

  return pgm_read_byte(magic) | ((uint8_t)oldCrc ^ pgm_read_byte(magic + 1)) << 8;
    a16c:	84 91       	lpm	r24, Z
    a16e:	28 2f       	mov	r18, r24
    a170:	33 27       	eor	r19, r19
    a172:	31 96       	adiw	r30, 0x01	; 1
    a174:	84 91       	lpm	r24, Z
    a176:	86 27       	eor	r24, r22
    a178:	99 27       	eor	r25, r25
    a17a:	98 2f       	mov	r25, r24
    a17c:	88 27       	eor	r24, r24
    a17e:	28 2b       	or	r18, r24
    a180:	39 2b       	or	r19, r25
    a182:	30 93 d1 0b 	sts	0x0BD1, r19
    a186:	20 93 d0 0b 	sts	0x0BD0, r18
    a18a:	90 91 cb 0b 	lds	r25, 0x0BCB
    a18e:	97 30       	cpi	r25, 0x07	; 7
    a190:	41 f4       	brne	.+16     	; 0xa1a2
    a192:	80 e2       	ldi	r24, 0x20	; 32
    a194:	48 27       	eor	r20, r24
    a196:	4c b9       	out	0x0c, r20	; 12
    a198:	80 91 c5 0b 	lds	r24, 0x0BC5
    a19c:	80 93 cb 0b 	sts	0x0BCB, r24
    a1a0:	0f c0       	rjmp	.+30     	; 0xa1c0
    a1a2:	84 2f       	mov	r24, r20
    a1a4:	8d 57       	subi	r24, 0x7D	; 125
    a1a6:	82 30       	cpi	r24, 0x02	; 2
    a1a8:	10 f0       	brcs	.+4      	; 0xa1ae
    a1aa:	43 30       	cpi	r20, 0x03	; 3
    a1ac:	41 f4       	brne	.+16     	; 0xa1be
    a1ae:	90 93 c5 0b 	sts	0x0BC5, r25
    a1b2:	87 e0       	ldi	r24, 0x07	; 7
    a1b4:	80 93 cb 0b 	sts	0x0BCB, r24
    a1b8:	8d e7       	ldi	r24, 0x7D	; 125
    a1ba:	8c b9       	out	0x0c, r24	; 12
    a1bc:	06 c0       	rjmp	.+12     	; 0xa1ca
    a1be:	4c b9       	out	0x0c, r20	; 12
    a1c0:	80 91 d3 0b 	lds	r24, 0x0BD3
    a1c4:	8f 5f       	subi	r24, 0xFF	; 255
    a1c6:	80 93 d3 0b 	sts	0x0BD3, r24

				case SOS_MSG_TX_CRC_HIGH:
					uart_send_byte((uint8_t)(state[TX].crc >> 8));
					if (state[TX].hdlc_state != HDLC_ESCAPE) { //! resend low byte
    a1ca:	80 91 cb 0b 	lds	r24, 0x0BCB
    a1ce:	87 30       	cpi	r24, 0x07	; 7
    a1d0:	39 f1       	breq	.+78     	; 0xa220
						state[TX].msg_state = SOS_MSG_TX_END;
    a1d2:	8b e0       	ldi	r24, 0x0B	; 11
    a1d4:	80 93 ca 0b 	sts	0x0BCA, r24
						state[TX].state = UART_HDLC_STOP;
    a1d8:	85 e0       	ldi	r24, 0x05	; 5
    a1da:	80 93 c9 0b 	sts	0x0BC9, r24
					}
					break;
    a1de:	20 c0       	rjmp	.+64     	; 0xa220
				default:
					break;
			}
			break;

		case UART_HDLC_STOP:
			uart_setByte(HDLC_FLAG);
    a1e0:	8e e7       	ldi	r24, 0x7E	; 126
    a1e2:	8c b9       	out	0x0c, r24	; 12
			state[TX].state = UART_END;
    a1e4:	86 e0       	ldi	r24, 0x06	; 6
    a1e6:	80 93 c9 0b 	sts	0x0BC9, r24
			state[TX].msg_state = SOS_MSG_NO_STATE;
    a1ea:	10 92 ca 0b 	sts	0x0BCA, r1
			break;
    a1ee:	18 c0       	rjmp	.+48     	; 0xa220

		case UART_END:
			//DEBUG("disable Tx in uart.c\n");
			uart_disable_tx();
    a1f0:	56 98       	cbi	0x0a, 6	; 10
			state[TX].state = UART_IDLE;
    a1f2:	81 e0       	ldi	r24, 0x01	; 1
    a1f4:	80 93 c9 0b 	sts	0x0BC9, r24
			state[TX].hdlc_state = HDLC_IDLE;
    a1f8:	10 92 cb 0b 	sts	0x0BCB, r1
			uart_send_done(state[TX].flags & ~UART_ERROR_FLAG);
    a1fc:	80 91 d4 0b 	lds	r24, 0x0BD4
    a200:	0c c0       	rjmp	.+24     	; 0xa21a
			//DEBUG("uart_disable_tx\n");
			break;

		default:
			//DEBUG("In Default...\n");
			//DEBUG("disable Tx in uart.c\n");
			uart_disable_tx();
    a202:	56 98       	cbi	0x0a, 6	; 10
			state[TX].flags |= UART_ERROR_FLAG;
    a204:	90 91 d4 0b 	lds	r25, 0x0BD4
    a208:	91 60       	ori	r25, 0x01	; 1
    a20a:	90 93 d4 0b 	sts	0x0BD4, r25
			state[TX].state = UART_IDLE;
    a20e:	81 e0       	ldi	r24, 0x01	; 1
    a210:	80 93 c9 0b 	sts	0x0BC9, r24
			state[TX].hdlc_state = HDLC_IDLE;
    a214:	10 92 cb 0b 	sts	0x0BCB, r1
			uart_send_done(state[TX].flags & ~UART_ERROR_FLAG);
    a218:	89 2f       	mov	r24, r25
    a21a:	8e 7f       	andi	r24, 0xFE	; 254
    a21c:	0e 94 4d 54 	call	0xa89a
    a220:	ff 91       	pop	r31
    a222:	ef 91       	pop	r30
    a224:	bf 91       	pop	r27
    a226:	af 91       	pop	r26
    a228:	9f 91       	pop	r25
    a22a:	8f 91       	pop	r24
    a22c:	7f 91       	pop	r23
    a22e:	6f 91       	pop	r22
    a230:	5f 91       	pop	r21
    a232:	4f 91       	pop	r20
    a234:	3f 91       	pop	r19
    a236:	2f 91       	pop	r18
    a238:	0f 90       	pop	r0
    a23a:	0f be       	out	0x3f, r0	; 63
    a23c:	0f 90       	pop	r0
    a23e:	1f 90       	pop	r1
    a240:	18 95       	reti

0000a242 <__vector_18>:
			break;
	}
	//DEBUG("end uart_send_interrupt %d %d %d\n", state[TX].state, state[TX].msg_state,
	//		state[TX].hdlc_state);

#ifdef SOS_USE_PREEMPTION
  // enable interrupts because 
  // enabling preemption can cause one to occur
  ENABLE_GLOBAL_INTERRUPTS();
  // enable preemption
  ENABLE_PREEMPTION(NULL);
#endif
}

/*
 * should be doing the senddone at this layer
	 Message *msg_txed;   //! message just transmitted
	 msg_txed = s.msgHdr;
	 msg_send_senddone(msg_txed, true, UART_PID);
	 s.msgHdr = mq_dequeue(&uartpq);
	 uart_setByte(HDLC_FLAG);
	 if(s.msgHdr){
	 s.idx = 0;
	 s.crc = 0;
	 s.state = UART_HDLC_START;
	 } else { //! stop and disable interrupt, if buffer is empty
	 s.state = UART_END;
	 }
	 */

static inline void uart_reset_recv() {

	if(state[RX].msgHdr != NULL) {
		msg_dispose(state[RX].msgHdr);
		state[RX].msgHdr = NULL;
	}
	state[RX].state = UART_IDLE;
	state[RX].msg_state = SOS_MSG_NO_STATE;
	state[RX].hdlc_state = HDLC_IDLE;
}
	
/**
 * @brief ISR for reception
 * This is the writer of rx_queue.
 */
uart_recv_interrupt() {
    a242:	1f 92       	push	r1
    a244:	0f 92       	push	r0
    a246:	0f b6       	in	r0, 0x3f	; 63
    a248:	0f 92       	push	r0
    a24a:	11 24       	eor	r1, r1
    a24c:	ef 92       	push	r14
    a24e:	ff 92       	push	r15
    a250:	1f 93       	push	r17
    a252:	2f 93       	push	r18
    a254:	3f 93       	push	r19
    a256:	4f 93       	push	r20
    a258:	5f 93       	push	r21
    a25a:	6f 93       	push	r22
    a25c:	7f 93       	push	r23
    a25e:	8f 93       	push	r24
    a260:	9f 93       	push	r25
    a262:	af 93       	push	r26
    a264:	bf 93       	push	r27
    a266:	cf 93       	push	r28
    a268:	df 93       	push	r29
    a26a:	ef 93       	push	r30
    a26c:	ff 93       	push	r31
#ifdef SOS_USE_PREEMPTION
	HAS_PREEMPTION_SECTION;
	DISABLE_PREEMPTION();
#endif
	
	uint8_t err;
	uint8_t byte_in;
	static uint16_t crc_in;
	static uint8_t saved_state;
	SOS_MEASUREMENT_IDLE_END()
	LED_DBG(LED_YELLOW_TOGGLE);
	//! NOTE that the order has to be this in AVR
	err = uart_checkError();
    a26e:	1b b1       	in	r17, 0x0b	; 11
    a270:	1c 71       	andi	r17, 0x1C	; 28
	byte_in = uart_getByte();
    a272:	9c b1       	in	r25, 0x0c	; 12

	//DEBUG("uart_recv_interrupt... %d %d %d %d %d\n", byte_in, err, 
	//		state[RX].state, state[RX].msg_state, state[RX].hdlc_state);
	switch (state[RX].state) {
    a274:	80 91 d5 0b 	lds	r24, 0x0BD5
    a278:	e8 2e       	mov	r14, r24
    a27a:	ff 24       	eor	r15, r15
    a27c:	84 e0       	ldi	r24, 0x04	; 4
    a27e:	e8 16       	cp	r14, r24
    a280:	f1 04       	cpc	r15, r1
    a282:	4c f4       	brge	.+18     	; 0xa296
    a284:	82 e0       	ldi	r24, 0x02	; 2
    a286:	e8 16       	cp	r14, r24
    a288:	f1 04       	cpc	r15, r1
    a28a:	bc f4       	brge	.+46     	; 0xa2ba
    a28c:	81 e0       	ldi	r24, 0x01	; 1
    a28e:	e8 16       	cp	r14, r24
    a290:	f1 04       	cpc	r15, r1
    a292:	61 f0       	breq	.+24     	; 0xa2ac
    a294:	03 c2       	rjmp	.+1030   	; 0xa69c
    a296:	84 e0       	ldi	r24, 0x04	; 4
    a298:	e8 16       	cp	r14, r24
    a29a:	f1 04       	cpc	r15, r1
    a29c:	09 f4       	brne	.+2      	; 0xa2a0
    a29e:	ac c0       	rjmp	.+344    	; 0xa3f8
    a2a0:	85 e0       	ldi	r24, 0x05	; 5
    a2a2:	e8 16       	cp	r14, r24
    a2a4:	f1 04       	cpc	r15, r1
    a2a6:	09 f4       	brne	.+2      	; 0xa2aa
    a2a8:	b9 c1       	rjmp	.+882    	; 0xa61c
    a2aa:	f8 c1       	rjmp	.+1008   	; 0xa69c
		case UART_IDLE:
			if ((err != 0) || (byte_in != HDLC_FLAG)) {
    a2ac:	11 23       	and	r17, r17
    a2ae:	09 f0       	breq	.+2      	; 0xa2b2
    a2b0:	08 c2       	rjmp	.+1040   	; 0xa6c2
    a2b2:	9e 37       	cpi	r25, 0x7E	; 126
    a2b4:	09 f0       	breq	.+2      	; 0xa2b8
    a2b6:	05 c2       	rjmp	.+1034   	; 0xa6c2
    a2b8:	13 c0       	rjmp	.+38     	; 0xa2e0
				break;
			}
			state[RX].state = UART_HDLC_START;
			break;

		case UART_HDLC_START:
		case UART_PROTOCOL:
			if (err != 0) {
    a2ba:	11 23       	and	r17, r17
    a2bc:	09 f0       	breq	.+2      	; 0xa2c0
    a2be:	ee c1       	rjmp	.+988    	; 0xa69c
				uart_reset_recv();
				break;
			}

			switch (byte_in) {
    a2c0:	89 2f       	mov	r24, r25
    a2c2:	99 27       	eor	r25, r25
    a2c4:	85 30       	cpi	r24, 0x05	; 5
    a2c6:	91 05       	cpc	r25, r1
    a2c8:	09 f4       	brne	.+2      	; 0xa2cc
    a2ca:	55 c0       	rjmp	.+170    	; 0xa376
    a2cc:	86 30       	cpi	r24, 0x06	; 6
    a2ce:	91 05       	cpc	r25, r1
    a2d0:	1c f4       	brge	.+6      	; 0xa2d8
    a2d2:	01 97       	sbiw	r24, 0x01	; 1
    a2d4:	39 f0       	breq	.+14     	; 0xa2e4
    a2d6:	e2 c1       	rjmp	.+964    	; 0xa69c
    a2d8:	8e 37       	cpi	r24, 0x7E	; 126
    a2da:	91 05       	cpc	r25, r1
    a2dc:	09 f0       	breq	.+2      	; 0xa2e0
    a2de:	de c1       	rjmp	.+956    	; 0xa69c
				//! ignore repeated start symbols
				case HDLC_FLAG:
					state[RX].state = UART_HDLC_START;
    a2e0:	82 e0       	ldi	r24, 0x02	; 2
    a2e2:	99 c1       	rjmp	.+818    	; 0xa616
					break;

				case HDLC_SOS_MSG:
					if(state[RX].msgHdr == NULL) {
    a2e4:	e0 91 d8 0b 	lds	r30, 0x0BD8
    a2e8:	f0 91 d9 0b 	lds	r31, 0x0BD9
    a2ec:	30 97       	sbiw	r30, 0x00	; 0
    a2ee:	39 f4       	brne	.+14     	; 0xa2fe
						state[RX].msgHdr = msg_create();
    a2f0:	0e 94 8b 1b 	call	0x3716
    a2f4:	90 93 d9 0b 	sts	0x0BD9, r25
    a2f8:	80 93 d8 0b 	sts	0x0BD8, r24
    a2fc:	16 c0       	rjmp	.+44     	; 0xa32a
					} else {
						if((state[RX].msgHdr->data != NULL) &&
    a2fe:	20 85       	ldd	r18, Z+8	; 0x08
    a300:	31 85       	ldd	r19, Z+9	; 0x09
    a302:	21 15       	cp	r18, r1
    a304:	31 05       	cpc	r19, r1
    a306:	89 f0       	breq	.+34     	; 0xa32a
    a308:	82 85       	ldd	r24, Z+10	; 0x0a
    a30a:	93 85       	ldd	r25, Z+11	; 0x0b
    a30c:	82 ff       	sbrs	r24, 2
    a30e:	0d c0       	rjmp	.+26     	; 0xa32a
 * @return void
 */
static inline void ker_free(void* ptr)
{
  sos_blk_mem_free(ptr, false);
    a310:	61 2f       	mov	r22, r17
    a312:	c9 01       	movw	r24, r18
    a314:	0e 94 98 11 	call	0x2330
								(flag_msg_release(state[RX].msgHdr->flag))){
							ker_free(state[RX].msgHdr->data);
							state[RX].msgHdr->flag &= ~SOS_MSG_RELEASE;
    a318:	e0 91 d8 0b 	lds	r30, 0x0BD8
    a31c:	f0 91 d9 0b 	lds	r31, 0x0BD9
    a320:	82 85       	ldd	r24, Z+10	; 0x0a
    a322:	93 85       	ldd	r25, Z+11	; 0x0b
    a324:	8b 7f       	andi	r24, 0xFB	; 251
    a326:	82 87       	std	Z+10, r24	; 0x0a
    a328:	93 87       	std	Z+11, r25	; 0x0b
						}
					}
					if(state[RX].msgHdr != NULL) {
    a32a:	80 91 d8 0b 	lds	r24, 0x0BD8
    a32e:	90 91 d9 0b 	lds	r25, 0x0BD9
    a332:	89 2b       	or	r24, r25
    a334:	09 f4       	brne	.+2      	; 0xa338
    a336:	be c1       	rjmp	.+892    	; 0xa6b4
						state[RX].msg_state = SOS_MSG_RX_HDR;
    a338:	8d e0       	ldi	r24, 0x0D	; 13
    a33a:	80 93 d6 0b 	sts	0x0BD6, r24
extern uint16_t crcTable[256] PROGMEM;  //!< this is defined in crc.c

static inline uint16_t crcByte(uint16_t oldCrc, uint8_t byte)
{
  uint8_t *magic = (uint8_t *)&crcTable[oldCrc >> 8 ^ byte];
    a33e:	e6 e3       	ldi	r30, 0x36	; 54
    a340:	f3 e0       	ldi	r31, 0x03	; 3

  return pgm_read_byte(magic) | ((uint8_t)oldCrc ^ pgm_read_byte(magic + 1)) << 8;
    a342:	84 91       	lpm	r24, Z
    a344:	28 2f       	mov	r18, r24
    a346:	33 27       	eor	r19, r19
    a348:	31 96       	adiw	r30, 0x01	; 1
    a34a:	84 91       	lpm	r24, Z
    a34c:	99 27       	eor	r25, r25
    a34e:	98 2f       	mov	r25, r24
    a350:	88 27       	eor	r24, r24
    a352:	28 2b       	or	r18, r24
    a354:	39 2b       	or	r19, r25
    a356:	30 93 dd 0b 	sts	0x0BDD, r19
    a35a:	20 93 dc 0b 	sts	0x0BDC, r18
						state[RX].crc = crcByte(0, byte_in);
						state[RX].flags |= UART_SOS_MSG_FLAG;
    a35e:	80 91 e0 0b 	lds	r24, 0x0BE0
    a362:	80 68       	ori	r24, 0x80	; 128
    a364:	80 93 e0 0b 	sts	0x0BE0, r24
						state[RX].idx = 0;
    a368:	10 92 df 0b 	sts	0x0BDF, r1
						state[RX].state = UART_DATA;
    a36c:	84 e0       	ldi	r24, 0x04	; 4
    a36e:	80 93 d5 0b 	sts	0x0BD5, r24
						state[RX].hdlc_state = HDLC_DATA;
    a372:	86 e0       	ldi	r24, 0x06	; 6
    a374:	4b c0       	rjmp	.+150    	; 0xa40c
 * Will return a NULL pointer if the call to sys_malloc fails.
 */
static inline void *ker_malloc(uint16_t size, sos_pid_t id)
{
  return sos_blk_mem_alloc(size, id, false);
    a376:	41 2f       	mov	r20, r17
    a378:	62 e4       	ldi	r22, 0x42	; 66
    a37a:	80 e8       	ldi	r24, 0x80	; 128
    a37c:	90 e0       	ldi	r25, 0x00	; 0
    a37e:	0e 94 14 11 	call	0x2228
    a382:	ec 01       	movw	r28, r24
    a384:	90 93 db 0b 	sts	0x0BDB, r25
    a388:	80 93 da 0b 	sts	0x0BDA, r24
    a38c:	89 2b       	or	r24, r25
    a38e:	f1 f0       	breq	.+60     	; 0xa3cc
					} else {
						// need to generate no mem error
						uart_reset_recv();
					}
					break;

				case HDLC_RAW:
					if ((state[RX].buff = ker_malloc(UART_MAX_MSG_LEN, UART_PID)) != NULL) {
						state[RX].msg_state = SOS_MSG_RX_RAW;
    a390:	83 e0       	ldi	r24, 0x03	; 3
    a392:	80 93 d6 0b 	sts	0x0BD6, r24
						if (state[RX].flags & UART_CRC_FLAG) {
    a396:	80 91 e0 0b 	lds	r24, 0x0BE0
    a39a:	87 ff       	sbrs	r24, 7
    a39c:	10 c0       	rjmp	.+32     	; 0xa3be
extern uint16_t crcTable[256] PROGMEM;  //!< this is defined in crc.c

static inline uint16_t crcByte(uint16_t oldCrc, uint8_t byte)
{
  uint8_t *magic = (uint8_t *)&crcTable[oldCrc >> 8 ^ byte];
    a39e:	ee e3       	ldi	r30, 0x3E	; 62
    a3a0:	f3 e0       	ldi	r31, 0x03	; 3

  return pgm_read_byte(magic) | ((uint8_t)oldCrc ^ pgm_read_byte(magic + 1)) << 8;
    a3a2:	84 91       	lpm	r24, Z
    a3a4:	28 2f       	mov	r18, r24
    a3a6:	33 27       	eor	r19, r19
    a3a8:	31 96       	adiw	r30, 0x01	; 1
    a3aa:	84 91       	lpm	r24, Z
    a3ac:	99 27       	eor	r25, r25
    a3ae:	98 2f       	mov	r25, r24
    a3b0:	88 27       	eor	r24, r24
    a3b2:	28 2b       	or	r18, r24
    a3b4:	39 2b       	or	r19, r25
    a3b6:	30 93 dd 0b 	sts	0x0BDD, r19
    a3ba:	20 93 dc 0b 	sts	0x0BDC, r18
							state[RX].crc = crcByte(0, byte_in);
						}
						state[RX].state = UART_DATA;
    a3be:	84 e0       	ldi	r24, 0x04	; 4
    a3c0:	80 93 d5 0b 	sts	0x0BD5, r24
						state[RX].hdlc_state = HDLC_DATA;
    a3c4:	86 e0       	ldi	r24, 0x06	; 6
    a3c6:	80 93 d7 0b 	sts	0x0BD7, r24
    a3ca:	13 c0       	rjmp	.+38     	; 0xa3f2
    a3cc:	80 91 d8 0b 	lds	r24, 0x0BD8
    a3d0:	90 91 d9 0b 	lds	r25, 0x0BD9
    a3d4:	00 97       	sbiw	r24, 0x00	; 0
    a3d6:	31 f0       	breq	.+12     	; 0xa3e4
    a3d8:	0e 94 a3 1b 	call	0x3746
    a3dc:	d0 93 d9 0b 	sts	0x0BD9, r29
    a3e0:	c0 93 d8 0b 	sts	0x0BD8, r28
    a3e4:	81 e0       	ldi	r24, 0x01	; 1
    a3e6:	80 93 d5 0b 	sts	0x0BD5, r24
    a3ea:	10 93 d6 0b 	sts	0x0BD6, r17
    a3ee:	10 93 d7 0b 	sts	0x0BD7, r17
					} else {
						uart_reset_recv();
					}
					state[RX].idx = 0;
    a3f2:	10 92 df 0b 	sts	0x0BDF, r1
					break;
    a3f6:	65 c1       	rjmp	.+714    	; 0xa6c2

				default:
					uart_reset_recv();
					break;
				}
				break;

		case UART_DATA:
				if (err != 0) {
    a3f8:	11 23       	and	r17, r17
    a3fa:	09 f0       	breq	.+2      	; 0xa3fe
    a3fc:	4f c1       	rjmp	.+670    	; 0xa69c
					uart_reset_recv();
					break;
				}

				// recieve an escape byte, wait for next byte
				if (byte_in  == HDLC_CTR_ESC) {
    a3fe:	9d 37       	cpi	r25, 0x7D	; 125
    a400:	41 f4       	brne	.+16     	; 0xa412
					saved_state = state[RX].hdlc_state;
    a402:	80 91 d7 0b 	lds	r24, 0x0BD7
    a406:	80 93 c8 0b 	sts	0x0BC8, r24
					state[RX].hdlc_state = HDLC_ESCAPE;
    a40a:	87 e0       	ldi	r24, 0x07	; 7
    a40c:	80 93 d7 0b 	sts	0x0BD7, r24
					break;
    a410:	58 c1       	rjmp	.+688    	; 0xa6c2
				}

				if (byte_in == HDLC_FLAG) { // got an end of message symbol
    a412:	9e 37       	cpi	r25, 0x7E	; 126
    a414:	41 f4       	brne	.+16     	; 0xa426
    a416:	80 91 d8 0b 	lds	r24, 0x0BD8
    a41a:	90 91 d9 0b 	lds	r25, 0x0BD9
    a41e:	00 97       	sbiw	r24, 0x00	; 0
    a420:	09 f4       	brne	.+2      	; 0xa424
    a422:	97 c0       	rjmp	.+302    	; 0xa552
    a424:	90 c0       	rjmp	.+288    	; 0xa546
					/*
					if (state[RX].msg_state == SOS_MSG_RX_RAW) {
						// end of raw recieve
						// should bundle and send off
						// trash for now
							 state[RX].hdlc_state = HDLC_IDLE;
							 state[RX].state = UART_IDLE;
							 state[RX].flags |= UART_DATA_RDY_FLAG;
							 uart_read_done(state[RX].idx, 0);
					} else {
						// got an end of message symbol early
						*/
						uart_reset_recv();
					//}
					break;
				}

				if (state[RX].hdlc_state == HDLC_ESCAPE) {
    a426:	80 91 d7 0b 	lds	r24, 0x0BD7
    a42a:	87 30       	cpi	r24, 0x07	; 7
    a42c:	31 f4       	brne	.+12     	; 0xa43a
					byte_in ^= 0x20;
    a42e:	80 e2       	ldi	r24, 0x20	; 32
    a430:	98 27       	eor	r25, r24
					state[RX].hdlc_state = saved_state;
    a432:	80 91 c8 0b 	lds	r24, 0x0BC8
    a436:	80 93 d7 0b 	sts	0x0BD7, r24
				}

				switch (state[RX].msg_state) {
    a43a:	80 91 d6 0b 	lds	r24, 0x0BD6
    a43e:	28 2f       	mov	r18, r24
    a440:	33 27       	eor	r19, r19
    a442:	2e 30       	cpi	r18, 0x0E	; 14
    a444:	31 05       	cpc	r19, r1
    a446:	09 f4       	brne	.+2      	; 0xa44a
    a448:	8c c0       	rjmp	.+280    	; 0xa562
    a44a:	2f 30       	cpi	r18, 0x0F	; 15
    a44c:	31 05       	cpc	r19, r1
    a44e:	44 f4       	brge	.+16     	; 0xa460
    a450:	23 30       	cpi	r18, 0x03	; 3
    a452:	31 05       	cpc	r19, r1
    a454:	09 f4       	brne	.+2      	; 0xa458
    a456:	85 c0       	rjmp	.+266    	; 0xa562
    a458:	2d 30       	cpi	r18, 0x0D	; 13
    a45a:	31 05       	cpc	r19, r1
    a45c:	51 f0       	breq	.+20     	; 0xa472
    a45e:	1e c1       	rjmp	.+572    	; 0xa69c
    a460:	2f 30       	cpi	r18, 0x0F	; 15
    a462:	31 05       	cpc	r19, r1
    a464:	09 f4       	brne	.+2      	; 0xa468
    a466:	b8 c0       	rjmp	.+368    	; 0xa5d8
    a468:	20 31       	cpi	r18, 0x10	; 16
    a46a:	31 05       	cpc	r19, r1
    a46c:	09 f4       	brne	.+2      	; 0xa470
    a46e:	be c0       	rjmp	.+380    	; 0xa5ec
    a470:	15 c1       	rjmp	.+554    	; 0xa69c
    a472:	e0 91 d8 0b 	lds	r30, 0x0BD8
    a476:	f0 91 d9 0b 	lds	r31, 0x0BD9
					case SOS_MSG_RX_HDR:
						if (byte_in == HDLC_FLAG) {  // got an end of message symbol
    a47a:	9e 37       	cpi	r25, 0x7E	; 126
    a47c:	09 f4       	brne	.+2      	; 0xa480
    a47e:	60 c0       	rjmp	.+192    	; 0xa540
							uart_reset_recv();
							break;
						}
						uint8_t *tmpPtr = (uint8_t*)(state[RX].msgHdr);
						tmpPtr[state[RX].idx++] = byte_in;
    a480:	40 91 df 0b 	lds	r20, 0x0BDF
    a484:	e4 0f       	add	r30, r20
    a486:	f1 1d       	adc	r31, r1
    a488:	90 83       	st	Z, r25
    a48a:	4f 5f       	subi	r20, 0xFF	; 255
    a48c:	40 93 df 0b 	sts	0x0BDF, r20

extern uint16_t crcTable[256] PROGMEM;  //!< this is defined in crc.c

static inline uint16_t crcByte(uint16_t oldCrc, uint8_t byte)
{
    a490:	60 91 dc 0b 	lds	r22, 0x0BDC
    a494:	70 91 dd 0b 	lds	r23, 0x0BDD
  uint8_t *magic = (uint8_t *)&crcTable[oldCrc >> 8 ^ byte];
    a498:	e7 2f       	mov	r30, r23
    a49a:	ff 27       	eor	r31, r31
    a49c:	89 2f       	mov	r24, r25
    a49e:	99 27       	eor	r25, r25
    a4a0:	e8 27       	eor	r30, r24
    a4a2:	f9 27       	eor	r31, r25
    a4a4:	ee 0f       	add	r30, r30
    a4a6:	ff 1f       	adc	r31, r31
    a4a8:	ec 5c       	subi	r30, 0xCC	; 204
    a4aa:	fc 4f       	sbci	r31, 0xFC	; 252

  return pgm_read_byte(magic) | ((uint8_t)oldCrc ^ pgm_read_byte(magic + 1)) << 8;
    a4ac:	84 91       	lpm	r24, Z
    a4ae:	28 2f       	mov	r18, r24
    a4b0:	33 27       	eor	r19, r19
    a4b2:	31 96       	adiw	r30, 0x01	; 1
    a4b4:	84 91       	lpm	r24, Z
    a4b6:	86 27       	eor	r24, r22
    a4b8:	99 27       	eor	r25, r25
    a4ba:	98 2f       	mov	r25, r24
    a4bc:	88 27       	eor	r24, r24
    a4be:	28 2b       	or	r18, r24
    a4c0:	39 2b       	or	r19, r25
    a4c2:	30 93 dd 0b 	sts	0x0BDD, r19
    a4c6:	20 93 dc 0b 	sts	0x0BDC, r18

						state[RX].crc = crcByte(state[RX].crc, byte_in);

						if (state[RX].idx == SOS_MSG_HEADER_SIZE) {
    a4ca:	48 30       	cpi	r20, 0x08	; 8
    a4cc:	09 f0       	breq	.+2      	; 0xa4d0
    a4ce:	f9 c0       	rjmp	.+498    	; 0xa6c2
							// if (state[RX].msgLen != state[RX].msgHdr->len) ????????
							state[RX].msgLen = state[RX].msgHdr->len;
    a4d0:	e0 91 d8 0b 	lds	r30, 0x0BD8
    a4d4:	f0 91 d9 0b 	lds	r31, 0x0BD9
    a4d8:	87 81       	ldd	r24, Z+7	; 0x07
    a4da:	80 93 de 0b 	sts	0x0BDE, r24

							if (state[RX].msgLen < UART_MAX_MSG_LEN) {
    a4de:	87 fd       	sbrc	r24, 7
    a4e0:	2f c0       	rjmp	.+94     	; 0xa540
								if (state[RX].msgLen != 0) {
    a4e2:	88 23       	and	r24, r24
    a4e4:	29 f1       	breq	.+74     	; 0xa530
 * Will return a NULL pointer if the call to sys_malloc fails.
 */
static inline void *ker_malloc(uint16_t size, sos_pid_t id)
{
  return sos_blk_mem_alloc(size, id, false);
    a4e6:	41 2f       	mov	r20, r17
    a4e8:	62 e4       	ldi	r22, 0x42	; 66
    a4ea:	99 27       	eor	r25, r25
    a4ec:	0e 94 14 11 	call	0x2228
    a4f0:	ec 01       	movw	r28, r24
    a4f2:	90 93 db 0b 	sts	0x0BDB, r25
    a4f6:	80 93 da 0b 	sts	0x0BDA, r24
    a4fa:	e0 91 d8 0b 	lds	r30, 0x0BD8
    a4fe:	f0 91 d9 0b 	lds	r31, 0x0BD9
									state[RX].buff = (uint8_t*)ker_malloc(state[RX].msgLen, UART_PID);
									if (state[RX].buff != NULL) {
    a502:	00 97       	sbiw	r24, 0x00	; 0
    a504:	51 f0       	breq	.+20     	; 0xa51a
										state[RX].msgHdr->data = state[RX].buff;
    a506:	80 87       	std	Z+8, r24	; 0x08
    a508:	91 87       	std	Z+9, r25	; 0x09
										state[RX].msgHdr->flag = SOS_MSG_RELEASE;
    a50a:	e2 86       	std	Z+10, r14	; 0x0a
    a50c:	f3 86       	std	Z+11, r15	; 0x0b
										state[RX].msg_state = SOS_MSG_RX_DATA;
    a50e:	8e e0       	ldi	r24, 0x0E	; 14
    a510:	80 93 d6 0b 	sts	0x0BD6, r24
										state[RX].idx = 0;
    a514:	10 93 df 0b 	sts	0x0BDF, r17
    a518:	d4 c0       	rjmp	.+424    	; 0xa6c2
    a51a:	30 97       	sbiw	r30, 0x00	; 0
    a51c:	09 f4       	brne	.+2      	; 0xa520
    a51e:	ca c0       	rjmp	.+404    	; 0xa6b4
    a520:	cf 01       	movw	r24, r30
    a522:	0e 94 a3 1b 	call	0x3746
    a526:	d0 93 d9 0b 	sts	0x0BD9, r29
    a52a:	c0 93 d8 0b 	sts	0x0BD8, r28
    a52e:	c2 c0       	rjmp	.+388    	; 0xa6b4
									} else {
										uart_reset_recv();
									}
								} else { // 0 length packet go straight to crc
									state[RX].msgHdr->flag &= ~SOS_MSG_RELEASE;
    a530:	82 85       	ldd	r24, Z+10	; 0x0a
    a532:	93 85       	ldd	r25, Z+11	; 0x0b
    a534:	8b 7f       	andi	r24, 0xFB	; 251
    a536:	82 87       	std	Z+10, r24	; 0x0a
    a538:	93 87       	std	Z+11, r25	; 0x0b
									state[RX].msgHdr->data = NULL;
    a53a:	10 86       	std	Z+8, r1	; 0x08
    a53c:	11 86       	std	Z+9, r1	; 0x09
    a53e:	4a c0       	rjmp	.+148    	; 0xa5d4
    a540:	30 97       	sbiw	r30, 0x00	; 0
    a542:	39 f0       	breq	.+14     	; 0xa552
    a544:	cf 01       	movw	r24, r30
    a546:	0e 94 a3 1b 	call	0x3746
    a54a:	10 92 d9 0b 	sts	0x0BD9, r1
    a54e:	10 92 d8 0b 	sts	0x0BD8, r1
    a552:	81 e0       	ldi	r24, 0x01	; 1
    a554:	80 93 d5 0b 	sts	0x0BD5, r24
    a558:	10 93 d6 0b 	sts	0x0BD6, r17
    a55c:	10 93 d7 0b 	sts	0x0BD7, r17
									state[RX].msg_state = SOS_MSG_RX_CRC_LOW;
								}
							} else { // invalid msg length
								uart_reset_recv();
							}
						}
						break;
    a560:	b0 c0       	rjmp	.+352    	; 0xa6c2

					case SOS_MSG_RX_RAW:
					case SOS_MSG_RX_DATA:
						if (err != 0) {
							uart_reset_recv();
							return;
						}
						state[RX].buff[state[RX].idx++] = byte_in;
    a562:	80 91 df 0b 	lds	r24, 0x0BDF
    a566:	e0 91 da 0b 	lds	r30, 0x0BDA
    a56a:	f0 91 db 0b 	lds	r31, 0x0BDB
    a56e:	e8 0f       	add	r30, r24
    a570:	f1 1d       	adc	r31, r1
    a572:	90 83       	st	Z, r25
    a574:	8f 5f       	subi	r24, 0xFF	; 255
    a576:	80 93 df 0b 	sts	0x0BDF, r24
						if (state[RX].flags & UART_CRC_FLAG) {
    a57a:	60 91 e0 0b 	lds	r22, 0x0BE0
    a57e:	67 ff       	sbrs	r22, 7
    a580:	1d c0       	rjmp	.+58     	; 0xa5bc

extern uint16_t crcTable[256] PROGMEM;  //!< this is defined in crc.c

static inline uint16_t crcByte(uint16_t oldCrc, uint8_t byte)
{
    a582:	40 91 dc 0b 	lds	r20, 0x0BDC
    a586:	50 91 dd 0b 	lds	r21, 0x0BDD
  uint8_t *magic = (uint8_t *)&crcTable[oldCrc >> 8 ^ byte];
    a58a:	e5 2f       	mov	r30, r21
    a58c:	ff 27       	eor	r31, r31
    a58e:	89 2f       	mov	r24, r25
    a590:	99 27       	eor	r25, r25
    a592:	e8 27       	eor	r30, r24
    a594:	f9 27       	eor	r31, r25
    a596:	ee 0f       	add	r30, r30
    a598:	ff 1f       	adc	r31, r31
    a59a:	ec 5c       	subi	r30, 0xCC	; 204
    a59c:	fc 4f       	sbci	r31, 0xFC	; 252

  return pgm_read_byte(magic) | ((uint8_t)oldCrc ^ pgm_read_byte(magic + 1)) << 8;
    a59e:	84 91       	lpm	r24, Z
    a5a0:	28 2f       	mov	r18, r24
    a5a2:	33 27       	eor	r19, r19
    a5a4:	31 96       	adiw	r30, 0x01	; 1
    a5a6:	84 91       	lpm	r24, Z
    a5a8:	84 27       	eor	r24, r20
    a5aa:	99 27       	eor	r25, r25
    a5ac:	98 2f       	mov	r25, r24
    a5ae:	88 27       	eor	r24, r24
    a5b0:	28 2b       	or	r18, r24
    a5b2:	39 2b       	or	r19, r25
    a5b4:	30 93 dd 0b 	sts	0x0BDD, r19
    a5b8:	20 93 dc 0b 	sts	0x0BDC, r18
							state[RX].crc = crcByte(state[RX].crc, byte_in);
						}
						if (state[RX].idx == state[RX].msgLen) {
    a5bc:	90 91 df 0b 	lds	r25, 0x0BDF
    a5c0:	80 91 de 0b 	lds	r24, 0x0BDE
    a5c4:	98 17       	cp	r25, r24
    a5c6:	09 f0       	breq	.+2      	; 0xa5ca
    a5c8:	7c c0       	rjmp	.+248    	; 0xa6c2
							if (state[RX].flags & UART_SOS_MSG_FLAG) {
    a5ca:	67 ff       	sbrs	r22, 7
    a5cc:	67 c0       	rjmp	.+206    	; 0xa69c
								state[RX].hdlc_state = HDLC_CRC;
    a5ce:	89 e0       	ldi	r24, 0x09	; 9
    a5d0:	80 93 d7 0b 	sts	0x0BD7, r24
								state[RX].msg_state = SOS_MSG_RX_CRC_LOW;
    a5d4:	8f e0       	ldi	r24, 0x0F	; 15
    a5d6:	07 c0       	rjmp	.+14     	; 0xa5e6
							} else {
								// rx buffer overflow
								uart_reset_recv();
							}
						}
						break;

					case SOS_MSG_RX_CRC_LOW:
						crc_in = byte_in;
    a5d8:	89 2f       	mov	r24, r25
    a5da:	99 27       	eor	r25, r25
    a5dc:	90 93 c7 0b 	sts	0x0BC7, r25
    a5e0:	80 93 c6 0b 	sts	0x0BC6, r24
						state[RX].msg_state = SOS_MSG_RX_CRC_HIGH;
    a5e4:	80 e1       	ldi	r24, 0x10	; 16
    a5e6:	80 93 d6 0b 	sts	0x0BD6, r24
						break;
    a5ea:	6b c0       	rjmp	.+214    	; 0xa6c2

					case SOS_MSG_RX_CRC_HIGH:
						crc_in |= ((uint16_t)(byte_in) << 8);
    a5ec:	89 2f       	mov	r24, r25
    a5ee:	99 27       	eor	r25, r25
    a5f0:	38 2f       	mov	r19, r24
    a5f2:	22 27       	eor	r18, r18
    a5f4:	80 91 c6 0b 	lds	r24, 0x0BC6
    a5f8:	90 91 c7 0b 	lds	r25, 0x0BC7
    a5fc:	82 2b       	or	r24, r18
    a5fe:	93 2b       	or	r25, r19
    a600:	90 93 c7 0b 	sts	0x0BC7, r25
    a604:	80 93 c6 0b 	sts	0x0BC6, r24
						state[RX].hdlc_state = HDLC_PADDING;
    a608:	88 e0       	ldi	r24, 0x08	; 8
    a60a:	80 93 d7 0b 	sts	0x0BD7, r24
						state[RX].msg_state = SOS_MSG_RX_END;
    a60e:	81 e1       	ldi	r24, 0x11	; 17
    a610:	80 93 d6 0b 	sts	0x0BD6, r24
						state[RX].state = UART_HDLC_STOP;
    a614:	85 e0       	ldi	r24, 0x05	; 5
    a616:	80 93 d5 0b 	sts	0x0BD5, r24
						break;
    a61a:	53 c0       	rjmp	.+166    	; 0xa6c2

					case SOS_MSG_RX_END:  // should never get here
					default:
						uart_reset_recv();
						break;
				}
				break;

		case UART_HDLC_STOP:
				if (byte_in != HDLC_FLAG) {
    a61c:	9e 37       	cpi	r25, 0x7E	; 126
    a61e:	09 f0       	breq	.+2      	; 0xa622
    a620:	50 c0       	rjmp	.+160    	; 0xa6c2
					// silently drop until hdlc stop symbol
					break;
				} else { // sos msg rx done
					state[RX].hdlc_state = HDLC_IDLE;
    a622:	10 92 d7 0b 	sts	0x0BD7, r1
					if(crc_in == state[RX].crc) {
    a626:	20 91 c6 0b 	lds	r18, 0x0BC6
    a62a:	30 91 c7 0b 	lds	r19, 0x0BC7
    a62e:	80 91 dc 0b 	lds	r24, 0x0BDC
    a632:	90 91 dd 0b 	lds	r25, 0x0BDD
    a636:	28 17       	cp	r18, r24
    a638:	39 07       	cpc	r19, r25
    a63a:	59 f5       	brne	.+86     	; 0xa692
#ifndef NO_SOS_UART_MGR
						set_uart_address(entohs(state[RX].msgHdr->saddr));
    a63c:	e0 91 d8 0b 	lds	r30, 0x0BD8
    a640:	f0 91 d9 0b 	lds	r31, 0x0BD9
    a644:	84 81       	ldd	r24, Z+4	; 0x04
    a646:	95 81       	ldd	r25, Z+5	; 0x05
    a648:	0e 94 29 40 	call	0x8052
#endif
            if(state[RX].msgHdr->type == MSG_TIMESTAMP){
    a64c:	e0 91 d8 0b 	lds	r30, 0x0BD8
    a650:	f0 91 d9 0b 	lds	r31, 0x0BD9
    a654:	86 81       	ldd	r24, Z+6	; 0x06
    a656:	80 31       	cpi	r24, 0x10	; 16
    a658:	79 f4       	brne	.+30     	; 0xa678
              uint32_t timestp = ker_systime32();
    a65a:	0e 94 12 55 	call	0xaa24
    a65e:	dc 01       	movw	r26, r24
    a660:	cb 01       	movw	r24, r22
              memcpy(((uint8_t*)(state[RX].msgHdr->data) + sizeof(uint32_t)),(uint8_t*)(&timestp),sizeof(uint32_t));
    a662:	e0 91 d8 0b 	lds	r30, 0x0BD8
    a666:	f0 91 d9 0b 	lds	r31, 0x0BD9
    a66a:	00 84       	ldd	r0, Z+8	; 0x08
    a66c:	f1 85       	ldd	r31, Z+9	; 0x09
    a66e:	e0 2d       	mov	r30, r0
    a670:	84 83       	std	Z+4, r24	; 0x04
    a672:	95 83       	std	Z+5, r25	; 0x05
    a674:	a6 83       	std	Z+6, r26	; 0x06
    a676:	b7 83       	std	Z+7, r27	; 0x07
#include <sos_sched.h>
#include <sos_info.h>

static inline void handle_incoming_msg(Message *msg, uint16_t channel_flag)
{
    a678:	e0 91 d8 0b 	lds	r30, 0x0BD8
    a67c:	f0 91 d9 0b 	lds	r31, 0x0BD9
  //   DEBUG("<NET STACK> Received message from network\n");
  msg->flag |= SOS_MSG_FROM_NETWORK | channel_flag;
    a680:	82 85       	ldd	r24, Z+10	; 0x0a
    a682:	93 85       	ldd	r25, Z+11	; 0x0b
    a684:	99 60       	ori	r25, 0x09	; 9
    a686:	82 87       	std	Z+10, r24	; 0x0a
    a688:	93 87       	std	Z+11, r25	; 0x0b
  msg->daddr = entohs(msg->daddr);
  msg->saddr = entohs(msg->saddr);
  sched_msg_alloc(msg);
    a68a:	cf 01       	movw	r24, r30
    a68c:	0e 94 ec 16 	call	0x2dd8
    a690:	0d c0       	rjmp	.+26     	; 0xa6ac

            }
						handle_incoming_msg(state[RX].msgHdr, SOS_MSG_UART_IO);
						state[RX].msgHdr = NULL;
					} else {
						msg_dispose(state[RX].msgHdr);
    a692:	80 91 d8 0b 	lds	r24, 0x0BD8
    a696:	90 91 d9 0b 	lds	r25, 0x0BD9
    a69a:	06 c0       	rjmp	.+12     	; 0xa6a8
    a69c:	80 91 d8 0b 	lds	r24, 0x0BD8
    a6a0:	90 91 d9 0b 	lds	r25, 0x0BD9
    a6a4:	00 97       	sbiw	r24, 0x00	; 0
    a6a6:	31 f0       	breq	.+12     	; 0xa6b4
    a6a8:	0e 94 a3 1b 	call	0x3746
    a6ac:	10 92 d9 0b 	sts	0x0BD9, r1
    a6b0:	10 92 d8 0b 	sts	0x0BD8, r1
    a6b4:	81 e0       	ldi	r24, 0x01	; 1
    a6b6:	80 93 d5 0b 	sts	0x0BD5, r24
    a6ba:	10 92 d6 0b 	sts	0x0BD6, r1
    a6be:	10 92 d7 0b 	sts	0x0BD7, r1
    a6c2:	ff 91       	pop	r31
    a6c4:	ef 91       	pop	r30
    a6c6:	df 91       	pop	r29
    a6c8:	cf 91       	pop	r28
    a6ca:	bf 91       	pop	r27
    a6cc:	af 91       	pop	r26
    a6ce:	9f 91       	pop	r25
    a6d0:	8f 91       	pop	r24
    a6d2:	7f 91       	pop	r23
    a6d4:	6f 91       	pop	r22
    a6d6:	5f 91       	pop	r21
    a6d8:	4f 91       	pop	r20
    a6da:	3f 91       	pop	r19
    a6dc:	2f 91       	pop	r18
    a6de:	1f 91       	pop	r17
    a6e0:	ff 90       	pop	r15
    a6e2:	ef 90       	pop	r14
    a6e4:	0f 90       	pop	r0
    a6e6:	0f be       	out	0x3f, r0	; 63
    a6e8:	0f 90       	pop	r0
    a6ea:	1f 90       	pop	r1
    a6ec:	18 95       	reti

0000a6ee <uart_system_init>:
 ****************************************
 Initialize the UART hardware on an AVR
 ****************************************
 */
int8_t uart_system_init() {
    a6ee:	1f 93       	push	r17
	uint8_t i=0;
    a6f0:	10 e0       	ldi	r17, 0x00	; 0

	s.state[TX] = s.state[RX] = UART_SYS_INIT;
    a6f2:	10 93 e5 0b 	sts	0x0BE5, r17
    a6f6:	10 93 e4 0b 	sts	0x0BE4, r17
	s.system_state = UART_SYS_INIT;
    a6fa:	10 93 e1 0b 	sts	0x0BE1, r17
	
	uart_init();
    a6fe:	0e 94 47 4e 	call	0x9c8e
    a702:	8f ef       	ldi	r24, 0xFF	; 255

	for (i=0;i<2;i++) { 
    s.calling_mod_id[i] = NULL_PID;
    a704:	80 93 e2 0b 	sts	0x0BE2, r24
    s.flags[i] = 0; 
    a708:	10 93 e6 0b 	sts	0x0BE6, r17
    a70c:	80 93 e3 0b 	sts	0x0BE3, r24
    a710:	10 93 e7 0b 	sts	0x0BE7, r17
	}
	s.txBuf = NULL;
    a714:	10 92 ea 0b 	sts	0x0BEA, r1
    a718:	10 92 e9 0b 	sts	0x0BE9, r1

	s.system_state = UART_SYS_IDLE;
    a71c:	81 e0       	ldi	r24, 0x01	; 1
    a71e:	80 93 e1 0b 	sts	0x0BE1, r24
	s.state[TX] = s.state[RX] = UART_SYS_IDLE;
    a722:	80 93 e5 0b 	sts	0x0BE5, r24
    a726:	80 93 e4 0b 	sts	0x0BE4, r24

	return SOS_OK;
}    
    a72a:	80 e0       	ldi	r24, 0x00	; 0
    a72c:	90 e0       	ldi	r25, 0x00	; 0
    a72e:	1f 91       	pop	r17
    a730:	08 95       	ret

0000a732 <ker_uart_reserve_bus>:


/**
 ****************************************
 SOS Specific Interface to the uart
 ****************************************
 */
int8_t ker_uart_reserve_bus(uint8_t calling_id, uint8_t flags) {
    a732:	cf 93       	push	r28
    a734:	df 93       	push	r29
    a736:	98 2f       	mov	r25, r24

	// allow module currently reserving the bus to change reservation type
	uint8_t mode = RX;
    a738:	e1 e0       	ldi	r30, 0x01	; 1

	//DEBUG("in reserve bus\n");
	if (flags & UART_SYS_TX_FLAG) {
    a73a:	66 fd       	sbrc	r22, 6
		mode = TX;
    a73c:	e0 e0       	ldi	r30, 0x00	; 0
	}

	// if it is already reaserved AND
	// it was reserved by another module OR it is currently busy
	if ((s.calling_mod_id[mode] != NULL_PID) &&
    a73e:	ff 27       	eor	r31, r31
    a740:	df 01       	movw	r26, r30
    a742:	af 51       	subi	r26, 0x1F	; 31
    a744:	b4 4f       	sbci	r27, 0xF4	; 244
    a746:	ed 01       	movw	r28, r26
    a748:	89 81       	ldd	r24, Y+1	; 0x01
    a74a:	8f 3f       	cpi	r24, 0xFF	; 255
    a74c:	41 f0       	breq	.+16     	; 0xa75e
    a74e:	89 17       	cp	r24, r25
    a750:	19 f4       	brne	.+6      	; 0xa758
    a752:	8b 81       	ldd	r24, Y+3	; 0x03
    a754:	82 30       	cpi	r24, 0x02	; 2
    a756:	19 f0       	breq	.+6      	; 0xa75e
			((s.calling_mod_id[mode] != calling_id) || (s.state[mode] != UART_SYS_WAIT))) {
		LED_DBG(LED_RED_TOGGLE);
		return -EBUSY;
    a758:	80 ef       	ldi	r24, 0xF0	; 240
    a75a:	9f ef       	ldi	r25, 0xFF	; 255
    a75c:	0b c0       	rjmp	.+22     	; 0xa774
	}
	s.calling_mod_id[mode] = calling_id;
    a75e:	ef 51       	subi	r30, 0x1F	; 31
    a760:	f4 4f       	sbci	r31, 0xF4	; 244
    a762:	91 83       	std	Z+1, r25	; 0x01

	s.system_state = UART_SYS_BUSY;
    a764:	83 e0       	ldi	r24, 0x03	; 3
    a766:	80 93 e1 0b 	sts	0x0BE1, r24
	s.flags[mode] = flags;
    a76a:	65 83       	std	Z+5, r22	; 0x05
	s.state[mode] = UART_SYS_WAIT;
    a76c:	82 e0       	ldi	r24, 0x02	; 2
    a76e:	83 83       	std	Z+3, r24	; 0x03
	
	LED_DBG(LED_GREEN_TOGGLE);
	//DEBUG("end reserve bus\n");
	return SOS_OK;
    a770:	80 e0       	ldi	r24, 0x00	; 0
    a772:	90 e0       	ldi	r25, 0x00	; 0
    a774:	df 91       	pop	r29
    a776:	cf 91       	pop	r28
    a778:	08 95       	ret

0000a77a <ker_uart_release_bus>:
}


int8_t ker_uart_release_bus(uint8_t calling_id) {
    a77a:	28 2f       	mov	r18, r24
	uint8_t i=0;

	// Always allow uart_module to release uart
	// Otherwise, check that the correct module is calling the resease and
	// that the uart is not busy
	if (calling_id != UART_PID) {
    a77c:	82 34       	cpi	r24, 0x42	; 66
    a77e:	01 f1       	breq	.+64     	; 0xa7c0
		if ((s.calling_mod_id[TX] != calling_id) && (s.calling_mod_id[RX] != calling_id)) {
    a780:	90 91 e2 0b 	lds	r25, 0x0BE2
    a784:	98 17       	cp	r25, r24
    a786:	39 f0       	breq	.+14     	; 0xa796
    a788:	80 91 e3 0b 	lds	r24, 0x0BE3
    a78c:	82 17       	cp	r24, r18
    a78e:	19 f0       	breq	.+6      	; 0xa796
			return -EPERM;
    a790:	8f ef       	ldi	r24, 0xFF	; 255
    a792:	9f ef       	ldi	r25, 0xFF	; 255
    a794:	08 95       	ret
		}

		if (((s.calling_mod_id[TX] == calling_id) && (s.state[TX] != UART_SYS_IDLE) && (s.state[TX] != UART_SYS_WAIT)) &&
    a796:	92 17       	cp	r25, r18
    a798:	99 f4       	brne	.+38     	; 0xa7c0
    a79a:	80 91 e4 0b 	lds	r24, 0x0BE4
    a79e:	81 30       	cpi	r24, 0x01	; 1
    a7a0:	79 f0       	breq	.+30     	; 0xa7c0
    a7a2:	82 30       	cpi	r24, 0x02	; 2
    a7a4:	69 f0       	breq	.+26     	; 0xa7c0
    a7a6:	80 91 e3 0b 	lds	r24, 0x0BE3
    a7aa:	82 17       	cp	r24, r18
    a7ac:	49 f4       	brne	.+18     	; 0xa7c0
    a7ae:	80 91 e5 0b 	lds	r24, 0x0BE5
    a7b2:	81 30       	cpi	r24, 0x01	; 1
    a7b4:	29 f0       	breq	.+10     	; 0xa7c0
    a7b6:	82 30       	cpi	r24, 0x02	; 2
    a7b8:	19 f0       	breq	.+6      	; 0xa7c0
				((s.calling_mod_id[RX] == calling_id) && (s.state[RX] != UART_SYS_IDLE) && (s.state[RX] != UART_SYS_WAIT))) {
			return -EBUSY;
    a7ba:	80 ef       	ldi	r24, 0xF0	; 240
    a7bc:	9f ef       	ldi	r25, 0xFF	; 255
    a7be:	08 95       	ret
    a7c0:	4f ef       	ldi	r20, 0xFF	; 255
    a7c2:	31 e0       	ldi	r19, 0x01	; 1
    a7c4:	e1 ee       	ldi	r30, 0xE1	; 225
    a7c6:	fb e0       	ldi	r31, 0x0B	; 11
    a7c8:	93 2f       	mov	r25, r19
		}
	}
	// Release the uart
	for (i=0;i<2;i++) {	
		if ((s.calling_mod_id[i] == calling_id) && ((s.state[i] == UART_SYS_IDLE) || (s.state[i] == UART_SYS_WAIT))) {
    a7ca:	81 81       	ldd	r24, Z+1	; 0x01
    a7cc:	82 17       	cp	r24, r18
    a7ce:	39 f4       	brne	.+14     	; 0xa7de
    a7d0:	83 81       	ldd	r24, Z+3	; 0x03
    a7d2:	81 50       	subi	r24, 0x01	; 1
    a7d4:	82 30       	cpi	r24, 0x02	; 2
    a7d6:	18 f4       	brcc	.+6      	; 0xa7de
			s.flags[i] = 0; 
    a7d8:	15 82       	std	Z+5, r1	; 0x05
			s.calling_mod_id[i] = NULL_PID;
    a7da:	41 83       	std	Z+1, r20	; 0x01
			s.state[i] = UART_SYS_IDLE;
    a7dc:	33 83       	std	Z+3, r19	; 0x03
    a7de:	91 50       	subi	r25, 0x01	; 1
    a7e0:	31 96       	adiw	r30, 0x01	; 1
    a7e2:	97 ff       	sbrs	r25, 7
    a7e4:	f2 cf       	rjmp	.-28     	; 0xa7ca
		}
	}

	if ((s.state[TX] == UART_SYS_IDLE) && (s.state[RX] == UART_SYS_IDLE)) {
    a7e6:	80 91 e4 0b 	lds	r24, 0x0BE4
    a7ea:	81 30       	cpi	r24, 0x01	; 1
    a7ec:	31 f4       	brne	.+12     	; 0xa7fa
    a7ee:	80 91 e5 0b 	lds	r24, 0x0BE5
    a7f2:	81 30       	cpi	r24, 0x01	; 1
    a7f4:	11 f4       	brne	.+4      	; 0xa7fa
		s.system_state = UART_SYS_IDLE;
    a7f6:	80 93 e1 0b 	sts	0x0BE1, r24
	}

	return SOS_OK;
    a7fa:	80 e0       	ldi	r24, 0x00	; 0
    a7fc:	90 e0       	ldi	r25, 0x00	; 0
}
    a7fe:	08 95       	ret
    a800:	08 95       	ret

0000a802 <ker_uart_send_data>:


/**
 * Send data over the uart
 *
 * if called with a sos msg (after reserving with the UART_SYS_SOS_MSG flag)
 * type cast the msg pointer to a (uint8_t*) the lower layers will handle it
 * correctly based on the flags that are set.
 */

int8_t ker_uart_send_data(
        uint8_t *buff, 
        uint8_t msg_size, 
        uint8_t calling_id) {
    a802:	fc 01       	movw	r30, r24

	// uart has not been reserved or has been researved for reading
	if (s.state[TX] == UART_SYS_IDLE) {
    a804:	20 91 e4 0b 	lds	r18, 0x0BE4
    a808:	21 30       	cpi	r18, 0x01	; 1
    a80a:	19 f4       	brne	.+6      	; 0xa812
		//DEBUG("tx Idle\n");
		return -EINVAL;
    a80c:	8a ee       	ldi	r24, 0xEA	; 234
    a80e:	9f ef       	ldi	r25, 0xFF	; 255
    a810:	08 95       	ret
	}
	if ((s.calling_mod_id[TX] != calling_id) || (s.state[TX] != UART_SYS_WAIT)) {
    a812:	80 91 e2 0b 	lds	r24, 0x0BE2
    a816:	84 17       	cp	r24, r20
    a818:	11 f4       	brne	.+4      	; 0xa81e
    a81a:	22 30       	cpi	r18, 0x02	; 2
    a81c:	19 f0       	breq	.+6      	; 0xa824
		//DEBUG("Wait \n");
		return -EBUSY;
    a81e:	80 ef       	ldi	r24, 0xF0	; 240
    a820:	9f ef       	ldi	r25, 0xFF	; 255
    a822:	08 95       	ret
	}
	// get a handle to the outgoing data
	s.txBuf = buff;
    a824:	f0 93 ea 0b 	sts	0x0BEA, r31
    a828:	e0 93 e9 0b 	sts	0x0BE9, r30

	if (uart_startTransceiverTx(s.txBuf, msg_size, s.flags[TX]) == SOS_OK) {
    a82c:	40 91 e6 0b 	lds	r20, 0x0BE6
    a830:	cf 01       	movw	r24, r30
    a832:	0e 94 77 4e 	call	0x9cee
    a836:	88 23       	and	r24, r24
    a838:	41 f4       	brne	.+16     	; 0xa84a
		s.state[TX] = UART_SYS_BUSY;
    a83a:	83 e0       	ldi	r24, 0x03	; 3
    a83c:	80 93 e4 0b 	sts	0x0BE4, r24
		s.system_state = UART_SYS_BUSY;
    a840:	80 93 e1 0b 	sts	0x0BE1, r24
		return SOS_OK;
    a844:	80 e0       	ldi	r24, 0x00	; 0
    a846:	90 e0       	ldi	r25, 0x00	; 0
    a848:	08 95       	ret
	}
	//DEBUG("stat Transceiver failed\n");
	// lower layer busy (async recieve?)
	return -EBUSY;
    a84a:	80 ef       	ldi	r24, 0xF0	; 240
    a84c:	9f ef       	ldi	r25, 0xFF	; 255
}
    a84e:	08 95       	ret
    a850:	08 95       	ret

0000a852 <ker_uart_read_data>:


/**
 * Read data from the uart.
 */
int8_t ker_uart_read_data(
		uint8_t read_size,
		uint8_t calling_id) {
    a852:	28 2f       	mov	r18, r24

	// uart has not been reserved or reserved for writing
	if (s.state[RX] == UART_SYS_IDLE) {
    a854:	90 91 e5 0b 	lds	r25, 0x0BE5
    a858:	91 30       	cpi	r25, 0x01	; 1
    a85a:	19 f4       	brne	.+6      	; 0xa862
		return -EINVAL;
    a85c:	8a ee       	ldi	r24, 0xEA	; 234
    a85e:	9f ef       	ldi	r25, 0xFF	; 255
    a860:	08 95       	ret
	}
	// Check if uart rx is currently in use
	if ((s.calling_mod_id[RX] != calling_id) || (s.state[RX] != UART_SYS_WAIT)) {
    a862:	80 91 e3 0b 	lds	r24, 0x0BE3
    a866:	86 17       	cp	r24, r22
    a868:	11 f4       	brne	.+4      	; 0xa86e
    a86a:	92 30       	cpi	r25, 0x02	; 2
    a86c:	19 f0       	breq	.+6      	; 0xa874
		return -EBUSY;
    a86e:	80 ef       	ldi	r24, 0xF0	; 240
    a870:	9f ef       	ldi	r25, 0xFF	; 255
    a872:	08 95       	ret
	}
	
	if (uart_startTransceiverRx(read_size, s.flags[RX]) == SOS_OK) {
    a874:	60 91 e7 0b 	lds	r22, 0x0BE7
    a878:	82 2f       	mov	r24, r18
    a87a:	0e 94 be 4e 	call	0x9d7c
    a87e:	88 23       	and	r24, r24
    a880:	41 f4       	brne	.+16     	; 0xa892
		s.state[RX] = UART_SYS_BUSY; 
    a882:	83 e0       	ldi	r24, 0x03	; 3
    a884:	80 93 e5 0b 	sts	0x0BE5, r24
		s.system_state = UART_SYS_BUSY; 
    a888:	80 93 e1 0b 	sts	0x0BE1, r24
		return SOS_OK;
    a88c:	80 e0       	ldi	r24, 0x00	; 0
    a88e:	90 e0       	ldi	r25, 0x00	; 0
    a890:	08 95       	ret
	}
	// lower layer busy (async recieve?)
	return -EBUSY;
    a892:	80 ef       	ldi	r24, 0xF0	; 240
    a894:	9f ef       	ldi	r25, 0xFF	; 255
}
    a896:	08 95       	ret
    a898:	08 95       	ret

0000a89a <uart_send_done>:

/**
 * Send MSG_UART_SEND_DONE 
 */
void uart_send_done(uint8_t status) 
{
    a89a:	ef 92       	push	r14
    a89c:	ff 92       	push	r15
    a89e:	0f 93       	push	r16
    a8a0:	1f 93       	push	r17
    a8a2:	98 2f       	mov	r25, r24
	// bus was reserved by someone and they sent something
	if ((s.calling_mod_id[TX] != NULL_PID) && (s.state[TX] == UART_SYS_BUSY)) {
    a8a4:	30 91 e2 0b 	lds	r19, 0x0BE2
    a8a8:	3f 3f       	cpi	r19, 0xFF	; 255
    a8aa:	e9 f0       	breq	.+58     	; 0xa8e6
    a8ac:	80 91 e4 0b 	lds	r24, 0x0BE4
    a8b0:	83 30       	cpi	r24, 0x03	; 3
    a8b2:	c9 f4       	brne	.+50     	; 0xa8e6
		s.state[TX] = UART_SYS_WAIT;
    a8b4:	82 e0       	ldi	r24, 0x02	; 2
    a8b6:	80 93 e4 0b 	sts	0x0BE4, r24
		if (status & UART_SYS_ERROR_FLAG) {
    a8ba:	89 2f       	mov	r24, r25
    a8bc:	99 27       	eor	r25, r25
    a8be:	8c 01       	movw	r16, r24
    a8c0:	01 70       	andi	r16, 0x01	; 1
    a8c2:	10 70       	andi	r17, 0x00	; 0
    a8c4:	80 ff       	sbrs	r24, 0
    a8c6:	06 c0       	rjmp	.+12     	; 0xa8d4
				post_short(s.calling_mod_id[TX], UART_PID, MSG_UART_SEND_DONE, 0, 0, SOS_MSG_SEND_FAIL|SOS_MSG_HIGH_PRIORITY);
    a8c8:	92 e4       	ldi	r25, 0x42	; 66
    a8ca:	e9 2e       	mov	r14, r25
    a8cc:	f1 2c       	mov	r15, r1
    a8ce:	00 e0       	ldi	r16, 0x00	; 0
    a8d0:	10 e0       	ldi	r17, 0x00	; 0
    a8d2:	03 c0       	rjmp	.+6      	; 0xa8da
		} else {
			post_short(s.calling_mod_id[TX], UART_PID, MSG_UART_SEND_DONE, 0, 0, SOS_MSG_HIGH_PRIORITY);
    a8d4:	80 e4       	ldi	r24, 0x40	; 64
    a8d6:	e8 2e       	mov	r14, r24
    a8d8:	f1 2c       	mov	r15, r1
    a8da:	20 e0       	ldi	r18, 0x00	; 0
    a8dc:	42 e4       	ldi	r20, 0x42	; 66
    a8de:	64 2f       	mov	r22, r20
    a8e0:	83 2f       	mov	r24, r19
    a8e2:	0e 94 50 18 	call	0x30a0
    a8e6:	1f 91       	pop	r17
    a8e8:	0f 91       	pop	r16
    a8ea:	ff 90       	pop	r15
    a8ec:	ef 90       	pop	r14
    a8ee:	08 95       	ret

0000a8f0 <uart_read_done>:
		}
	}
}


/**
 * Send MSG_UART_READ_DONE 
 */
void uart_read_done(uint8_t length, uint8_t status) {
    a8f0:	ef 92       	push	r14
    a8f2:	ff 92       	push	r15
    a8f4:	0f 93       	push	r16
    a8f6:	1f 93       	push	r17

	uint8_t *buff = NULL;
	
	if (status & UART_SYS_ERROR_FLAG  && (s.calling_mod_id[RX] != NULL_PID)) {
    a8f8:	60 ff       	sbrs	r22, 0
    a8fa:	0e c0       	rjmp	.+28     	; 0xa918
    a8fc:	80 91 e3 0b 	lds	r24, 0x0BE3
    a900:	8f 3f       	cpi	r24, 0xFF	; 255
    a902:	51 f0       	breq	.+20     	; 0xa918
		goto post_error_msg;
	} else {
		return;
	}

	buff = uart_getRecievedData();

	// if it passes sanity checks give it to the scheduler
	/*
	 * with a correct protocol byte this should never happen
	 *
	if ((buff != NULL) && (s.calling_mod_id[RX] == NULL_PID) && (length >= (SOS_MSG_HEADER_SIZE))) {
		Message *rxd_msg = (Message*)buff;
		if (length == (SOS_MSG_HEADER_SIZE + rxd_msg->len)) {
			rxd_msg->flag &= ~(SOS_MSG_PORT_MSK);
			handle_incoming_msg(rxd_msg, SOS_MSG_UART_IO);
			LED_DBG(LED_YELLOW_TOGGLE);
			return;
		}
	}
*/
	// got data but no one cares, trash buffer and return
	if (s.calling_mod_id[RX] == NULL_PID) {
		ker_free(buff);
		return;
	}

	// no data, tell it to someone who cares
	if (buff == NULL) {
		goto post_error_msg;
	}

	// verify message type and dispatch
	switch (buff[0]) {  // protocol byte
		case HDLC_SOS_MSG:
			{
				if (s.flags[RX] & UART_SYS_SOS_MSG_FLAG) {
					post_long(
							s.calling_mod_id[RX],
							UART_PID,
							MSG_UART_READ_DONE,
							length,
							buff,
							SOS_MSG_RELEASE|SOS_MSG_HIGH_PRIORITY);
					s.state[RX] = UART_SYS_WAIT;
					return;
				} else {
					ker_free(buff);
					goto post_error_msg;
				}
			}
		case HDLC_RAW:
			{
				// wrap in message and send
				post_long(
						s.calling_mod_id[RX],
						UART_PID,
						MSG_UART_READ_DONE,
						length, 
						buff,   
						SOS_MSG_RELEASE|SOS_MSG_HIGH_PRIORITY);
				s.state[RX] = UART_SYS_WAIT;
				return;
			}
		default:
			ker_free(buff);
			break;
	}

post_error_msg:
	post_short(
    a904:	20 e4       	ldi	r18, 0x40	; 64
    a906:	e2 2e       	mov	r14, r18
    a908:	f1 2c       	mov	r15, r1
    a90a:	00 e0       	ldi	r16, 0x00	; 0
    a90c:	10 e0       	ldi	r17, 0x00	; 0
    a90e:	20 e0       	ldi	r18, 0x00	; 0
    a910:	4f e0       	ldi	r20, 0x0F	; 15
    a912:	62 e4       	ldi	r22, 0x42	; 66
    a914:	0e 94 50 18 	call	0x30a0
    a918:	1f 91       	pop	r17
    a91a:	0f 91       	pop	r16
    a91c:	ff 90       	pop	r15
    a91e:	ef 90       	pop	r14
    a920:	08 95       	ret

0000a922 <flash_init>:
	// but program memory on AVR can be referenced by
	// 17 bits. GCC does not let us typecast a pointer to
	// uint32_t. Thus, following checks try to determine
	// the lost MSB of __text_end.
	uint16_t tmp = (uint16_t)&(__text_end);
    a922:	26 ec       	ldi	r18, 0xC6	; 198
    a924:	33 eb       	ldi	r19, 0xB3	; 179
	
	if( tmp > (65536L - FLASHMEM_PAGE_SIZE) ) {
    a926:	4f ef       	ldi	r20, 0xFF	; 255
    a928:	21 30       	cpi	r18, 0x01	; 1
    a92a:	34 07       	cpc	r19, r20
    a92c:	28 f0       	brcs	.+10     	; 0xa938
		// tmp is 16 bit wide. Its close to 64 KB boundary.
		// So, round it up manually to next page.
		return (uint32_t)(256L * FLASHMEM_PAGE_SIZE);
    a92e:	60 e0       	ldi	r22, 0x00	; 0
    a930:	70 e0       	ldi	r23, 0x00	; 0
    a932:	81 e0       	ldi	r24, 0x01	; 1
    a934:	90 e0       	ldi	r25, 0x00	; 0
    a936:	08 95       	ret
    a938:	b9 01       	movw	r22, r18
    a93a:	88 27       	eor	r24, r24
    a93c:	99 27       	eor	r25, r25
	}
	if( tmp < (20L * 1024L) ) {
    a93e:	20 50       	subi	r18, 0x00	; 0
    a940:	30 45       	sbci	r19, 0x50	; 80
    a942:	a8 f4       	brcc	.+42     	; 0xa96e
		// Assumption: SOS kernel (and compiled-in modules) occupy 
		// atleast 20 KB and atmost 64+20 KB. Thus, the __text_end 
		// pointer lies in second half of program memory on AVR.
		tmp = ((tmp + (FLASHMEM_PAGE_SIZE - 1)) / FLASHMEM_PAGE_SIZE) + 256L;
    a944:	dc 01       	movw	r26, r24
    a946:	cb 01       	movw	r24, r22
    a948:	81 50       	subi	r24, 0x01	; 1
    a94a:	9f 4f       	sbci	r25, 0xFF	; 255
    a94c:	af 4f       	sbci	r26, 0xFF	; 255
    a94e:	bf 4f       	sbci	r27, 0xFF	; 255
    a950:	89 2f       	mov	r24, r25
    a952:	9a 2f       	mov	r25, r26
    a954:	ab 2f       	mov	r26, r27
    a956:	bb 27       	eor	r27, r27
    a958:	9c 01       	movw	r18, r24
    a95a:	20 50       	subi	r18, 0x00	; 0
    a95c:	3f 4f       	sbci	r19, 0xFF	; 255
		return (uint32_t) ((uint32_t)tmp * FLASHMEM_PAGE_SIZE );
    a95e:	c9 01       	movw	r24, r18
    a960:	aa 27       	eor	r26, r26
    a962:	bb 27       	eor	r27, r27
    a964:	66 27       	eor	r22, r22
    a966:	78 2f       	mov	r23, r24
    a968:	89 2f       	mov	r24, r25
    a96a:	9a 2f       	mov	r25, r26
    a96c:	08 95       	ret
	}
	return (uint32_t)( (((uint32_t)tmp + (FLASHMEM_PAGE_SIZE - 1)) 
    a96e:	61 50       	subi	r22, 0x01	; 1
    a970:	7f 4f       	sbci	r23, 0xFF	; 255
    a972:	8f 4f       	sbci	r24, 0xFF	; 255
    a974:	9f 4f       	sbci	r25, 0xFF	; 255
    a976:	60 70       	andi	r22, 0x00	; 0
    a978:	81 70       	andi	r24, 0x01	; 1
    a97a:	90 70       	andi	r25, 0x00	; 0
					/ FLASHMEM_PAGE_SIZE) * FLASHMEM_PAGE_SIZE );
}
    a97c:	08 95       	ret
    a97e:	08 95       	ret

0000a980 <flash_read>:

void flash_erase( uint32_t address, uint16_t len )
{
	//
	// No need to do anything as we always rewrite the entire page
	//
} 
/*
{
	uint16_t page;
	HAS_CRITICAL_SECTION;
	
	ENTER_CRITICAL_SECTION();
	//! making sure that EEPROM is not busy
	eeprom_busy_wait ();
	
	if( address >= 65536L ) {
		RAMPZ = 1;
	} else {
		RAMPZ = 0;
	}
		
	SpmCommand((uint16_t)address, (1 << PGERS) | (1 << SPMEN));
	SpmCommand(0, (1 << RWWSRE) | (1 << SPMEN));
	
	RAMPZ = 0;
	LEAVE_CRITICAL_SECTION();
}
*/
#include <led.h>

void flash_write( uint32_t address, uint8_t *data, uint16_t len )
{
	uint16_t page;
	uint16_t offset;
	uint16_t i;
	uint32_t page_address;
	HAS_CRITICAL_SECTION;
	
	//if( address < ((uint32_t)(&__text_end)) || address > FLASHMEM_SIZE) {
	//	led_red_toggle();
		// Disallow writing to kernel or bootloader
	//	return;
	//}
	ENTER_CRITICAL_SECTION();
	//! making sure that EEPROM is not busy
	eeprom_busy_wait ();
	
	//
	// For each different page
	//
	while( len > 0 ) {
		page   = (uint16_t)(address >> 8);
		offset = (uint16_t)(address & 0x000000ff);
		//
		// Load data from the page into temperary buffer
		//
		page_address = address & 0xffffff00;
		
		for( i = 0; i < offset; i+=2 ) {
			uint16_t w = pgm_read_word_far( page_address + i );
			SpmBufferFill( i, w );
		}
		//
		// Modify the content
		//
		for( ; len > 0 && i < 256L; i+=2 ) {
			uint16_t w = *data++;
			w += (*data++) << 8;
			len -= 2;
			SpmBufferFill( i, w ); 
		} 
	
		//
		// load the rest of the page
		//	
		for( ; i < 256L; i+=2 ) {
			uint16_t w = pgm_read_word_far( page_address + i );
			SpmBufferFill( i, w );	
		}
	
		//
		// Write it back
		//
		if( page >= 256L ) {
			RAMPZ = 1;
		} else {
			RAMPZ = 0;
		}
		
		//
		// Prepare the page address
		//
		page <<= 8;
		
		SpmCommand(page, (1 << PGERS) | (1 << SPMEN));
		SpmCommand(page, (1 << PGWRT) | (1 << SPMEN)); 
		SpmCommand(0, (1 << RWWSRE) | (1 << SPMEN));
		
		address += (256L - offset);
	}
	RAMPZ = 0;
	LEAVE_CRITICAL_SECTION();
}

void flash_read( uint32_t address, void *buf, uint16_t size )
{
    a980:	cf 92       	push	r12
    a982:	df 92       	push	r13
    a984:	ef 92       	push	r14
    a986:	ff 92       	push	r15
    a988:	0f 93       	push	r16
    a98a:	1f 93       	push	r17
    a98c:	cf 93       	push	r28
    a98e:	df 93       	push	r29
    a990:	7b 01       	movw	r14, r22
    a992:	8c 01       	movw	r16, r24
    a994:	6a 01       	movw	r12, r20
    a996:	e9 01       	movw	r28, r18
	uint16_t i = 0;
    a998:	60 e0       	ldi	r22, 0x00	; 0
    a99a:	70 e0       	ldi	r23, 0x00	; 0
	if( (address % 2) == 0 && (size % 2) == 0 ) {
    a99c:	e0 fc       	sbrc	r14, 0
    a99e:	1c c0       	rjmp	.+56     	; 0xa9d8
    a9a0:	20 fd       	sbrc	r18, 0
    a9a2:	1a c0       	rjmp	.+52     	; 0xa9d8
		uint16_t *wp = (uint16_t*)buf;
		for(i = 0; i < size; i+=2){
    a9a4:	62 17       	cp	r22, r18
    a9a6:	73 07       	cpc	r23, r19
    a9a8:	50 f5       	brcc	.+84     	; 0xa9fe
			wp[i/2] = pgm_read_word_far(address + i);
    a9aa:	db 01       	movw	r26, r22
    a9ac:	ae 7f       	andi	r26, 0xFE	; 254
    a9ae:	ac 0d       	add	r26, r12
    a9b0:	bd 1d       	adc	r27, r13
    a9b2:	9b 01       	movw	r18, r22
    a9b4:	44 27       	eor	r20, r20
    a9b6:	55 27       	eor	r21, r21
    a9b8:	2e 0d       	add	r18, r14
    a9ba:	3f 1d       	adc	r19, r15
    a9bc:	40 1f       	adc	r20, r16
    a9be:	51 1f       	adc	r21, r17
    a9c0:	4b bf       	out	0x3b, r20	; 59
    a9c2:	f9 01       	movw	r30, r18
    a9c4:	87 91       	elpm	r24, Z+
    a9c6:	96 91       	elpm	r25, Z
    a9c8:	8d 93       	st	X+, r24
    a9ca:	9c 93       	st	X, r25
    a9cc:	6e 5f       	subi	r22, 0xFE	; 254
    a9ce:	7f 4f       	sbci	r23, 0xFF	; 255
    a9d0:	6c 17       	cp	r22, r28
    a9d2:	7d 07       	cpc	r23, r29
    a9d4:	50 f3       	brcs	.-44     	; 0xa9aa
    a9d6:	13 c0       	rjmp	.+38     	; 0xa9fe
		}
	} else {
		uint8_t *data = (uint8_t*)buf;
		for(i = 0; i < size; i+=1){
    a9d8:	20 97       	sbiw	r28, 0x00	; 0
    a9da:	89 f0       	breq	.+34     	; 0xa9fe
    a9dc:	d6 01       	movw	r26, r12
    a9de:	a8 01       	movw	r20, r16
    a9e0:	97 01       	movw	r18, r14
    a9e2:	be 01       	movw	r22, r28
			data[i] = pgm_read_byte_far(address + i);
    a9e4:	4b bf       	out	0x3b, r20	; 59
    a9e6:	f9 01       	movw	r30, r18
    a9e8:	87 91       	elpm	r24, Z+
    a9ea:	8d 93       	st	X+, r24
    a9ec:	61 50       	subi	r22, 0x01	; 1
    a9ee:	70 40       	sbci	r23, 0x00	; 0
    a9f0:	2f 5f       	subi	r18, 0xFF	; 255
    a9f2:	3f 4f       	sbci	r19, 0xFF	; 255
    a9f4:	4f 4f       	sbci	r20, 0xFF	; 255
    a9f6:	5f 4f       	sbci	r21, 0xFF	; 255
    a9f8:	61 15       	cp	r22, r1
    a9fa:	71 05       	cpc	r23, r1
    a9fc:	99 f7       	brne	.-26     	; 0xa9e4
    a9fe:	df 91       	pop	r29
    aa00:	cf 91       	pop	r28
    aa02:	1f 91       	pop	r17
    aa04:	0f 91       	pop	r16
    aa06:	ff 90       	pop	r15
    aa08:	ef 90       	pop	r14
    aa0a:	df 90       	pop	r13
    aa0c:	cf 90       	pop	r12
    aa0e:	08 95       	ret

0000aa10 <ker_systime16L>:
static volatile uint16_t currentTime;

uint16_t ker_systime16L()
{
	return TCNT3;
    aa10:	80 91 88 00 	lds	r24, 0x0088
    aa14:	90 91 89 00 	lds	r25, 0x0089
    aa18:	08 95       	ret

0000aa1a <ker_systime16H>:
}

uint16_t ker_systime16H()
{
	return currentTime;
    aa1a:	80 91 eb 0b 	lds	r24, 0x0BEB
    aa1e:	90 91 ec 0b 	lds	r25, 0x0BEC
    aa22:	08 95       	ret

0000aa24 <ker_systime32>:
}

uint32_t ker_systime32()
{
	register union time_u time;
	HAS_CRITICAL_SECTION;

	ENTER_CRITICAL_SECTION();
    aa24:	6f b7       	in	r22, 0x3f	; 63
    aa26:	f8 94       	cli
	{
		time.low = TCNT3;
    aa28:	80 91 88 00 	lds	r24, 0x0088
    aa2c:	90 91 89 00 	lds	r25, 0x0089
    aa30:	9c 01       	movw	r18, r24
		time.high = currentTime;
    aa32:	80 91 eb 0b 	lds	r24, 0x0BEB
    aa36:	90 91 ec 0b 	lds	r25, 0x0BEC
    aa3a:	ac 01       	movw	r20, r24

		// maybe there was a pending interrupt
		if( bit_is_set(ETIFR, TOV3) && ((int16_t)time.low) >= 0 )
    aa3c:	80 91 7c 00 	lds	r24, 0x007C
    aa40:	82 ff       	sbrs	r24, 2
    aa42:	04 c0       	rjmp	.+8      	; 0xaa4c
    aa44:	37 fd       	sbrc	r19, 7
    aa46:	02 c0       	rjmp	.+4      	; 0xaa4c
			++time.high;
    aa48:	4f 5f       	subi	r20, 0xFF	; 255
    aa4a:	5f 4f       	sbci	r21, 0xFF	; 255
	}
	LEAVE_CRITICAL_SECTION();
    aa4c:	6f bf       	out	0x3f, r22	; 63

	return time.full;
}
    aa4e:	ca 01       	movw	r24, r20
    aa50:	b9 01       	movw	r22, r18
    aa52:	08 95       	ret

0000aa54 <__vector_29>:

/*
uint32_t ker_systime_castTime16(uint16_t time16)
{
	uint32_t time = call SysTime.getTime32();
	time += (int16_t)time16 - (int16_t)time;
	return time;
}
*/

// Use SIGNAL instead of INTERRUPT to get atomic update of time
SIGNAL(SIG_OVERFLOW3)
{
    aa54:	1f 92       	push	r1
    aa56:	0f 92       	push	r0
    aa58:	0f b6       	in	r0, 0x3f	; 63
    aa5a:	0f 92       	push	r0
    aa5c:	11 24       	eor	r1, r1
    aa5e:	2f 93       	push	r18
    aa60:	8f 93       	push	r24
    aa62:	9f 93       	push	r25
	SOS_MEASUREMENT_IDLE_END();
	++currentTime;
    aa64:	80 91 eb 0b 	lds	r24, 0x0BEB
    aa68:	90 91 ec 0b 	lds	r25, 0x0BEC
    aa6c:	01 96       	adiw	r24, 0x01	; 1
    aa6e:	90 93 ec 0b 	sts	0x0BEC, r25
    aa72:	80 93 eb 0b 	sts	0x0BEB, r24
	if(currentTime == TIMER3_MAX_GTIME)
    aa76:	80 91 eb 0b 	lds	r24, 0x0BEB
    aa7a:	90 91 ec 0b 	lds	r25, 0x0BEC
    aa7e:	80 50       	subi	r24, 0x00	; 0
    aa80:	9f 47       	sbci	r25, 0x7F	; 127
    aa82:	21 f4       	brne	.+8      	; 0xaa8c
		currentTime = 0;	
    aa84:	10 92 ec 0b 	sts	0x0BEC, r1
    aa88:	10 92 eb 0b 	sts	0x0BEB, r1
    aa8c:	9f 91       	pop	r25
    aa8e:	8f 91       	pop	r24
    aa90:	2f 91       	pop	r18
    aa92:	0f 90       	pop	r0
    aa94:	0f be       	out	0x3f, r0	; 63
    aa96:	0f 90       	pop	r0
    aa98:	1f 90       	pop	r1
    aa9a:	18 95       	reti

0000aa9c <systime_init>:
	
	#ifdef UBMAC
	WakeupTimer_fired();		
	#endif
}

void systime_init()
{
	uint8_t etimsk;
	HAS_CRITICAL_SECTION;

	TCCR3A = 0x00;
    aa9c:	10 92 8b 00 	sts	0x008B, r1
	TCCR3B = 0x00;
    aaa0:	10 92 8a 00 	sts	0x008A, r1

	ENTER_CRITICAL_SECTION();
    aaa4:	8f b7       	in	r24, 0x3f	; 63
    aaa6:	f8 94       	cli
	{
		etimsk = ETIMSK;
    aaa8:	90 91 7d 00 	lds	r25, 0x007D
		etimsk &= (1<<OCIE1C);
    aaac:	91 70       	andi	r25, 0x01	; 1
		etimsk |= (1<<TOIE3);
    aaae:	94 60       	ori	r25, 0x04	; 4
		ETIMSK = etimsk;
    aab0:	90 93 7d 00 	sts	0x007D, r25
	}
	LEAVE_CRITICAL_SECTION();
    aab4:	8f bf       	out	0x3f, r24	; 63
	//! start the timer
	//! start the timer with 1/64 prescaler, 115.2 KHz on MICA2
	TCCR3B = 0x03;
    aab6:	83 e0       	ldi	r24, 0x03	; 3
    aab8:	80 93 8a 00 	sts	0x008A, r24
    aabc:	08 95       	ret

0000aabe <systime_stop>:
}

void systime_stop()
{
	// stop the timer
	TCCR3B = 0x00;
    aabe:	10 92 8a 00 	sts	0x008A, r1
    aac2:	08 95       	ret

0000aac4 <timer_hardware_init>:

/** 
 * @brief timer hardware routine
 */
void timer_hardware_init(uint8_t interval, uint8_t scale){
    aac4:	38 2f       	mov	r19, r24
    aac6:	96 2f       	mov	r25, r22
	HAS_CRITICAL_SECTION;
	ENTER_CRITICAL_SECTION();
    aac8:	2f b7       	in	r18, 0x3f	; 63
    aaca:	f8 94       	cli

	scale &= 0x7;
    aacc:	97 70       	andi	r25, 0x07	; 7
	scale |= (1<<WGM1); // reset on match
    aace:	98 60       	ori	r25, 0x08	; 8
	

	TIMSK &= ((unsigned char)~(1 << (TOIE0)));
    aad0:	87 b7       	in	r24, 0x37	; 55
    aad2:	8e 7f       	andi	r24, 0xFE	; 254
    aad4:	87 bf       	out	0x37, r24	; 55
	TIMSK &= ((unsigned char)~(1 << (OCIE0)));
    aad6:	87 b7       	in	r24, 0x37	; 55
    aad8:	8d 7f       	andi	r24, 0xFD	; 253
    aada:	87 bf       	out	0x37, r24	; 55
	//!< Disable TC0 interrupt

	/** 
	 *  set Timer/Counter0 to be asynchronous 
	 *  from the CPU clock with a second external 
	 *  clock(32,768kHz)driving it
	 */
	ASSR |= (1 << (AS0)); //!< us external oscillator
    aadc:	80 b7       	in	r24, 0x30	; 48
    aade:	88 60       	ori	r24, 0x08	; 8
    aae0:	80 bf       	out	0x30, r24	; 48
	TCCR0 = scale;
    aae2:	93 bf       	out	0x33, r25	; 51
	TCNT0 = 0;
    aae4:	12 be       	out	0x32, r1	; 50
	OCR0 = interval;
    aae6:	31 bf       	out	0x31, r19	; 49
}

static inline void timer_enable_interrupt()
{
	TIMSK |= (1 << (OCIE0));
    aae8:	87 b7       	in	r24, 0x37	; 55
    aaea:	82 60       	ori	r24, 0x02	; 2
    aaec:	87 bf       	out	0x37, r24	; 55
	//TIMSK |= (1 << (OCIE0)); replaced by the line below
	timer_enable_interrupt();
	LEAVE_CRITICAL_SECTION();
    aaee:	2f bf       	out	0x3f, r18	; 63

	timer_init();
    aaf0:	0e 94 f3 2c 	call	0x59e6
    aaf4:	08 95       	ret

0000aaf6 <timer_setInterval>:
}   

void timer_setInterval(int32_t val)
{
    aaf6:	9b 01       	movw	r18, r22
    aaf8:	ac 01       	movw	r20, r24
	uint8_t interval;
	while ((ASSR & (_BV(OCR0UB) | _BV(TCN0UB))) != 0);
    aafa:	80 b7       	in	r24, 0x30	; 48
    aafc:	99 27       	eor	r25, r25
    aafe:	86 70       	andi	r24, 0x06	; 6
    ab00:	90 70       	andi	r25, 0x00	; 0
    ab02:	89 2b       	or	r24, r25
    ab04:	d1 f7       	brne	.-12     	; 0xaafa

	if(val > 250) {interval = 250;}
    ab06:	2b 3f       	cpi	r18, 0xFB	; 251
    ab08:	31 05       	cpc	r19, r1
    ab0a:	41 05       	cpc	r20, r1
    ab0c:	51 05       	cpc	r21, r1
    ab0e:	14 f0       	brlt	.+4      	; 0xab14
    ab10:	6a ef       	ldi	r22, 0xFA	; 250
    ab12:	09 c0       	rjmp	.+18     	; 0xab26
	else if(val <= 2) {interval = 2;}
    ab14:	23 30       	cpi	r18, 0x03	; 3
    ab16:	31 05       	cpc	r19, r1
    ab18:	41 05       	cpc	r20, r1
    ab1a:	51 05       	cpc	r21, r1
    ab1c:	14 f4       	brge	.+4      	; 0xab22
    ab1e:	62 e0       	ldi	r22, 0x02	; 2
    ab20:	02 c0       	rjmp	.+4      	; 0xab26
	else {interval = (uint8_t)val - 1;}
    ab22:	62 2f       	mov	r22, r18
    ab24:	61 50       	subi	r22, 0x01	; 1

	//! reset hardware counter
	TCNT0 = 0;
    ab26:	12 be       	out	0x32, r1	; 50
	OCR0 = interval;
    ab28:	61 bf       	out	0x31, r22	; 49
    ab2a:	08 95       	ret

0000ab2c <melf_arch_relocate>:
static inline void WRITE_LDI(uint8_t* instr, uint8_t byte);

//----------------------------------------------------------
int8_t melf_arch_relocate(melf_desc_t* mdesc, Melf_Rela* rela, Melf_Sym* sym, Melf_Shdr* progshdr)
{
    ab2c:	4f 92       	push	r4
    ab2e:	5f 92       	push	r5
    ab30:	6f 92       	push	r6
    ab32:	7f 92       	push	r7
    ab34:	8f 92       	push	r8
    ab36:	9f 92       	push	r9
    ab38:	af 92       	push	r10
    ab3a:	bf 92       	push	r11
    ab3c:	cf 92       	push	r12
    ab3e:	df 92       	push	r13
    ab40:	ef 92       	push	r14
    ab42:	ff 92       	push	r15
    ab44:	0f 93       	push	r16
    ab46:	1f 93       	push	r17
    ab48:	cf 93       	push	r28
    ab4a:	df 93       	push	r29
    ab4c:	cd b7       	in	r28, 0x3d	; 61
    ab4e:	de b7       	in	r29, 0x3e	; 62
    ab50:	24 97       	sbiw	r28, 0x04	; 4
    ab52:	0f b6       	in	r0, 0x3f	; 63
    ab54:	f8 94       	cli
    ab56:	de bf       	out	0x3e, r29	; 62
    ab58:	0f be       	out	0x3f, r0	; 63
    ab5a:	cd bf       	out	0x3d, r28	; 61
    ab5c:	2c 01       	movw	r4, r24
    ab5e:	5b 01       	movw	r10, r22
    ab60:	3a 01       	movw	r6, r20
    ab62:	f9 01       	movw	r30, r18
  uint8_t instr[4];
  uint32_t reloc_addr;
  Melf_Addr reloc_offset;
  
  reloc_offset = (Melf_Addr)(progshdr->sh_offset) + rela->r_offset;
    ab64:	42 81       	ldd	r20, Z+2	; 0x02
    ab66:	53 81       	ldd	r21, Z+3	; 0x03
    ab68:	fb 01       	movw	r30, r22
    ab6a:	80 80       	ld	r8, Z
    ab6c:	91 80       	ldd	r9, Z+1	; 0x01
    ab6e:	84 0e       	add	r8, r20
    ab70:	95 1e       	adc	r9, r21
  
  if( MELF_ST_TYPE(sym->st_info) == STT_SOS_DFUNC ) {
    ab72:	f3 01       	movw	r30, r6
    ab74:	82 81       	ldd	r24, Z+2	; 0x02
    ab76:	99 27       	eor	r25, r25
    ab78:	8f 70       	andi	r24, 0x0F	; 15
    ab7a:	90 70       	andi	r25, 0x00	; 0
    ab7c:	20 81       	ld	r18, Z
    ab7e:	31 81       	ldd	r19, Z+1	; 0x01
    ab80:	05 97       	sbiw	r24, 0x05	; 5
    ab82:	91 f4       	brne	.+36     	; 0xaba8
	sos_pid_t pid = (sos_pid_t)((sym->st_value >> 8) & 0x00ff);
    ab84:	23 2f       	mov	r18, r19
    ab86:	33 27       	eor	r19, r19
	uint8_t fid = (uint8_t)(sym->st_value & 0x00ff);
    ab88:	80 81       	ld	r24, Z
	reloc_addr = (uint16_t)ker_fntable_get_dfunc_addr(pid, fid);
    ab8a:	68 2f       	mov	r22, r24
    ab8c:	82 2f       	mov	r24, r18
    ab8e:	0e 94 1e 28 	call	0x503c
    ab92:	6c 01       	movw	r12, r24
    ab94:	ee 24       	eor	r14, r14
    ab96:	ff 24       	eor	r15, r15
	if( reloc_addr == 0 ) return -1;
    ab98:	c1 14       	cp	r12, r1
    ab9a:	d1 04       	cpc	r13, r1
    ab9c:	e1 04       	cpc	r14, r1
    ab9e:	f1 04       	cpc	r15, r1
    aba0:	f9 f4       	brne	.+62     	; 0xabe0
    aba2:	8f ef       	ldi	r24, 0xFF	; 255
    aba4:	9f ef       	ldi	r25, 0xFF	; 255
    aba6:	3d c1       	rjmp	.+634    	; 0xae22
  } else {
	reloc_addr = mdesc->base_addr + (uint32_t) progshdr->sh_offset + (uint32_t)sym->st_value + (uint32_t)rela->r_addend;
    aba8:	ca 01       	movw	r24, r20
    abaa:	aa 27       	eor	r26, r26
    abac:	bb 27       	eor	r27, r27
    abae:	f2 01       	movw	r30, r4
    abb0:	c6 80       	ldd	r12, Z+6	; 0x06
    abb2:	d7 80       	ldd	r13, Z+7	; 0x07
    abb4:	e0 84       	ldd	r14, Z+8	; 0x08
    abb6:	f1 84       	ldd	r15, Z+9	; 0x09
    abb8:	c8 0e       	add	r12, r24
    abba:	d9 1e       	adc	r13, r25
    abbc:	ea 1e       	adc	r14, r26
    abbe:	fb 1e       	adc	r15, r27
    abc0:	c9 01       	movw	r24, r18
    abc2:	aa 27       	eor	r26, r26
    abc4:	bb 27       	eor	r27, r27
    abc6:	c8 0e       	add	r12, r24
    abc8:	d9 1e       	adc	r13, r25
    abca:	ea 1e       	adc	r14, r26
    abcc:	fb 1e       	adc	r15, r27
    abce:	fb 01       	movw	r30, r22
    abd0:	84 81       	ldd	r24, Z+4	; 0x04
    abd2:	95 81       	ldd	r25, Z+5	; 0x05
    abd4:	aa 27       	eor	r26, r26
    abd6:	bb 27       	eor	r27, r27
    abd8:	c8 0e       	add	r12, r24
    abda:	d9 1e       	adc	r13, r25
    abdc:	ea 1e       	adc	r14, r26
    abde:	fb 1e       	adc	r15, r27
  }

  ker_codemem_read(mdesc->cmhdl, KER_DFT_LOADER_PID, (void*)instr, 4, reloc_offset);
    abe0:	84 01       	movw	r16, r8
    abe2:	24 e0       	ldi	r18, 0x04	; 4
    abe4:	30 e0       	ldi	r19, 0x00	; 0
    abe6:	ae 01       	movw	r20, r28
    abe8:	4f 5f       	subi	r20, 0xFF	; 255
    abea:	5f 4f       	sbci	r21, 0xFF	; 255
    abec:	61 e1       	ldi	r22, 0x11	; 17
    abee:	f2 01       	movw	r30, r4
    abf0:	80 81       	ld	r24, Z
    abf2:	91 81       	ldd	r25, Z+1	; 0x01
    abf4:	0e 94 d2 20 	call	0x41a4
  
  switch (rela->r_type) {
    abf8:	f5 01       	movw	r30, r10
    abfa:	86 81       	ldd	r24, Z+6	; 0x06
    abfc:	99 27       	eor	r25, r25
    abfe:	aa 27       	eor	r26, r26
    ac00:	bb 27       	eor	r27, r27
    ac02:	fc 01       	movw	r30, r24
    ac04:	43 97       	sbiw	r24, 0x13	; 19
    ac06:	08 f0       	brcs	.+2      	; 0xac0a
    ac08:	0a c1       	rjmp	.+532    	; 0xae1e
    ac0a:	e6 56       	subi	r30, 0x66	; 102
    ac0c:	fd 4f       	sbci	r31, 0xFD	; 253
    ac0e:	ee 0f       	add	r30, r30
    ac10:	ff 1f       	adc	r31, r31
    ac12:	05 90       	lpm	r0, Z+
    ac14:	f4 91       	lpm	r31, Z
    ac16:	e0 2d       	mov	r30, r0
    ac18:	09 94       	ijmp
  case R_AVR_NONE:
  case R_AVR_32:
	  return 0;
  case R_AVR_7_PCREL:
  {
      uint16_t pc = rela->r_offset >> 1; // Word address, relative to start of .text section
    ac1a:	f5 01       	movw	r30, r10
    ac1c:	60 81       	ld	r22, Z
    ac1e:	71 81       	ldd	r23, Z+1	; 0x01
    ac20:	76 95       	lsr	r23
    ac22:	67 95       	ror	r22
      uint16_t target_addr = ((uint32_t)sym->st_value + (uint32_t)rela->r_addend) >> 1; // Word address, relative to start of .text section
    ac24:	f3 01       	movw	r30, r6
    ac26:	80 81       	ld	r24, Z
    ac28:	91 81       	ldd	r25, Z+1	; 0x01
    ac2a:	aa 27       	eor	r26, r26
    ac2c:	bb 27       	eor	r27, r27
    ac2e:	f5 01       	movw	r30, r10
    ac30:	24 81       	ldd	r18, Z+4	; 0x04
    ac32:	35 81       	ldd	r19, Z+5	; 0x05
    ac34:	44 27       	eor	r20, r20
    ac36:	55 27       	eor	r21, r21
    ac38:	82 0f       	add	r24, r18
    ac3a:	93 1f       	adc	r25, r19
    ac3c:	a4 1f       	adc	r26, r20
    ac3e:	b5 1f       	adc	r27, r21
    ac40:	b6 95       	lsr	r27
    ac42:	a7 95       	ror	r26
    ac44:	97 95       	ror	r25
    ac46:	87 95       	ror	r24
      int16_t k = (int16_t)target_addr - (int16_t)pc - 1; // According to AVR ISA: target_addr = pc + k + 1
    ac48:	86 1b       	sub	r24, r22
    ac4a:	97 0b       	sbc	r25, r23
    ac4c:	01 97       	sbiw	r24, 0x01	; 1
      instr[0] |= (uint8_t) ((k << 3) & 0xf8);
    ac4e:	38 2f       	mov	r19, r24
    ac50:	33 0f       	add	r19, r19
    ac52:	33 0f       	add	r19, r19
    ac54:	33 0f       	add	r19, r19
    ac56:	29 81       	ldd	r18, Y+1	; 0x01
    ac58:	23 2b       	or	r18, r19
    ac5a:	29 83       	std	Y+1, r18	; 0x01
      instr[1] |= (uint8_t) ((k >> 5) & 0x03);
    ac5c:	fe 01       	movw	r30, r28
    ac5e:	31 96       	adiw	r30, 0x01	; 1
    ac60:	a5 e0       	ldi	r26, 0x05	; 5
    ac62:	95 95       	asr	r25
    ac64:	87 95       	ror	r24
    ac66:	aa 95       	dec	r26
    ac68:	e1 f7       	brne	.-8      	; 0xac62
    ac6a:	98 2f       	mov	r25, r24
    ac6c:	93 70       	andi	r25, 0x03	; 3
    ac6e:	81 81       	ldd	r24, Z+1	; 0x01
    ac70:	89 2b       	or	r24, r25
    ac72:	bd c0       	rjmp	.+378    	; 0xadee
      ker_codemem_write(mdesc->cmhdl, KER_DFT_LOADER_PID, (void*)instr, 2, reloc_offset);    
		
    break;
  }
    
  case R_AVR_13_PCREL:
    {
      uint16_t pc = rela->r_offset >> 1; // Word address, relative to start of .text section
    ac74:	f5 01       	movw	r30, r10
    ac76:	60 81       	ld	r22, Z
    ac78:	71 81       	ldd	r23, Z+1	; 0x01
    ac7a:	76 95       	lsr	r23
    ac7c:	67 95       	ror	r22
      uint16_t target_addr = ((uint32_t)sym->st_value + (uint32_t)rela->r_addend) >> 1; // Word address, relative to start of .text section
    ac7e:	f3 01       	movw	r30, r6
    ac80:	80 81       	ld	r24, Z
    ac82:	91 81       	ldd	r25, Z+1	; 0x01
    ac84:	aa 27       	eor	r26, r26
    ac86:	bb 27       	eor	r27, r27
    ac88:	f5 01       	movw	r30, r10
    ac8a:	24 81       	ldd	r18, Z+4	; 0x04
    ac8c:	35 81       	ldd	r19, Z+5	; 0x05
    ac8e:	44 27       	eor	r20, r20
    ac90:	55 27       	eor	r21, r21
    ac92:	82 0f       	add	r24, r18
    ac94:	93 1f       	adc	r25, r19
    ac96:	a4 1f       	adc	r26, r20
    ac98:	b5 1f       	adc	r27, r21
    ac9a:	b6 95       	lsr	r27
    ac9c:	a7 95       	ror	r26
    ac9e:	97 95       	ror	r25
    aca0:	87 95       	ror	r24
      int16_t k = (int16_t)target_addr - (int16_t)pc - 1; // According to AVR ISA: target_addr = pc + k + 1
    aca2:	86 1b       	sub	r24, r22
    aca4:	97 0b       	sbc	r25, r23
    aca6:	01 97       	sbiw	r24, 0x01	; 1
      instr[0] = (uint8_t) k;
    aca8:	89 83       	std	Y+1, r24	; 0x01
      instr[1] = (instr[1] & 0xF0) | ((k >> 8) & 0x0F);
    acaa:	fe 01       	movw	r30, r28
    acac:	31 96       	adiw	r30, 0x01	; 1
    acae:	21 81       	ldd	r18, Z+1	; 0x01
    acb0:	20 7f       	andi	r18, 0xF0	; 240
    acb2:	89 2f       	mov	r24, r25
    acb4:	99 0f       	add	r25, r25
    acb6:	99 0b       	sbc	r25, r25
    acb8:	8f 70       	andi	r24, 0x0F	; 15
    acba:	28 2b       	or	r18, r24
    acbc:	21 83       	std	Z+1, r18	; 0x01
      ker_codemem_write(mdesc->cmhdl, KER_DFT_LOADER_PID, (void*)instr, 2, reloc_offset);    
    acbe:	84 01       	movw	r16, r8
    acc0:	22 e0       	ldi	r18, 0x02	; 2
    acc2:	30 e0       	ldi	r19, 0x00	; 0
    acc4:	af 01       	movw	r20, r30
    acc6:	a5 c0       	rjmp	.+330    	; 0xae12
      break;
    }

  case R_AVR_16:
    instr[0] = (uint8_t)reloc_addr;
    instr[1] = (uint8_t)(reloc_addr >> 8);
    ker_codemem_write(mdesc->cmhdl, KER_DFT_LOADER_PID, (void*)instr, 2, reloc_offset);    
    break;
    
  case R_AVR_16_PM:
    reloc_addr = (reloc_addr >> 1);
    acc8:	f6 94       	lsr	r15
    acca:	e7 94       	ror	r14
    accc:	d7 94       	ror	r13
    acce:	c7 94       	ror	r12
    instr[0] = (uint8_t)reloc_addr;
    acd0:	c9 82       	std	Y+1, r12	; 0x01
    instr[1] = (uint8_t)(reloc_addr >> 8);
    acd2:	fe 01       	movw	r30, r28
    acd4:	31 96       	adiw	r30, 0x01	; 1
    acd6:	bb 27       	eor	r27, r27
    acd8:	af 2d       	mov	r26, r15
    acda:	9e 2d       	mov	r25, r14
    acdc:	8d 2d       	mov	r24, r13
    acde:	87 c0       	rjmp	.+270    	; 0xadee
    ker_codemem_write(mdesc->cmhdl, KER_DFT_LOADER_PID, (void*)instr, 2, reloc_offset);    
    break;

  case R_AVR_LO8_LDI:
    WRITE_LDI(instr, (uint8_t)reloc_addr);
    ker_codemem_write(mdesc->cmhdl, KER_DFT_LOADER_PID, (void*)instr, 2, reloc_offset);    
    break;

  case R_AVR_HI8_LDI:
    WRITE_LDI(instr, (uint8_t)(reloc_addr >> 8));
    ker_codemem_write(mdesc->cmhdl, KER_DFT_LOADER_PID, (void*)instr, 2, reloc_offset);    
    break;

  case R_AVR_HH8_LDI:
    WRITE_LDI(instr, (uint8_t)(reloc_addr >> 16));
    ker_codemem_write(mdesc->cmhdl, KER_DFT_LOADER_PID, (void*)instr, 2, reloc_offset);    
    break;
    
  case R_AVR_LO8_LDI_NEG:
    WRITE_LDI(instr, (uint8_t)(-reloc_addr));
    ker_codemem_write(mdesc->cmhdl, KER_DFT_LOADER_PID, (void*)instr, 2, reloc_offset);    
    break;

  case R_AVR_HI8_LDI_NEG:
    WRITE_LDI(instr, (uint8_t)((-reloc_addr) >> 8));
    ker_codemem_write(mdesc->cmhdl, KER_DFT_LOADER_PID, (void*)instr, 2, reloc_offset);    
    break;
    
  case R_AVR_HH8_LDI_NEG:
    WRITE_LDI(instr, (uint8_t)((-reloc_addr) >> 16));
    ker_codemem_write(mdesc->cmhdl, KER_DFT_LOADER_PID, (void*)instr, 2, reloc_offset);    
    break;

  case R_AVR_LO8_LDI_PM:
    WRITE_LDI(instr, (uint8_t)(reloc_addr >> 1));
    ker_codemem_write(mdesc->cmhdl, KER_DFT_LOADER_PID, (void*)instr, 2, reloc_offset);    
    break;

  case R_AVR_HI8_LDI_PM:
    WRITE_LDI(instr, (uint8_t)(reloc_addr >> 9));
    ker_codemem_write(mdesc->cmhdl, KER_DFT_LOADER_PID, (void*)instr, 2, reloc_offset);    
    break;

  case R_AVR_HH8_LDI_PM:
    WRITE_LDI(instr, (uint8_t)(reloc_addr >> 17));
    ker_codemem_write(mdesc->cmhdl, KER_DFT_LOADER_PID, (void*)instr, 2, reloc_offset);    
    break;

  case R_AVR_LO8_LDI_PM_NEG:
    WRITE_LDI(instr, (uint8_t)((-reloc_addr) >> 1));
    ker_codemem_write(mdesc->cmhdl, KER_DFT_LOADER_PID, (void*)instr, 2, reloc_offset);    
    break;

  case R_AVR_HI8_LDI_PM_NEG:
    WRITE_LDI(instr, (uint8_t)((-reloc_addr) >> 9));
    ker_codemem_write(mdesc->cmhdl, KER_DFT_LOADER_PID, (void*)instr, 2, reloc_offset);    
    break;

  case R_AVR_HH8_LDI_PM_NEG:
    WRITE_LDI(instr, (uint8_t)((-reloc_addr) >> 17));
    ker_codemem_write(mdesc->cmhdl, KER_DFT_LOADER_PID, (void*)instr, 2, reloc_offset);    
    break;

  case R_AVR_CALL:
	//
    reloc_addr = (reloc_addr >> 1);
    instr[2] = (uint8_t)(reloc_addr);
    instr[3] = (uint8_t)(reloc_addr >> 8);
    ker_codemem_write(mdesc->cmhdl, KER_DFT_LOADER_PID, (void*)instr, 4, reloc_offset);
    break;

  default:
    break;
  }

  return 0;
}
//----------------------------------------------------------
static inline void WRITE_LDI(uint8_t* instr, uint8_t byte)
{							
    ace0:	fe 01       	movw	r30, r28
    ace2:	31 96       	adiw	r30, 0x01	; 1
    ace4:	33 c0       	rjmp	.+102    	; 0xad4c
    ace6:	fe 01       	movw	r30, r28
    ace8:	31 96       	adiw	r30, 0x01	; 1
    acea:	bb 27       	eor	r27, r27
    acec:	af 2d       	mov	r26, r15
    acee:	9e 2d       	mov	r25, r14
    acf0:	8d 2d       	mov	r24, r13
    acf2:	71 c0       	rjmp	.+226    	; 0xadd6
    acf4:	fe 01       	movw	r30, r28
    acf6:	31 96       	adiw	r30, 0x01	; 1
    acf8:	c7 01       	movw	r24, r14
    acfa:	aa 27       	eor	r26, r26
    acfc:	bb 27       	eor	r27, r27
    acfe:	6b c0       	rjmp	.+214    	; 0xadd6
    ad00:	fe 01       	movw	r30, r28
    ad02:	31 96       	adiw	r30, 0x01	; 1
    ad04:	2c 2d       	mov	r18, r12
    ad06:	21 95       	neg	r18
    ad08:	67 c0       	rjmp	.+206    	; 0xadd8
    ad0a:	fe 01       	movw	r30, r28
    ad0c:	31 96       	adiw	r30, 0x01	; 1
    ad0e:	88 27       	eor	r24, r24
    ad10:	99 27       	eor	r25, r25
    ad12:	dc 01       	movw	r26, r24
    ad14:	8c 19       	sub	r24, r12
    ad16:	9d 09       	sbc	r25, r13
    ad18:	ae 09       	sbc	r26, r14
    ad1a:	bf 09       	sbc	r27, r15
    ad1c:	89 2f       	mov	r24, r25
    ad1e:	9a 2f       	mov	r25, r26
    ad20:	ab 2f       	mov	r26, r27
    ad22:	bb 27       	eor	r27, r27
    ad24:	58 c0       	rjmp	.+176    	; 0xadd6
    ad26:	fe 01       	movw	r30, r28
    ad28:	31 96       	adiw	r30, 0x01	; 1
    ad2a:	88 27       	eor	r24, r24
    ad2c:	99 27       	eor	r25, r25
    ad2e:	dc 01       	movw	r26, r24
    ad30:	8c 19       	sub	r24, r12
    ad32:	9d 09       	sbc	r25, r13
    ad34:	ae 09       	sbc	r26, r14
    ad36:	bf 09       	sbc	r27, r15
    ad38:	cd 01       	movw	r24, r26
    ad3a:	aa 27       	eor	r26, r26
    ad3c:	bb 27       	eor	r27, r27
    ad3e:	4b c0       	rjmp	.+150    	; 0xadd6
    ad40:	fe 01       	movw	r30, r28
    ad42:	31 96       	adiw	r30, 0x01	; 1
    ad44:	f6 94       	lsr	r15
    ad46:	e7 94       	ror	r14
    ad48:	d7 94       	ror	r13
    ad4a:	c7 94       	ror	r12
    ad4c:	2c 2d       	mov	r18, r12
    ad4e:	44 c0       	rjmp	.+136    	; 0xadd8
    ad50:	fe 01       	movw	r30, r28
    ad52:	31 96       	adiw	r30, 0x01	; 1
    ad54:	69 e0       	ldi	r22, 0x09	; 9
    ad56:	f6 94       	lsr	r15
    ad58:	e7 94       	ror	r14
    ad5a:	d7 94       	ror	r13
    ad5c:	c7 94       	ror	r12
    ad5e:	6a 95       	dec	r22
    ad60:	d1 f7       	brne	.-12     	; 0xad56
    ad62:	f4 cf       	rjmp	.-24     	; 0xad4c
    ad64:	fe 01       	movw	r30, r28
    ad66:	31 96       	adiw	r30, 0x01	; 1
    ad68:	51 e1       	ldi	r21, 0x11	; 17
    ad6a:	f6 94       	lsr	r15
    ad6c:	e7 94       	ror	r14
    ad6e:	d7 94       	ror	r13
    ad70:	c7 94       	ror	r12
    ad72:	5a 95       	dec	r21
    ad74:	d1 f7       	brne	.-12     	; 0xad6a
    ad76:	ea cf       	rjmp	.-44     	; 0xad4c
    ad78:	fe 01       	movw	r30, r28
    ad7a:	31 96       	adiw	r30, 0x01	; 1
    ad7c:	88 27       	eor	r24, r24
    ad7e:	99 27       	eor	r25, r25
    ad80:	dc 01       	movw	r26, r24
    ad82:	8c 19       	sub	r24, r12
    ad84:	9d 09       	sbc	r25, r13
    ad86:	ae 09       	sbc	r26, r14
    ad88:	bf 09       	sbc	r27, r15
    ad8a:	b6 95       	lsr	r27
    ad8c:	a7 95       	ror	r26
    ad8e:	97 95       	ror	r25
    ad90:	87 95       	ror	r24
    ad92:	21 c0       	rjmp	.+66     	; 0xadd6
    ad94:	fe 01       	movw	r30, r28
    ad96:	31 96       	adiw	r30, 0x01	; 1
    ad98:	88 27       	eor	r24, r24
    ad9a:	99 27       	eor	r25, r25
    ad9c:	dc 01       	movw	r26, r24
    ad9e:	8c 19       	sub	r24, r12
    ada0:	9d 09       	sbc	r25, r13
    ada2:	ae 09       	sbc	r26, r14
    ada4:	bf 09       	sbc	r27, r15
    ada6:	39 e0       	ldi	r19, 0x09	; 9
    ada8:	b6 95       	lsr	r27
    adaa:	a7 95       	ror	r26
    adac:	97 95       	ror	r25
    adae:	87 95       	ror	r24
    adb0:	3a 95       	dec	r19
    adb2:	d1 f7       	brne	.-12     	; 0xada8
    adb4:	10 c0       	rjmp	.+32     	; 0xadd6
    adb6:	fe 01       	movw	r30, r28
    adb8:	31 96       	adiw	r30, 0x01	; 1
    adba:	88 27       	eor	r24, r24
    adbc:	99 27       	eor	r25, r25
    adbe:	dc 01       	movw	r26, r24
    adc0:	8c 19       	sub	r24, r12
    adc2:	9d 09       	sbc	r25, r13
    adc4:	ae 09       	sbc	r26, r14
    adc6:	bf 09       	sbc	r27, r15
    adc8:	21 e1       	ldi	r18, 0x11	; 17
    adca:	b6 95       	lsr	r27
    adcc:	a7 95       	ror	r26
    adce:	97 95       	ror	r25
    add0:	87 95       	ror	r24
    add2:	2a 95       	dec	r18
    add4:	d1 f7       	brne	.-12     	; 0xadca
    add6:	28 2f       	mov	r18, r24
  instr[0] = (instr[0] & 0xf0) | (byte & 0x0f);	
    add8:	89 81       	ldd	r24, Y+1	; 0x01
    adda:	80 7f       	andi	r24, 0xF0	; 240
    addc:	92 2f       	mov	r25, r18
    adde:	9f 70       	andi	r25, 0x0F	; 15
    ade0:	89 2b       	or	r24, r25
    ade2:	89 83       	std	Y+1, r24	; 0x01
  //  instr[1] = (instr[0] & 0xf0) | (byte >> 4);
  instr[1] = (instr[1] & 0xf0) | (byte >> 4);
    ade4:	81 81       	ldd	r24, Z+1	; 0x01
    ade6:	80 7f       	andi	r24, 0xF0	; 240
    ade8:	22 95       	swap	r18
    adea:	2f 70       	andi	r18, 0x0F	; 15
    adec:	82 2b       	or	r24, r18
    adee:	81 83       	std	Z+1, r24	; 0x01
    adf0:	66 cf       	rjmp	.-308    	; 0xacbe
    adf2:	f6 94       	lsr	r15
    adf4:	e7 94       	ror	r14
    adf6:	d7 94       	ror	r13
    adf8:	c7 94       	ror	r12
    adfa:	cb 82       	std	Y+3, r12	; 0x03
    adfc:	bb 27       	eor	r27, r27
    adfe:	af 2d       	mov	r26, r15
    ae00:	9e 2d       	mov	r25, r14
    ae02:	8d 2d       	mov	r24, r13
    ae04:	8c 83       	std	Y+4, r24	; 0x04
    ae06:	84 01       	movw	r16, r8
    ae08:	24 e0       	ldi	r18, 0x04	; 4
    ae0a:	30 e0       	ldi	r19, 0x00	; 0
    ae0c:	ae 01       	movw	r20, r28
    ae0e:	4f 5f       	subi	r20, 0xFF	; 255
    ae10:	5f 4f       	sbci	r21, 0xFF	; 255
    ae12:	61 e1       	ldi	r22, 0x11	; 17
    ae14:	f2 01       	movw	r30, r4
    ae16:	80 81       	ld	r24, Z
    ae18:	91 81       	ldd	r25, Z+1	; 0x01
    ae1a:	0e 94 3c 20 	call	0x4078
    ae1e:	80 e0       	ldi	r24, 0x00	; 0
    ae20:	90 e0       	ldi	r25, 0x00	; 0
    ae22:	24 96       	adiw	r28, 0x04	; 4
    ae24:	0f b6       	in	r0, 0x3f	; 63
    ae26:	f8 94       	cli
    ae28:	de bf       	out	0x3e, r29	; 62
    ae2a:	0f be       	out	0x3f, r0	; 63
    ae2c:	cd bf       	out	0x3d, r28	; 61
    ae2e:	df 91       	pop	r29
    ae30:	cf 91       	pop	r28
    ae32:	1f 91       	pop	r17
    ae34:	0f 91       	pop	r16
    ae36:	ff 90       	pop	r15
    ae38:	ef 90       	pop	r14
    ae3a:	df 90       	pop	r13
    ae3c:	cf 90       	pop	r12
    ae3e:	bf 90       	pop	r11
    ae40:	af 90       	pop	r10
    ae42:	9f 90       	pop	r9
    ae44:	8f 90       	pop	r8
    ae46:	7f 90       	pop	r7
    ae48:	6f 90       	pop	r6
    ae4a:	5f 90       	pop	r5
    ae4c:	4f 90       	pop	r4
    ae4e:	08 95       	ret

0000ae50 <melf_begin>:
  return (mod_header_ptr)(FlashGetProgmem(header_byte_addr));
}
//----------------------------------------------------------
int8_t melf_begin(melf_desc_t* mdesc, codemem_t h)
{
    ae50:	cf 92       	push	r12
    ae52:	df 92       	push	r13
    ae54:	ef 92       	push	r14
    ae56:	ff 92       	push	r15
    ae58:	0f 93       	push	r16
    ae5a:	1f 93       	push	r17
    ae5c:	cf 93       	push	r28
    ae5e:	df 93       	push	r29
    ae60:	7c 01       	movw	r14, r24
    ae62:	eb 01       	movw	r28, r22
  if (ker_codemem_read(h, KER_DFT_LOADER_PID, (void*)&(mdesc->mhdr), sizeof(Melf_Mhdr), 0) != SOS_OK){
    ae64:	82 e0       	ldi	r24, 0x02	; 2
    ae66:	c8 2e       	mov	r12, r24
    ae68:	d1 2c       	mov	r13, r1
    ae6a:	ce 0c       	add	r12, r14
    ae6c:	df 1c       	adc	r13, r15
    ae6e:	00 e0       	ldi	r16, 0x00	; 0
    ae70:	10 e0       	ldi	r17, 0x00	; 0
    ae72:	24 e0       	ldi	r18, 0x04	; 4
    ae74:	30 e0       	ldi	r19, 0x00	; 0
    ae76:	a6 01       	movw	r20, r12
    ae78:	61 e1       	ldi	r22, 0x11	; 17
    ae7a:	ce 01       	movw	r24, r28
    ae7c:	0e 94 d2 20 	call	0x41a4
    ae80:	88 23       	and	r24, r24
    ae82:	19 f0       	breq	.+6      	; 0xae8a
    return -EFAULT;
    ae84:	82 ef       	ldi	r24, 0xF2	; 242
    ae86:	9f ef       	ldi	r25, 0xFF	; 255
    ae88:	12 c0       	rjmp	.+36     	; 0xaeae
  }
  entoh_Mhdr(&(mdesc->mhdr));
    ae8a:	c6 01       	movw	r24, r12
    ae8c:	0e 94 1a 59 	call	0xb234
  mdesc->cmhdl = h;
    ae90:	f7 01       	movw	r30, r14
    ae92:	c0 83       	st	Z, r28
    ae94:	d1 83       	std	Z+1, r29	; 0x01
  // Get the base word address of the Mini-ELF module
  mdesc->base_addr = ker_codemem_get_start_address(mdesc->cmhdl);
    ae96:	ce 01       	movw	r24, r28
    ae98:	0e 94 c9 21 	call	0x4392
    ae9c:	dc 01       	movw	r26, r24
    ae9e:	cb 01       	movw	r24, r22
    aea0:	f7 01       	movw	r30, r14
    aea2:	86 83       	std	Z+6, r24	; 0x06
    aea4:	97 83       	std	Z+7, r25	; 0x07
    aea6:	a0 87       	std	Z+8, r26	; 0x08
    aea8:	b1 87       	std	Z+9, r27	; 0x09
  return SOS_OK;
    aeaa:	80 e0       	ldi	r24, 0x00	; 0
    aeac:	90 e0       	ldi	r25, 0x00	; 0
    aeae:	df 91       	pop	r29
    aeb0:	cf 91       	pop	r28
    aeb2:	1f 91       	pop	r17
    aeb4:	0f 91       	pop	r16
    aeb6:	ff 90       	pop	r15
    aeb8:	ef 90       	pop	r14
    aeba:	df 90       	pop	r13
    aebc:	cf 90       	pop	r12
    aebe:	08 95       	ret

0000aec0 <melf_read_shdr_ndx>:
}
//----------------------------------------------------------
int8_t melf_read_progbits_shdr(melf_desc_t* mdesc, Melf_Shdr* progshdr)
{
  Melf_Half i;
  for (i = 0; i < mdesc->mhdr.m_shnum; i++){
    if (melf_read_shdr_ndx(mdesc, progshdr, i) != SOS_OK){
      return -EFAULT;
    }
    if (SHT_PROGBITS == progshdr->sh_type){
      return SOS_OK;
    }
  }
  return -EFAULT;
}
//----------------------------------------------------------
// STATIC FUNCTIONS
//----------------------------------------------------------
static int8_t melf_read_shdr_ndx(melf_desc_t* mdesc, Melf_Shdr* shdr, Melf_Half shndx)
{
    aec0:	0f 93       	push	r16
    aec2:	1f 93       	push	r17
    aec4:	cf 93       	push	r28
    aec6:	df 93       	push	r29
    aec8:	fc 01       	movw	r30, r24
    aeca:	eb 01       	movw	r28, r22
  if (shndx >= mdesc->mhdr.m_shnum){
    aecc:	84 81       	ldd	r24, Z+4	; 0x04
    aece:	48 17       	cp	r20, r24
    aed0:	18 f0       	brcs	.+6      	; 0xaed8
    return -EINVAL;
    aed2:	8a ee       	ldi	r24, 0xEA	; 234
    aed4:	9f ef       	ldi	r25, 0xFF	; 255
    aed6:	1b c0       	rjmp	.+54     	; 0xaf0e
  }
  if (ker_codemem_read(mdesc->cmhdl, KER_DFT_LOADER_PID, (void*)shdr, sizeof(Melf_Shdr), 
    aed8:	84 2f       	mov	r24, r20
    aeda:	99 27       	eor	r25, r25
    aedc:	23 e0       	ldi	r18, 0x03	; 3
    aede:	88 0f       	add	r24, r24
    aee0:	99 1f       	adc	r25, r25
    aee2:	2a 95       	dec	r18
    aee4:	e1 f7       	brne	.-8      	; 0xaede
    aee6:	04 96       	adiw	r24, 0x04	; 4
    aee8:	8c 01       	movw	r16, r24
    aeea:	28 e0       	ldi	r18, 0x08	; 8
    aeec:	30 e0       	ldi	r19, 0x00	; 0
    aeee:	ab 01       	movw	r20, r22
    aef0:	61 e1       	ldi	r22, 0x11	; 17
    aef2:	80 81       	ld	r24, Z
    aef4:	91 81       	ldd	r25, Z+1	; 0x01
    aef6:	0e 94 d2 20 	call	0x41a4
    aefa:	88 23       	and	r24, r24
    aefc:	19 f0       	breq	.+6      	; 0xaf04
		       shndx * sizeof(Melf_Shdr) + sizeof(Melf_Mhdr)) != SOS_OK) {
    return -EFAULT;
    aefe:	82 ef       	ldi	r24, 0xF2	; 242
    af00:	9f ef       	ldi	r25, 0xFF	; 255
    af02:	05 c0       	rjmp	.+10     	; 0xaf0e
  }
  entoh_Shdr(shdr);
    af04:	ce 01       	movw	r24, r28
    af06:	0e 94 1b 59 	call	0xb236
  return SOS_OK;
    af0a:	80 e0       	ldi	r24, 0x00	; 0
    af0c:	90 e0       	ldi	r25, 0x00	; 0
    af0e:	df 91       	pop	r29
    af10:	cf 91       	pop	r28
    af12:	1f 91       	pop	r17
    af14:	0f 91       	pop	r16
    af16:	08 95       	ret

0000af18 <melf_read_progbits_shdr>:
    af18:	ff 92       	push	r15
    af1a:	0f 93       	push	r16
    af1c:	1f 93       	push	r17
    af1e:	cf 93       	push	r28
    af20:	df 93       	push	r29
    af22:	ec 01       	movw	r28, r24
    af24:	8b 01       	movw	r16, r22
    af26:	ff 24       	eor	r15, r15
    af28:	8c 81       	ldd	r24, Y+4	; 0x04
    af2a:	f8 16       	cp	r15, r24
    af2c:	80 f4       	brcc	.+32     	; 0xaf4e
    af2e:	4f 2d       	mov	r20, r15
    af30:	b8 01       	movw	r22, r16
    af32:	ce 01       	movw	r24, r28
    af34:	0e 94 60 57 	call	0xaec0
    af38:	88 23       	and	r24, r24
    af3a:	49 f4       	brne	.+18     	; 0xaf4e
    af3c:	f8 01       	movw	r30, r16
    af3e:	81 81       	ldd	r24, Z+1	; 0x01
    af40:	81 30       	cpi	r24, 0x01	; 1
    af42:	19 f4       	brne	.+6      	; 0xaf4a
    af44:	80 e0       	ldi	r24, 0x00	; 0
    af46:	90 e0       	ldi	r25, 0x00	; 0
    af48:	04 c0       	rjmp	.+8      	; 0xaf52
    af4a:	f3 94       	inc	r15
    af4c:	ed cf       	rjmp	.-38     	; 0xaf28
    af4e:	82 ef       	ldi	r24, 0xF2	; 242
    af50:	9f ef       	ldi	r25, 0xFF	; 255
    af52:	df 91       	pop	r29
    af54:	cf 91       	pop	r28
    af56:	1f 91       	pop	r17
    af58:	0f 91       	pop	r16
    af5a:	ff 90       	pop	r15
    af5c:	08 95       	ret

0000af5e <melf_read_symbol>:
}
//----------------------------------------------------------
/*
static int8_t melf_read_shdr_id(melf_desc_t* mdesc, Melf_Shdr* shdr, Melf_Half shid)
{
  int i;
  for (i = 0; i < mdesc->mhdr.m_shnum; i++){
    if (melf_read_shdr_ndx(mdesc, shdr, i) != SOS_OK){
      return -EFAULT;
    }
    if (shdr->sh_id == shid){
      return SOS_OK;
    }
  }
  return -ESRCH;
}
*/
//----------------------------------------------------------
static int8_t melf_read_symtab_shdr(melf_desc_t* mdesc, Melf_Shdr* symshdr)
{
  Melf_Half i;
  for (i = 0; i < mdesc->mhdr.m_shnum; i++){
    if (melf_read_shdr_ndx(mdesc, symshdr, i) != SOS_OK){
      return -EFAULT;
    }
    if (SHT_SYMTAB == symshdr->sh_type){
      return SOS_OK;
    }
  }
  return -EFAULT;
}
//----------------------------------------------------------
/*
static int8_t melf_read_relatab_shdr(melf_desc_t* mdesc, Melf_Shdr* relashdr)
{
  Melf_Half i;
  for (i = 0; i < mdesc->mhdr.m_shnum; i++){
    if (melf_read_shdr_ndx(mdesc, relashdr, i) != SOS_OK){
      return -EFAULT;
    }
    if (SHT_RELA == relashdr->sh_type){
      return SOS_OK;
    }
  }
  return -EFAULT;
}
*/
//----------------------------------------------------------
static int8_t melf_read_symbol(melf_desc_t* mdesc, Melf_Shdr* symshdr, Melf_Word symndx, Melf_Sym* sym)
{
    af5e:	0f 93       	push	r16
    af60:	1f 93       	push	r17
    af62:	cf 93       	push	r28
    af64:	df 93       	push	r29
    af66:	dc 01       	movw	r26, r24
    af68:	fb 01       	movw	r30, r22
    af6a:	e9 01       	movw	r28, r18
  if (ker_codemem_read(mdesc->cmhdl, KER_DFT_LOADER_PID, (void*)sym, sizeof(Melf_Sym),
    af6c:	44 0f       	add	r20, r20
    af6e:	55 1f       	adc	r21, r21
    af70:	44 0f       	add	r20, r20
    af72:	55 1f       	adc	r21, r21
    af74:	82 81       	ldd	r24, Z+2	; 0x02
    af76:	93 81       	ldd	r25, Z+3	; 0x03
    af78:	84 0f       	add	r24, r20
    af7a:	95 1f       	adc	r25, r21
    af7c:	8c 01       	movw	r16, r24
    af7e:	24 e0       	ldi	r18, 0x04	; 4
    af80:	30 e0       	ldi	r19, 0x00	; 0
    af82:	ae 01       	movw	r20, r28
    af84:	61 e1       	ldi	r22, 0x11	; 17
    af86:	8d 91       	ld	r24, X+
    af88:	9c 91       	ld	r25, X
    af8a:	0e 94 d2 20 	call	0x41a4
    af8e:	88 23       	and	r24, r24
    af90:	19 f0       	breq	.+6      	; 0xaf98
		       symshdr->sh_offset + symndx * sizeof(Melf_Sym)) != SOS_OK)
    return -EFAULT;
    af92:	82 ef       	ldi	r24, 0xF2	; 242
    af94:	9f ef       	ldi	r25, 0xFF	; 255
    af96:	05 c0       	rjmp	.+10     	; 0xafa2
  entoh_Sym(sym);
    af98:	ce 01       	movw	r24, r28
    af9a:	0e 94 1c 59 	call	0xb238
  return SOS_OK;
    af9e:	80 e0       	ldi	r24, 0x00	; 0
    afa0:	90 e0       	ldi	r25, 0x00	; 0
    afa2:	df 91       	pop	r29
    afa4:	cf 91       	pop	r28
    afa6:	1f 91       	pop	r17
    afa8:	0f 91       	pop	r16
    afaa:	08 95       	ret

0000afac <melf_get_header_address>:
    afac:	cf 92       	push	r12
    afae:	df 92       	push	r13
    afb0:	ff 92       	push	r15
    afb2:	0f 93       	push	r16
    afb4:	1f 93       	push	r17
    afb6:	cf 93       	push	r28
    afb8:	df 93       	push	r29
    afba:	cd b7       	in	r28, 0x3d	; 61
    afbc:	de b7       	in	r29, 0x3e	; 62
    afbe:	6e 97       	sbiw	r28, 0x1e	; 30
    afc0:	0f b6       	in	r0, 0x3f	; 63
    afc2:	f8 94       	cli
    afc4:	de bf       	out	0x3e, r29	; 62
    afc6:	0f be       	out	0x3f, r0	; 63
    afc8:	cd bf       	out	0x3d, r28	; 61
    afca:	bc 01       	movw	r22, r24
    afcc:	ce 01       	movw	r24, r28
    afce:	01 96       	adiw	r24, 0x01	; 1
    afd0:	0e 94 28 57 	call	0xae50
    afd4:	88 23       	and	r24, r24
    afd6:	79 f5       	brne	.+94     	; 0xb036
    afd8:	be 01       	movw	r22, r28
    afda:	6d 5e       	subi	r22, 0xED	; 237
    afdc:	7f 4f       	sbci	r23, 0xFF	; 255
    afde:	ce 01       	movw	r24, r28
    afe0:	01 96       	adiw	r24, 0x01	; 1
    afe2:	0e 94 8c 57 	call	0xaf18
    afe6:	88 23       	and	r24, r24
    afe8:	31 f5       	brne	.+76     	; 0xb036
    afea:	6e 01       	movw	r12, r28
    afec:	08 94       	sec
    afee:	c1 1c       	adc	r12, r1
    aff0:	d1 1c       	adc	r13, r1
    aff2:	8e 01       	movw	r16, r28
    aff4:	05 5f       	subi	r16, 0xF5	; 245
    aff6:	1f 4f       	sbci	r17, 0xFF	; 255
    aff8:	f8 2e       	mov	r15, r24
    affa:	8d 81       	ldd	r24, Y+5	; 0x05
    affc:	f8 16       	cp	r15, r24
    affe:	d8 f4       	brcc	.+54     	; 0xb036
    b000:	4f 2d       	mov	r20, r15
    b002:	b8 01       	movw	r22, r16
    b004:	c6 01       	movw	r24, r12
    b006:	0e 94 60 57 	call	0xaec0
    b00a:	88 23       	and	r24, r24
    b00c:	a1 f4       	brne	.+40     	; 0xb036
    b00e:	f8 01       	movw	r30, r16
    b010:	81 81       	ldd	r24, Z+1	; 0x01
    b012:	82 30       	cpi	r24, 0x02	; 2
    b014:	21 f0       	breq	.+8      	; 0xb01e
    b016:	f3 94       	inc	r15
    b018:	f6 01       	movw	r30, r12
    b01a:	84 81       	ldd	r24, Z+4	; 0x04
    b01c:	ef cf       	rjmp	.-34     	; 0xaffc
    b01e:	9e 01       	movw	r18, r28
    b020:	25 5e       	subi	r18, 0xE5	; 229
    b022:	3f 4f       	sbci	r19, 0xFF	; 255
    b024:	4b 81       	ldd	r20, Y+3	; 0x03
    b026:	5c 81       	ldd	r21, Y+4	; 0x04
    b028:	b8 01       	movw	r22, r16
    b02a:	ce 01       	movw	r24, r28
    b02c:	01 96       	adiw	r24, 0x01	; 1
    b02e:	0e 94 af 57 	call	0xaf5e
    b032:	88 23       	and	r24, r24
    b034:	19 f0       	breq	.+6      	; 0xb03c
    b036:	80 e0       	ldi	r24, 0x00	; 0
    b038:	90 e0       	ldi	r25, 0x00	; 0
    b03a:	19 c0       	rjmp	.+50     	; 0xb06e
    b03c:	8d 89       	ldd	r24, Y+21	; 0x15
    b03e:	9e 89       	ldd	r25, Y+22	; 0x16
    b040:	9c 01       	movw	r18, r24
    b042:	44 27       	eor	r20, r20
    b044:	55 27       	eor	r21, r21
    b046:	8f 81       	ldd	r24, Y+7	; 0x07
    b048:	98 85       	ldd	r25, Y+8	; 0x08
    b04a:	a9 85       	ldd	r26, Y+9	; 0x09
    b04c:	ba 85       	ldd	r27, Y+10	; 0x0a
    b04e:	82 0f       	add	r24, r18
    b050:	93 1f       	adc	r25, r19
    b052:	a4 1f       	adc	r26, r20
    b054:	b5 1f       	adc	r27, r21
    b056:	2b 8d       	ldd	r18, Y+27	; 0x1b
    b058:	3c 8d       	ldd	r19, Y+28	; 0x1c
    b05a:	44 27       	eor	r20, r20
    b05c:	55 27       	eor	r21, r21
    b05e:	82 0f       	add	r24, r18
    b060:	93 1f       	adc	r25, r19
    b062:	a4 1f       	adc	r26, r20
    b064:	b5 1f       	adc	r27, r21
    b066:	b6 95       	lsr	r27
    b068:	a7 95       	ror	r26
    b06a:	97 95       	ror	r25
    b06c:	87 95       	ror	r24
    b06e:	6e 96       	adiw	r28, 0x1e	; 30
    b070:	0f b6       	in	r0, 0x3f	; 63
    b072:	f8 94       	cli
    b074:	de bf       	out	0x3e, r29	; 62
    b076:	0f be       	out	0x3f, r0	; 63
    b078:	cd bf       	out	0x3d, r28	; 61
    b07a:	df 91       	pop	r29
    b07c:	cf 91       	pop	r28
    b07e:	1f 91       	pop	r17
    b080:	0f 91       	pop	r16
    b082:	ff 90       	pop	r15
    b084:	df 90       	pop	r13
    b086:	cf 90       	pop	r12
    b088:	08 95       	ret

0000b08a <melf_load_module>:
    b08a:	2f 92       	push	r2
    b08c:	3f 92       	push	r3
    b08e:	4f 92       	push	r4
    b090:	5f 92       	push	r5
    b092:	6f 92       	push	r6
    b094:	7f 92       	push	r7
    b096:	8f 92       	push	r8
    b098:	9f 92       	push	r9
    b09a:	af 92       	push	r10
    b09c:	bf 92       	push	r11
    b09e:	cf 92       	push	r12
    b0a0:	df 92       	push	r13
    b0a2:	ef 92       	push	r14
    b0a4:	ff 92       	push	r15
    b0a6:	0f 93       	push	r16
    b0a8:	1f 93       	push	r17
    b0aa:	cf 93       	push	r28
    b0ac:	df 93       	push	r29
    b0ae:	cd b7       	in	r28, 0x3d	; 61
    b0b0:	de b7       	in	r29, 0x3e	; 62
    b0b2:	e6 97       	sbiw	r28, 0x36	; 54
    b0b4:	0f b6       	in	r0, 0x3f	; 63
    b0b6:	f8 94       	cli
    b0b8:	de bf       	out	0x3e, r29	; 62
    b0ba:	0f be       	out	0x3f, r0	; 63
    b0bc:	cd bf       	out	0x3d, r28	; 61
    b0be:	bc 01       	movw	r22, r24
    b0c0:	ce 01       	movw	r24, r28
    b0c2:	01 96       	adiw	r24, 0x01	; 1
    b0c4:	0e 94 28 57 	call	0xae50
    b0c8:	88 23       	and	r24, r24
    b0ca:	19 f0       	breq	.+6      	; 0xb0d2
    b0cc:	82 ef       	ldi	r24, 0xF2	; 242
    b0ce:	9f ef       	ldi	r25, 0xFF	; 255
    b0d0:	98 c0       	rjmp	.+304    	; 0xb202
    b0d2:	f8 2e       	mov	r15, r24
    b0d4:	8d 81       	ldd	r24, Y+5	; 0x05
    b0d6:	f8 16       	cp	r15, r24
    b0d8:	70 f5       	brcc	.+92     	; 0xb136
    b0da:	8e 01       	movw	r16, r28
    b0dc:	0d 5d       	subi	r16, 0xDD	; 221
    b0de:	1f 4f       	sbci	r17, 0xFF	; 255
    b0e0:	4f 2d       	mov	r20, r15
    b0e2:	b8 01       	movw	r22, r16
    b0e4:	ce 01       	movw	r24, r28
    b0e6:	01 96       	adiw	r24, 0x01	; 1
    b0e8:	0e 94 60 57 	call	0xaec0
    b0ec:	88 23       	and	r24, r24
    b0ee:	71 f7       	brne	.-36     	; 0xb0cc
    b0f0:	8c a1       	ldd	r24, Y+36	; 0x24
    b0f2:	82 30       	cpi	r24, 0x02	; 2
    b0f4:	41 f4       	brne	.+16     	; 0xb106
    b0f6:	88 e0       	ldi	r24, 0x08	; 8
    b0f8:	fe 01       	movw	r30, r28
    b0fa:	3b 96       	adiw	r30, 0x0b	; 11
    b0fc:	d8 01       	movw	r26, r16
    b0fe:	0d 90       	ld	r0, X+
    b100:	01 92       	st	Z+, r0
    b102:	8a 95       	dec	r24
    b104:	e1 f7       	brne	.-8      	; 0xb0fe
    b106:	8c a1       	ldd	r24, Y+36	; 0x24
    b108:	81 30       	cpi	r24, 0x01	; 1
    b10a:	41 f4       	brne	.+16     	; 0xb11c
    b10c:	88 e0       	ldi	r24, 0x08	; 8
    b10e:	fe 01       	movw	r30, r28
    b110:	7b 96       	adiw	r30, 0x1b	; 27
    b112:	d8 01       	movw	r26, r16
    b114:	0d 90       	ld	r0, X+
    b116:	01 92       	st	Z+, r0
    b118:	8a 95       	dec	r24
    b11a:	e1 f7       	brne	.-8      	; 0xb114
    b11c:	8c a1       	ldd	r24, Y+36	; 0x24
    b11e:	84 30       	cpi	r24, 0x04	; 4
    b120:	41 f4       	brne	.+16     	; 0xb132
    b122:	88 e0       	ldi	r24, 0x08	; 8
    b124:	fe 01       	movw	r30, r28
    b126:	73 96       	adiw	r30, 0x13	; 19
    b128:	d8 01       	movw	r26, r16
    b12a:	0d 90       	ld	r0, X+
    b12c:	01 92       	st	Z+, r0
    b12e:	8a 95       	dec	r24
    b130:	e1 f7       	brne	.-8      	; 0xb12a
    b132:	f3 94       	inc	r15
    b134:	cf cf       	rjmp	.-98     	; 0xb0d4
}
//----------------------------------------------------------
static int8_t melf_read_rela(melf_desc_t* mdesc, Melf_Shdr* relashdr, Melf_Word relandx, Melf_Rela* rela)
{
  if (ker_codemem_read(mdesc->cmhdl, KER_DFT_LOADER_PID, (void*)rela, sizeof(Melf_Rela),
		       relashdr->sh_offset + relandx * sizeof(Melf_Rela)) != SOS_OK)
    return -EFAULT;
  entoh_Rela(rela);
  return SOS_OK;
}
//----------------------------------------------------------
static int8_t melf_relocate(melf_desc_t* mdesc, Melf_Shdr* relashdr, 
			    Melf_Shdr* progshdr, Melf_Shdr* symshdr)
{
    b136:	4e 01       	movw	r8, r28
    b138:	08 94       	sec
    b13a:	81 1c       	adc	r8, r1
    b13c:	91 1c       	adc	r9, r1
    b13e:	a3 e1       	ldi	r26, 0x13	; 19
    b140:	6a 2e       	mov	r6, r26
    b142:	71 2c       	mov	r7, r1
    b144:	6c 0e       	add	r6, r28
    b146:	7d 1e       	adc	r7, r29
    b148:	fb e1       	ldi	r31, 0x1B	; 27
    b14a:	2f 2e       	mov	r2, r31
    b14c:	31 2c       	mov	r3, r1
    b14e:	2c 0e       	add	r2, r28
    b150:	3d 1e       	adc	r3, r29
    b152:	eb e0       	ldi	r30, 0x0B	; 11
    b154:	4e 2e       	mov	r4, r30
    b156:	51 2c       	mov	r5, r1
    b158:	4c 0e       	add	r4, r28
    b15a:	5d 1e       	adc	r5, r29
  Melf_Word relandx;
  Melf_Rela rela;
  Melf_Sym sym;

  for (relandx = 0; relandx < (relashdr->sh_size/sizeof(Melf_Rela)); relandx++){
    b15c:	cc 24       	eor	r12, r12
    b15e:	dd 24       	eor	r13, r13
    b160:	8f 89       	ldd	r24, Y+23	; 0x17
    b162:	98 8d       	ldd	r25, Y+24	; 0x18
    b164:	73 e0       	ldi	r23, 0x03	; 3
    b166:	96 95       	lsr	r25
    b168:	87 95       	ror	r24
    b16a:	7a 95       	dec	r23
    b16c:	e1 f7       	brne	.-8      	; 0xb166
    b16e:	c8 16       	cp	r12, r24
    b170:	d9 06       	cpc	r13, r25
    b172:	08 f0       	brcs	.+2      	; 0xb176
    b174:	3e c0       	rjmp	.+124    	; 0xb1f2
    b176:	56 01       	movw	r10, r12
    b178:	6b e2       	ldi	r22, 0x2B	; 43
    b17a:	e6 2e       	mov	r14, r22
    b17c:	f1 2c       	mov	r15, r1
    b17e:	ec 0e       	add	r14, r28
    b180:	fd 1e       	adc	r15, r29
    b182:	f3 01       	movw	r30, r6
    b184:	82 81       	ldd	r24, Z+2	; 0x02
    b186:	93 81       	ldd	r25, Z+3	; 0x03
    b188:	8a 0d       	add	r24, r10
    b18a:	9b 1d       	adc	r25, r11
    b18c:	8c 01       	movw	r16, r24
    b18e:	28 e0       	ldi	r18, 0x08	; 8
    b190:	30 e0       	ldi	r19, 0x00	; 0
    b192:	a7 01       	movw	r20, r14
    b194:	61 e1       	ldi	r22, 0x11	; 17
    b196:	d4 01       	movw	r26, r8
    b198:	8d 91       	ld	r24, X+
    b19a:	9c 91       	ld	r25, X
    b19c:	0e 94 d2 20 	call	0x41a4
    b1a0:	88 23       	and	r24, r24
    b1a2:	19 f4       	brne	.+6      	; 0xb1aa
    b1a4:	c7 01       	movw	r24, r14
    b1a6:	0e 94 1d 59 	call	0xb23a
    melf_read_rela(mdesc, relashdr, relandx, &rela);
    melf_read_symbol(mdesc, symshdr, rela.r_symbol, &sym);
    b1aa:	9e 01       	movw	r18, r28
    b1ac:	2d 5c       	subi	r18, 0xCD	; 205
    b1ae:	3f 4f       	sbci	r19, 0xFF	; 255
    b1b0:	4d a5       	ldd	r20, Y+45	; 0x2d
    b1b2:	5e a5       	ldd	r21, Y+46	; 0x2e
    b1b4:	b2 01       	movw	r22, r4
    b1b6:	c4 01       	movw	r24, r8
    b1b8:	0e 94 af 57 	call	0xaf5e
    watchdog_reset();
    b1bc:	a8 95       	wdr
    melf_arch_relocate(mdesc, &rela, &sym, progshdr);
    b1be:	91 01       	movw	r18, r2
    b1c0:	ae 01       	movw	r20, r28
    b1c2:	4d 5c       	subi	r20, 0xCD	; 205
    b1c4:	5f 4f       	sbci	r21, 0xFF	; 255
    b1c6:	b7 01       	movw	r22, r14
    b1c8:	c4 01       	movw	r24, r8
    b1ca:	0e 94 96 55 	call	0xab2c
    b1ce:	08 94       	sec
    b1d0:	c1 1c       	adc	r12, r1
    b1d2:	d1 1c       	adc	r13, r1
    b1d4:	e8 e0       	ldi	r30, 0x08	; 8
    b1d6:	f0 e0       	ldi	r31, 0x00	; 0
    b1d8:	ae 0e       	add	r10, r30
    b1da:	bf 1e       	adc	r11, r31
    b1dc:	f3 01       	movw	r30, r6
    b1de:	84 81       	ldd	r24, Z+4	; 0x04
    b1e0:	95 81       	ldd	r25, Z+5	; 0x05
    b1e2:	53 e0       	ldi	r21, 0x03	; 3
    b1e4:	96 95       	lsr	r25
    b1e6:	87 95       	ror	r24
    b1e8:	5a 95       	dec	r21
    b1ea:	e1 f7       	brne	.-8      	; 0xb1e4
    b1ec:	c8 16       	cp	r12, r24
    b1ee:	d9 06       	cpc	r13, r25
    b1f0:	18 f2       	brcs	.-122    	; 0xb178
  }
  ker_codemem_flush(mdesc->cmhdl, KER_DFT_LOADER_PID);
    b1f2:	61 e1       	ldi	r22, 0x11	; 17
    b1f4:	d4 01       	movw	r26, r8
    b1f6:	8d 91       	ld	r24, X+
    b1f8:	9c 91       	ld	r25, X
    b1fa:	0e 94 06 21 	call	0x420c
    b1fe:	80 e0       	ldi	r24, 0x00	; 0
    b200:	90 e0       	ldi	r25, 0x00	; 0
    b202:	e6 96       	adiw	r28, 0x36	; 54
    b204:	0f b6       	in	r0, 0x3f	; 63
    b206:	f8 94       	cli
    b208:	de bf       	out	0x3e, r29	; 62
    b20a:	0f be       	out	0x3f, r0	; 63
    b20c:	cd bf       	out	0x3d, r28	; 61
    b20e:	df 91       	pop	r29
    b210:	cf 91       	pop	r28
    b212:	1f 91       	pop	r17
    b214:	0f 91       	pop	r16
    b216:	ff 90       	pop	r15
    b218:	ef 90       	pop	r14
    b21a:	df 90       	pop	r13
    b21c:	cf 90       	pop	r12
    b21e:	bf 90       	pop	r11
    b220:	af 90       	pop	r10
    b222:	9f 90       	pop	r9
    b224:	8f 90       	pop	r8
    b226:	7f 90       	pop	r7
    b228:	6f 90       	pop	r6
    b22a:	5f 90       	pop	r5
    b22c:	4f 90       	pop	r4
    b22e:	3f 90       	pop	r3
    b230:	2f 90       	pop	r2
    b232:	08 95       	ret

0000b234 <entoh_Mhdr>:
#include <sos_endian.h>

// ---- ENTOH ------
void entoh_Mhdr(Melf_Mhdr* mhdr)
{
    b234:	08 95       	ret

0000b236 <entoh_Shdr>:
  mhdr->m_shnum = entoh_Melf_Half(mhdr->m_shnum);
  mhdr->m_modhdrndx = entoh_Melf_Word(mhdr->m_modhdrndx);
  return;
}

void entoh_Shdr(Melf_Shdr* shdr)
{
    b236:	08 95       	ret

0000b238 <entoh_Sym>:
  shdr->sh_id = entoh_Melf_Half(shdr->sh_id);
  shdr->sh_type = entoh_Melf_Half(shdr->sh_type);
  shdr->sh_offset = entoh_Melf_Off(shdr->sh_offset);
  shdr->sh_size = entoh_Melf_Word(shdr->sh_size);
  shdr->sh_link = entoh_Melf_Half(shdr->sh_link);
  shdr->sh_info = entoh_Melf_Half(shdr->sh_info);
  return;
}

void entoh_Sym(Melf_Sym* sym)
{
    b238:	08 95       	ret

0000b23a <entoh_Rela>:
  sym->st_value = entoh_Melf_Addr(sym->st_value);
  sym->st_shid = entoh_Melf_Half(sym->st_shid);
  return;
}

void entoh_Rela(Melf_Rela* rela)
{
    b23a:	08 95       	ret

0000b23c <ehton_Mhdr>:
  rela->r_offset = entoh_Melf_Addr(rela->r_offset);
  rela->r_symbol = entoh_Melf_Word(rela->r_symbol);
  rela->r_addend = entoh_Melf_Sword(rela->r_addend);
  return;
}


// ---- EHTON ------
void ehton_Mhdr(Melf_Mhdr* mhdr)
{
    b23c:	08 95       	ret

0000b23e <ehton_Shdr>:
  mhdr->m_shnum = ehton_Melf_Half(mhdr->m_shnum);
  mhdr->m_modhdrndx = ehton_Melf_Word(mhdr->m_modhdrndx);
  return;
}

void ehton_Shdr(Melf_Shdr* shdr)
{
    b23e:	08 95       	ret

0000b240 <ehton_Sym>:
  shdr->sh_id = ehton_Melf_Half(shdr->sh_id);
  shdr->sh_type = ehton_Melf_Half(shdr->sh_type);
  shdr->sh_offset = ehton_Melf_Off(shdr->sh_offset);
  shdr->sh_size = ehton_Melf_Word(shdr->sh_size);
  shdr->sh_link = ehton_Melf_Half(shdr->sh_link);
  shdr->sh_info = ehton_Melf_Half(shdr->sh_info);
  return;
}

void ehton_Sym(Melf_Sym* sym)
{
    b240:	08 95       	ret

0000b242 <ehton_Rela>:
  sym->st_value = ehton_Melf_Addr(sym->st_value);
  sym->st_shid = ehton_Melf_Half(sym->st_shid);
  return;
}

void ehton_Rela(Melf_Rela* rela)
{
    b242:	08 95       	ret

0000b244 <ker_sys_fnptr_call>:

.section .text
.global ker_sys_fnptr_call
ker_sys_fnptr_call:
	clr  xptr_l         ;
    b244:	aa 27       	eor	r26, r26
	movw zptr_l, word_l	; load parameters to Z register
    b246:	fc 01       	movw	r30, r24
	lsl  zptr_l         ; shift left
    b248:	ee 0f       	add	r30, r30
	rol  zptr_h         ;
    b24a:	ff 1f       	adc	r31, r31
	rol  xptr_l         ; get the carry bit
    b24c:	aa 1f       	adc	r26, r26
	out  RAMPZ, xptr_l  ; set to RAMPZ
    b24e:	ab bf       	out	0x3b, r26	; 59
	elpm xptr_l, Z+     ; load the real function lcoation from FCB
    b250:	a7 91       	elpm	r26, Z+
	elpm xptr_h, Z      ;
    b252:	b6 91       	elpm	r27, Z
	push xptr_l         ; push xptr into stack so that we can reuse xptr
    b254:	af 93       	push	r26
	push xptr_h         ;
    b256:	bf 93       	push	r27
	  adiw zptr_l, 5      ; move Z pointer to the location of pid
    b258:	35 96       	adiw	r30, 0x05	; 5
		in   temp_reg0, __SREG__ ; save Status register for critical section
    b25a:	0f b6       	in	r0, 0x3f	; 63
		cli                 ;
    b25c:	f8 94       	cli
		; Get current executing PID from variable
		lds  temp_reg1, (curr_pid);
    b25e:	10 90 ed 0b 	lds	r1, 0x0BED
		lds  xptr_l, (pid_sp)   ;  load the stack pointer for pid
    b262:	a0 91 ee 0b 	lds	r26, 0x0BEE
		lds  xptr_h, (pid_sp+1) ;
    b266:	b0 91 ef 0b 	lds	r27, 0x0BEF
		st   X+, temp_reg1  ;  save curr_pid to pid stack
    b26a:	1d 92       	st	X+, r1
		sts  pid_sp, xptr_l ;
    b26c:	a0 93 ee 0b 	sts	0x0BEE, r26
		sts  (pid_sp+1), xptr_h ;
    b270:	b0 93 ef 0b 	sts	0x0BEF, r27
		elpm xptr_l, Z   ;	destination PID is in R1
    b274:	a6 91       	elpm	r26, Z
		cpi  xptr_l, 255 ; check whether this is RUNTIME_PID
    b276:	af 3f       	cpi	r26, 0xFF	; 255
		brne label_store_curr_pid;
    b278:	11 f4       	brne	.+4      	; 0xb27e
		lds  xptr_l, (curr_pid);
    b27a:	a0 91 ed 0b 	lds	r26, 0x0BED

0000b27e <label_store_curr_pid>:
label_store_curr_pid:
		sts  (curr_pid), xptr_l ;  update curr_pid to destination PID
    b27e:	a0 93 ed 0b 	sts	0x0BED, r26
#ifdef SOS_USE_PREEMPTION
                adiw zptr_l, 2 ; move Z pointer to the location of priority
                lds temp_reg1, (curr_pri); load the current priority
                lds xptr_l, (pri_sp) ; load the priority stack pointer
                lds xptr_h, (pri_sp+1);
                st X+, temp_reg1 ; save curr_pri to the priority stack
                sts pri_sp, xptr_l; update the priority stack pointer
                sts pri_sp, xptr_h;
                elpm xptr_l, Z; load the destination priority
                lds xptr_l, (curr_pri); store it to current priority
#endif
		out  __SREG__, temp_reg0 ;  leave critical section
    b282:	0f be       	out	0x3f, r0	; 63
	;movw zptr_l, xptr_l ; move to Z register for iCall
	pop  zptr_h         ; get the function location from the stack
    b284:	ff 91       	pop	r31
	pop  zptr_l         ;
    b286:	ef 91       	pop	r30
	clr  temp_reg1      ; clear R1 for gcc
    b288:	11 24       	eor	r1, r1
#ifdef SOS_SFI
	call ker_icall_check
#else	
	icall               ;
    b28a:	09 95       	icall
#endif//SOS_SFI	
		in   temp_reg0, __SREG__ ; save Status register for critical section
    b28c:	0f b6       	in	r0, 0x3f	; 63
		cli                 ;
    b28e:	f8 94       	cli
		lds  xptr_l, (pid_sp)   ;  load the stack pointer for pid
    b290:	a0 91 ee 0b 	lds	r26, 0x0BEE
		lds  xptr_h, (pid_sp+1) ;
    b294:	b0 91 ef 0b 	lds	r27, 0x0BEF
		ld   temp_reg1, -X  ;
    b298:	1e 90       	ld	r1, -X
		sts  pid_sp, xptr_l ;
    b29a:	a0 93 ee 0b 	sts	0x0BEE, r26
		sts  (pid_sp+1), xptr_h ;
    b29e:	b0 93 ef 0b 	sts	0x0BEF, r27
		sts  (curr_pid), temp_reg1;
    b2a2:	10 92 ed 0b 	sts	0x0BED, r1
#ifdef SOS_USE_PREEMPTION
                lds xptr_l, (pri_sp) ; load the priority stack pointer
                lds xptr_h, (pri_sp+1);
                ld  temp_reg1, -X    ; pop the previous priority value
                sts pid_sp, xptr_l   ; update the priority stack pointer
                sts (pid_sp+1), xptr_h ;
                sts (curr_pri), temp_reg1 ; store the popped value to current priority
#endif
		out  __SREG__, temp_reg0 ;  leave critical section
    b2a6:	0f be       	out	0x3f, r0	; 63
	clr  temp_reg1      ; clear R1 for gcc 
    b2a8:	11 24       	eor	r1, r1
	ret
    b2aa:	08 95       	ret

0000b2ac <memcpy>:
    b2ac:	fb 01       	movw	r30, r22
    b2ae:	dc 01       	movw	r26, r24
    b2b0:	02 c0       	rjmp	.+4      	; 0xb2b6
    b2b2:	01 90       	ld	r0, Z+
    b2b4:	0d 92       	st	X+, r0
    b2b6:	41 50       	subi	r20, 0x01	; 1
    b2b8:	50 40       	sbci	r21, 0x00	; 0
    b2ba:	d8 f7       	brcc	.-10     	; 0xb2b2
    b2bc:	08 95       	ret

0000b2be <__mulsi3>:
    b2be:	62 9f       	mul	r22, r18
    b2c0:	d0 01       	movw	r26, r0
    b2c2:	73 9f       	mul	r23, r19
    b2c4:	f0 01       	movw	r30, r0
    b2c6:	82 9f       	mul	r24, r18
    b2c8:	e0 0d       	add	r30, r0
    b2ca:	f1 1d       	adc	r31, r1
    b2cc:	64 9f       	mul	r22, r20
    b2ce:	e0 0d       	add	r30, r0
    b2d0:	f1 1d       	adc	r31, r1
    b2d2:	92 9f       	mul	r25, r18
    b2d4:	f0 0d       	add	r31, r0
    b2d6:	83 9f       	mul	r24, r19
    b2d8:	f0 0d       	add	r31, r0
    b2da:	74 9f       	mul	r23, r20
    b2dc:	f0 0d       	add	r31, r0
    b2de:	65 9f       	mul	r22, r21
    b2e0:	f0 0d       	add	r31, r0
    b2e2:	99 27       	eor	r25, r25
    b2e4:	72 9f       	mul	r23, r18
    b2e6:	b0 0d       	add	r27, r0
    b2e8:	e1 1d       	adc	r30, r1
    b2ea:	f9 1f       	adc	r31, r25
    b2ec:	63 9f       	mul	r22, r19
    b2ee:	b0 0d       	add	r27, r0
    b2f0:	e1 1d       	adc	r30, r1
    b2f2:	f9 1f       	adc	r31, r25
    b2f4:	bd 01       	movw	r22, r26
    b2f6:	cf 01       	movw	r24, r30
    b2f8:	11 24       	eor	r1, r1
    b2fa:	08 95       	ret

0000b2fc <__udivmodhi4>:
    b2fc:	aa 1b       	sub	r26, r26
    b2fe:	bb 1b       	sub	r27, r27
    b300:	51 e1       	ldi	r21, 0x11	; 17
    b302:	07 c0       	rjmp	.+14     	; 0xb312

0000b304 <__udivmodhi4_loop>:
    b304:	aa 1f       	adc	r26, r26
    b306:	bb 1f       	adc	r27, r27
    b308:	a6 17       	cp	r26, r22
    b30a:	b7 07       	cpc	r27, r23
    b30c:	10 f0       	brcs	.+4      	; 0xb312
    b30e:	a6 1b       	sub	r26, r22
    b310:	b7 0b       	sbc	r27, r23

0000b312 <__udivmodhi4_ep>:
    b312:	88 1f       	adc	r24, r24
    b314:	99 1f       	adc	r25, r25
    b316:	5a 95       	dec	r21
    b318:	a9 f7       	brne	.-22     	; 0xb304
    b31a:	80 95       	com	r24
    b31c:	90 95       	com	r25
    b31e:	bc 01       	movw	r22, r24
    b320:	cd 01       	movw	r24, r26
    b322:	08 95       	ret

0000b324 <__divmodhi4>:
    b324:	97 fb       	bst	r25, 7
    b326:	09 2e       	mov	r0, r25
    b328:	07 26       	eor	r0, r23
    b32a:	0a d0       	rcall	.+20     	; 0xb340
    b32c:	77 fd       	sbrc	r23, 7
    b32e:	04 d0       	rcall	.+8      	; 0xb338
    b330:	e5 df       	rcall	.-54     	; 0xb2fc
    b332:	06 d0       	rcall	.+12     	; 0xb340
    b334:	00 20       	and	r0, r0
    b336:	1a f4       	brpl	.+6      	; 0xb33e

0000b338 <__divmodhi4_neg2>:
    b338:	70 95       	com	r23
    b33a:	61 95       	neg	r22
    b33c:	7f 4f       	sbci	r23, 0xFF	; 255

0000b33e <__divmodhi4_exit>:
    b33e:	08 95       	ret

0000b340 <__divmodhi4_neg1>:
    b340:	f6 f7       	brtc	.-4      	; 0xb33e
    b342:	90 95       	com	r25
    b344:	81 95       	neg	r24
    b346:	9f 4f       	sbci	r25, 0xFF	; 255
    b348:	08 95       	ret

0000b34a <__divmodsi4>:
    b34a:	97 fb       	bst	r25, 7
    b34c:	09 2e       	mov	r0, r25
    b34e:	05 26       	eor	r0, r21
    b350:	0e d0       	rcall	.+28     	; 0xb36e
    b352:	57 fd       	sbrc	r21, 7
    b354:	04 d0       	rcall	.+8      	; 0xb35e
    b356:	14 d0       	rcall	.+40     	; 0xb380
    b358:	0a d0       	rcall	.+20     	; 0xb36e
    b35a:	00 1c       	adc	r0, r0
    b35c:	38 f4       	brcc	.+14     	; 0xb36c

0000b35e <__divmodsi4_neg2>:
    b35e:	50 95       	com	r21
    b360:	40 95       	com	r20
    b362:	30 95       	com	r19
    b364:	21 95       	neg	r18
    b366:	3f 4f       	sbci	r19, 0xFF	; 255
    b368:	4f 4f       	sbci	r20, 0xFF	; 255
    b36a:	5f 4f       	sbci	r21, 0xFF	; 255

0000b36c <__divmodsi4_exit>:
    b36c:	08 95       	ret

0000b36e <__divmodsi4_neg1>:
    b36e:	f6 f7       	brtc	.-4      	; 0xb36c
    b370:	90 95       	com	r25
    b372:	80 95       	com	r24
    b374:	70 95       	com	r23
    b376:	61 95       	neg	r22
    b378:	7f 4f       	sbci	r23, 0xFF	; 255
    b37a:	8f 4f       	sbci	r24, 0xFF	; 255
    b37c:	9f 4f       	sbci	r25, 0xFF	; 255
    b37e:	08 95       	ret

0000b380 <__udivmodsi4>:
    b380:	a1 e2       	ldi	r26, 0x21	; 33
    b382:	1a 2e       	mov	r1, r26
    b384:	aa 1b       	sub	r26, r26
    b386:	bb 1b       	sub	r27, r27
    b388:	fd 01       	movw	r30, r26
    b38a:	0d c0       	rjmp	.+26     	; 0xb3a6

0000b38c <__udivmodsi4_loop>:
    b38c:	aa 1f       	adc	r26, r26
    b38e:	bb 1f       	adc	r27, r27
    b390:	ee 1f       	adc	r30, r30
    b392:	ff 1f       	adc	r31, r31
    b394:	a2 17       	cp	r26, r18
    b396:	b3 07       	cpc	r27, r19
    b398:	e4 07       	cpc	r30, r20
    b39a:	f5 07       	cpc	r31, r21
    b39c:	20 f0       	brcs	.+8      	; 0xb3a6
    b39e:	a2 1b       	sub	r26, r18
    b3a0:	b3 0b       	sbc	r27, r19
    b3a2:	e4 0b       	sbc	r30, r20
    b3a4:	f5 0b       	sbc	r31, r21

0000b3a6 <__udivmodsi4_ep>:
    b3a6:	66 1f       	adc	r22, r22
    b3a8:	77 1f       	adc	r23, r23
    b3aa:	88 1f       	adc	r24, r24
    b3ac:	99 1f       	adc	r25, r25
    b3ae:	1a 94       	dec	r1
    b3b0:	69 f7       	brne	.-38     	; 0xb38c
    b3b2:	60 95       	com	r22
    b3b4:	70 95       	com	r23
    b3b6:	80 95       	com	r24
    b3b8:	90 95       	com	r25
    b3ba:	9b 01       	movw	r18, r22
    b3bc:	ac 01       	movw	r20, r24
    b3be:	bd 01       	movw	r22, r26
    b3c0:	cf 01       	movw	r24, r30
    b3c2:	08 95       	ret

0000b3c4 <_exit>:
    b3c4:	ff cf       	rjmp	.-2      	; 0xb3c4
Disassembly of section .sos_bls:

0001fc00 <flash_erase>:
   1fc00:	08 95       	ret

0001fc02 <flash_write>:
   1fc02:	2f 92       	push	r2
   1fc04:	3f 92       	push	r3
   1fc06:	4f 92       	push	r4
   1fc08:	5f 92       	push	r5
   1fc0a:	6f 92       	push	r6
   1fc0c:	7f 92       	push	r7
   1fc0e:	8f 92       	push	r8
   1fc10:	9f 92       	push	r9
   1fc12:	af 92       	push	r10
   1fc14:	bf 92       	push	r11
   1fc16:	cf 92       	push	r12
   1fc18:	df 92       	push	r13
   1fc1a:	ef 92       	push	r14
   1fc1c:	ff 92       	push	r15
   1fc1e:	0f 93       	push	r16
   1fc20:	1f 93       	push	r17
   1fc22:	cf 93       	push	r28
   1fc24:	df 93       	push	r29
   1fc26:	cd b7       	in	r28, 0x3d	; 61
   1fc28:	de b7       	in	r29, 0x3e	; 62
   1fc2a:	23 97       	sbiw	r28, 0x03	; 3
   1fc2c:	0f b6       	in	r0, 0x3f	; 63
   1fc2e:	f8 94       	cli
   1fc30:	de bf       	out	0x3e, r29	; 62
   1fc32:	0f be       	out	0x3f, r0	; 63
   1fc34:	cd bf       	out	0x3d, r28	; 61
   1fc36:	7b 01       	movw	r14, r22
   1fc38:	8c 01       	movw	r16, r24
   1fc3a:	2a 01       	movw	r4, r20
   1fc3c:	59 01       	movw	r10, r18
   1fc3e:	2f b7       	in	r18, 0x3f	; 63
   1fc40:	f8 94       	cli
   1fc42:	29 83       	std	Y+1, r18	; 0x01
   1fc44:	e1 99       	sbic	0x1c, 1	; 28
   1fc46:	fe cf       	rjmp	.-4      	; 0x1fc44
   1fc48:	a1 14       	cp	r10, r1
   1fc4a:	b1 04       	cpc	r11, r1
   1fc4c:	09 f4       	brne	.+2      	; 0x1fc50
   1fc4e:	a5 c0       	rjmp	.+330    	; 0x1fd9a
   1fc50:	bb 27       	eor	r27, r27
   1fc52:	a1 2f       	mov	r26, r17
   1fc54:	90 2f       	mov	r25, r16
   1fc56:	8f 2d       	mov	r24, r15
   1fc58:	6c 01       	movw	r12, r24
   1fc5a:	7f ef       	ldi	r23, 0xFF	; 255
   1fc5c:	27 2e       	mov	r2, r23
   1fc5e:	31 2c       	mov	r3, r1
   1fc60:	2e 20       	and	r2, r14
   1fc62:	3f 20       	and	r3, r15
   1fc64:	61 2c       	mov	r6, r1
   1fc66:	6f ef       	ldi	r22, 0xFF	; 255
   1fc68:	76 2e       	mov	r7, r22
   1fc6a:	6f ef       	ldi	r22, 0xFF	; 255
   1fc6c:	86 2e       	mov	r8, r22
   1fc6e:	6f ef       	ldi	r22, 0xFF	; 255
   1fc70:	96 2e       	mov	r9, r22
   1fc72:	6e 20       	and	r6, r14
   1fc74:	7f 20       	and	r7, r15
   1fc76:	80 22       	and	r8, r16
   1fc78:	91 22       	and	r9, r17
   1fc7a:	1a 82       	std	Y+2, r1	; 0x02
   1fc7c:	1b 82       	std	Y+3, r1	; 0x03
   1fc7e:	80 e0       	ldi	r24, 0x00	; 0
   1fc80:	90 e0       	ldi	r25, 0x00	; 0
   1fc82:	82 15       	cp	r24, r2
   1fc84:	93 05       	cpc	r25, r3
   1fc86:	d8 f4       	brcc	.+54     	; 0x1fcbe
   1fc88:	ea 81       	ldd	r30, Y+2	; 0x02
   1fc8a:	fb 81       	ldd	r31, Y+3	; 0x03
   1fc8c:	cf 01       	movw	r24, r30
   1fc8e:	aa 27       	eor	r26, r26
   1fc90:	bb 27       	eor	r27, r27
   1fc92:	86 0d       	add	r24, r6
   1fc94:	97 1d       	adc	r25, r7
   1fc96:	a8 1d       	adc	r26, r8
   1fc98:	b9 1d       	adc	r27, r9
   1fc9a:	ab bf       	out	0x3b, r26	; 59
   1fc9c:	fc 01       	movw	r30, r24
   1fc9e:	87 91       	elpm	r24, Z+
   1fca0:	96 91       	elpm	r25, Z
   1fca2:	bc 01       	movw	r22, r24
   1fca4:	8a 81       	ldd	r24, Y+2	; 0x02
   1fca6:	9b 81       	ldd	r25, Y+3	; 0x03
   1fca8:	0e 94 eb fe 	call	0x1fdd6
   1fcac:	2a 81       	ldd	r18, Y+2	; 0x02
   1fcae:	3b 81       	ldd	r19, Y+3	; 0x03
   1fcb0:	2e 5f       	subi	r18, 0xFE	; 254
   1fcb2:	3f 4f       	sbci	r19, 0xFF	; 255
   1fcb4:	2a 83       	std	Y+2, r18	; 0x02
   1fcb6:	3b 83       	std	Y+3, r19	; 0x03
   1fcb8:	22 15       	cp	r18, r2
   1fcba:	33 05       	cpc	r19, r3
   1fcbc:	28 f3       	brcs	.-54     	; 0x1fc88
   1fcbe:	a1 14       	cp	r10, r1
   1fcc0:	b1 04       	cpc	r11, r1
   1fcc2:	09 f1       	breq	.+66     	; 0x1fd06
   1fcc4:	8a 81       	ldd	r24, Y+2	; 0x02
   1fcc6:	9b 81       	ldd	r25, Y+3	; 0x03
   1fcc8:	8f 3f       	cpi	r24, 0xFF	; 255
   1fcca:	91 05       	cpc	r25, r1
   1fccc:	09 f0       	breq	.+2      	; 0x1fcd0
   1fcce:	d8 f4       	brcc	.+54     	; 0x1fd06
   1fcd0:	d2 01       	movw	r26, r4
   1fcd2:	2d 91       	ld	r18, X+
   1fcd4:	fd 01       	movw	r30, r26
   1fcd6:	81 91       	ld	r24, Z+
   1fcd8:	2f 01       	movw	r4, r30
   1fcda:	99 27       	eor	r25, r25
   1fcdc:	98 2f       	mov	r25, r24
   1fcde:	88 27       	eor	r24, r24
   1fce0:	82 0f       	add	r24, r18
   1fce2:	91 1d       	adc	r25, r1
   1fce4:	2e ef       	ldi	r18, 0xFE	; 254
   1fce6:	3f ef       	ldi	r19, 0xFF	; 255
   1fce8:	a2 0e       	add	r10, r18
   1fcea:	b3 1e       	adc	r11, r19
   1fcec:	bc 01       	movw	r22, r24
   1fcee:	8a 81       	ldd	r24, Y+2	; 0x02
   1fcf0:	9b 81       	ldd	r25, Y+3	; 0x03
   1fcf2:	0e 94 eb fe 	call	0x1fdd6
   1fcf6:	8a 81       	ldd	r24, Y+2	; 0x02
   1fcf8:	9b 81       	ldd	r25, Y+3	; 0x03
   1fcfa:	02 96       	adiw	r24, 0x02	; 2
   1fcfc:	8a 83       	std	Y+2, r24	; 0x02
   1fcfe:	9b 83       	std	Y+3, r25	; 0x03
   1fd00:	a1 14       	cp	r10, r1
   1fd02:	b1 04       	cpc	r11, r1
   1fd04:	09 f7       	brne	.-62     	; 0x1fcc8
   1fd06:	aa 81       	ldd	r26, Y+2	; 0x02
   1fd08:	bb 81       	ldd	r27, Y+3	; 0x03
   1fd0a:	af 3f       	cpi	r26, 0xFF	; 255
   1fd0c:	b1 05       	cpc	r27, r1
   1fd0e:	09 f0       	breq	.+2      	; 0x1fd12
   1fd10:	e0 f4       	brcc	.+56     	; 0x1fd4a
   1fd12:	ea 81       	ldd	r30, Y+2	; 0x02
   1fd14:	fb 81       	ldd	r31, Y+3	; 0x03
   1fd16:	cf 01       	movw	r24, r30
   1fd18:	aa 27       	eor	r26, r26
   1fd1a:	bb 27       	eor	r27, r27
   1fd1c:	86 0d       	add	r24, r6
   1fd1e:	97 1d       	adc	r25, r7
   1fd20:	a8 1d       	adc	r26, r8
   1fd22:	b9 1d       	adc	r27, r9
   1fd24:	ab bf       	out	0x3b, r26	; 59
   1fd26:	fc 01       	movw	r30, r24
   1fd28:	87 91       	elpm	r24, Z+
   1fd2a:	96 91       	elpm	r25, Z
   1fd2c:	bc 01       	movw	r22, r24
   1fd2e:	8a 81       	ldd	r24, Y+2	; 0x02
   1fd30:	9b 81       	ldd	r25, Y+3	; 0x03
   1fd32:	0e 94 eb fe 	call	0x1fdd6
   1fd36:	2a 81       	ldd	r18, Y+2	; 0x02
   1fd38:	3b 81       	ldd	r19, Y+3	; 0x03
   1fd3a:	2e 5f       	subi	r18, 0xFE	; 254
   1fd3c:	3f 4f       	sbci	r19, 0xFF	; 255
   1fd3e:	2a 83       	std	Y+2, r18	; 0x02
   1fd40:	3b 83       	std	Y+3, r19	; 0x03
   1fd42:	2f 3f       	cpi	r18, 0xFF	; 255
   1fd44:	31 05       	cpc	r19, r1
   1fd46:	29 f3       	breq	.-54     	; 0x1fd12
   1fd48:	20 f3       	brcs	.-56     	; 0x1fd12
   1fd4a:	3f ef       	ldi	r19, 0xFF	; 255
   1fd4c:	c3 16       	cp	r12, r19
   1fd4e:	d1 04       	cpc	r13, r1
   1fd50:	21 f0       	breq	.+8      	; 0x1fd5a
   1fd52:	18 f0       	brcs	.+6      	; 0x1fd5a
   1fd54:	81 e0       	ldi	r24, 0x01	; 1
   1fd56:	8b bf       	out	0x3b, r24	; 59
   1fd58:	01 c0       	rjmp	.+2      	; 0x1fd5c
   1fd5a:	1b be       	out	0x3b, r1	; 59
   1fd5c:	dc 2c       	mov	r13, r12
   1fd5e:	cc 24       	eor	r12, r12
   1fd60:	63 e0       	ldi	r22, 0x03	; 3
   1fd62:	c6 01       	movw	r24, r12
   1fd64:	0e 94 e9 fe 	call	0x1fdd2
   1fd68:	65 e0       	ldi	r22, 0x05	; 5
   1fd6a:	c6 01       	movw	r24, r12
   1fd6c:	0e 94 e9 fe 	call	0x1fdd2
   1fd70:	61 e1       	ldi	r22, 0x11	; 17
   1fd72:	80 e0       	ldi	r24, 0x00	; 0
   1fd74:	90 e0       	ldi	r25, 0x00	; 0
   1fd76:	0e 94 e9 fe 	call	0x1fdd2
   1fd7a:	c1 01       	movw	r24, r2
   1fd7c:	aa 27       	eor	r26, r26
   1fd7e:	bb 27       	eor	r27, r27
   1fd80:	e8 1a       	sub	r14, r24
   1fd82:	f9 0a       	sbc	r15, r25
   1fd84:	0a 0b       	sbc	r16, r26
   1fd86:	1b 0b       	sbc	r17, r27
   1fd88:	80 e0       	ldi	r24, 0x00	; 0
   1fd8a:	91 e0       	ldi	r25, 0x01	; 1
   1fd8c:	a0 e0       	ldi	r26, 0x00	; 0
   1fd8e:	b0 e0       	ldi	r27, 0x00	; 0
   1fd90:	e8 0e       	add	r14, r24
   1fd92:	f9 1e       	adc	r15, r25
   1fd94:	0a 1f       	adc	r16, r26
   1fd96:	1b 1f       	adc	r17, r27
   1fd98:	57 cf       	rjmp	.-338    	; 0x1fc48
   1fd9a:	1b be       	out	0x3b, r1	; 59
   1fd9c:	99 81       	ldd	r25, Y+1	; 0x01
   1fd9e:	9f bf       	out	0x3f, r25	; 63
   1fda0:	23 96       	adiw	r28, 0x03	; 3
   1fda2:	0f b6       	in	r0, 0x3f	; 63
   1fda4:	f8 94       	cli
   1fda6:	de bf       	out	0x3e, r29	; 62
   1fda8:	0f be       	out	0x3f, r0	; 63
   1fdaa:	cd bf       	out	0x3d, r28	; 61
   1fdac:	df 91       	pop	r29
   1fdae:	cf 91       	pop	r28
   1fdb0:	1f 91       	pop	r17
   1fdb2:	0f 91       	pop	r16
   1fdb4:	ff 90       	pop	r15
   1fdb6:	ef 90       	pop	r14
   1fdb8:	df 90       	pop	r13
   1fdba:	cf 90       	pop	r12
   1fdbc:	bf 90       	pop	r11
   1fdbe:	af 90       	pop	r10
   1fdc0:	9f 90       	pop	r9
   1fdc2:	8f 90       	pop	r8
   1fdc4:	7f 90       	pop	r7
   1fdc6:	6f 90       	pop	r6
   1fdc8:	5f 90       	pop	r5
   1fdca:	4f 90       	pop	r4
   1fdcc:	3f 90       	pop	r3
   1fdce:	2f 90       	pop	r2
   1fdd0:	08 95       	ret

0001fdd2 <SpmCommand>:
   1fdd2:	fc 01       	movw	r30, r24
   1fdd4:	03 c0       	rjmp	.+6      	; 0x1fddc

0001fdd6 <SpmBufferFill>:
   1fdd6:	fc 01       	movw	r30, r24
   1fdd8:	0b 01       	movw	r0, r22
   1fdda:	61 e0       	ldi	r22, 0x01	; 1

0001fddc <DoSpm>:
   1fddc:	60 93 68 00 	sts	0x0068, r22
   1fde0:	e8 95       	spm

0001fde2 <WaitSpm>:
   1fde2:	60 91 68 00 	lds	r22, 0x0068
   1fde6:	60 fd       	sbrc	r22, 0
   1fde8:	fc cf       	rjmp	.-8      	; 0x1fde2
   1fdea:	11 24       	eor	r1, r1
   1fdec:	08 95       	ret
