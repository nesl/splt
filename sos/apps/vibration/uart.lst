   1               		.file	"uart.c"
   2               		.arch atmega128
   3               	__SREG__ = 0x3f
   4               	__SP_H__ = 0x3e
   5               	__SP_L__ = 0x3d
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  12               		.text
  13               	.Ltext0:
 299               	.global	uart_init
 301               	uart_init:
   1:/Users/Administrator/sos-2x/drivers/uart/uart.c **** /* -*- Mode: C; tab-width:2 -*- */
   2:/Users/Administrator/sos-2x/drivers/uart/uart.c **** /* ex: set ts=2 shiftwidth=2 softtabstop=2 cindent: */
   3:/Users/Administrator/sos-2x/drivers/uart/uart.c **** /**
   4:/Users/Administrator/sos-2x/drivers/uart/uart.c ****  * @brief    sos_uart messaging layer
   5:/Users/Administrator/sos-2x/drivers/uart/uart.c ****  * @author	 Naim Busek <ndbusek@gmail.com>
   6:/Users/Administrator/sos-2x/drivers/uart/uart.c ****  *
   7:/Users/Administrator/sos-2x/drivers/uart/uart.c ****  */
   8:/Users/Administrator/sos-2x/drivers/uart/uart.c **** #include <hardware.h>
   9:/Users/Administrator/sos-2x/drivers/uart/uart.c **** #include <message_queue.h>
  10:/Users/Administrator/sos-2x/drivers/uart/uart.c **** #include <net_stack.h>
  11:/Users/Administrator/sos-2x/drivers/uart/uart.c **** #include <sos_info.h>
  12:/Users/Administrator/sos-2x/drivers/uart/uart.c **** #include <crc.h>
  13:/Users/Administrator/sos-2x/drivers/uart/uart.c **** #include <measurement.h>
  14:/Users/Administrator/sos-2x/drivers/uart/uart.c **** #include <malloc.h>
  15:/Users/Administrator/sos-2x/drivers/uart/uart.c **** #include <sos_timer.h>
  16:/Users/Administrator/sos-2x/drivers/uart/uart.c **** #include <uart_system.h>
  17:/Users/Administrator/sos-2x/drivers/uart/uart.c **** #include <sos_uart_mgr.h>
  18:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
  19:/Users/Administrator/sos-2x/drivers/uart/uart.c **** #include <hdlc.h>
  20:/Users/Administrator/sos-2x/drivers/uart/uart.c **** #include <uart_hal.h>
  21:/Users/Administrator/sos-2x/drivers/uart/uart.c **** #include <uart.h>
  22:/Users/Administrator/sos-2x/drivers/uart/uart.c **** #include <sos_uart.h>
  23:/Users/Administrator/sos-2x/drivers/uart/uart.c **** #ifdef SOS_USE_PREEMPTION
  24:/Users/Administrator/sos-2x/drivers/uart/uart.c **** #include <priority.h>
  25:/Users/Administrator/sos-2x/drivers/uart/uart.c **** #endif
  26:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
  27:/Users/Administrator/sos-2x/drivers/uart/uart.c **** //#define LED_DEBUG
  28:/Users/Administrator/sos-2x/drivers/uart/uart.c **** #include <led_dbg.h>
  29:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
  30:/Users/Administrator/sos-2x/drivers/uart/uart.c **** // flags for uart_system
  31:/Users/Administrator/sos-2x/drivers/uart/uart.c **** #define UART_SOS_MSG_FLAG     UART_SYS_SOS_MSG_FLAG
  32:/Users/Administrator/sos-2x/drivers/uart/uart.c **** #define UART_CRC_FLAG         UART_SYS_SOS_MSG_FLAG
  33:/Users/Administrator/sos-2x/drivers/uart/uart.c **** #define UART_TX_FLAG          UART_SYS_TX_FLAG
  34:/Users/Administrator/sos-2x/drivers/uart/uart.c **** #define UART_DATA_RDY_FLAG    0x20
  35:/Users/Administrator/sos-2x/drivers/uart/uart.c **** #define UART_RSVRD_3_FLAG     0x10
  36:/Users/Administrator/sos-2x/drivers/uart/uart.c **** #define UART_RSVRD_2_FLAG     0x08
  37:/Users/Administrator/sos-2x/drivers/uart/uart.c **** #define UART_RSVRD_1_FLAG     0x04
  38:/Users/Administrator/sos-2x/drivers/uart/uart.c **** #define UART_RSVRD_0_FLAG     0x02
  39:/Users/Administrator/sos-2x/drivers/uart/uart.c **** #define UART_ERROR_FLAG       UART_SYS_ERROR_FLAG
  40:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
  41:/Users/Administrator/sos-2x/drivers/uart/uart.c **** #define UART_NULL_FLAG        0x00
  42:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
  43:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
  44:/Users/Administrator/sos-2x/drivers/uart/uart.c **** enum {
  45:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	UART_INIT=0,
  46:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	UART_IDLE,        //! enabled waiting
  47:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	UART_HDLC_START,	//! hdlc start framing byte
  48:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	UART_PROTOCOL,	  //! hdlc protocol byte
  49:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	UART_DATA,				//! pkt payload
  50:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	UART_HDLC_STOP,   //! hdlc stop/inter frame byte
  51:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	UART_END,         //! hdlc stop send
  52:/Users/Administrator/sos-2x/drivers/uart/uart.c **** };
  53:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
  54:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
  55:/Users/Administrator/sos-2x/drivers/uart/uart.c **** typedef struct uart_state {
  56:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	uint8_t state;
  57:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	uint8_t msg_state;
  58:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	uint8_t hdlc_state;
  59:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
  60:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	Message *msgHdr;      //!< sosMsg handle
  61:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	uint8_t *buff;        //!< buff/sosMsg data
  62:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	uint16_t crc;         //!< running crc
  63:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	uint8_t msgLen;       //!< buff/sosMsg data len
  64:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	uint8_t idx;          //!< byte index
  65:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
  66:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	uint8_t flags;
  67:/Users/Administrator/sos-2x/drivers/uart/uart.c **** } uart_state_t;
  68:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
  69:/Users/Administrator/sos-2x/drivers/uart/uart.c **** #define TX 0
  70:/Users/Administrator/sos-2x/drivers/uart/uart.c **** #define RX 1
  71:/Users/Administrator/sos-2x/drivers/uart/uart.c **** static uart_state_t state[2];
  72:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
  73:/Users/Administrator/sos-2x/drivers/uart/uart.c **** void uart_init(void) {
 303               	.LM1:
 304               	/* prologue: frame size=0 */
 305               	/* prologue end (size=0) */
  74:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	
  75:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	uint8_t i=0;
 307               	.LM2:
 308 0000 80E0      		ldi r24,lo8(0)
  76:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
  77:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	state[TX].state = UART_INIT;
 310               	.LM3:
 311 0002 8093 0000 		sts state,r24
  78:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	state[RX].state = UART_INIT;
 313               	.LM4:
 314 0006 8093 0000 		sts state+12,r24
  79:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
  80:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	uart_hardware_init();
 316               	.LM5:
 317 000a 0E94 0000 		call uart_hardware_init
 318 000e 91E0      		ldi r25,lo8(1)
 319 0010 E0E0      		ldi r30,lo8(state)
 320 0012 F0E0      		ldi r31,hi8(state)
 321 0014 892F      		mov r24,r25
 322               	.L5:
  81:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
  82:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	for (i=0;i<2; i++) {
  83:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 		state[i].msgHdr = NULL;
 324               	.LM6:
 325 0016 1382      		std Z+3,__zero_reg__
 326 0018 1482      		std Z+4,__zero_reg__
  84:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 		state[i].crc = 0;
 328               	.LM7:
 329 001a 1782      		std Z+7,__zero_reg__
 330 001c 1086      		std Z+8,__zero_reg__
  85:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 		state[i].buff = NULL;
 332               	.LM8:
 333 001e 1582      		std Z+5,__zero_reg__
 334 0020 1682      		std Z+6,__zero_reg__
  86:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 		state[i].idx = 0;
 336               	.LM9:
 337 0022 1286      		std Z+10,__zero_reg__
  87:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
  88:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 		state[i].flags = 0;
 339               	.LM10:
 340 0024 1386      		std Z+11,__zero_reg__
  89:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 		
  90:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 		state[i].msg_state = SOS_MSG_NO_STATE;
 342               	.LM11:
 343 0026 1182      		std Z+1,__zero_reg__
  91:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 		state[i].hdlc_state = HDLC_IDLE;
 345               	.LM12:
 346 0028 1282      		std Z+2,__zero_reg__
  92:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 		state[i].state = UART_IDLE;
 348               	.LM13:
 349 002a 9083      		st Z,r25
 351               	.LM14:
 352 002c 8150      		subi r24,lo8(-(-1))
 353 002e 3C96      		adiw r30,12
 354 0030 87FF      		sbrs r24,7
 355 0032 F1CF      		rjmp .L5
 356               	/* epilogue: frame size=0 */
 357 0034 0895      		ret
 358               	/* epilogue end (size=1) */
 359               	/* function uart_init size 27 (26) */
 364               	.Lscope0:
 367               	.global	uart_rx_msg_gc
 369               	uart_rx_msg_gc:
  93:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	}
  94:/Users/Administrator/sos-2x/drivers/uart/uart.c **** }
  95:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
  96:/Users/Administrator/sos-2x/drivers/uart/uart.c **** void uart_rx_msg_gc( void )
  97:/Users/Administrator/sos-2x/drivers/uart/uart.c **** {
 371               	.LM15:
 372               	/* prologue: frame size=0 */
 373               	/* prologue end (size=0) */
  98:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	if( state[RX].msgHdr != NULL ) {
 375               	.LM16:
 376 0036 8091 0000 		lds r24,state+15
 377 003a 9091 0000 		lds r25,(state+15)+1
 378 003e 0097      		sbiw r24,0
 379 0040 11F0      		breq .L8
  99:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 		mq_gc_mark_one_hdr( state[RX].msgHdr );
 381               	.LM17:
 382 0042 0E94 0000 		call mq_gc_mark_one_hdr
 383               	.L8:
 384 0046 0895      		ret
 385               	/* epilogue: frame size=0 */
 386 0048 0895      		ret
 387               	/* epilogue end (size=1) */
 388               	/* function uart_rx_msg_gc size 10 (9) */
 390               	.Lscope1:
 394               	.global	uart_getState
 396               	uart_getState:
 100:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	}
 101:/Users/Administrator/sos-2x/drivers/uart/uart.c **** }
 102:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
 103:/Users/Administrator/sos-2x/drivers/uart/uart.c **** static inline void uart_send_byte(uint8_t byte) {
 104:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	static uint8_t saved_state;
 105:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
 106:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	if ((state[TX].flags & UART_CRC_FLAG) && (state[TX].hdlc_state == HDLC_DATA)) {
 107:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 		state[TX].crc = crcByte(state[TX].crc, byte);
 108:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	}
 109:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	if (state[TX].hdlc_state == HDLC_ESCAPE) {
 110:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 		uart_setByte(0x20 ^ byte);
 111:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 		state[TX].hdlc_state = saved_state;
 112:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	} else if ((byte == HDLC_FLAG) || (byte == HDLC_CTR_ESC) || (byte == HDLC_EXT)) {
 113:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 		saved_state = state[TX].hdlc_state;
 114:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 		state[TX].hdlc_state = HDLC_ESCAPE;
 115:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 		uart_setByte(HDLC_CTR_ESC);
 116:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 		return;
 117:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	} else {
 118:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 		uart_setByte(byte);
 119:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	}
 120:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	state[TX].idx++;
 121:/Users/Administrator/sos-2x/drivers/uart/uart.c **** }
 122:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
 123:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
 124:/Users/Administrator/sos-2x/drivers/uart/uart.c **** uint8_t uart_getState(uint8_t flags) {
 398               	.LM18:
 399               	/* prologue: frame size=0 */
 400               	/* prologue end (size=0) */
 125:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	if (flags & UART_SYS_TX_FLAG) {
 402               	.LM19:
 403 004a 86FF      		sbrs r24,6
 404 004c 04C0      		rjmp .L11
 126:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 		return state[TX].state;
 406               	.LM20:
 407 004e 8091 0000 		lds r24,state
 408 0052 9927      		clr r25
 409 0054 0895      		ret
 410               	.L11:
 127:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	}
 128:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	return state[RX].state;
 412               	.LM21:
 413 0056 8091 0000 		lds r24,state+12
 414 005a 9927      		clr r25
 129:/Users/Administrator/sos-2x/drivers/uart/uart.c **** }
 416               	.LM22:
 417 005c 0895      		ret
 418               	/* epilogue: frame size=0 */
 419 005e 0895      		ret
 420               	/* epilogue end (size=1) */
 421               	/* function uart_getState size 11 (10) */
 423               	.Lscope2:
 429               	.global	uart_startTransceiverTx
 431               	uart_startTransceiverTx:
 130:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
 131:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
 132:/Users/Administrator/sos-2x/drivers/uart/uart.c **** int8_t uart_startTransceiverTx( uint8_t *msg, uint8_t msg_len, uint8_t flags) {
 433               	.LM23:
 434               	/* prologue: frame size=0 */
 435               	/* prologue end (size=0) */
 436 0060 FC01      		movw r30,r24
 133:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
 134:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	if (state[TX].state != UART_IDLE) {
 438               	.LM24:
 439 0062 8091 0000 		lds r24,state
 440 0066 8130      		cpi r24,lo8(1)
 441 0068 19F0      		breq .L13
 135:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 		//DEBUG("uart_startTransceiverTx Fail!!! ***\n");
 136:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 		return -EBUSY;
 443               	.LM25:
 444 006a 80EF      		ldi r24,lo8(-16)
 445 006c 9FEF      		ldi r25,hi8(-16)
 446 006e 0895      		ret
 447               	.L13:
 137:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	}
 138:/Users/Administrator/sos-2x/drivers/uart/uart.c ****   
 139:/Users/Administrator/sos-2x/drivers/uart/uart.c ****   state[TX].flags = UART_SYS_SHARED_FLAGS_MSK & flags;  // get shared flags
 449               	.LM26:
 450 0070 842F      		mov r24,r20
 451 0072 817D      		andi r24,lo8(-47)
 452 0074 8093 0000 		sts state+11,r24
 140:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	if (state[TX].flags & UART_SOS_MSG_FLAG) {
 454               	.LM27:
 455 0078 87FF      		sbrs r24,7
 456 007a 0EC0      		rjmp .L14
 141:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 		state[TX].msgHdr = (Message*)msg;
 458               	.LM28:
 459 007c F093 0000 		sts (state+3)+1,r31
 460 0080 E093 0000 		sts state+3,r30
 142:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 		state[TX].msgLen = state[TX].msgHdr->len; // if msg->len != msg_len ???
 462               	.LM29:
 463 0084 8781      		ldd r24,Z+7
 464 0086 8093 0000 		sts state+9,r24
 143:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 		state[TX].buff = state[TX].msgHdr->data;
 466               	.LM30:
 467 008a 8085      		ldd r24,Z+8
 468 008c 9185      		ldd r25,Z+9
 469 008e 9093 0000 		sts (state+5)+1,r25
 470 0092 8093 0000 		sts state+5,r24
 471 0096 06C0      		rjmp .L15
 472               	.L14:
 144:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	} else {
 145:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 		state[TX].buff = msg;
 474               	.LM31:
 475 0098 F093 0000 		sts (state+5)+1,r31
 476 009c E093 0000 		sts state+5,r30
 146:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 		state[TX].msgLen = msg_len;
 478               	.LM32:
 479 00a0 6093 0000 		sts state+9,r22
 480               	.L15:
 147:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	}
 148:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	state[TX].idx = 0;
 482               	.LM33:
 483 00a4 1092 0000 		sts state+10,__zero_reg__
 149:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	state[TX].state = UART_HDLC_START;
 485               	.LM34:
 486 00a8 82E0      		ldi r24,lo8(2)
 487 00aa 8093 0000 		sts state,r24
 150:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	state[TX].hdlc_state = HDLC_START;
 489               	.LM35:
 490 00ae 81E0      		ldi r24,lo8(1)
 491 00b0 8093 0000 		sts state+2,r24
 151:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
 152:/Users/Administrator/sos-2x/drivers/uart/uart.c ****   if(state[TX].msgHdr->type == MSG_TIMESTAMP){
 493               	.LM36:
 494 00b4 E091 0000 		lds r30,state+3
 495 00b8 F091 0000 		lds r31,(state+3)+1
 496 00bc 8681      		ldd r24,Z+6
 497 00be 8031      		cpi r24,lo8(16)
 498 00c0 79F4      		brne .L16
 499               	.LBB2:
 153:/Users/Administrator/sos-2x/drivers/uart/uart.c ****     uint32_t timestp = ker_systime32();
 501               	.LM37:
 502 00c2 0E94 0000 		call ker_systime32
 503 00c6 DC01      		movw r26,r24
 504 00c8 CB01      		movw r24,r22
 154:/Users/Administrator/sos-2x/drivers/uart/uart.c ****     memcpy(state[TX].msgHdr->data, (uint8_t*)(&timestp),sizeof(uint32_t));
 506               	.LM38:
 507 00ca E091 0000 		lds r30,state+3
 508 00ce F091 0000 		lds r31,(state+3)+1
 509 00d2 0084      		ldd __tmp_reg__,Z+8
 510 00d4 F185      		ldd r31,Z+9
 511 00d6 E02D      		mov r30,__tmp_reg__
 512 00d8 8083      		st Z,r24
 513 00da 9183      		std Z+1,r25
 514 00dc A283      		std Z+2,r26
 515 00de B383      		std Z+3,r27
 516               	.L16:
 517               	.LBE2:
 155:/Users/Administrator/sos-2x/drivers/uart/uart.c ****   }
 156:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	
 157:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	uart_enable_tx();
 519               	.LM39:
 520 00e0 569A      		sbi 42-0x20,6
 158:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	uart_setByte(HDLC_FLAG);
 522               	.LM40:
 523 00e2 8EE7      		ldi r24,lo8(126)
 524 00e4 8CB9      		out 44-0x20,r24
 159:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	//DEBUG("uart_startTransceiverTx Start!!! ***\n");
 160:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
 161:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	return SOS_OK;
 526               	.LM41:
 527 00e6 80E0      		ldi r24,lo8(0)
 528 00e8 90E0      		ldi r25,hi8(0)
 162:/Users/Administrator/sos-2x/drivers/uart/uart.c **** }
 530               	.LM42:
 531 00ea 0895      		ret
 532               	/* epilogue: frame size=0 */
 533 00ec 0895      		ret
 534               	/* epilogue end (size=1) */
 535               	/* function uart_startTransceiverTx size 71 (70) */
 537               	.Lscope3:
 542               	.global	uart_startTransceiverRx
 544               	uart_startTransceiverRx:
 163:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
 164:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
 165:/Users/Administrator/sos-2x/drivers/uart/uart.c **** int8_t uart_startTransceiverRx( uint8_t rx_len, uint8_t flags) {
 546               	.LM43:
 547               	/* prologue: frame size=0 */
 548 00ee CF93      		push r28
 549               	/* prologue end (size=1) */
 550 00f0 C82F      		mov r28,r24
 166:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
 167:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	if (state[RX].state != UART_IDLE) {
 552               	.LM44:
 553 00f2 8091 0000 		lds r24,state+12
 554 00f6 8130      		cpi r24,lo8(1)
 555 00f8 19F0      		breq .L18
 168:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 		return -EBUSY;
 557               	.LM45:
 558 00fa 80EF      		ldi r24,lo8(-16)
 559 00fc 9FEF      		ldi r25,hi8(-16)
 560 00fe 2DC0      		rjmp .L17
 561               	.L18:
 169:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	}
 170:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
 171:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	state[RX].flags = UART_SYS_SHARED_FLAGS_MSK & flags;  // get shared flags
 563               	.LM46:
 564 0100 862F      		mov r24,r22
 565 0102 817D      		andi r24,lo8(-47)
 566 0104 8093 0000 		sts state+23,r24
 172:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	if (flags & UART_SOS_MSG_FLAG) {
 568               	.LM47:
 569 0108 67FF      		sbrs r22,7
 570 010a 07C0      		rjmp .L19
 173:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 		state[RX].msgHdr = msg_create();
 572               	.LM48:
 573 010c 0E94 0000 		call msg_create
 574 0110 9093 0000 		sts (state+15)+1,r25
 575 0114 8093 0000 		sts state+15,r24
 576 0118 0AC0      		rjmp .L25
 577               	.L19:
 578               	.LBB3:
 579               	.LBB4:
 581               	.Ltext1:
   1:/Users/Administrator/sos-2x/kernel/include/malloc.h **** /* -*- Mode: C; tab-width:4 -*- */
   2:/Users/Administrator/sos-2x/kernel/include/malloc.h **** /* ex: set ts=4: */
   3:/Users/Administrator/sos-2x/kernel/include/malloc.h **** /*
   4:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * Copyright (c) 2003 The Regents of the University of California.
   5:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * All rights reserved.
   6:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  *
   7:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * Redistribution and use in source and binary forms, with or without
   8:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * modification, are permitted provided that the following conditions
   9:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * are met:
  10:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * 1. Redistributions of source code must retain the above copyright
  11:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  *    notice, this list of conditions and the following disclaimer.
  12:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * 2. Redistributions in binary form must reproduce the above
  13:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  *    copyright notice, this list of conditions and the following
  14:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  *    disclaimer in the documentation and/or other materials provided
  15:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  *    with the distribution.
  16:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * 3. All advertising materials mentioning features or use of this
  17:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  *    software must display the following acknowledgement:
  18:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  *       This product includes software developed by Networked &
  19:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  *       Embedded Systems Lab at UCLA
  20:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * 4. Neither the name of the University nor that of the Laboratory
  21:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  *    may be used to endorse or promote products derived from this
  22:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  *    software without specific prior written permission.
  23:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  *
  24:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS''
  25:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
  26:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
  27:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS
  28:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  29:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  30:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
  31:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  32:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  33:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
  34:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
  35:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * SUCH DAMAGE.
  36:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  *
  37:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @brief    Allocte and free dynamic memory 
  38:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @author   Roy Shea (roy@cs.ucla.edu) 
  39:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  */
  40:/Users/Administrator/sos-2x/kernel/include/malloc.h **** #ifndef _MALLOC_H_
  41:/Users/Administrator/sos-2x/kernel/include/malloc.h **** #define _MALLOC_H_
  42:/Users/Administrator/sos-2x/kernel/include/malloc.h **** 
  43:/Users/Administrator/sos-2x/kernel/include/malloc.h **** #include <sos_types.h>
  44:/Users/Administrator/sos-2x/kernel/include/malloc.h **** #include <pid.h>
  45:/Users/Administrator/sos-2x/kernel/include/malloc.h **** #include <malloc_conf.h>
  46:/Users/Administrator/sos-2x/kernel/include/malloc.h **** #include <sos_module_types.h>
  47:/Users/Administrator/sos-2x/kernel/include/malloc.h **** #ifdef FAULT_TOLERANT_SOS
  48:/Users/Administrator/sos-2x/kernel/include/malloc.h **** #include <malloc_domains.h>
  49:/Users/Administrator/sos-2x/kernel/include/malloc.h **** #endif
  50:/Users/Administrator/sos-2x/kernel/include/malloc.h **** 
  51:/Users/Administrator/sos-2x/kernel/include/malloc.h **** /**
  52:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @brief Init function for memory manager
  53:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  */
  54:/Users/Administrator/sos-2x/kernel/include/malloc.h **** extern void mem_init(void);
  55:/Users/Administrator/sos-2x/kernel/include/malloc.h **** 
  56:/Users/Administrator/sos-2x/kernel/include/malloc.h **** /**
  57:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @brief Starting memory module interface
  58:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  */
  59:/Users/Administrator/sos-2x/kernel/include/malloc.h **** extern void mem_start(void);
  60:/Users/Administrator/sos-2x/kernel/include/malloc.h **** 
  61:/Users/Administrator/sos-2x/kernel/include/malloc.h **** /**
  62:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @brief Allocate a chunk of blocks from the heap
  63:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  */
  64:/Users/Administrator/sos-2x/kernel/include/malloc.h **** extern void *sos_blk_mem_alloc(uint16_t size, sos_pid_t id, bool bCallFromModule);
  65:/Users/Administrator/sos-2x/kernel/include/malloc.h **** 
  66:/Users/Administrator/sos-2x/kernel/include/malloc.h **** /**
  67:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @brief Free a block back into the heap
  68:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  */
  69:/Users/Administrator/sos-2x/kernel/include/malloc.h **** extern void sos_blk_mem_free(void* ptr, bool bCallFromModule);
  70:/Users/Administrator/sos-2x/kernel/include/malloc.h **** 
  71:/Users/Administrator/sos-2x/kernel/include/malloc.h **** /**
  72:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @brief Re-allocate a block of memory from the heap
  73:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  */
  74:/Users/Administrator/sos-2x/kernel/include/malloc.h **** extern void *sos_blk_mem_realloc(void* pntr, uint16_t newSize, bool bCallFromModule);
  75:/Users/Administrator/sos-2x/kernel/include/malloc.h **** 
  76:/Users/Administrator/sos-2x/kernel/include/malloc.h **** /**
  77:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @brief Change memory ownership of a segment of memory
  78:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  */
  79:/Users/Administrator/sos-2x/kernel/include/malloc.h **** extern int8_t sos_blk_mem_change_own(void* ptr, sos_pid_t id, bool bCallFromModule);
  80:/Users/Administrator/sos-2x/kernel/include/malloc.h **** 
  81:/Users/Administrator/sos-2x/kernel/include/malloc.h **** /**
  82:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @brief Allocate a block of memory for long term usage
  83:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  */
  84:/Users/Administrator/sos-2x/kernel/include/malloc.h **** extern void *sos_blk_mem_longterm_alloc(uint16_t size, sos_pid_t id, bool bCallFromModule);
  85:/Users/Administrator/sos-2x/kernel/include/malloc.h **** 
  86:/Users/Administrator/sos-2x/kernel/include/malloc.h **** 
  87:/Users/Administrator/sos-2x/kernel/include/malloc.h **** /**
  88:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @brief Allocate dynamic memory
  89:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @param size Number of bytes to allocate
  90:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @param id Node responsible for the memory
  91:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @return Returns a pointer to the allocated memory.
  92:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * Will return a NULL pointer if the call to sys_malloc fails.
  93:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  */
  94:/Users/Administrator/sos-2x/kernel/include/malloc.h **** static inline void *ker_malloc(uint16_t size, sos_pid_t id)
  95:/Users/Administrator/sos-2x/kernel/include/malloc.h **** {
  96:/Users/Administrator/sos-2x/kernel/include/malloc.h ****   return sos_blk_mem_alloc(size, id, false);
 583               	.LM49:
 584 011a 40E0      		ldi r20,lo8(0)
 585 011c 62E4      		ldi r22,lo8(66)
 586 011e 8C2F      		mov r24,r28
 587 0120 9927      		clr r25
 588 0122 0E94 0000 		call sos_blk_mem_alloc
 589               	.LBE4:
 590               	.LBE3:
 592               	.LM50:
 593 0126 9093 0000 		sts (state+17)+1,r25
 594 012a 8093 0000 		sts state+17,r24
 595               	.L25:
 597               	.Ltext2:
 174:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 		if (state[RX].msgHdr == NULL) {
 175:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 			return -ENOMEM;
 176:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 		}
 177:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	} else {
 178:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 		state[RX].buff = ker_malloc(rx_len, UART_PID);
 179:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 		if (state[RX].buff == NULL) {
 599               	.LM51:
 600 012e 892B      		or r24,r25
 601 0130 19F4      		brne .L21
 180:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 			return -ENOMEM;
 603               	.LM52:
 604 0132 84EF      		ldi r24,lo8(-12)
 605 0134 9FEF      		ldi r25,hi8(-12)
 606 0136 11C0      		rjmp .L17
 607               	.L21:
 181:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 		}
 182:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	}
 183:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	state[RX].msgLen = rx_len;  // expected rx_len
 609               	.LM53:
 610 0138 C093 0000 		sts state+21,r28
 184:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
 185:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	state[RX].idx = 0;
 612               	.LM54:
 613 013c 1092 0000 		sts state+22,__zero_reg__
 186:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	state[RX].crc = 0;
 615               	.LM55:
 616 0140 1092 0000 		sts (state+19)+1,__zero_reg__
 617 0144 1092 0000 		sts state+19,__zero_reg__
 187:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	state[RX].state = UART_HDLC_START;
 619               	.LM56:
 620 0148 82E0      		ldi r24,lo8(2)
 621 014a 8093 0000 		sts state+12,r24
 188:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	state[RX].hdlc_state = HDLC_START;
 623               	.LM57:
 624 014e 81E0      		ldi r24,lo8(1)
 625 0150 8093 0000 		sts state+14,r24
 189:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	
 190:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	uart_enable_rx();
 627               	.LM58:
 628 0154 579A      		sbi 42-0x20,7
 191:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	
 192:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	return SOS_OK;
 630               	.LM59:
 631 0156 80E0      		ldi r24,lo8(0)
 632 0158 90E0      		ldi r25,hi8(0)
 633               	.L17:
 634               	/* epilogue: frame size=0 */
 635 015a CF91      		pop r28
 636 015c 0895      		ret
 637               	/* epilogue end (size=2) */
 638               	/* function uart_startTransceiverRx size 56 (53) */
 640               	.Lscope4:
 643               	.global	uart_getRecievedData
 645               	uart_getRecievedData:
 193:/Users/Administrator/sos-2x/drivers/uart/uart.c **** }
 194:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
 195:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
 196:/Users/Administrator/sos-2x/drivers/uart/uart.c **** uint8_t *uart_getRecievedData(void) {
 647               	.LM60:
 648               	/* prologue: frame size=0 */
 649               	/* prologue end (size=0) */
 197:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	HAS_CRITICAL_SECTION;
 198:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
 199:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	if (state[RX].flags & UART_DATA_RDY_FLAG) {
 651               	.LM61:
 652 015e 4091 0000 		lds r20,state+23
 653 0162 842F      		mov r24,r20
 654 0164 9927      		clr r25
 655 0166 25E0      		ldi r18,5
 656 0168 9695      	1:	lsr r25
 657 016a 8795      		ror r24
 658 016c 2A95      		dec r18
 659 016e E1F7      		brne 1b
 660 0170 9C01      		movw r18,r24
 661 0172 2170      		andi r18,lo8(1)
 662 0174 3070      		andi r19,hi8(1)
 663 0176 80FF      		sbrs r24,0
 664 0178 14C0      		rjmp .L27
 200:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 		ENTER_CRITICAL_SECTION();
 666               	.LM62:
 667               	/* #APP */
 668 017a 8FB7      		in r24, __SREG__
 669 017c F894      		cli
 670               		
 201:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 		state[RX].flags &= ~UART_DATA_RDY_FLAG;
 672               	.LM63:
 673               	/* #NOAPP */
 674 017e 4F7D      		andi r20,lo8(-33)
 675 0180 4093 0000 		sts state+23,r20
 202:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 		LEAVE_CRITICAL_SECTION();
 677               	.LM64:
 678               	/* #APP */
 679 0184 8FBF      		out __SREG__, r24
 680               		
 203:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
 204:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 		return (state[RX].flags & UART_SOS_MSG_FLAG)?(uint8_t*)state[RX].msgHdr:state[RX].buff;
 682               	.LM65:
 683               	/* #NOAPP */
 684 0186 8091 0000 		lds r24,state+23
 685 018a 87FF      		sbrs r24,7
 686 018c 05C0      		rjmp .L28
 687 018e 8091 0000 		lds r24,state+15
 688 0192 9091 0000 		lds r25,(state+15)+1
 689 0196 0895      		ret
 690               	.L28:
 691 0198 8091 0000 		lds r24,state+17
 692 019c 9091 0000 		lds r25,(state+17)+1
 693 01a0 0895      		ret
 694               	.L27:
 205:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	}
 206:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
 207:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	return NULL;
 696               	.LM66:
 697 01a2 C901      		movw r24,r18
 208:/Users/Administrator/sos-2x/drivers/uart/uart.c **** }
 699               	.LM67:
 700 01a4 0895      		ret
 701               	/* epilogue: frame size=0 */
 702 01a6 0895      		ret
 703               	/* epilogue end (size=1) */
 704               	/* function uart_getRecievedData size 44 (43) */
 709               	.Lscope5:
 711               		.lcomm saved_state.2,1
 713               	.global	__vector_20
 715               	__vector_20:
 209:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
 210:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
 211:/Users/Administrator/sos-2x/drivers/uart/uart.c **** /* ISR for transmittion */
 212:/Users/Administrator/sos-2x/drivers/uart/uart.c **** #ifndef DISABLE_UART
 213:/Users/Administrator/sos-2x/drivers/uart/uart.c **** uart_send_interrupt() {
 717               	.LM68:
 718               	/* prologue: frame size=0 */
 719 01a8 1F92      		push __zero_reg__
 720 01aa 0F92      		push __tmp_reg__
 721 01ac 0FB6      		in __tmp_reg__,__SREG__
 722 01ae 0F92      		push __tmp_reg__
 723 01b0 1124      		clr __zero_reg__
 724 01b2 2F93      		push r18
 725 01b4 3F93      		push r19
 726 01b6 4F93      		push r20
 727 01b8 5F93      		push r21
 728 01ba 6F93      		push r22
 729 01bc 7F93      		push r23
 730 01be 8F93      		push r24
 731 01c0 9F93      		push r25
 732 01c2 AF93      		push r26
 733 01c4 BF93      		push r27
 734 01c6 EF93      		push r30
 735 01c8 FF93      		push r31
 736               	/* prologue end (size=17) */
 214:/Users/Administrator/sos-2x/drivers/uart/uart.c **** #ifdef SOS_USE_PREEMPTION
 215:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	HAS_PREEMPTION_SECTION;
 216:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	DISABLE_PREEMPTION();
 217:/Users/Administrator/sos-2x/drivers/uart/uart.c **** #endif
 218:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	SOS_MEASUREMENT_IDLE_END();
 219:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	LED_DBG(LED_GREEN_TOGGLE);
 220:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
 221:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	//DEBUG("uart_send_interrupt %d %d %d\n", state[TX].state, state[TX].msg_state,
 222:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	//		state[TX].hdlc_state);
 223:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	switch (state[TX].state) {
 738               	.LM69:
 739 01ca 8091 0000 		lds r24,state
 740 01ce 9927      		clr r25
 741 01d0 8430      		cpi r24,4
 742 01d2 9105      		cpc r25,__zero_reg__
 743 01d4 09F4      		brne .+2
 744 01d6 3EC0      		rjmp .L42
 746               	.LM70:
 747 01d8 8530      		cpi r24,5
 748 01da 9105      		cpc r25,__zero_reg__
 749 01dc 34F4      		brge .L94
 750 01de 8230      		cpi r24,2
 751 01e0 9105      		cpc r25,__zero_reg__
 752 01e2 59F0      		breq .L32
 753 01e4 0397      		sbiw r24,3
 754 01e6 51F1      		breq .L39
 755 01e8 C5C1      		rjmp .L93
 756               	.L94:
 757 01ea 8530      		cpi r24,5
 758 01ec 9105      		cpc r25,__zero_reg__
 759 01ee 09F4      		brne .+2
 760 01f0 B0C1      		rjmp .L91
 761 01f2 0697      		sbiw r24,6
 762 01f4 09F4      		brne .+2
 763 01f6 B5C1      		rjmp .L92
 764 01f8 BDC1      		rjmp .L93
 765               	.L32:
 224:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 		case UART_HDLC_START:
 225:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 			uart_setByte((state[TX].flags & UART_SOS_MSG_FLAG)?HDLC_SOS_MSG:HDLC_RAW);
 767               	.LM71:
 768 01fa 9091 0000 		lds r25,state+11
 769 01fe 97FF      		sbrs r25,7
 770 0200 02C0      		rjmp .L33
 771 0202 81E0      		ldi r24,lo8(1)
 772 0204 01C0      		rjmp .L34
 773               	.L33:
 774 0206 85E0      		ldi r24,lo8(5)
 775               	.L34:
 776 0208 8CB9      		out 44-0x20,r24
 226:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 			state[TX].hdlc_state = HDLC_DATA;
 778               	.LM72:
 779 020a 86E0      		ldi r24,lo8(6)
 780 020c 8093 0000 		sts state+2,r24
 227:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 			state[TX].state = UART_PROTOCOL;
 782               	.LM73:
 783 0210 83E0      		ldi r24,lo8(3)
 784 0212 8093 0000 		sts state,r24
 228:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 			if (state[TX].flags & UART_CRC_FLAG) {
 786               	.LM74:
 787 0216 97FF      		sbrs r25,7
 788 0218 BCC1      		rjmp .L30
 789               	.LBB5:
 790               	.LBB6:
 792               	.Ltext3:
   1:/Users/Administrator/sos-2x/processor/avr/include/crc.h **** /* -*- Mode: C; tab-width:4 -*- */
   2:/Users/Administrator/sos-2x/processor/avr/include/crc.h **** /* ex: set ts=4: */
   3:/Users/Administrator/sos-2x/processor/avr/include/crc.h **** /*									tab:4
   4:/Users/Administrator/sos-2x/processor/avr/include/crc.h ****  * "Copyright (c) 2000-2003 The Regents of the University  of California.  
   5:/Users/Administrator/sos-2x/processor/avr/include/crc.h ****  * All rights reserved.
   6:/Users/Administrator/sos-2x/processor/avr/include/crc.h ****  *
   7:/Users/Administrator/sos-2x/processor/avr/include/crc.h ****  * Permission to use, copy, modify, and distribute this software and its
   8:/Users/Administrator/sos-2x/processor/avr/include/crc.h ****  * documentation for any purpose, without fee, and without written agreement is
   9:/Users/Administrator/sos-2x/processor/avr/include/crc.h ****  * hereby granted, provided that the above copyright notice, the following
  10:/Users/Administrator/sos-2x/processor/avr/include/crc.h ****  * two paragraphs and the author appear in all copies of this software.
  11:/Users/Administrator/sos-2x/processor/avr/include/crc.h ****  * 
  12:/Users/Administrator/sos-2x/processor/avr/include/crc.h ****  * IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR
  13:/Users/Administrator/sos-2x/processor/avr/include/crc.h ****  * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT
  14:/Users/Administrator/sos-2x/processor/avr/include/crc.h ****  * OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF THE UNIVERSITY OF
  15:/Users/Administrator/sos-2x/processor/avr/include/crc.h ****  * CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  16:/Users/Administrator/sos-2x/processor/avr/include/crc.h ****  * 
  17:/Users/Administrator/sos-2x/processor/avr/include/crc.h ****  * THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
  18:/Users/Administrator/sos-2x/processor/avr/include/crc.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
  19:/Users/Administrator/sos-2x/processor/avr/include/crc.h ****  * AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
  20:/Users/Administrator/sos-2x/processor/avr/include/crc.h ****  * ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATION TO
  21:/Users/Administrator/sos-2x/processor/avr/include/crc.h ****  * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS."
  22:/Users/Administrator/sos-2x/processor/avr/include/crc.h ****  *
  23:/Users/Administrator/sos-2x/processor/avr/include/crc.h ****  * Copyright (c) 2002-2003 Intel Corporation
  24:/Users/Administrator/sos-2x/processor/avr/include/crc.h ****  * All rights reserved.
  25:/Users/Administrator/sos-2x/processor/avr/include/crc.h ****  *
  26:/Users/Administrator/sos-2x/processor/avr/include/crc.h ****  * This file is distributed under the terms in the attached INTEL-LICENSE     
  27:/Users/Administrator/sos-2x/processor/avr/include/crc.h ****  * file. If you do not find these files, copies can be found by writing to
  28:/Users/Administrator/sos-2x/processor/avr/include/crc.h ****  * Intel Research Berkeley, 2150 Shattuck Avenue, Suite 1300, Berkeley, CA, 
  29:/Users/Administrator/sos-2x/processor/avr/include/crc.h ****  * 94704.  Attention:  Intel License Inquiry.
  30:/Users/Administrator/sos-2x/processor/avr/include/crc.h ****  */
  31:/Users/Administrator/sos-2x/processor/avr/include/crc.h **** #ifndef _CRC_H
  32:/Users/Administrator/sos-2x/processor/avr/include/crc.h **** #define _CRC_H
  33:/Users/Administrator/sos-2x/processor/avr/include/crc.h **** 
  34:/Users/Administrator/sos-2x/processor/avr/include/crc.h **** extern uint16_t crcTable[256] PROGMEM;  //!< this is defined in crc.c
  35:/Users/Administrator/sos-2x/processor/avr/include/crc.h **** 
  36:/Users/Administrator/sos-2x/processor/avr/include/crc.h **** static inline uint16_t crcByte(uint16_t oldCrc, uint8_t byte)
  37:/Users/Administrator/sos-2x/processor/avr/include/crc.h **** {
  38:/Users/Administrator/sos-2x/processor/avr/include/crc.h ****   uint8_t *magic = (uint8_t *)&crcTable[oldCrc >> 8 ^ byte];
 794               	.LM75:
 795 021a E0E0      		ldi r30,lo8(crcTable+2)
 796 021c F0E0      		ldi r31,hi8(crcTable+2)
 797               	.LBB7:
  39:/Users/Administrator/sos-2x/processor/avr/include/crc.h **** 
  40:/Users/Administrator/sos-2x/processor/avr/include/crc.h ****   return pgm_read_byte(magic) | ((uint8_t)oldCrc ^ pgm_read_byte(magic + 1)) << 8;
 799               	.LM76:
 800               	/* #APP */
 801 021e 8491      		lpm r24, Z
 802               		
 803               	/* #NOAPP */
 804               	.LBE7:
 805 0220 282F      		mov r18,r24
 806 0222 3327      		clr r19
 807               	.LBB8:
 808 0224 3196      		adiw r30,1
 809               	/* #APP */
 810 0226 8491      		lpm r24, Z
 811               		
 812               	/* #NOAPP */
 813               	.LBE8:
 814 0228 9927      		clr r25
 815 022a 982F      		mov r25,r24
 816 022c 8827      		clr r24
 817 022e 282B      		or r18,r24
 818 0230 392B      		or r19,r25
 819               	.LBE6:
 820               	.LBE5:
 822               	.LM77:
 823 0232 3093 0000 		sts (state+7)+1,r19
 824 0236 2093 0000 		sts state+7,r18
 826               	.Ltext4:
 229:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 				state[TX].crc = crcByte(0, (state[TX].flags & UART_SOS_MSG_FLAG)?HDLC_SOS_MSG:HDLC_RAW);
 230:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 			}
 231:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 			break;
 828               	.LM78:
 829 023a ABC1      		rjmp .L30
 830               	.L39:
 232:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
 233:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 		case UART_PROTOCOL:
 234:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 			state[TX].state = UART_DATA;
 832               	.LM79:
 833 023c 84E0      		ldi r24,lo8(4)
 834 023e 8093 0000 		sts state,r24
 235:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 			if (state[TX].flags & UART_SOS_MSG_FLAG) {
 836               	.LM80:
 837 0242 8091 0000 		lds r24,state+11
 838 0246 87FF      		sbrs r24,7
 839 0248 02C0      		rjmp .L40
 236:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 				state[TX].msg_state = SOS_MSG_TX_HDR;
 841               	.LM81:
 842 024a 87E0      		ldi r24,lo8(7)
 843 024c 01C0      		rjmp .L95
 844               	.L40:
 237:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 			} else {
 238:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 				state[TX].msg_state = SOS_MSG_TX_RAW;
 846               	.LM82:
 847 024e 82E0      		ldi r24,lo8(2)
 848               	.L95:
 849 0250 8093 0000 		sts state+1,r24
 850               	.L42:
 239:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 			}
 240:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 			// set state and fall through
 241:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 		case UART_DATA:
 242:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 			switch (state[TX].msg_state) {
 852               	.LM83:
 853 0254 8091 0000 		lds r24,state+1
 854 0258 9927      		clr r25
 855 025a 8830      		cpi r24,8
 856 025c 9105      		cpc r25,__zero_reg__
 857 025e 09F4      		brne .+2
 858 0260 73C0      		rjmp .L57
 859 0262 8930      		cpi r24,9
 860 0264 9105      		cpc r25,__zero_reg__
 861 0266 3CF4      		brge .L90
 862 0268 8230      		cpi r24,2
 863 026a 9105      		cpc r25,__zero_reg__
 864 026c 09F4      		brne .+2
 865 026e 6CC0      		rjmp .L57
 866 0270 0797      		sbiw r24,7
 867 0272 49F0      		breq .L44
 868 0274 8EC1      		rjmp .L30
 869               	.L90:
 870 0276 8930      		cpi r24,9
 871 0278 9105      		cpc r25,__zero_reg__
 872 027a 09F4      		brne .+2
 873 027c C9C0      		rjmp .L69
 874 027e 0A97      		sbiw r24,10
 875 0280 09F4      		brne .+2
 876 0282 16C1      		rjmp .L79
 877 0284 86C1      		rjmp .L30
 878               	.L44:
 879               	.LBB9:
 881               	.LM84:
 882 0286 7091 0000 		lds r23,state+10
 883 028a A091 0000 		lds r26,state+3
 884 028e B091 0000 		lds r27,(state+3)+1
 885 0292 FD01      		movw r30,r26
 886 0294 E70F      		add r30,r23
 887 0296 F11D      		adc r31,__zero_reg__
 888 0298 6081      		ld r22,Z
 889               	.LBB10:
 891               	.LM85:
 892 029a 8091 0000 		lds r24,state+11
 893 029e 87FF      		sbrs r24,7
 894 02a0 21C0      		rjmp .L45
 895 02a2 8091 0000 		lds r24,state+2
 896 02a6 8630      		cpi r24,lo8(6)
 897 02a8 E9F4      		brne .L45
 898               	.LBB11:
 900               	.Ltext5:
 902               	.LM86:
 903 02aa 4091 0000 		lds r20,state+7
 904 02ae 5091 0000 		lds r21,(state+7)+1
 905               	.LBB12:
 907               	.LM87:
 908 02b2 E52F      		mov r30,r21
 909 02b4 FF27      		clr r31
 910 02b6 862F      		mov r24,r22
 911 02b8 9927      		clr r25
 912 02ba E827      		eor r30,r24
 913 02bc F927      		eor r31,r25
 914 02be EE0F      		add r30,r30
 915 02c0 FF1F      		adc r31,r31
 916 02c2 E050      		subi r30,lo8(-(crcTable))
 917 02c4 F040      		sbci r31,hi8(-(crcTable))
 918               	.LBB13:
 920               	.LM88:
 921               	/* #APP */
 922 02c6 8491      		lpm r24, Z
 923               		
 924               	/* #NOAPP */
 925               	.LBE13:
 926 02c8 282F      		mov r18,r24
 927 02ca 3327      		clr r19
 928               	.LBB14:
 929 02cc 3196      		adiw r30,1
 930               	/* #APP */
 931 02ce 8491      		lpm r24, Z
 932               		
 933               	/* #NOAPP */
 934               	.LBE14:
 935 02d0 8427      		eor r24,r20
 936 02d2 9927      		clr r25
 937 02d4 982F      		mov r25,r24
 938 02d6 8827      		clr r24
 939 02d8 282B      		or r18,r24
 940 02da 392B      		or r19,r25
 941               	.LBE12:
 942               	.LBE11:
 944               	.LM89:
 945 02dc 3093 0000 		sts (state+7)+1,r19
 946 02e0 2093 0000 		sts state+7,r18
 947               	.L45:
 949               	.Ltext6:
 951               	.LM90:
 952 02e4 9091 0000 		lds r25,state+2
 953 02e8 9730      		cpi r25,lo8(7)
 954 02ea 41F4      		brne .L47
 956               	.LM91:
 957 02ec 80E2      		ldi r24,lo8(32)
 958 02ee 6827      		eor r22,r24
 959 02f0 6CB9      		out 44-0x20,r22
 961               	.LM92:
 962 02f2 8091 0000 		lds r24,saved_state.2
 963 02f6 8093 0000 		sts state+2,r24
 964 02fa 0FC0      		rjmp .L48
 965               	.L47:
 967               	.LM93:
 968 02fc 862F      		mov r24,r22
 969 02fe 8D57      		subi r24,lo8(-(-125))
 970 0300 8230      		cpi r24,lo8(2)
 971 0302 10F0      		brlo .L50
 972 0304 6330      		cpi r22,lo8(3)
 973 0306 41F4      		brne .L49
 974               	.L50:
 976               	.LM94:
 977 0308 9093 0000 		sts saved_state.2,r25
 979               	.LM95:
 980 030c 87E0      		ldi r24,lo8(7)
 981 030e 8093 0000 		sts state+2,r24
 983               	.LM96:
 984 0312 8DE7      		ldi r24,lo8(125)
 985 0314 8CB9      		out 44-0x20,r24
 986 0316 04C0      		rjmp .L51
 987               	.L49:
 989               	.LM97:
 990 0318 6CB9      		out 44-0x20,r22
 991               	.L48:
 993               	.LM98:
 994 031a 7F5F      		subi r23,lo8(-(1))
 995 031c 7093 0000 		sts state+10,r23
 996               	.L51:
 997               	.LBE10:
 998               	.LBE9:
 243:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 				case SOS_MSG_TX_HDR:
 244:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 					uart_send_byte(((uint8_t*)(state[TX].msgHdr))[state[TX].idx]);
 245:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 					if ((state[TX].idx == SOS_MSG_HEADER_SIZE) && (state[TX].hdlc_state != HDLC_ESCAPE)) {
 1000               	.LM99:
 1001 0320 9091 0000 		lds r25,state+10
 1002 0324 9830      		cpi r25,lo8(8)
 1003 0326 09F0      		breq .+2
 1004 0328 34C1      		rjmp .L30
 1005 032a 8091 0000 		lds r24,state+2
 1006 032e 8730      		cpi r24,lo8(7)
 1007 0330 09F4      		brne .+2
 1008 0332 2FC1      		rjmp .L30
 246:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 						state[TX].idx = 0;
 1010               	.LM100:
 1011 0334 1092 0000 		sts state+10,__zero_reg__
 247:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 						if (state[TX].msgHdr->len != 0) {
 1013               	.LM101:
 1014 0338 FD01      		movw r30,r26
 1015 033a 8781      		ldd r24,Z+7
 1016 033c 8823      		tst r24
 1017 033e 09F4      		brne .+2
 1018 0340 5DC0      		rjmp .L98
 248:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 							state[TX].msg_state = SOS_MSG_TX_DATA;
 1020               	.LM102:
 1021 0342 9093 0000 		sts state+1,r25
 1022 0346 25C1      		rjmp .L30
 1023               	.L57:
 1024               	.LBB15:
 1026               	.LM103:
 1027 0348 7091 0000 		lds r23,state+10
 1028 034c E091 0000 		lds r30,state+5
 1029 0350 F091 0000 		lds r31,(state+5)+1
 1030 0354 E70F      		add r30,r23
 1031 0356 F11D      		adc r31,__zero_reg__
 1032 0358 6081      		ld r22,Z
 1033               	.LBB16:
 1035               	.LM104:
 1036 035a A091 0000 		lds r26,state+11
 1037 035e A7FF      		sbrs r26,7
 1038 0360 21C0      		rjmp .L58
 1039 0362 8091 0000 		lds r24,state+2
 1040 0366 8630      		cpi r24,lo8(6)
 1041 0368 E9F4      		brne .L58
 1042               	.LBB17:
 1044               	.Ltext7:
 1046               	.LM105:
 1047 036a 4091 0000 		lds r20,state+7
 1048 036e 5091 0000 		lds r21,(state+7)+1
 1049               	.LBB18:
 1051               	.LM106:
 1052 0372 E52F      		mov r30,r21
 1053 0374 FF27      		clr r31
 1054 0376 862F      		mov r24,r22
 1055 0378 9927      		clr r25
 1056 037a E827      		eor r30,r24
 1057 037c F927      		eor r31,r25
 1058 037e EE0F      		add r30,r30
 1059 0380 FF1F      		adc r31,r31
 1060 0382 E050      		subi r30,lo8(-(crcTable))
 1061 0384 F040      		sbci r31,hi8(-(crcTable))
 1062               	.LBB19:
 1064               	.LM107:
 1065               	/* #APP */
 1066 0386 8491      		lpm r24, Z
 1067               		
 1068               	/* #NOAPP */
 1069               	.LBE19:
 1070 0388 282F      		mov r18,r24
 1071 038a 3327      		clr r19
 1072               	.LBB20:
 1073 038c 3196      		adiw r30,1
 1074               	/* #APP */
 1075 038e 8491      		lpm r24, Z
 1076               		
 1077               	/* #NOAPP */
 1078               	.LBE20:
 1079 0390 8427      		eor r24,r20
 1080 0392 9927      		clr r25
 1081 0394 982F      		mov r25,r24
 1082 0396 8827      		clr r24
 1083 0398 282B      		or r18,r24
 1084 039a 392B      		or r19,r25
 1085               	.LBE18:
 1086               	.LBE17:
 1088               	.LM108:
 1089 039c 3093 0000 		sts (state+7)+1,r19
 1090 03a0 2093 0000 		sts state+7,r18
 1091               	.L58:
 1093               	.Ltext8:
 1095               	.LM109:
 1096 03a4 9091 0000 		lds r25,state+2
 1097 03a8 9730      		cpi r25,lo8(7)
 1098 03aa 41F4      		brne .L60
 1100               	.LM110:
 1101 03ac 80E2      		ldi r24,lo8(32)
 1102 03ae 6827      		eor r22,r24
 1103 03b0 6CB9      		out 44-0x20,r22
 1105               	.LM111:
 1106 03b2 8091 0000 		lds r24,saved_state.2
 1107 03b6 8093 0000 		sts state+2,r24
 1108 03ba 0FC0      		rjmp .L61
 1109               	.L60:
 1111               	.LM112:
 1112 03bc 862F      		mov r24,r22
 1113 03be 8D57      		subi r24,lo8(-(-125))
 1114 03c0 8230      		cpi r24,lo8(2)
 1115 03c2 10F0      		brlo .L63
 1116 03c4 6330      		cpi r22,lo8(3)
 1117 03c6 41F4      		brne .L62
 1118               	.L63:
 1120               	.LM113:
 1121 03c8 9093 0000 		sts saved_state.2,r25
 1123               	.LM114:
 1124 03cc 87E0      		ldi r24,lo8(7)
 1125 03ce 8093 0000 		sts state+2,r24
 1127               	.LM115:
 1128 03d2 8DE7      		ldi r24,lo8(125)
 1129 03d4 8CB9      		out 44-0x20,r24
 1130 03d6 04C0      		rjmp .L64
 1131               	.L62:
 1133               	.LM116:
 1134 03d8 6CB9      		out 44-0x20,r22
 1135               	.L61:
 1137               	.LM117:
 1138 03da 7F5F      		subi r23,lo8(-(1))
 1139 03dc 7093 0000 		sts state+10,r23
 1140               	.L64:
 1141               	.LBE16:
 1142               	.LBE15:
 249:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 						} else {
 250:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 							state[TX].hdlc_state = HDLC_CRC;
 251:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 							state[TX].msg_state = SOS_MSG_TX_CRC_LOW;
 252:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 						}
 253:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 					}
 254:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 					break;
 255:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
 256:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 				case SOS_MSG_TX_DATA:
 257:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 				case SOS_MSG_TX_RAW:
 258:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 					uart_send_byte(state[TX].buff[state[TX].idx]);
 259:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 					if ((state[TX].idx == state[TX].msgLen) && (state[TX].hdlc_state != HDLC_ESCAPE)) {
 1144               	.LM118:
 1145 03e0 9091 0000 		lds r25,state+10
 1146 03e4 8091 0000 		lds r24,state+9
 1147 03e8 9817      		cp r25,r24
 1148 03ea 09F0      		breq .+2
 1149 03ec D2C0      		rjmp .L30
 1150 03ee 8091 0000 		lds r24,state+2
 1151 03f2 8730      		cpi r24,lo8(7)
 1152 03f4 09F4      		brne .+2
 1153 03f6 CDC0      		rjmp .L30
 260:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 						if (state[TX].flags & UART_CRC_FLAG) {
 1155               	.LM119:
 1156 03f8 A7FF      		sbrs r26,7
 1157 03fa 04C0      		rjmp .L67
 1158               	.L98:
 261:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 							state[TX].hdlc_state = HDLC_CRC;
 1160               	.LM120:
 1161 03fc 89E0      		ldi r24,lo8(9)
 1162 03fe 8093 0000 		sts state+2,r24
 1163 0402 53C0      		rjmp .L97
 1164               	.L67:
 262:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 							state[TX].msg_state = SOS_MSG_TX_CRC_LOW;
 263:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 						} else { // no crc
 264:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 							state[TX].state = UART_END;
 1166               	.LM121:
 1167 0404 86E0      		ldi r24,lo8(6)
 1168 0406 8093 0000 		sts state,r24
 265:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 							uart_setByte(HDLC_FLAG);
 1170               	.LM122:
 1171 040a 8EE7      		ldi r24,lo8(126)
 1172 040c 8CB9      		out 44-0x20,r24
 266:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 						}
 267:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 					}
 268:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 					break;
 1174               	.LM123:
 1175 040e C1C0      		rjmp .L30
 1176               	.L69:
 1177               	.LBB21:
 1179               	.LM124:
 1180 0410 6091 0000 		lds r22,state+7
 1181               	.LBB22:
 1183               	.LM125:
 1184 0414 8091 0000 		lds r24,state+11
 1185 0418 87FF      		sbrs r24,7
 1186 041a 21C0      		rjmp .L70
 1187 041c 8091 0000 		lds r24,state+2
 1188 0420 8630      		cpi r24,lo8(6)
 1189 0422 E9F4      		brne .L70
 1190               	.LBB23:
 1192               	.Ltext9:
 1194               	.LM126:
 1195 0424 4091 0000 		lds r20,state+7
 1196 0428 5091 0000 		lds r21,(state+7)+1
 1197               	.LBB24:
 1199               	.LM127:
 1200 042c E52F      		mov r30,r21
 1201 042e FF27      		clr r31
 1202 0430 862F      		mov r24,r22
 1203 0432 9927      		clr r25
 1204 0434 E827      		eor r30,r24
 1205 0436 F927      		eor r31,r25
 1206 0438 EE0F      		add r30,r30
 1207 043a FF1F      		adc r31,r31
 1208 043c E050      		subi r30,lo8(-(crcTable))
 1209 043e F040      		sbci r31,hi8(-(crcTable))
 1210               	.LBB25:
 1212               	.LM128:
 1213               	/* #APP */
 1214 0440 8491      		lpm r24, Z
 1215               		
 1216               	/* #NOAPP */
 1217               	.LBE25:
 1218 0442 282F      		mov r18,r24
 1219 0444 3327      		clr r19
 1220               	.LBB26:
 1221 0446 3196      		adiw r30,1
 1222               	/* #APP */
 1223 0448 8491      		lpm r24, Z
 1224               		
 1225               	/* #NOAPP */
 1226               	.LBE26:
 1227 044a 8427      		eor r24,r20
 1228 044c 9927      		clr r25
 1229 044e 982F      		mov r25,r24
 1230 0450 8827      		clr r24
 1231 0452 282B      		or r18,r24
 1232 0454 392B      		or r19,r25
 1233               	.LBE24:
 1234               	.LBE23:
 1236               	.LM129:
 1237 0456 3093 0000 		sts (state+7)+1,r19
 1238 045a 2093 0000 		sts state+7,r18
 1239               	.L70:
 1241               	.Ltext10:
 1243               	.LM130:
 1244 045e 9091 0000 		lds r25,state+2
 1245 0462 9730      		cpi r25,lo8(7)
 1246 0464 41F4      		brne .L72
 1248               	.LM131:
 1249 0466 80E2      		ldi r24,lo8(32)
 1250 0468 6827      		eor r22,r24
 1251 046a 6CB9      		out 44-0x20,r22
 1253               	.LM132:
 1254 046c 8091 0000 		lds r24,saved_state.2
 1255 0470 8093 0000 		sts state+2,r24
 1256 0474 0FC0      		rjmp .L73
 1257               	.L72:
 1259               	.LM133:
 1260 0476 862F      		mov r24,r22
 1261 0478 8D57      		subi r24,lo8(-(-125))
 1262 047a 8230      		cpi r24,lo8(2)
 1263 047c 10F0      		brlo .L75
 1264 047e 6330      		cpi r22,lo8(3)
 1265 0480 41F4      		brne .L74
 1266               	.L75:
 1268               	.LM134:
 1269 0482 9093 0000 		sts saved_state.2,r25
 1271               	.LM135:
 1272 0486 87E0      		ldi r24,lo8(7)
 1273 0488 8093 0000 		sts state+2,r24
 1275               	.LM136:
 1276 048c 8DE7      		ldi r24,lo8(125)
 1277 048e 8CB9      		out 44-0x20,r24
 1278 0490 06C0      		rjmp .L76
 1279               	.L74:
 1281               	.LM137:
 1282 0492 6CB9      		out 44-0x20,r22
 1283               	.L73:
 1285               	.LM138:
 1286 0494 8091 0000 		lds r24,state+10
 1287 0498 8F5F      		subi r24,lo8(-(1))
 1288 049a 8093 0000 		sts state+10,r24
 1289               	.L76:
 1290               	.LBE22:
 1291               	.LBE21:
 269:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
 270:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 				case SOS_MSG_TX_CRC_LOW:
 271:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 					uart_send_byte((uint8_t)(state[TX].crc));
 272:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 					if (state[TX].hdlc_state != HDLC_ESCAPE) { //! crc was escaped, resend
 1293               	.LM139:
 1294 049e 8091 0000 		lds r24,state+2
 1295 04a2 8730      		cpi r24,lo8(7)
 1296 04a4 09F4      		brne .+2
 1297 04a6 75C0      		rjmp .L30
 273:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 						state[TX].msg_state = SOS_MSG_TX_CRC_HIGH;
 1299               	.LM140:
 1300 04a8 8AE0      		ldi r24,lo8(10)
 1301               	.L97:
 1302 04aa 8093 0000 		sts state+1,r24
 274:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 					}
 275:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 					break;
 1304               	.LM141:
 1305 04ae 71C0      		rjmp .L30
 1306               	.L79:
 1307               	.LBB27:
 1309               	.LM142:
 1310 04b0 6091 0000 		lds r22,state+7
 1311 04b4 7091 0000 		lds r23,(state+7)+1
 1312 04b8 272F      		mov r18,r23
 1313 04ba 3327      		clr r19
 1314 04bc 422F      		mov r20,r18
 1315               	.LBB28:
 1317               	.LM143:
 1318 04be 8091 0000 		lds r24,state+11
 1319 04c2 87FF      		sbrs r24,7
 1320 04c4 1BC0      		rjmp .L80
 1321 04c6 8091 0000 		lds r24,state+2
 1322 04ca 8630      		cpi r24,lo8(6)
 1323 04cc B9F4      		brne .L80
 1324               	.LBB29:
 1325               	.LBB30:
 1327               	.Ltext11:
 1329               	.LM144:
 1330 04ce E22F      		mov r30,r18
 1331 04d0 FF27      		clr r31
 1332 04d2 E227      		eor r30,r18
 1333 04d4 F327      		eor r31,r19
 1334 04d6 EE0F      		add r30,r30
 1335 04d8 FF1F      		adc r31,r31
 1336 04da E050      		subi r30,lo8(-(crcTable))
 1337 04dc F040      		sbci r31,hi8(-(crcTable))
 1338               	.LBB31:
 1340               	.LM145:
 1341               	/* #APP */
 1342 04de 8491      		lpm r24, Z
 1343               		
 1344               	/* #NOAPP */
 1345               	.LBE31:
 1346 04e0 282F      		mov r18,r24
 1347 04e2 3327      		clr r19
 1348               	.LBB32:
 1349 04e4 3196      		adiw r30,1
 1350               	/* #APP */
 1351 04e6 8491      		lpm r24, Z
 1352               		
 1353               	/* #NOAPP */
 1354               	.LBE32:
 1355 04e8 8627      		eor r24,r22
 1356 04ea 9927      		clr r25
 1357 04ec 982F      		mov r25,r24
 1358 04ee 8827      		clr r24
 1359 04f0 282B      		or r18,r24
 1360 04f2 392B      		or r19,r25
 1361               	.LBE30:
 1362               	.LBE29:
 1364               	.LM146:
 1365 04f4 3093 0000 		sts (state+7)+1,r19
 1366 04f8 2093 0000 		sts state+7,r18
 1367               	.L80:
 1369               	.Ltext12:
 1371               	.LM147:
 1372 04fc 9091 0000 		lds r25,state+2
 1373 0500 9730      		cpi r25,lo8(7)
 1374 0502 41F4      		brne .L82
 1376               	.LM148:
 1377 0504 80E2      		ldi r24,lo8(32)
 1378 0506 4827      		eor r20,r24
 1379 0508 4CB9      		out 44-0x20,r20
 1381               	.LM149:
 1382 050a 8091 0000 		lds r24,saved_state.2
 1383 050e 8093 0000 		sts state+2,r24
 1384 0512 0FC0      		rjmp .L83
 1385               	.L82:
 1387               	.LM150:
 1388 0514 842F      		mov r24,r20
 1389 0516 8D57      		subi r24,lo8(-(-125))
 1390 0518 8230      		cpi r24,lo8(2)
 1391 051a 10F0      		brlo .L85
 1392 051c 4330      		cpi r20,lo8(3)
 1393 051e 41F4      		brne .L84
 1394               	.L85:
 1396               	.LM151:
 1397 0520 9093 0000 		sts saved_state.2,r25
 1399               	.LM152:
 1400 0524 87E0      		ldi r24,lo8(7)
 1401 0526 8093 0000 		sts state+2,r24
 1403               	.LM153:
 1404 052a 8DE7      		ldi r24,lo8(125)
 1405 052c 8CB9      		out 44-0x20,r24
 1406 052e 06C0      		rjmp .L86
 1407               	.L84:
 1409               	.LM154:
 1410 0530 4CB9      		out 44-0x20,r20
 1411               	.L83:
 1413               	.LM155:
 1414 0532 8091 0000 		lds r24,state+10
 1415 0536 8F5F      		subi r24,lo8(-(1))
 1416 0538 8093 0000 		sts state+10,r24
 1417               	.L86:
 1418               	.LBE28:
 1419               	.LBE27:
 276:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
 277:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 				case SOS_MSG_TX_CRC_HIGH:
 278:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 					uart_send_byte((uint8_t)(state[TX].crc >> 8));
 279:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 					if (state[TX].hdlc_state != HDLC_ESCAPE) { //! resend low byte
 1421               	.LM156:
 1422 053c 8091 0000 		lds r24,state+2
 1423 0540 8730      		cpi r24,lo8(7)
 1424 0542 39F1      		breq .L30
 280:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 						state[TX].msg_state = SOS_MSG_TX_END;
 1426               	.LM157:
 1427 0544 8BE0      		ldi r24,lo8(11)
 1428 0546 8093 0000 		sts state+1,r24
 281:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 						state[TX].state = UART_HDLC_STOP;
 1430               	.LM158:
 1431 054a 85E0      		ldi r24,lo8(5)
 1432 054c 8093 0000 		sts state,r24
 282:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 					}
 283:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 					break;
 1434               	.LM159:
 1435 0550 20C0      		rjmp .L30
 1436               	.L91:
 284:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 				default:
 285:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 					break;
 286:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 			}
 287:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 			break;
 288:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
 289:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 		case UART_HDLC_STOP:
 290:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 			uart_setByte(HDLC_FLAG);
 1438               	.LM160:
 1439 0552 8EE7      		ldi r24,lo8(126)
 1440 0554 8CB9      		out 44-0x20,r24
 291:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 			state[TX].state = UART_END;
 1442               	.LM161:
 1443 0556 86E0      		ldi r24,lo8(6)
 1444 0558 8093 0000 		sts state,r24
 292:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 			state[TX].msg_state = SOS_MSG_NO_STATE;
 1446               	.LM162:
 1447 055c 1092 0000 		sts state+1,__zero_reg__
 293:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 			break;
 1449               	.LM163:
 1450 0560 18C0      		rjmp .L30
 1451               	.L92:
 294:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
 295:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 		case UART_END:
 296:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 			//DEBUG("disable Tx in uart.c\n");
 297:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 			uart_disable_tx();
 1453               	.LM164:
 1454 0562 5698      		cbi 42-0x20,6
 298:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 			state[TX].state = UART_IDLE;
 1456               	.LM165:
 1457 0564 81E0      		ldi r24,lo8(1)
 1458 0566 8093 0000 		sts state,r24
 299:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 			state[TX].hdlc_state = HDLC_IDLE;
 1460               	.LM166:
 1461 056a 1092 0000 		sts state+2,__zero_reg__
 300:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 			uart_send_done(state[TX].flags & ~UART_ERROR_FLAG);
 1463               	.LM167:
 1464 056e 8091 0000 		lds r24,state+11
 1465 0572 0CC0      		rjmp .L96
 1466               	.L93:
 301:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 			//DEBUG("uart_disable_tx\n");
 302:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 			break;
 303:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
 304:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 		default:
 305:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 			//DEBUG("In Default...\n");
 306:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 			//DEBUG("disable Tx in uart.c\n");
 307:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 			uart_disable_tx();
 1468               	.LM168:
 1469 0574 5698      		cbi 42-0x20,6
 308:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 			state[TX].flags |= UART_ERROR_FLAG;
 1471               	.LM169:
 1472 0576 9091 0000 		lds r25,state+11
 1473 057a 9160      		ori r25,lo8(1)
 1474 057c 9093 0000 		sts state+11,r25
 309:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 			state[TX].state = UART_IDLE;
 1476               	.LM170:
 1477 0580 81E0      		ldi r24,lo8(1)
 1478 0582 8093 0000 		sts state,r24
 310:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 			state[TX].hdlc_state = HDLC_IDLE;
 1480               	.LM171:
 1481 0586 1092 0000 		sts state+2,__zero_reg__
 311:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 			uart_send_done(state[TX].flags & ~UART_ERROR_FLAG);
 1483               	.LM172:
 1484 058a 892F      		mov r24,r25
 1485               	.L96:
 1486 058c 8E7F      		andi r24,lo8(-2)
 1487 058e 0E94 0000 		call uart_send_done
 1488               	.L30:
 1489               	/* epilogue: frame size=0 */
 1490 0592 FF91      		pop r31
 1491 0594 EF91      		pop r30
 1492 0596 BF91      		pop r27
 1493 0598 AF91      		pop r26
 1494 059a 9F91      		pop r25
 1495 059c 8F91      		pop r24
 1496 059e 7F91      		pop r23
 1497 05a0 6F91      		pop r22
 1498 05a2 5F91      		pop r21
 1499 05a4 4F91      		pop r20
 1500 05a6 3F91      		pop r19
 1501 05a8 2F91      		pop r18
 1502 05aa 0F90      		pop __tmp_reg__
 1503 05ac 0FBE      		out __SREG__,__tmp_reg__
 1504 05ae 0F90      		pop __tmp_reg__
 1505 05b0 1F90      		pop __zero_reg__
 1506 05b2 1895      		reti
 1507               	/* epilogue end (size=17) */
 1508               	/* function __vector_20 size 552 (518) */
 1576               	.Lscope6:
 1578               		.lcomm crc_in.0,2
 1579               		.lcomm saved_state.1,1
 1581               	.global	__vector_18
 1583               	__vector_18:
 312:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 			break;
 313:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	}
 314:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	//DEBUG("end uart_send_interrupt %d %d %d\n", state[TX].state, state[TX].msg_state,
 315:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	//		state[TX].hdlc_state);
 316:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
 317:/Users/Administrator/sos-2x/drivers/uart/uart.c **** #ifdef SOS_USE_PREEMPTION
 318:/Users/Administrator/sos-2x/drivers/uart/uart.c ****   // enable interrupts because 
 319:/Users/Administrator/sos-2x/drivers/uart/uart.c ****   // enabling preemption can cause one to occur
 320:/Users/Administrator/sos-2x/drivers/uart/uart.c ****   ENABLE_GLOBAL_INTERRUPTS();
 321:/Users/Administrator/sos-2x/drivers/uart/uart.c ****   // enable preemption
 322:/Users/Administrator/sos-2x/drivers/uart/uart.c ****   ENABLE_PREEMPTION(NULL);
 323:/Users/Administrator/sos-2x/drivers/uart/uart.c **** #endif
 324:/Users/Administrator/sos-2x/drivers/uart/uart.c **** }
 325:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
 326:/Users/Administrator/sos-2x/drivers/uart/uart.c **** /*
 327:/Users/Administrator/sos-2x/drivers/uart/uart.c ****  * should be doing the senddone at this layer
 328:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	 Message *msg_txed;   //! message just transmitted
 329:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	 msg_txed = s.msgHdr;
 330:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	 msg_send_senddone(msg_txed, true, UART_PID);
 331:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	 s.msgHdr = mq_dequeue(&uartpq);
 332:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	 uart_setByte(HDLC_FLAG);
 333:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	 if(s.msgHdr){
 334:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	 s.idx = 0;
 335:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	 s.crc = 0;
 336:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	 s.state = UART_HDLC_START;
 337:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	 } else { //! stop and disable interrupt, if buffer is empty
 338:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	 s.state = UART_END;
 339:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	 }
 340:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	 */
 341:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
 342:/Users/Administrator/sos-2x/drivers/uart/uart.c **** static inline void uart_reset_recv() {
 343:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
 344:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	if(state[RX].msgHdr != NULL) {
 345:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 		msg_dispose(state[RX].msgHdr);
 346:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 		state[RX].msgHdr = NULL;
 347:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	}
 348:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	state[RX].state = UART_IDLE;
 349:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	state[RX].msg_state = SOS_MSG_NO_STATE;
 350:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	state[RX].hdlc_state = HDLC_IDLE;
 351:/Users/Administrator/sos-2x/drivers/uart/uart.c **** }
 352:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	
 353:/Users/Administrator/sos-2x/drivers/uart/uart.c **** /**
 354:/Users/Administrator/sos-2x/drivers/uart/uart.c ****  * @brief ISR for reception
 355:/Users/Administrator/sos-2x/drivers/uart/uart.c ****  * This is the writer of rx_queue.
 356:/Users/Administrator/sos-2x/drivers/uart/uart.c ****  */
 357:/Users/Administrator/sos-2x/drivers/uart/uart.c **** uart_recv_interrupt() {
 1585               	.LM173:
 1586               	/* prologue: frame size=0 */
 1587 05b4 1F92      		push __zero_reg__
 1588 05b6 0F92      		push __tmp_reg__
 1589 05b8 0FB6      		in __tmp_reg__,__SREG__
 1590 05ba 0F92      		push __tmp_reg__
 1591 05bc 1124      		clr __zero_reg__
 1592 05be EF92      		push r14
 1593 05c0 FF92      		push r15
 1594 05c2 1F93      		push r17
 1595 05c4 2F93      		push r18
 1596 05c6 3F93      		push r19
 1597 05c8 4F93      		push r20
 1598 05ca 5F93      		push r21
 1599 05cc 6F93      		push r22
 1600 05ce 7F93      		push r23
 1601 05d0 8F93      		push r24
 1602 05d2 9F93      		push r25
 1603 05d4 AF93      		push r26
 1604 05d6 BF93      		push r27
 1605 05d8 CF93      		push r28
 1606 05da DF93      		push r29
 1607 05dc EF93      		push r30
 1608 05de FF93      		push r31
 1609               	/* prologue end (size=22) */
 358:/Users/Administrator/sos-2x/drivers/uart/uart.c **** #ifdef SOS_USE_PREEMPTION
 359:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	HAS_PREEMPTION_SECTION;
 360:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	DISABLE_PREEMPTION();
 361:/Users/Administrator/sos-2x/drivers/uart/uart.c **** #endif
 362:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	
 363:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	uint8_t err;
 364:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	uint8_t byte_in;
 365:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	static uint16_t crc_in;
 366:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	static uint8_t saved_state;
 367:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	SOS_MEASUREMENT_IDLE_END()
 368:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	LED_DBG(LED_YELLOW_TOGGLE);
 369:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	//! NOTE that the order has to be this in AVR
 370:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	err = uart_checkError();
 1611               	.LM174:
 1612 05e0 1BB1      		in r17,43-0x20
 1613 05e2 1C71      		andi r17,lo8(28)
 371:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	byte_in = uart_getByte();
 1615               	.LM175:
 1616 05e4 9CB1      		in r25,44-0x20
 372:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
 373:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	//DEBUG("uart_recv_interrupt... %d %d %d %d %d\n", byte_in, err, 
 374:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	//		state[RX].state, state[RX].msg_state, state[RX].hdlc_state);
 375:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 	switch (state[RX].state) {
 1618               	.LM176:
 1619 05e6 8091 0000 		lds r24,state+12
 1620 05ea E82E      		mov r14,r24
 1621 05ec FF24      		clr r15
 1622 05ee 84E0      		ldi r24,lo8(4)
 1623 05f0 E816      		cp r14,r24
 1624 05f2 F104      		cpc r15,__zero_reg__
 1625 05f4 4CF4      		brge .L189
 1627               	.LM177:
 1628 05f6 82E0      		ldi r24,lo8(2)
 1629 05f8 E816      		cp r14,r24
 1630 05fa F104      		cpc r15,__zero_reg__
 1631 05fc BCF4      		brge .L105
 1632 05fe 81E0      		ldi r24,lo8(1)
 1633 0600 E816      		cp r14,r24
 1634 0602 F104      		cpc r15,__zero_reg__
 1635 0604 61F0      		breq .L101
 1636 0606 03C2      		rjmp .L186
 1637               	.L189:
 1638 0608 84E0      		ldi r24,lo8(4)
 1639 060a E816      		cp r14,r24
 1640 060c F104      		cpc r15,__zero_reg__
 1641 060e 09F4      		brne .+2
 1642 0610 ACC0      		rjmp .L133
 1643 0612 85E0      		ldi r24,lo8(5)
 1644 0614 E816      		cp r14,r24
 1645 0616 F104      		cpc r15,__zero_reg__
 1646 0618 09F4      		brne .+2
 1647 061a B9C1      		rjmp .L179
 1648 061c F8C1      		rjmp .L186
 1649               	.L101:
 376:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 		case UART_IDLE:
 377:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 			if ((err != 0) || (byte_in != HDLC_FLAG)) {
 1651               	.LM178:
 1652 061e 1123      		tst r17
 1653 0620 09F0      		breq .+2
 1654 0622 08C2      		rjmp .L99
 1655 0624 9E37      		cpi r25,lo8(126)
 1656 0626 09F0      		breq .+2
 1657 0628 05C2      		rjmp .L99
 1658 062a 13C0      		rjmp .L196
 1659               	.L105:
 378:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 				break;
 379:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 			}
 380:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 			state[RX].state = UART_HDLC_START;
 381:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 			break;
 382:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
 383:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 		case UART_HDLC_START:
 384:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 		case UART_PROTOCOL:
 385:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 			if (err != 0) {
 1661               	.LM179:
 1662 062c 1123      		tst r17
 1663 062e 09F0      		breq .+2
 1664 0630 EEC1      		rjmp .L186
 386:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 				uart_reset_recv();
 387:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 				break;
 388:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 			}
 389:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
 390:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 			switch (byte_in) {
 1666               	.LM180:
 1667 0632 892F      		mov r24,r25
 1668 0634 9927      		clr r25
 1669 0636 8530      		cpi r24,5
 1670 0638 9105      		cpc r25,__zero_reg__
 1671 063a 09F4      		brne .+2
 1672 063c 55C0      		rjmp .L121
 1673 063e 8630      		cpi r24,6
 1674 0640 9105      		cpc r25,__zero_reg__
 1675 0642 1CF4      		brge .L132
 1676 0644 0197      		sbiw r24,1
 1677 0646 39F0      		breq .L111
 1678 0648 E2C1      		rjmp .L186
 1679               	.L132:
 1680 064a 8E37      		cpi r24,126
 1681 064c 9105      		cpc r25,__zero_reg__
 1682 064e 09F0      		breq .+2
 1683 0650 DEC1      		rjmp .L186
 1684               	.L196:
 391:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 				//! ignore repeated start symbols
 392:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 				case HDLC_FLAG:
 393:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 					state[RX].state = UART_HDLC_START;
 1686               	.LM181:
 1687 0652 82E0      		ldi r24,lo8(2)
 1688 0654 99C1      		rjmp .L193
 1689               	.L111:
 394:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 					break;
 395:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
 396:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 				case HDLC_SOS_MSG:
 397:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 					if(state[RX].msgHdr == NULL) {
 1691               	.LM182:
 1692 0656 E091 0000 		lds r30,state+15
 1693 065a F091 0000 		lds r31,(state+15)+1
 1694 065e 3097      		sbiw r30,0
 1695 0660 39F4      		brne .L112
 398:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 						state[RX].msgHdr = msg_create();
 1697               	.LM183:
 1698 0662 0E94 0000 		call msg_create
 1699 0666 9093 0000 		sts (state+15)+1,r25
 1700 066a 8093 0000 		sts state+15,r24
 1701 066e 16C0      		rjmp .L113
 1702               	.L112:
 399:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 					} else {
 400:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 						if((state[RX].msgHdr->data != NULL) &&
 1704               	.LM184:
 1705 0670 2085      		ldd r18,Z+8
 1706 0672 3185      		ldd r19,Z+9
 1707 0674 2115      		cp r18,__zero_reg__
 1708 0676 3105      		cpc r19,__zero_reg__
 1709 0678 89F0      		breq .L113
 1710 067a 8285      		ldd r24,Z+10
 1711 067c 9385      		ldd r25,Z+11
 1712 067e 82FF      		sbrs r24,2
 1713 0680 0DC0      		rjmp .L113
 1714               	.LBB33:
 1715               	.LBB34:
 1717               	.Ltext13:
  97:/Users/Administrator/sos-2x/kernel/include/malloc.h **** }
  98:/Users/Administrator/sos-2x/kernel/include/malloc.h **** 
  99:/Users/Administrator/sos-2x/kernel/include/malloc.h **** /**
 100:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @brief Reallocate dynamic memory
 101:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @param pntr Pointer to the currently held block of memory
 102:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @param newSize Number of bytes to be allocated
 103:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @return Returns the pointer to the reallocated memory.
 104:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * Returns a NULL if unable to reallocate but the original pointer is still valid.
 105:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  */
 106:/Users/Administrator/sos-2x/kernel/include/malloc.h **** static inline void* ker_realloc(void* pntr, uint16_t newSize)
 107:/Users/Administrator/sos-2x/kernel/include/malloc.h **** {
 108:/Users/Administrator/sos-2x/kernel/include/malloc.h ****   return sos_blk_mem_realloc(pntr, newSize, false);
 109:/Users/Administrator/sos-2x/kernel/include/malloc.h **** }
 110:/Users/Administrator/sos-2x/kernel/include/malloc.h **** 
 111:/Users/Administrator/sos-2x/kernel/include/malloc.h **** /**
 112:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @brief Free memory pointed to by ptr
 113:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @param ptr Pointer to the memory that should be released
 114:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @return void
 115:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  */
 116:/Users/Administrator/sos-2x/kernel/include/malloc.h **** static inline void ker_free(void* ptr)
 117:/Users/Administrator/sos-2x/kernel/include/malloc.h **** {
 118:/Users/Administrator/sos-2x/kernel/include/malloc.h ****   sos_blk_mem_free(ptr, false);
 1719               	.LM185:
 1720 0682 612F      		mov r22,r17
 1721 0684 C901      		movw r24,r18
 1722 0686 0E94 0000 		call sos_blk_mem_free
 1723               	.LBE34:
 1724               	.LBE33:
 1726               	.Ltext14:
 401:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 								(flag_msg_release(state[RX].msgHdr->flag))){
 402:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 							ker_free(state[RX].msgHdr->data);
 403:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 							state[RX].msgHdr->flag &= ~SOS_MSG_RELEASE;
 1728               	.LM186:
 1729 068a E091 0000 		lds r30,state+15
 1730 068e F091 0000 		lds r31,(state+15)+1
 1731 0692 8285      		ldd r24,Z+10
 1732 0694 9385      		ldd r25,Z+11
 1733 0696 8B7F      		andi r24,lo8(-5)
 1734 0698 8287      		std Z+10,r24
 1735 069a 9387      		std Z+11,r25
 1736               	.L113:
 404:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 						}
 405:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 					}
 406:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 					if(state[RX].msgHdr != NULL) {
 1738               	.LM187:
 1739 069c 8091 0000 		lds r24,state+15
 1740 06a0 9091 0000 		lds r25,(state+15)+1
 1741 06a4 892B      		or r24,r25
 1742 06a6 09F4      		brne .+2
 1743 06a8 BEC1      		rjmp .L187
 407:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 						state[RX].msg_state = SOS_MSG_RX_HDR;
 1745               	.LM188:
 1746 06aa 8DE0      		ldi r24,lo8(13)
 1747 06ac 8093 0000 		sts state+13,r24
 1748               	.LBB35:
 1749               	.LBB36:
 1751               	.Ltext15:
 1753               	.LM189:
 1754 06b0 E0E0      		ldi r30,lo8(crcTable+2)
 1755 06b2 F0E0      		ldi r31,hi8(crcTable+2)
 1756               	.LBB37:
 1758               	.LM190:
 1759               	/* #APP */
 1760 06b4 8491      		lpm r24, Z
 1761               		
 1762               	/* #NOAPP */
 1763               	.LBE37:
 1764 06b6 282F      		mov r18,r24
 1765 06b8 3327      		clr r19
 1766               	.LBB38:
 1767 06ba 3196      		adiw r30,1
 1768               	/* #APP */
 1769 06bc 8491      		lpm r24, Z
 1770               		
 1771               	/* #NOAPP */
 1772               	.LBE38:
 1773 06be 9927      		clr r25
 1774 06c0 982F      		mov r25,r24
 1775 06c2 8827      		clr r24
 1776 06c4 282B      		or r18,r24
 1777 06c6 392B      		or r19,r25
 1778               	.LBE36:
 1779               	.LBE35:
 1781               	.LM191:
 1782 06c8 3093 0000 		sts (state+19)+1,r19
 1783 06cc 2093 0000 		sts state+19,r18
 1785               	.Ltext16:
 408:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 						state[RX].crc = crcByte(0, byte_in);
 409:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 						state[RX].flags |= UART_SOS_MSG_FLAG;
 1787               	.LM192:
 1788 06d0 8091 0000 		lds r24,state+23
 1789 06d4 8068      		ori r24,lo8(-128)
 1790 06d6 8093 0000 		sts state+23,r24
 410:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 						state[RX].idx = 0;
 1792               	.LM193:
 1793 06da 1092 0000 		sts state+22,__zero_reg__
 411:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 						state[RX].state = UART_DATA;
 1795               	.LM194:
 1796 06de 84E0      		ldi r24,lo8(4)
 1797 06e0 8093 0000 		sts state+12,r24
 412:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 						state[RX].hdlc_state = HDLC_DATA;
 1799               	.LM195:
 1800 06e4 86E0      		ldi r24,lo8(6)
 1801 06e6 4BC0      		rjmp .L192
 1802               	.L121:
 1803               	.LBB39:
 1804               	.LBB40:
 1806               	.Ltext17:
 1808               	.LM196:
 1809 06e8 412F      		mov r20,r17
 1810 06ea 62E4      		ldi r22,lo8(66)
 1811 06ec 80E8      		ldi r24,lo8(128)
 1812 06ee 90E0      		ldi r25,hi8(128)
 1813 06f0 0E94 0000 		call sos_blk_mem_alloc
 1814 06f4 EC01      		movw r28,r24
 1815               	.LBE40:
 1816               	.LBE39:
 1818               	.LM197:
 1819 06f6 9093 0000 		sts (state+17)+1,r25
 1820 06fa 8093 0000 		sts state+17,r24
 1821 06fe 892B      		or r24,r25
 1822 0700 F1F0      		breq .L122
 1824               	.Ltext18:
 413:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 					} else {
 414:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 						// need to generate no mem error
 415:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 						uart_reset_recv();
 416:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 					}
 417:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 					break;
 418:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
 419:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 				case HDLC_RAW:
 420:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 					if ((state[RX].buff = ker_malloc(UART_MAX_MSG_LEN, UART_PID)) != NULL) {
 421:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 						state[RX].msg_state = SOS_MSG_RX_RAW;
 1826               	.LM198:
 1827 0702 83E0      		ldi r24,lo8(3)
 1828 0704 8093 0000 		sts state+13,r24
 422:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 						if (state[RX].flags & UART_CRC_FLAG) {
 1830               	.LM199:
 1831 0708 8091 0000 		lds r24,state+23
 1832 070c 87FF      		sbrs r24,7
 1833 070e 10C0      		rjmp .L124
 1834               	.LBB41:
 1835               	.LBB42:
 1837               	.Ltext19:
 1839               	.LM200:
 1840 0710 E0E0      		ldi r30,lo8(crcTable+10)
 1841 0712 F0E0      		ldi r31,hi8(crcTable+10)
 1842               	.LBB43:
 1844               	.LM201:
 1845               	/* #APP */
 1846 0714 8491      		lpm r24, Z
 1847               		
 1848               	/* #NOAPP */
 1849               	.LBE43:
 1850 0716 282F      		mov r18,r24
 1851 0718 3327      		clr r19
 1852               	.LBB44:
 1853 071a 3196      		adiw r30,1
 1854               	/* #APP */
 1855 071c 8491      		lpm r24, Z
 1856               		
 1857               	/* #NOAPP */
 1858               	.LBE44:
 1859 071e 9927      		clr r25
 1860 0720 982F      		mov r25,r24
 1861 0722 8827      		clr r24
 1862 0724 282B      		or r18,r24
 1863 0726 392B      		or r19,r25
 1864               	.LBE42:
 1865               	.LBE41:
 1867               	.LM202:
 1868 0728 3093 0000 		sts (state+19)+1,r19
 1869 072c 2093 0000 		sts state+19,r18
 1870               	.L124:
 1872               	.Ltext20:
 423:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 							state[RX].crc = crcByte(0, byte_in);
 424:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 						}
 425:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 						state[RX].state = UART_DATA;
 1874               	.LM203:
 1875 0730 84E0      		ldi r24,lo8(4)
 1876 0732 8093 0000 		sts state+12,r24
 426:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 						state[RX].hdlc_state = HDLC_DATA;
 1878               	.LM204:
 1879 0736 86E0      		ldi r24,lo8(6)
 1880 0738 8093 0000 		sts state+14,r24
 1881 073c 13C0      		rjmp .L126
 1882               	.L122:
 1883               	.LBB45:
 1884               	.LBB46:
 1886               	.LM205:
 1887 073e 8091 0000 		lds r24,state+15
 1888 0742 9091 0000 		lds r25,(state+15)+1
 1889 0746 0097      		sbiw r24,0
 1890 0748 31F0      		breq .L127
 1892               	.LM206:
 1893 074a 0E94 0000 		call msg_dispose
 1895               	.LM207:
 1896 074e D093 0000 		sts (state+15)+1,r29
 1897 0752 C093 0000 		sts state+15,r28
 1898               	.L127:
 1900               	.LM208:
 1901 0756 81E0      		ldi r24,lo8(1)
 1902 0758 8093 0000 		sts state+12,r24
 1904               	.LM209:
 1905 075c 1093 0000 		sts state+13,r17
 1907               	.LM210:
 1908 0760 1093 0000 		sts state+14,r17
 1909               	.L126:
 1910               	.LBE46:
 1911               	.LBE45:
 427:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 					} else {
 428:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 						uart_reset_recv();
 429:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 					}
 430:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 					state[RX].idx = 0;
 1913               	.LM211:
 1914 0764 1092 0000 		sts state+22,__zero_reg__
 431:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 					break;
 1916               	.LM212:
 1917 0768 65C1      		rjmp .L99
 1918               	.L133:
 432:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
 433:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 				default:
 434:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 					uart_reset_recv();
 435:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 					break;
 436:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 				}
 437:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 				break;
 438:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
 439:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 		case UART_DATA:
 440:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 				if (err != 0) {
 1920               	.LM213:
 1921 076a 1123      		tst r17
 1922 076c 09F0      		breq .+2
 1923 076e 4FC1      		rjmp .L186
 441:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 					uart_reset_recv();
 442:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 					break;
 443:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 				}
 444:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
 445:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 				// recieve an escape byte, wait for next byte
 446:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 				if (byte_in  == HDLC_CTR_ESC) {
 1925               	.LM214:
 1926 0770 9D37      		cpi r25,lo8(125)
 1927 0772 41F4      		brne .L137
 447:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 					saved_state = state[RX].hdlc_state;
 1929               	.LM215:
 1930 0774 8091 0000 		lds r24,state+14
 1931 0778 8093 0000 		sts saved_state.1,r24
 448:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 					state[RX].hdlc_state = HDLC_ESCAPE;
 1933               	.LM216:
 1934 077c 87E0      		ldi r24,lo8(7)
 1935               	.L192:
 1936 077e 8093 0000 		sts state+14,r24
 449:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 					break;
 1938               	.LM217:
 1939 0782 58C1      		rjmp .L99
 1940               	.L137:
 450:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 				}
 451:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
 452:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 				if (byte_in == HDLC_FLAG) { // got an end of message symbol
 1942               	.LM218:
 1943 0784 9E37      		cpi r25,lo8(126)
 1944 0786 41F4      		brne .L138
 1945               	.LBB47:
 1946               	.LBB48:
 1948               	.LM219:
 1949 0788 8091 0000 		lds r24,state+15
 1950 078c 9091 0000 		lds r25,(state+15)+1
 1951 0790 0097      		sbiw r24,0
 1952 0792 09F4      		brne .+2
 1953 0794 97C0      		rjmp .L158
 1954 0796 90C0      		rjmp .L194
 1955               	.L138:
 1956               	.LBE48:
 1957               	.LBE47:
 453:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 					/*
 454:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 					if (state[RX].msg_state == SOS_MSG_RX_RAW) {
 455:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 						// end of raw recieve
 456:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 						// should bundle and send off
 457:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 						// trash for now
 458:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 							 state[RX].hdlc_state = HDLC_IDLE;
 459:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 							 state[RX].state = UART_IDLE;
 460:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 							 state[RX].flags |= UART_DATA_RDY_FLAG;
 461:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 							 uart_read_done(state[RX].idx, 0);
 462:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 					} else {
 463:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 						// got an end of message symbol early
 464:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 						*/
 465:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 						uart_reset_recv();
 466:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 					//}
 467:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 					break;
 468:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 				}
 469:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
 470:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 				if (state[RX].hdlc_state == HDLC_ESCAPE) {
 1959               	.LM220:
 1960 0798 8091 0000 		lds r24,state+14
 1961 079c 8730      		cpi r24,lo8(7)
 1962 079e 31F4      		brne .L141
 471:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 					byte_in ^= 0x20;
 1964               	.LM221:
 1965 07a0 80E2      		ldi r24,lo8(32)
 1966 07a2 9827      		eor r25,r24
 472:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 					state[RX].hdlc_state = saved_state;
 1968               	.LM222:
 1969 07a4 8091 0000 		lds r24,saved_state.1
 1970 07a8 8093 0000 		sts state+14,r24
 1971               	.L141:
 473:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 				}
 474:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
 475:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 				switch (state[RX].msg_state) {
 1973               	.LM223:
 1974 07ac 8091 0000 		lds r24,state+13
 1975 07b0 282F      		mov r18,r24
 1976 07b2 3327      		clr r19
 1977 07b4 2E30      		cpi r18,14
 1978 07b6 3105      		cpc r19,__zero_reg__
 1979 07b8 09F4      		brne .+2
 1980 07ba 8CC0      		rjmp .L162
 1981 07bc 2F30      		cpi r18,15
 1982 07be 3105      		cpc r19,__zero_reg__
 1983 07c0 44F4      		brge .L178
 1984 07c2 2330      		cpi r18,3
 1985 07c4 3105      		cpc r19,__zero_reg__
 1986 07c6 09F4      		brne .+2
 1987 07c8 85C0      		rjmp .L162
 1988 07ca 2D30      		cpi r18,13
 1989 07cc 3105      		cpc r19,__zero_reg__
 1990 07ce 51F0      		breq .L143
 1991 07d0 1EC1      		rjmp .L186
 1992               	.L178:
 1993 07d2 2F30      		cpi r18,15
 1994 07d4 3105      		cpc r19,__zero_reg__
 1995 07d6 09F4      		brne .+2
 1996 07d8 B8C0      		rjmp .L172
 1997 07da 2031      		cpi r18,16
 1998 07dc 3105      		cpc r19,__zero_reg__
 1999 07de 09F4      		brne .+2
 2000 07e0 BEC0      		rjmp .L173
 2001 07e2 15C1      		rjmp .L186
 2002               	.L143:
 2003 07e4 E091 0000 		lds r30,state+15
 2004 07e8 F091 0000 		lds r31,(state+15)+1
 2005               	.LBB49:
 476:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 					case SOS_MSG_RX_HDR:
 477:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 						if (byte_in == HDLC_FLAG) {  // got an end of message symbol
 2007               	.LM224:
 2008 07ec 9E37      		cpi r25,lo8(126)
 2009 07ee 09F4      		brne .+2
 2010 07f0 60C0      		rjmp .L149
 478:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 							uart_reset_recv();
 479:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 							break;
 480:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 						}
 481:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 						uint8_t *tmpPtr = (uint8_t*)(state[RX].msgHdr);
 482:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 						tmpPtr[state[RX].idx++] = byte_in;
 2012               	.LM225:
 2013 07f2 4091 0000 		lds r20,state+22
 2014 07f6 E40F      		add r30,r20
 2015 07f8 F11D      		adc r31,__zero_reg__
 2016 07fa 9083      		st Z,r25
 2017 07fc 4F5F      		subi r20,lo8(-(1))
 2018 07fe 4093 0000 		sts state+22,r20
 2019               	.LBB50:
 2021               	.Ltext21:
 2023               	.LM226:
 2024 0802 6091 0000 		lds r22,state+19
 2025 0806 7091 0000 		lds r23,(state+19)+1
 2026               	.LBB51:
 2028               	.LM227:
 2029 080a E72F      		mov r30,r23
 2030 080c FF27      		clr r31
 2031 080e 892F      		mov r24,r25
 2032 0810 9927      		clr r25
 2033 0812 E827      		eor r30,r24
 2034 0814 F927      		eor r31,r25
 2035 0816 EE0F      		add r30,r30
 2036 0818 FF1F      		adc r31,r31
 2037 081a E050      		subi r30,lo8(-(crcTable))
 2038 081c F040      		sbci r31,hi8(-(crcTable))
 2039               	.LBB52:
 2041               	.LM228:
 2042               	/* #APP */
 2043 081e 8491      		lpm r24, Z
 2044               		
 2045               	/* #NOAPP */
 2046               	.LBE52:
 2047 0820 282F      		mov r18,r24
 2048 0822 3327      		clr r19
 2049               	.LBB53:
 2050 0824 3196      		adiw r30,1
 2051               	/* #APP */
 2052 0826 8491      		lpm r24, Z
 2053               		
 2054               	/* #NOAPP */
 2055               	.LBE53:
 2056 0828 8627      		eor r24,r22
 2057 082a 9927      		clr r25
 2058 082c 982F      		mov r25,r24
 2059 082e 8827      		clr r24
 2060 0830 282B      		or r18,r24
 2061 0832 392B      		or r19,r25
 2062               	.LBE51:
 2063               	.LBE50:
 2065               	.LM229:
 2066 0834 3093 0000 		sts (state+19)+1,r19
 2067 0838 2093 0000 		sts state+19,r18
 2069               	.Ltext22:
 483:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
 484:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 						state[RX].crc = crcByte(state[RX].crc, byte_in);
 485:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
 486:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 						if (state[RX].idx == SOS_MSG_HEADER_SIZE) {
 2071               	.LM230:
 2072 083c 4830      		cpi r20,lo8(8)
 2073 083e 09F0      		breq .+2
 2074 0840 F9C0      		rjmp .L99
 487:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 							// if (state[RX].msgLen != state[RX].msgHdr->len) ????????
 488:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 							state[RX].msgLen = state[RX].msgHdr->len;
 2076               	.LM231:
 2077 0842 E091 0000 		lds r30,state+15
 2078 0846 F091 0000 		lds r31,(state+15)+1
 2079 084a 8781      		ldd r24,Z+7
 2080 084c 8093 0000 		sts state+21,r24
 489:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
 490:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 							if (state[RX].msgLen < UART_MAX_MSG_LEN) {
 2082               	.LM232:
 2083 0850 87FD      		sbrc r24,7
 2084 0852 2FC0      		rjmp .L149
 491:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 								if (state[RX].msgLen != 0) {
 2086               	.LM233:
 2087 0854 8823      		tst r24
 2088 0856 29F1      		breq .L150
 2089               	.LBB54:
 2090               	.LBB55:
 2092               	.Ltext23:
 2094               	.LM234:
 2095 0858 412F      		mov r20,r17
 2096 085a 62E4      		ldi r22,lo8(66)
 2097 085c 9927      		clr r25
 2098 085e 0E94 0000 		call sos_blk_mem_alloc
 2099 0862 EC01      		movw r28,r24
 2100               	.LBE55:
 2101               	.LBE54:
 2103               	.LM235:
 2104 0864 9093 0000 		sts (state+17)+1,r25
 2105 0868 8093 0000 		sts state+17,r24
 2106 086c E091 0000 		lds r30,state+15
 2107 0870 F091 0000 		lds r31,(state+15)+1
 2109               	.Ltext24:
 492:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 									state[RX].buff = (uint8_t*)ker_malloc(state[RX].msgLen, UART_PID);
 493:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 									if (state[RX].buff != NULL) {
 2111               	.LM236:
 2112 0874 0097      		sbiw r24,0
 2113 0876 51F0      		breq .L152
 494:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 										state[RX].msgHdr->data = state[RX].buff;
 2115               	.LM237:
 2116 0878 8087      		std Z+8,r24
 2117 087a 9187      		std Z+9,r25
 495:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 										state[RX].msgHdr->flag = SOS_MSG_RELEASE;
 2119               	.LM238:
 2120 087c E286      		std Z+10,r14
 2121 087e F386      		std Z+11,r15
 496:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 										state[RX].msg_state = SOS_MSG_RX_DATA;
 2123               	.LM239:
 2124 0880 8EE0      		ldi r24,lo8(14)
 2125 0882 8093 0000 		sts state+13,r24
 497:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 										state[RX].idx = 0;
 2127               	.LM240:
 2128 0886 1093 0000 		sts state+22,r17
 2129 088a D4C0      		rjmp .L99
 2130               	.L152:
 2131               	.LBB56:
 2132               	.LBB57:
 2134               	.LM241:
 2135 088c 3097      		sbiw r30,0
 2136 088e 09F4      		brne .+2
 2137 0890 CAC0      		rjmp .L187
 2139               	.LM242:
 2140 0892 CF01      		movw r24,r30
 2141 0894 0E94 0000 		call msg_dispose
 2143               	.LM243:
 2144 0898 D093 0000 		sts (state+15)+1,r29
 2145 089c C093 0000 		sts state+15,r28
 2146 08a0 C2C0      		rjmp .L187
 2147               	.L150:
 2148               	.LBE57:
 2149               	.LBE56:
 498:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 									} else {
 499:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 										uart_reset_recv();
 500:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 									}
 501:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 								} else { // 0 length packet go straight to crc
 502:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 									state[RX].msgHdr->flag &= ~SOS_MSG_RELEASE;
 2151               	.LM244:
 2152 08a2 8285      		ldd r24,Z+10
 2153 08a4 9385      		ldd r25,Z+11
 2154 08a6 8B7F      		andi r24,lo8(-5)
 2155 08a8 8287      		std Z+10,r24
 2156 08aa 9387      		std Z+11,r25
 503:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 									state[RX].msgHdr->data = NULL;
 2158               	.LM245:
 2159 08ac 1086      		std Z+8,__zero_reg__
 2160 08ae 1186      		std Z+9,__zero_reg__
 2161 08b0 4AC0      		rjmp .L195
 2162               	.L149:
 2163               	.LBB58:
 2164               	.LBB59:
 2166               	.LM246:
 2167 08b2 3097      		sbiw r30,0
 2168 08b4 39F0      		breq .L158
 2170               	.LM247:
 2171 08b6 CF01      		movw r24,r30
 2172               	.L194:
 2173 08b8 0E94 0000 		call msg_dispose
 2175               	.LM248:
 2176 08bc 1092 0000 		sts (state+15)+1,__zero_reg__
 2177 08c0 1092 0000 		sts state+15,__zero_reg__
 2178               	.L158:
 2180               	.LM249:
 2181 08c4 81E0      		ldi r24,lo8(1)
 2182 08c6 8093 0000 		sts state+12,r24
 2184               	.LM250:
 2185 08ca 1093 0000 		sts state+13,r17
 2187               	.LM251:
 2188 08ce 1093 0000 		sts state+14,r17
 2189               	.LBE59:
 2190               	.LBE58:
 504:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 									state[RX].msg_state = SOS_MSG_RX_CRC_LOW;
 505:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 								}
 506:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 							} else { // invalid msg length
 507:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 								uart_reset_recv();
 508:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 							}
 509:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 						}
 510:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 						break;
 2192               	.LM252:
 2193 08d2 B0C0      		rjmp .L99
 2194               	.L162:
 511:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
 512:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 					case SOS_MSG_RX_RAW:
 513:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 					case SOS_MSG_RX_DATA:
 514:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 						if (err != 0) {
 515:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 							uart_reset_recv();
 516:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 							return;
 517:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 						}
 518:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 						state[RX].buff[state[RX].idx++] = byte_in;
 2196               	.LM253:
 2197 08d4 8091 0000 		lds r24,state+22
 2198 08d8 E091 0000 		lds r30,state+17
 2199 08dc F091 0000 		lds r31,(state+17)+1
 2200 08e0 E80F      		add r30,r24
 2201 08e2 F11D      		adc r31,__zero_reg__
 2202 08e4 9083      		st Z,r25
 2203 08e6 8F5F      		subi r24,lo8(-(1))
 2204 08e8 8093 0000 		sts state+22,r24
 519:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 						if (state[RX].flags & UART_CRC_FLAG) {
 2206               	.LM254:
 2207 08ec 6091 0000 		lds r22,state+23
 2208 08f0 67FF      		sbrs r22,7
 2209 08f2 1DC0      		rjmp .L165
 2210               	.LBB60:
 2212               	.Ltext25:
 2214               	.LM255:
 2215 08f4 4091 0000 		lds r20,state+19
 2216 08f8 5091 0000 		lds r21,(state+19)+1
 2217               	.LBB61:
 2219               	.LM256:
 2220 08fc E52F      		mov r30,r21
 2221 08fe FF27      		clr r31
 2222 0900 892F      		mov r24,r25
 2223 0902 9927      		clr r25
 2224 0904 E827      		eor r30,r24
 2225 0906 F927      		eor r31,r25
 2226 0908 EE0F      		add r30,r30
 2227 090a FF1F      		adc r31,r31
 2228 090c E050      		subi r30,lo8(-(crcTable))
 2229 090e F040      		sbci r31,hi8(-(crcTable))
 2230               	.LBB62:
 2232               	.LM257:
 2233               	/* #APP */
 2234 0910 8491      		lpm r24, Z
 2235               		
 2236               	/* #NOAPP */
 2237               	.LBE62:
 2238 0912 282F      		mov r18,r24
 2239 0914 3327      		clr r19
 2240               	.LBB63:
 2241 0916 3196      		adiw r30,1
 2242               	/* #APP */
 2243 0918 8491      		lpm r24, Z
 2244               		
 2245               	/* #NOAPP */
 2246               	.LBE63:
 2247 091a 8427      		eor r24,r20
 2248 091c 9927      		clr r25
 2249 091e 982F      		mov r25,r24
 2250 0920 8827      		clr r24
 2251 0922 282B      		or r18,r24
 2252 0924 392B      		or r19,r25
 2253               	.LBE61:
 2254               	.LBE60:
 2256               	.LM258:
 2257 0926 3093 0000 		sts (state+19)+1,r19
 2258 092a 2093 0000 		sts state+19,r18
 2259               	.L165:
 2261               	.Ltext26:
 520:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 							state[RX].crc = crcByte(state[RX].crc, byte_in);
 521:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 						}
 522:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 						if (state[RX].idx == state[RX].msgLen) {
 2263               	.LM259:
 2264 092e 9091 0000 		lds r25,state+22
 2265 0932 8091 0000 		lds r24,state+21
 2266 0936 9817      		cp r25,r24
 2267 0938 09F0      		breq .+2
 2268 093a 7CC0      		rjmp .L99
 523:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 							if (state[RX].flags & UART_SOS_MSG_FLAG) {
 2270               	.LM260:
 2271 093c 67FF      		sbrs r22,7
 2272 093e 67C0      		rjmp .L186
 524:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 								state[RX].hdlc_state = HDLC_CRC;
 2274               	.LM261:
 2275 0940 89E0      		ldi r24,lo8(9)
 2276 0942 8093 0000 		sts state+14,r24
 2277               	.L195:
 525:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 								state[RX].msg_state = SOS_MSG_RX_CRC_LOW;
 2279               	.LM262:
 2280 0946 8FE0      		ldi r24,lo8(15)
 2281 0948 07C0      		rjmp .L191
 2282               	.L172:
 526:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 							} else {
 527:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 								// rx buffer overflow
 528:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 								uart_reset_recv();
 529:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 							}
 530:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 						}
 531:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 						break;
 532:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
 533:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 					case SOS_MSG_RX_CRC_LOW:
 534:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 						crc_in = byte_in;
 2284               	.LM263:
 2285 094a 892F      		mov r24,r25
 2286 094c 9927      		clr r25
 2287 094e 9093 0000 		sts (crc_in.0)+1,r25
 2288 0952 8093 0000 		sts crc_in.0,r24
 535:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 						state[RX].msg_state = SOS_MSG_RX_CRC_HIGH;
 2290               	.LM264:
 2291 0956 80E1      		ldi r24,lo8(16)
 2292               	.L191:
 2293 0958 8093 0000 		sts state+13,r24
 536:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 						break;
 2295               	.LM265:
 2296 095c 6BC0      		rjmp .L99
 2297               	.L173:
 537:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
 538:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 					case SOS_MSG_RX_CRC_HIGH:
 539:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 						crc_in |= ((uint16_t)(byte_in) << 8);
 2299               	.LM266:
 2300 095e 892F      		mov r24,r25
 2301 0960 9927      		clr r25
 2302 0962 382F      		mov r19,r24
 2303 0964 2227      		clr r18
 2304 0966 8091 0000 		lds r24,crc_in.0
 2305 096a 9091 0000 		lds r25,(crc_in.0)+1
 2306 096e 822B      		or r24,r18
 2307 0970 932B      		or r25,r19
 2308 0972 9093 0000 		sts (crc_in.0)+1,r25
 2309 0976 8093 0000 		sts crc_in.0,r24
 540:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 						state[RX].hdlc_state = HDLC_PADDING;
 2311               	.LM267:
 2312 097a 88E0      		ldi r24,lo8(8)
 2313 097c 8093 0000 		sts state+14,r24
 541:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 						state[RX].msg_state = SOS_MSG_RX_END;
 2315               	.LM268:
 2316 0980 81E1      		ldi r24,lo8(17)
 2317 0982 8093 0000 		sts state+13,r24
 542:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 						state[RX].state = UART_HDLC_STOP;
 2319               	.LM269:
 2320 0986 85E0      		ldi r24,lo8(5)
 2321               	.L193:
 2322 0988 8093 0000 		sts state+12,r24
 543:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 						break;
 2324               	.LM270:
 2325 098c 53C0      		rjmp .L99
 2326               	.L179:
 2327               	.LBE49:
 544:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
 545:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 					case SOS_MSG_RX_END:  // should never get here
 546:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 					default:
 547:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 						uart_reset_recv();
 548:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 						break;
 549:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 				}
 550:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 				break;
 551:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
 552:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 		case UART_HDLC_STOP:
 553:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 				if (byte_in != HDLC_FLAG) {
 2329               	.LM271:
 2330 098e 9E37      		cpi r25,lo8(126)
 2331 0990 09F0      		breq .+2
 2332 0992 50C0      		rjmp .L99
 554:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 					// silently drop until hdlc stop symbol
 555:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 					break;
 556:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 				} else { // sos msg rx done
 557:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 					state[RX].hdlc_state = HDLC_IDLE;
 2334               	.LM272:
 2335 0994 1092 0000 		sts state+14,__zero_reg__
 558:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 					if(crc_in == state[RX].crc) {
 2337               	.LM273:
 2338 0998 2091 0000 		lds r18,crc_in.0
 2339 099c 3091 0000 		lds r19,(crc_in.0)+1
 2340 09a0 8091 0000 		lds r24,state+19
 2341 09a4 9091 0000 		lds r25,(state+19)+1
 2342 09a8 2817      		cp r18,r24
 2343 09aa 3907      		cpc r19,r25
 2344 09ac 59F5      		brne .L182
 559:/Users/Administrator/sos-2x/drivers/uart/uart.c **** #ifndef NO_SOS_UART_MGR
 560:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 						set_uart_address(entohs(state[RX].msgHdr->saddr));
 2346               	.LM274:
 2347 09ae E091 0000 		lds r30,state+15
 2348 09b2 F091 0000 		lds r31,(state+15)+1
 2349 09b6 8481      		ldd r24,Z+4
 2350 09b8 9581      		ldd r25,Z+5
 2351 09ba 0E94 0000 		call set_uart_address
 561:/Users/Administrator/sos-2x/drivers/uart/uart.c **** #endif
 562:/Users/Administrator/sos-2x/drivers/uart/uart.c ****             if(state[RX].msgHdr->type == MSG_TIMESTAMP){
 2353               	.LM275:
 2354 09be E091 0000 		lds r30,state+15
 2355 09c2 F091 0000 		lds r31,(state+15)+1
 2356 09c6 8681      		ldd r24,Z+6
 2357 09c8 8031      		cpi r24,lo8(16)
 2358 09ca 79F4      		brne .L183
 2359               	.LBB64:
 563:/Users/Administrator/sos-2x/drivers/uart/uart.c ****               uint32_t timestp = ker_systime32();
 2361               	.LM276:
 2362 09cc 0E94 0000 		call ker_systime32
 2363 09d0 DC01      		movw r26,r24
 2364 09d2 CB01      		movw r24,r22
 564:/Users/Administrator/sos-2x/drivers/uart/uart.c ****               memcpy(((uint8_t*)(state[RX].msgHdr->data) + sizeof(uint32_t)),(uint8_t*)(&timestp),s
 2366               	.LM277:
 2367 09d4 E091 0000 		lds r30,state+15
 2368 09d8 F091 0000 		lds r31,(state+15)+1
 2369 09dc 0084      		ldd __tmp_reg__,Z+8
 2370 09de F185      		ldd r31,Z+9
 2371 09e0 E02D      		mov r30,__tmp_reg__
 2372 09e2 8483      		std Z+4,r24
 2373 09e4 9583      		std Z+5,r25
 2374 09e6 A683      		std Z+6,r26
 2375 09e8 B783      		std Z+7,r27
 2376               	.L183:
 2377               	.LBE64:
 2378               	.LBB65:
 2380               	.Ltext27:
   1:/Users/Administrator/sos-2x/kernel/include/net_stack.h **** /* -*- Mode: C; tab-width:4 -*- */
   2:/Users/Administrator/sos-2x/kernel/include/net_stack.h **** /* ex: set ts=4 shiftwidth=4 softtabstop=4 cindent: */
   3:/Users/Administrator/sos-2x/kernel/include/net_stack.h **** /*
   4:/Users/Administrator/sos-2x/kernel/include/net_stack.h ****  * Copyright (c) 2003 The Regents of the University of California.
   5:/Users/Administrator/sos-2x/kernel/include/net_stack.h ****  * All rights reserved.
   6:/Users/Administrator/sos-2x/kernel/include/net_stack.h ****  *
   7:/Users/Administrator/sos-2x/kernel/include/net_stack.h ****  * Redistribution and use in source and binary forms, with or without
   8:/Users/Administrator/sos-2x/kernel/include/net_stack.h ****  * modification, are permitted provided that the following conditions
   9:/Users/Administrator/sos-2x/kernel/include/net_stack.h ****  * are met:
  10:/Users/Administrator/sos-2x/kernel/include/net_stack.h ****  * 1. Redistributions of source code must retain the above copyright
  11:/Users/Administrator/sos-2x/kernel/include/net_stack.h ****  *    notice, this list of conditions and the following disclaimer.
  12:/Users/Administrator/sos-2x/kernel/include/net_stack.h ****  * 2. Redistributions in binary form must reproduce the above
  13:/Users/Administrator/sos-2x/kernel/include/net_stack.h ****  *    copyright notice, this list of conditions and the following
  14:/Users/Administrator/sos-2x/kernel/include/net_stack.h ****  *    disclaimer in the documentation and/or other materials provided
  15:/Users/Administrator/sos-2x/kernel/include/net_stack.h ****  *    with the distribution.
  16:/Users/Administrator/sos-2x/kernel/include/net_stack.h ****  * 3. All advertising materials mentioning features or use of this
  17:/Users/Administrator/sos-2x/kernel/include/net_stack.h ****  *    software must display the following acknowledgement:
  18:/Users/Administrator/sos-2x/kernel/include/net_stack.h ****  *       This product includes software developed by Networked &
  19:/Users/Administrator/sos-2x/kernel/include/net_stack.h ****  *       Embedded Systems Lab at UCLA
  20:/Users/Administrator/sos-2x/kernel/include/net_stack.h ****  * 4. Neither the name of the University nor that of the Laboratory
  21:/Users/Administrator/sos-2x/kernel/include/net_stack.h ****  *    may be used to endorse or promote products derived from this
  22:/Users/Administrator/sos-2x/kernel/include/net_stack.h ****  *    software without specific prior written permission.
  23:/Users/Administrator/sos-2x/kernel/include/net_stack.h ****  *
  24:/Users/Administrator/sos-2x/kernel/include/net_stack.h ****  * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS''
  25:/Users/Administrator/sos-2x/kernel/include/net_stack.h ****  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
  26:/Users/Administrator/sos-2x/kernel/include/net_stack.h ****  * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
  27:/Users/Administrator/sos-2x/kernel/include/net_stack.h ****  * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS
  28:/Users/Administrator/sos-2x/kernel/include/net_stack.h ****  * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  29:/Users/Administrator/sos-2x/kernel/include/net_stack.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  30:/Users/Administrator/sos-2x/kernel/include/net_stack.h ****  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
  31:/Users/Administrator/sos-2x/kernel/include/net_stack.h ****  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  32:/Users/Administrator/sos-2x/kernel/include/net_stack.h ****  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  33:/Users/Administrator/sos-2x/kernel/include/net_stack.h ****  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
  34:/Users/Administrator/sos-2x/kernel/include/net_stack.h ****  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
  35:/Users/Administrator/sos-2x/kernel/include/net_stack.h ****  * SUCH DAMAGE.
  36:/Users/Administrator/sos-2x/kernel/include/net_stack.h ****  *
  37:/Users/Administrator/sos-2x/kernel/include/net_stack.h ****  */
  38:/Users/Administrator/sos-2x/kernel/include/net_stack.h **** /**
  39:/Users/Administrator/sos-2x/kernel/include/net_stack.h ****  * @brief inline functions for message handling in the stack
  40:/Users/Administrator/sos-2x/kernel/include/net_stack.h ****  * @author Simon Han (simonhan@ee.ucla.edu)
  41:/Users/Administrator/sos-2x/kernel/include/net_stack.h ****  *
  42:/Users/Administrator/sos-2x/kernel/include/net_stack.h ****  * In SOS, stack is part of operating system.
  43:/Users/Administrator/sos-2x/kernel/include/net_stack.h ****  * Therefore, stack helps kernel to do message filtering.
  44:/Users/Administrator/sos-2x/kernel/include/net_stack.h ****  * Note that this routine was originally done in post and call logic.
  45:/Users/Administrator/sos-2x/kernel/include/net_stack.h ****  * But most of message filterings are meanful for messages from the 
  46:/Users/Administrator/sos-2x/kernel/include/net_stack.h ****  * network.  
  47:/Users/Administrator/sos-2x/kernel/include/net_stack.h ****  */
  48:/Users/Administrator/sos-2x/kernel/include/net_stack.h **** 
  49:/Users/Administrator/sos-2x/kernel/include/net_stack.h **** 
  50:/Users/Administrator/sos-2x/kernel/include/net_stack.h **** #ifndef _NET_STACK_H
  51:/Users/Administrator/sos-2x/kernel/include/net_stack.h **** #define _NET_STACK_H
  52:/Users/Administrator/sos-2x/kernel/include/net_stack.h **** 
  53:/Users/Administrator/sos-2x/kernel/include/net_stack.h **** #include <message_queue.h>
  54:/Users/Administrator/sos-2x/kernel/include/net_stack.h **** #include <sos_sched.h>
  55:/Users/Administrator/sos-2x/kernel/include/net_stack.h **** #include <sos_info.h>
  56:/Users/Administrator/sos-2x/kernel/include/net_stack.h **** 
  57:/Users/Administrator/sos-2x/kernel/include/net_stack.h **** static inline void handle_incoming_msg(Message *msg, uint16_t channel_flag)
  58:/Users/Administrator/sos-2x/kernel/include/net_stack.h **** {
 2382               	.LM278:
 2383 09ea E091 0000 		lds r30,state+15
 2384 09ee F091 0000 		lds r31,(state+15)+1
 2385               	.LBB66:
  59:/Users/Administrator/sos-2x/kernel/include/net_stack.h ****   //   DEBUG("<NET STACK> Received message from network\n");
  60:/Users/Administrator/sos-2x/kernel/include/net_stack.h ****   msg->flag |= SOS_MSG_FROM_NETWORK | channel_flag;
 2387               	.LM279:
 2388 09f2 8285      		ldd r24,Z+10
 2389 09f4 9385      		ldd r25,Z+11
 2390 09f6 9960      		ori r25,hi8(2304)
 2391 09f8 8287      		std Z+10,r24
 2392 09fa 9387      		std Z+11,r25
  61:/Users/Administrator/sos-2x/kernel/include/net_stack.h ****   msg->daddr = entohs(msg->daddr);
  62:/Users/Administrator/sos-2x/kernel/include/net_stack.h ****   msg->saddr = entohs(msg->saddr);
  63:/Users/Administrator/sos-2x/kernel/include/net_stack.h ****   sched_msg_alloc(msg);
 2394               	.LM280:
 2395 09fc CF01      		movw r24,r30
 2396 09fe 0E94 0000 		call sched_msg_alloc
 2397 0a02 0DC0      		rjmp .L198
 2398               	.L182:
 2399               	.LBE66:
 2400               	.LBE65:
 2402               	.Ltext28:
 565:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 
 566:/Users/Administrator/sos-2x/drivers/uart/uart.c ****             }
 567:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 						handle_incoming_msg(state[RX].msgHdr, SOS_MSG_UART_IO);
 568:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 						state[RX].msgHdr = NULL;
 569:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 					} else {
 570:/Users/Administrator/sos-2x/drivers/uart/uart.c **** 						msg_dispose(state[RX].msgHdr);
 2404               	.LM281:
 2405 0a04 8091 0000 		lds r24,state+15
 2406 0a08 9091 0000 		lds r25,(state+15)+1
 2407 0a0c 06C0      		rjmp .L197
 2408               	.L186:
 2409               	.LBB67:
 2410               	.LBB68:
 2412               	.LM282:
 2413 0a0e 8091 0000 		lds r24,state+15
 2414 0a12 9091 0000 		lds r25,(state+15)+1
 2415 0a16 0097      		sbiw r24,0
 2416 0a18 31F0      		breq .L187
 2417               	.L197:
 2419               	.LM283:
 2420 0a1a 0E94 0000 		call msg_dispose
 2421               	.L198:
 2423               	.LM284:
 2424 0a1e 1092 0000 		sts (state+15)+1,__zero_reg__
 2425 0a22 1092 0000 		sts state+15,__zero_reg__
 2426               	.L187:
 2428               	.LM285:
 2429 0a26 81E0      		ldi r24,lo8(1)
 2430 0a28 8093 0000 		sts state+12,r24
 2432               	.LM286:
 2433 0a2c 1092 0000 		sts state+13,__zero_reg__
 2435               	.LM287:
 2436 0a30 1092 0000 		sts state+14,__zero_reg__
 2437               	.L99:
 2438               	.LBE68:
 2439               	.LBE67:
 2440               	/* epilogue: frame size=0 */
 2441 0a34 FF91      		pop r31
 2442 0a36 EF91      		pop r30
 2443 0a38 DF91      		pop r29
 2444 0a3a CF91      		pop r28
 2445 0a3c BF91      		pop r27
 2446 0a3e AF91      		pop r26
 2447 0a40 9F91      		pop r25
 2448 0a42 8F91      		pop r24
 2449 0a44 7F91      		pop r23
 2450 0a46 6F91      		pop r22
 2451 0a48 5F91      		pop r21
 2452 0a4a 4F91      		pop r20
 2453 0a4c 3F91      		pop r19
 2454 0a4e 2F91      		pop r18
 2455 0a50 1F91      		pop r17
 2456 0a52 FF90      		pop r15
 2457 0a54 EF90      		pop r14
 2458 0a56 0F90      		pop __tmp_reg__
 2459 0a58 0FBE      		out __SREG__,__tmp_reg__
 2460 0a5a 0F90      		pop __tmp_reg__
 2461 0a5c 1F90      		pop __zero_reg__
 2462 0a5e 1895      		reti
 2463               	/* epilogue end (size=22) */
 2464               	/* function __vector_18 size 625 (581) */
 2519               	.Lscope7:
 2521               		.lcomm state,24
 2523               		.text
 2525               	Letext:
 2526               	/* File "/Users/Administrator/sos-2x/drivers/uart/uart.c": code 1396 = 0x0574 (1310), prologues  40
DEFINED SYMBOLS
                            *ABS*:00000000 uart.c
                            *ABS*:0000003f __SREG__
                            *ABS*:0000003e __SP_H__
                            *ABS*:0000003d __SP_L__
                            *ABS*:00000000 __tmp_reg__
                            *ABS*:00000001 __zero_reg__
/var/tmp//ccat6d5A.s:301    .text:00000000 uart_init
/var/tmp//ccat6d5A.s:1579   .bss:00000004 state
/var/tmp//ccat6d5A.s:369    .text:00000036 uart_rx_msg_gc
/var/tmp//ccat6d5A.s:396    .text:0000004a uart_getState
/var/tmp//ccat6d5A.s:431    .text:00000060 uart_startTransceiverTx
/var/tmp//ccat6d5A.s:544    .text:000000ee uart_startTransceiverRx
/var/tmp//ccat6d5A.s:645    .text:0000015e uart_getRecievedData
                             .bss:00000000 saved_state.2
/var/tmp//ccat6d5A.s:715    .text:000001a8 __vector_20
/var/tmp//ccat6d5A.s:711    .bss:00000001 crc_in.0
/var/tmp//ccat6d5A.s:1578   .bss:00000003 saved_state.1
/var/tmp//ccat6d5A.s:1583   .text:000005b4 __vector_18
/var/tmp//ccat6d5A.s:2525   .text:00000a60 Letext

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
uart_hardware_init
mq_gc_mark_one_hdr
ker_systime32
msg_create
sos_blk_mem_alloc
crcTable
uart_send_done
sos_blk_mem_free
msg_dispose
set_uart_address
sched_msg_alloc
