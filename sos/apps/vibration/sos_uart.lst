   1               		.file	"sos_uart.c"
   2               		.arch atmega128
   3               	__SREG__ = 0x3f
   4               	__SP_H__ = 0x3e
   5               	__SP_L__ = 0x3d
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  12               		.text
  13               	.Ltext0:
 293               		.section	.progmem.data,"a",@progbits
 296               	mod_header:
 297 0000 0000      		.word	0
 298 0002 48        		.byte	72
 299 0003 01        		.byte	1
 300 0004 00        		.byte	0
 301 0005 00        		.byte	0
 302 0006 0000 0000 		.skip 8,0
 302      0000 0000 
 303 000e 0000      		.word	pm(sos_uart_msg_handler)
 304               		.text
 306               	.global	sos_uart_init
 308               	sos_uart_init:
   1:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** /* -*- Mode: C; tab-width:2 -*- */
   2:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** /* ex: set ts=2 shiftwidth=2 softtabstop=2 cindent: */
   3:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** /**
   4:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c ****  * @brief    sos_uart messaging layer
   5:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c ****  * @author	 Naim Busek <ndbusek@gmail.com>
   6:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c ****  *
   7:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c ****  */
   8:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** #include <hardware.h>
   9:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** #include <message_queue.h>
  10:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** #include <net_stack.h>
  11:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** #include <sos_info.h>
  12:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** #include <crc.h>
  13:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** #include <measurement.h>
  14:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** #include <malloc.h>
  15:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** #include <sos_timer.h>
  16:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** #include <uart_system.h>
  17:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 
  18:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** #include <sos_uart_mgr.h>
  19:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** #include <sos_uart.h>
  20:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 
  21:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** //#define LED_DEBUG
  22:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** #include <led_dbg.h>
  23:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 
  24:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** #define SOS_UART_BACKOFF_TIME 256L
  25:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** #define SOS_UART_TID        0
  26:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 
  27:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** #ifndef NO_SOS_UART
  28:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** enum {
  29:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c ****   SOS_UART_IDLE=0,
  30:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 	SOS_UART_BACKOFF,
  31:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c ****   SOS_UART_TX_MSG,
  32:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** };
  33:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 
  34:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** typedef struct sos_uart_state {
  35:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c ****   uint8_t state;
  36:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 	Message *msg_ptr;
  37:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** } sos_uart_state_t;
  38:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 
  39:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** //! priority queue
  40:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** static mq_t uartpq;
  41:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** static sos_uart_state_t s;
  42:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 
  43:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** static int8_t sos_uart_msg_handler(void *state, Message *e);
  44:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** static void sos_uart_msg_senddone( bool failed );
  45:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 
  46:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** static mod_header_t mod_header SOS_MODULE_HEADER = {
  47:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 	.mod_id         = KER_UART_PID,
  48:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 	.state_size     = 0,  // need to keep state localy
  49:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 	.num_timers     = 1,
  50:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 	.num_sub_func   = 0,
  51:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 	.num_prov_func  = 0,
  52:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 	.module_handler = sos_uart_msg_handler,
  53:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** };
  54:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 
  55:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 
  56:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** void sos_uart_init()
  57:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** {
 310               	.LM1:
 311               	/* prologue: frame size=0 */
 312               	/* prologue end (size=0) */
  58:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c ****   s.state = SOS_UART_IDLE;
 314               	.LM2:
 315 0000 1092 0000 		sts s,__zero_reg__
  59:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 	s.msg_ptr = NULL;
 317               	.LM3:
 318 0004 1092 0000 		sts (s+1)+1,__zero_reg__
 319 0008 1092 0000 		sts s+1,__zero_reg__
  60:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 
  61:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 	// set uart_address 
  62:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 	set_uart_address(ker_id());
 321               	.LM4:
 322 000c 0E94 0000 		call ker_id
 323 0010 0E94 0000 		call set_uart_address
  63:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 	ker_register_module(sos_get_header_address(mod_header));
 325               	.LM5:
 326 0014 80E0      		ldi r24,lo8(mod_header)
 327 0016 90E0      		ldi r25,hi8(mod_header)
 328 0018 AA27      		clr r26
 329 001a 97FD      		sbrc r25,7
 330 001c A095      		com r26
 331 001e BA2F      		mov r27,r26
 332 0020 B695      		lsr r27
 333 0022 A795      		ror r26
 334 0024 9795      		ror r25
 335 0026 8795      		ror r24
 336 0028 0E94 0000 		call ker_register_module
  64:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 
  65:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 	mq_init(&uartpq);
 338               	.LM6:
 339 002c 80E0      		ldi r24,lo8(uartpq)
 340 002e 90E0      		ldi r25,hi8(uartpq)
 341 0030 0E94 0000 		call mq_init
 342               	/* epilogue: frame size=0 */
 343 0034 0895      		ret
 344               	/* epilogue end (size=1) */
 345               	/* function sos_uart_init size 27 (26) */
 347               	.Lscope0:
 352               	uart_try_reserve_and_send:
  66:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** }
  67:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 
  68:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 
  69:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** static void uart_try_reserve_and_send(Message *m) {
 354               	.LM7:
 355               	/* prologue: frame size=0 */
 356 0036 CF93      		push r28
 357 0038 DF93      		push r29
 358               	/* prologue end (size=2) */
 359 003a EC01      		movw r28,r24
  70:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 	if (ker_uart_reserve_bus(KER_UART_PID, UART_SYS_TX_FLAG|UART_SYS_SOS_MSG_FLAG) != SOS_OK) {
 361               	.LM8:
 362 003c 60EC      		ldi r22,lo8(-64)
 363 003e 88E4      		ldi r24,lo8(72)
 364 0040 0E94 0000 		call ker_uart_reserve_bus
 365 0044 8823      		tst r24
 366 0046 21F0      		breq .L3
  71:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 		LED_DBG(LED_RED_ON);
  72:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 		ker_uart_release_bus(KER_UART_PID);
 368               	.LM9:
 369 0048 88E4      		ldi r24,lo8(72)
 370 004a 0E94 0000 		call ker_uart_release_bus
  73:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 		goto queue_and_backoff;
 372               	.LM10:
 373 004e 0BC0      		rjmp .L4
 374               	.L3:
  74:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 	}
  75:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 
  76:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 	if (ker_uart_send_data((uint8_t*)m, m->len, KER_UART_PID) != SOS_OK) {
 376               	.LM11:
 377 0050 48E4      		ldi r20,lo8(72)
 378 0052 6F81      		ldd r22,Y+7
 379 0054 CE01      		movw r24,r28
 380 0056 0E94 0000 		call ker_uart_send_data
 381 005a 8823      		tst r24
 382 005c 21F4      		brne .L4
  77:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 		goto queue_and_backoff;
  78:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 	}
  79:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 	s.state = SOS_UART_TX_MSG;
 384               	.LM12:
 385 005e 82E0      		ldi r24,lo8(2)
 386 0060 8093 0000 		sts s,r24
  80:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 	return;
 388               	.LM13:
 389 0064 10C0      		rjmp .L2
 390               	.L4:
  81:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 
  82:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** queue_and_backoff:
  83:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 	//DEBUG("UART backoff\n");
  84:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 	s.state = SOS_UART_BACKOFF;
 392               	.LM14:
 393 0066 81E0      		ldi r24,lo8(1)
 394 0068 8093 0000 		sts s,r24
  85:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 	mq_enqueue(&uartpq, m);
 396               	.LM15:
 397 006c BE01      		movw r22,r28
 398 006e 80E0      		ldi r24,lo8(uartpq)
 399 0070 90E0      		ldi r25,hi8(uartpq)
 400 0072 0E94 0000 		call mq_enqueue
  86:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 	ker_timer_restart(KER_UART_PID, SOS_UART_TID, SOS_UART_BACKOFF_TIME);
 402               	.LM16:
 403 0076 20E0      		ldi r18,lo8(256)
 404 0078 31E0      		ldi r19,hi8(256)
 405 007a 40E0      		ldi r20,hlo8(256)
 406 007c 50E0      		ldi r21,hhi8(256)
 407 007e 60E0      		ldi r22,lo8(0)
 408 0080 88E4      		ldi r24,lo8(72)
 409 0082 0E94 0000 		call ker_timer_restart
 410               	.L2:
 411               	/* epilogue: frame size=0 */
 412 0086 DF91      		pop r29
 413 0088 CF91      		pop r28
 414 008a 0895      		ret
 415               	/* epilogue end (size=3) */
 416               	/* function uart_try_reserve_and_send size 43 (38) */
 418               	.Lscope1:
 422               	.global	uart_msg_alloc
 424               	uart_msg_alloc:
  87:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** }
  88:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 
  89:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** // Use this when the bus is already reserved
  90:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** static void uart_try_send_reserved_bus(Message *m)
  91:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** {
  92:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 	if (ker_uart_send_data((uint8_t*)m, m->len, KER_UART_PID) != SOS_OK) {
  93:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 		//DEBUG("UART backoff\n");
  94:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 		s.state = SOS_UART_BACKOFF;
  95:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 		mq_enqueue(&uartpq, m);
  96:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 		ker_timer_restart(KER_UART_PID, SOS_UART_TID, SOS_UART_BACKOFF_TIME);
  97:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 		return;
  98:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 	} 
  99:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 	//DEBUG("end of try send reserved bus\n");
 100:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 	s.state = SOS_UART_TX_MSG;
 101:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** }
 102:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 
 103:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 
 104:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** void uart_msg_alloc(Message *m)
 105:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** {
 426               	.LM17:
 427               	/* prologue: frame size=0 */
 428 008c 1F93      		push r17
 429 008e CF93      		push r28
 430 0090 DF93      		push r29
 431               	/* prologue end (size=3) */
 432 0092 EC01      		movw r28,r24
 106:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 	HAS_CRITICAL_SECTION;
 107:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 	//! change ownership
 108:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 	if(flag_msg_release(m->flag)){
 434               	.LM18:
 435 0094 8A85      		ldd r24,Y+10
 436 0096 9B85      		ldd r25,Y+11
 437 0098 82FF      		sbrs r24,2
 438 009a 06C0      		rjmp .L7
 439               	.LBB2:
 440               	.LBB3:
 442               	.Ltext1:
   1:/Users/Administrator/sos-2x/kernel/include/malloc.h **** /* -*- Mode: C; tab-width:4 -*- */
   2:/Users/Administrator/sos-2x/kernel/include/malloc.h **** /* ex: set ts=4: */
   3:/Users/Administrator/sos-2x/kernel/include/malloc.h **** /*
   4:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * Copyright (c) 2003 The Regents of the University of California.
   5:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * All rights reserved.
   6:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  *
   7:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * Redistribution and use in source and binary forms, with or without
   8:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * modification, are permitted provided that the following conditions
   9:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * are met:
  10:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * 1. Redistributions of source code must retain the above copyright
  11:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  *    notice, this list of conditions and the following disclaimer.
  12:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * 2. Redistributions in binary form must reproduce the above
  13:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  *    copyright notice, this list of conditions and the following
  14:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  *    disclaimer in the documentation and/or other materials provided
  15:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  *    with the distribution.
  16:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * 3. All advertising materials mentioning features or use of this
  17:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  *    software must display the following acknowledgement:
  18:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  *       This product includes software developed by Networked &
  19:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  *       Embedded Systems Lab at UCLA
  20:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * 4. Neither the name of the University nor that of the Laboratory
  21:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  *    may be used to endorse or promote products derived from this
  22:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  *    software without specific prior written permission.
  23:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  *
  24:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS''
  25:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
  26:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
  27:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS
  28:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  29:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  30:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
  31:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  32:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  33:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
  34:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
  35:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * SUCH DAMAGE.
  36:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  *
  37:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @brief    Allocte and free dynamic memory 
  38:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @author   Roy Shea (roy@cs.ucla.edu) 
  39:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  */
  40:/Users/Administrator/sos-2x/kernel/include/malloc.h **** #ifndef _MALLOC_H_
  41:/Users/Administrator/sos-2x/kernel/include/malloc.h **** #define _MALLOC_H_
  42:/Users/Administrator/sos-2x/kernel/include/malloc.h **** 
  43:/Users/Administrator/sos-2x/kernel/include/malloc.h **** #include <sos_types.h>
  44:/Users/Administrator/sos-2x/kernel/include/malloc.h **** #include <pid.h>
  45:/Users/Administrator/sos-2x/kernel/include/malloc.h **** #include <malloc_conf.h>
  46:/Users/Administrator/sos-2x/kernel/include/malloc.h **** #include <sos_module_types.h>
  47:/Users/Administrator/sos-2x/kernel/include/malloc.h **** #ifdef FAULT_TOLERANT_SOS
  48:/Users/Administrator/sos-2x/kernel/include/malloc.h **** #include <malloc_domains.h>
  49:/Users/Administrator/sos-2x/kernel/include/malloc.h **** #endif
  50:/Users/Administrator/sos-2x/kernel/include/malloc.h **** 
  51:/Users/Administrator/sos-2x/kernel/include/malloc.h **** /**
  52:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @brief Init function for memory manager
  53:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  */
  54:/Users/Administrator/sos-2x/kernel/include/malloc.h **** extern void mem_init(void);
  55:/Users/Administrator/sos-2x/kernel/include/malloc.h **** 
  56:/Users/Administrator/sos-2x/kernel/include/malloc.h **** /**
  57:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @brief Starting memory module interface
  58:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  */
  59:/Users/Administrator/sos-2x/kernel/include/malloc.h **** extern void mem_start(void);
  60:/Users/Administrator/sos-2x/kernel/include/malloc.h **** 
  61:/Users/Administrator/sos-2x/kernel/include/malloc.h **** /**
  62:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @brief Allocate a chunk of blocks from the heap
  63:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  */
  64:/Users/Administrator/sos-2x/kernel/include/malloc.h **** extern void *sos_blk_mem_alloc(uint16_t size, sos_pid_t id, bool bCallFromModule);
  65:/Users/Administrator/sos-2x/kernel/include/malloc.h **** 
  66:/Users/Administrator/sos-2x/kernel/include/malloc.h **** /**
  67:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @brief Free a block back into the heap
  68:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  */
  69:/Users/Administrator/sos-2x/kernel/include/malloc.h **** extern void sos_blk_mem_free(void* ptr, bool bCallFromModule);
  70:/Users/Administrator/sos-2x/kernel/include/malloc.h **** 
  71:/Users/Administrator/sos-2x/kernel/include/malloc.h **** /**
  72:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @brief Re-allocate a block of memory from the heap
  73:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  */
  74:/Users/Administrator/sos-2x/kernel/include/malloc.h **** extern void *sos_blk_mem_realloc(void* pntr, uint16_t newSize, bool bCallFromModule);
  75:/Users/Administrator/sos-2x/kernel/include/malloc.h **** 
  76:/Users/Administrator/sos-2x/kernel/include/malloc.h **** /**
  77:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @brief Change memory ownership of a segment of memory
  78:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  */
  79:/Users/Administrator/sos-2x/kernel/include/malloc.h **** extern int8_t sos_blk_mem_change_own(void* ptr, sos_pid_t id, bool bCallFromModule);
  80:/Users/Administrator/sos-2x/kernel/include/malloc.h **** 
  81:/Users/Administrator/sos-2x/kernel/include/malloc.h **** /**
  82:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @brief Allocate a block of memory for long term usage
  83:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  */
  84:/Users/Administrator/sos-2x/kernel/include/malloc.h **** extern void *sos_blk_mem_longterm_alloc(uint16_t size, sos_pid_t id, bool bCallFromModule);
  85:/Users/Administrator/sos-2x/kernel/include/malloc.h **** 
  86:/Users/Administrator/sos-2x/kernel/include/malloc.h **** 
  87:/Users/Administrator/sos-2x/kernel/include/malloc.h **** /**
  88:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @brief Allocate dynamic memory
  89:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @param size Number of bytes to allocate
  90:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @param id Node responsible for the memory
  91:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @return Returns a pointer to the allocated memory.
  92:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * Will return a NULL pointer if the call to sys_malloc fails.
  93:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  */
  94:/Users/Administrator/sos-2x/kernel/include/malloc.h **** static inline void *ker_malloc(uint16_t size, sos_pid_t id)
  95:/Users/Administrator/sos-2x/kernel/include/malloc.h **** {
  96:/Users/Administrator/sos-2x/kernel/include/malloc.h ****   return sos_blk_mem_alloc(size, id, false);
  97:/Users/Administrator/sos-2x/kernel/include/malloc.h **** }
  98:/Users/Administrator/sos-2x/kernel/include/malloc.h **** 
  99:/Users/Administrator/sos-2x/kernel/include/malloc.h **** /**
 100:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @brief Reallocate dynamic memory
 101:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @param pntr Pointer to the currently held block of memory
 102:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @param newSize Number of bytes to be allocated
 103:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @return Returns the pointer to the reallocated memory.
 104:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * Returns a NULL if unable to reallocate but the original pointer is still valid.
 105:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  */
 106:/Users/Administrator/sos-2x/kernel/include/malloc.h **** static inline void* ker_realloc(void* pntr, uint16_t newSize)
 107:/Users/Administrator/sos-2x/kernel/include/malloc.h **** {
 108:/Users/Administrator/sos-2x/kernel/include/malloc.h ****   return sos_blk_mem_realloc(pntr, newSize, false);
 109:/Users/Administrator/sos-2x/kernel/include/malloc.h **** }
 110:/Users/Administrator/sos-2x/kernel/include/malloc.h **** 
 111:/Users/Administrator/sos-2x/kernel/include/malloc.h **** /**
 112:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @brief Free memory pointed to by ptr
 113:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @param ptr Pointer to the memory that should be released
 114:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @return void
 115:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  */
 116:/Users/Administrator/sos-2x/kernel/include/malloc.h **** static inline void ker_free(void* ptr)
 117:/Users/Administrator/sos-2x/kernel/include/malloc.h **** {
 118:/Users/Administrator/sos-2x/kernel/include/malloc.h ****   sos_blk_mem_free(ptr, false);
 119:/Users/Administrator/sos-2x/kernel/include/malloc.h ****   return;
 120:/Users/Administrator/sos-2x/kernel/include/malloc.h **** }
 121:/Users/Administrator/sos-2x/kernel/include/malloc.h **** 
 122:/Users/Administrator/sos-2x/kernel/include/malloc.h **** /**
 123:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @brief Change the ownership of memory
 124:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @param ptr Pointer to the memory whose ownership is being transferred
 125:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @param id New owner of the memeory
 126:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @return SOS_OK or error code upon fail
 127:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * Add check to prevent a change of ownership to the 'null' user.
 128:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  */
 129:/Users/Administrator/sos-2x/kernel/include/malloc.h **** static inline int8_t ker_change_own(void* ptr, sos_pid_t id)
 130:/Users/Administrator/sos-2x/kernel/include/malloc.h **** {
 131:/Users/Administrator/sos-2x/kernel/include/malloc.h ****   return sos_blk_mem_change_own(ptr, id, false);
 444               	.LM19:
 445 009c 40E0      		ldi r20,lo8(0)
 446 009e 68E4      		ldi r22,lo8(72)
 447 00a0 8885      		ldd r24,Y+8
 448 00a2 9985      		ldd r25,Y+9
 449 00a4 0E94 0000 		call sos_blk_mem_change_own
 450               	.L7:
 451               	.LBE3:
 452               	.LBE2:
 454               	.Ltext2:
 109:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 		ker_change_own(m->data, KER_UART_PID);
 110:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 	}
 111:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 
 112:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c ****   ENTER_CRITICAL_SECTION();
 456               	.LM20:
 457               	/* #APP */
 458 00a8 1FB7      		in r17, __SREG__
 459 00aa F894      		cli
 460               		
 113:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 	//DEBUG("uart_msg_alloc %d\n", s.state);
 114:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 	if(s.state == SOS_UART_IDLE) {
 462               	.LM21:
 463               	/* #NOAPP */
 464 00ac 8091 0000 		lds r24,s
 465 00b0 8823      		tst r24
 466 00b2 41F4      		brne .L9
 115:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 		s.msg_ptr = m;
 468               	.LM22:
 469 00b4 D093 0000 		sts (s+1)+1,r29
 470 00b8 C093 0000 		sts s+1,r28
 116:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 		uart_try_reserve_and_send(s.msg_ptr);
 472               	.LM23:
 473 00bc CE01      		movw r24,r28
 474 00be 0E94 0000 		call uart_try_reserve_and_send
 475 00c2 05C0      		rjmp .L10
 476               	.L9:
 117:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 	} else {
 118:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 		mq_enqueue(&uartpq, m);
 478               	.LM24:
 479 00c4 BE01      		movw r22,r28
 480 00c6 80E0      		ldi r24,lo8(uartpq)
 481 00c8 90E0      		ldi r25,hi8(uartpq)
 482 00ca 0E94 0000 		call mq_enqueue
 483               	.L10:
 119:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 	}
 120:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 	//DEBUG("end uart_msg_alloc %d\n", s.state);
 121:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 	LEAVE_CRITICAL_SECTION();
 485               	.LM25:
 486               	/* #APP */
 487 00ce 1FBF      		out __SREG__, r17
 488               		
 489               	/* #NOAPP */
 490               	/* epilogue: frame size=0 */
 491 00d0 DF91      		pop r29
 492 00d2 CF91      		pop r28
 493 00d4 1F91      		pop r17
 494 00d6 0895      		ret
 495               	/* epilogue end (size=4) */
 496               	/* function uart_msg_alloc size 45 (38) */
 501               	.Lscope2:
 504               	.global	uart_gc
 506               	uart_gc:
 122:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** }
 123:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 
 124:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** void uart_gc( void )
 125:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** {
 508               	.LM26:
 509               	/* prologue: frame size=0 */
 510               	/* prologue end (size=0) */
 126:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 	mq_gc_mark_payload( &uartpq, KER_UART_PID );
 512               	.LM27:
 513 00d8 68E4      		ldi r22,lo8(72)
 514 00da 80E0      		ldi r24,lo8(uartpq)
 515 00dc 90E0      		ldi r25,hi8(uartpq)
 516 00de 0E94 0000 		call mq_gc_mark_payload
 127:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 	if( s.msg_ptr != NULL && flag_msg_release(s.msg_ptr->flag)) {
 518               	.LM28:
 519 00e2 E091 0000 		lds r30,s+1
 520 00e6 F091 0000 		lds r31,(s+1)+1
 521 00ea 3097      		sbiw r30,0
 522 00ec 49F0      		breq .L12
 524               	.LM29:
 525 00ee 8285      		ldd r24,Z+10
 526 00f0 9385      		ldd r25,Z+11
 527 00f2 82FF      		sbrs r24,2
 528 00f4 05C0      		rjmp .L12
 128:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 		ker_gc_mark( KER_UART_PID, s.msg_ptr->data );
 530               	.LM30:
 531 00f6 6085      		ldd r22,Z+8
 532 00f8 7185      		ldd r23,Z+9
 533 00fa 88E4      		ldi r24,lo8(72)
 534 00fc 0E94 0000 		call ker_gc_mark
 535               	.L12:
 129:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 	}
 130:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 	malloc_gc( KER_UART_PID );
 537               	.LM31:
 538 0100 88E4      		ldi r24,lo8(72)
 539 0102 0E94 0000 		call malloc_gc
 540               	/* epilogue: frame size=0 */
 541 0106 0895      		ret
 542               	/* epilogue end (size=1) */
 543               	/* function uart_gc size 24 (23) */
 545               	.Lscope3:
 548               	.global	uart_msg_gc
 550               	uart_msg_gc:
 131:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** }
 132:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 
 133:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** void uart_msg_gc( void )
 134:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** {
 552               	.LM32:
 553               	/* prologue: frame size=0 */
 554               	/* prologue end (size=0) */
 135:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 	uart_rx_msg_gc();
 556               	.LM33:
 557 0108 0E94 0000 		call uart_rx_msg_gc
 136:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 	if( s.msg_ptr != NULL ) {
 559               	.LM34:
 560 010c 8091 0000 		lds r24,s+1
 561 0110 9091 0000 		lds r25,(s+1)+1
 562 0114 0097      		sbiw r24,0
 563 0116 11F0      		breq .L14
 137:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 		mq_gc_mark_one_hdr( s.msg_ptr );
 565               	.LM35:
 566 0118 0E94 0000 		call mq_gc_mark_one_hdr
 567               	.L14:
 138:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 	}
 139:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 	mq_gc_mark_hdr( &uartpq, KER_UART_PID );
 569               	.LM36:
 570 011c 68E4      		ldi r22,lo8(72)
 571 011e 80E0      		ldi r24,lo8(uartpq)
 572 0120 90E0      		ldi r25,hi8(uartpq)
 573 0122 0E94 0000 		call mq_gc_mark_hdr
 574               	/* epilogue: frame size=0 */
 575 0126 0895      		ret
 576               	/* epilogue end (size=1) */
 577               	/* function uart_msg_gc size 16 (15) */
 579               	.Lscope4:
 585               	sos_uart_msg_handler:
 140:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** }
 141:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 
 142:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** int8_t sos_uart_msg_handler(void *state, Message *msg) 
 143:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** {
 587               	.LM37:
 588               	/* prologue: frame size=0 */
 589 0128 1F93      		push r17
 590 012a CF93      		push r28
 591 012c DF93      		push r29
 592               	/* prologue end (size=3) */
 593 012e FB01      		movw r30,r22
 144:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 	HAS_CRITICAL_SECTION;
 145:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c ****   ENTER_CRITICAL_SECTION();
 595               	.LM38:
 596               	/* #APP */
 597 0130 1FB7      		in r17, __SREG__
 598 0132 F894      		cli
 599               		
 146:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 	switch (msg->type) {
 601               	.LM39:
 602               	/* #NOAPP */
 603 0134 8681      		ldd r24,Z+6
 604 0136 9927      		clr r25
 605 0138 8630      		cpi r24,6
 606 013a 9105      		cpc r25,__zero_reg__
 607 013c C9F0      		breq .L18
 609               	.LM40:
 610 013e 8730      		cpi r24,7
 611 0140 9105      		cpc r25,__zero_reg__
 612 0142 34F4      		brge .L31
 613 0144 0097      		sbiw r24,0
 614 0146 61F0      		breq .L17
 615 0148 0297      		sbiw r24,2
 616 014a 09F4      		brne .+2
 617 014c 44C0      		rjmp .L26
 618 014e 71C0      		rjmp .L30
 619               	.L31:
 620 0150 8F30      		cpi r24,15
 621 0152 9105      		cpc r25,__zero_reg__
 622 0154 09F4      		brne .+2
 623 0156 52C0      		rjmp .L29
 624 0158 8234      		cpi r24,66
 625 015a 9105      		cpc r25,__zero_reg__
 626 015c 71F0      		breq .L19
 627 015e 69C0      		rjmp .L30
 628               	.L17:
 147:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 		case MSG_INIT:
 148:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 				s.state = SOS_UART_IDLE;
 630               	.LM41:
 631 0160 1092 0000 		sts s,__zero_reg__
 149:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 				ker_timer_init(KER_UART_PID, SOS_UART_TID, TIMER_ONE_SHOT);
 633               	.LM42:
 634 0164 41E0      		ldi r20,lo8(1)
 635 0166 60E0      		ldi r22,lo8(0)
 636 0168 88E4      		ldi r24,lo8(72)
 637 016a 0E94 0000 		call ker_timer_init
 150:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 				break;
 639               	.LM43:
 640 016e 65C0      		rjmp .L16
 641               	.L18:
 151:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 
 152:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 		case MSG_FINAL:
 153:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 				ker_timer_stop(KER_UART_PID, 0);
 643               	.LM44:
 644 0170 60E0      		ldi r22,lo8(0)
 645 0172 88E4      		ldi r24,lo8(72)
 646 0174 0E94 0000 		call ker_timer_stop
 154:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 				break;
 648               	.LM45:
 649 0178 60C0      		rjmp .L16
 650               	.L19:
 651               	.LBB4:
 155:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 
 156:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 		case MSG_UART_SEND_DONE:
 157:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 		{
 158:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 				//DEBUG("end uart_send_done %d\n", s.state);
 159:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 				//s.state = SOS_UART_IDLE;
 160:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 				sos_uart_msg_senddone(flag_send_fail(msg->flag));
 161:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 
 162:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 				break;
 163:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 		}
 164:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 		case MSG_TIMER_TIMEOUT:
 165:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 		{
 166:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 				// if message in queue start transmission
 167:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 				//DEBUG("uart_timeout %d\n", s.state);
 168:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 				s.msg_ptr = mq_dequeue(&uartpq);
 169:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 				if (s.msg_ptr) {
 170:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 					uart_try_reserve_and_send(s.msg_ptr);
 171:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 				} else { // else free bus
 172:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 					ker_uart_release_bus(KER_UART_PID);
 173:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 					s.state = SOS_UART_IDLE;
 174:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 				}
 175:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 				//DEBUG("end uart_timeout %d\n", s.state);
 176:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 				break;
 177:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 		}
 178:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 		case MSG_ERROR:
 179:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 		{
 180:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 					Message *msg_txed;
 181:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 					//DEBUG("uart_error %d\n", s.state);
 182:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 					// post error message to calling module
 183:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 					ker_uart_release_bus(KER_UART_PID);
 184:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 
 185:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 					msg_txed = s.msg_ptr;
 186:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 					s.msg_ptr = NULL;
 187:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 					msg_send_senddone(msg_txed, false, KER_UART_PID);
 188:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 
 189:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 					s.state = SOS_UART_BACKOFF;
 190:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 					ker_timer_restart(KER_UART_PID, SOS_UART_TID, SOS_UART_BACKOFF_TIME);
 191:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 					//DEBUG("end uart_error %d\n", s.state);
 192:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 					break;
 193:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 		}
 194:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 
 195:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 		default: 
 196:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 		{
 197:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 			LEAVE_CRITICAL_SECTION();
 198:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 			return -EINVAL;
 199:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 		}
 200:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 	}
 201:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 
 202:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 	LEAVE_CRITICAL_SECTION();
 203:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 	return SOS_OK;
 204:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** }
 205:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 
 206:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** // this is from Interrupt handler
 207:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** static void sos_uart_msg_senddone( bool failed )
 208:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** {
 653               	.LM46:
 654 017a 8285      		ldd r24,Z+10
 655               	.LBB5:
 209:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 	Message *msg_txed;   //! message just transmitted
 210:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 	msg_txed = s.msg_ptr;
 657               	.LM47:
 658 017c 2091 0000 		lds r18,s+1
 659 0180 3091 0000 		lds r19,(s+1)+1
 211:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 	s.msg_ptr = NULL;
 661               	.LM48:
 662 0184 1092 0000 		sts (s+1)+1,__zero_reg__
 663 0188 1092 0000 		sts s+1,__zero_reg__
 212:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 	//DEBUG("uart_send_done %d\n", s.state);
 213:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 	LED_DBG(LED_GREEN_TOGGLE);
 214:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 	// post send done message to calling module
 215:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 	msg_send_senddone(msg_txed, !failed, KER_UART_PID);
 665               	.LM49:
 666 018c 60E0      		ldi r22,lo8(0)
 667 018e 81FF      		sbrs r24,1
 668 0190 61E0      		ldi r22,lo8(1)
 669               	.L20:
 670 0192 48E4      		ldi r20,lo8(72)
 671 0194 C901      		movw r24,r18
 672 0196 0E94 0000 		call msg_send_senddone
 216:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 	s.msg_ptr = mq_dequeue(&uartpq);
 674               	.LM50:
 675 019a 80E0      		ldi r24,lo8(uartpq)
 676 019c 90E0      		ldi r25,hi8(uartpq)
 677 019e 0E94 0000 		call mq_dequeue
 678 01a2 EC01      		movw r28,r24
 679 01a4 9093 0000 		sts (s+1)+1,r25
 680 01a8 8093 0000 		sts s+1,r24
 217:/Users/Administrator/sos-2x/drivers/uart/sos_uart.c **** 	if (s.msg_ptr) {
 682               	.LM51:
 683 01ac 0097      		sbiw r24,0
 684 01ae 01F1      		breq .L27
 685               	.LBB6:
 686               	.LBB7:
 688               	.LM52:
 689 01b0 48E4      		ldi r20,lo8(72)
 690 01b2 6F81      		ldd r22,Y+7
 691 01b4 0E94 0000 		call ker_uart_send_data
 692 01b8 8823      		tst r24
 693 01ba 49F0      		breq .L22
 695               	.LM53:
 696 01bc 81E0      		ldi r24,lo8(1)
 697 01be 8093 0000 		sts s,r24
 699               	.LM54:
 700 01c2 BE01      		movw r22,r28
 701 01c4 80E0      		ldi r24,lo8(uartpq)
 702 01c6 90E0      		ldi r25,hi8(uartpq)
 703 01c8 0E94 0000 		call mq_enqueue
 704 01cc 29C0      		rjmp .L32
 705               	.L22:
 707               	.LM55:
 708 01ce 82E0      		ldi r24,lo8(2)
 709 01d0 8093 0000 		sts s,r24
 710               	.LBE7:
 711               	.LBE6:
 712 01d4 32C0      		rjmp .L16
 713               	.L26:
 714               	.LBE5:
 715               	.LBE4:
 717               	.LM56:
 718 01d6 80E0      		ldi r24,lo8(uartpq)
 719 01d8 90E0      		ldi r25,hi8(uartpq)
 720 01da 0E94 0000 		call mq_dequeue
 721 01de 9093 0000 		sts (s+1)+1,r25
 722 01e2 8093 0000 		sts s+1,r24
 724               	.LM57:
 725 01e6 0097      		sbiw r24,0
 726 01e8 19F0      		breq .L27
 728               	.LM58:
 729 01ea 0E94 0000 		call uart_try_reserve_and_send
 730 01ee 25C0      		rjmp .L16
 731               	.L27:
 733               	.LM59:
 734 01f0 88E4      		ldi r24,lo8(72)
 735 01f2 0E94 0000 		call ker_uart_release_bus
 737               	.LM60:
 738 01f6 1092 0000 		sts s,__zero_reg__
 740               	.LM61:
 741 01fa 1FC0      		rjmp .L16
 742               	.L29:
 743               	.LBB8:
 745               	.LM62:
 746 01fc 88E4      		ldi r24,lo8(72)
 747 01fe 0E94 0000 		call ker_uart_release_bus
 749               	.LM63:
 750 0202 8091 0000 		lds r24,s+1
 751 0206 9091 0000 		lds r25,(s+1)+1
 753               	.LM64:
 754 020a 1092 0000 		sts (s+1)+1,__zero_reg__
 755 020e 1092 0000 		sts s+1,__zero_reg__
 757               	.LM65:
 758 0212 48E4      		ldi r20,lo8(72)
 759 0214 60E0      		ldi r22,lo8(0)
 760 0216 0E94 0000 		call msg_send_senddone
 762               	.LM66:
 763 021a 81E0      		ldi r24,lo8(1)
 764 021c 8093 0000 		sts s,r24
 765               	.L32:
 767               	.LM67:
 768 0220 20E0      		ldi r18,lo8(256)
 769 0222 31E0      		ldi r19,hi8(256)
 770 0224 40E0      		ldi r20,hlo8(256)
 771 0226 50E0      		ldi r21,hhi8(256)
 772 0228 60E0      		ldi r22,lo8(0)
 773 022a 88E4      		ldi r24,lo8(72)
 774 022c 0E94 0000 		call ker_timer_restart
 776               	.LM68:
 777 0230 04C0      		rjmp .L16
 778               	.L30:
 779               	.LBE8:
 781               	.LM69:
 782               	/* #APP */
 783 0232 1FBF      		out __SREG__, r17
 784               		
 786               	.LM70:
 787               	/* #NOAPP */
 788 0234 8AEE      		ldi r24,lo8(-22)
 789 0236 9FEF      		ldi r25,hi8(-22)
 790 0238 03C0      		rjmp .L15
 791               	.L16:
 793               	.LM71:
 794               	/* #APP */
 795 023a 1FBF      		out __SREG__, r17
 796               		
 798               	.LM72:
 799               	/* #NOAPP */
 800 023c 80E0      		ldi r24,lo8(0)
 801 023e 90E0      		ldi r25,hi8(0)
 802               	.L15:
 803               	/* epilogue: frame size=0 */
 804 0240 DF91      		pop r29
 805 0242 CF91      		pop r28
 806 0244 1F91      		pop r17
 807 0246 0895      		ret
 808               	/* epilogue end (size=4) */
 809               	/* function sos_uart_msg_handler size 156 (149) */
 820               	.Lscope5:
 822               		.lcomm uartpq,16
 823               		.lcomm s,3
 827               		.text
 829               	Letext:
 830               	/* File "/Users/Administrator/sos-2x/drivers/uart/sos_uart.c": code  311 = 0x0137 ( 289), prologues
DEFINED SYMBOLS
                            *ABS*:00000000 sos_uart.c
                            *ABS*:0000003f __SREG__
                            *ABS*:0000003e __SP_H__
                            *ABS*:0000003d __SP_L__
                            *ABS*:00000000 __tmp_reg__
                            *ABS*:00000001 __zero_reg__
/var/tmp//ccwD6uwY.s:296    .progmem.data:00000000 mod_header
/var/tmp//ccwD6uwY.s:585    .text:00000128 sos_uart_msg_handler
/var/tmp//ccwD6uwY.s:308    .text:00000000 sos_uart_init
/var/tmp//ccwD6uwY.s:822    .bss:00000010 s
                             .bss:00000000 uartpq
/var/tmp//ccwD6uwY.s:352    .text:00000036 uart_try_reserve_and_send
/var/tmp//ccwD6uwY.s:424    .text:0000008c uart_msg_alloc
/var/tmp//ccwD6uwY.s:506    .text:000000d8 uart_gc
/var/tmp//ccwD6uwY.s:550    .text:00000108 uart_msg_gc
/var/tmp//ccwD6uwY.s:829    .text:00000248 Letext

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
ker_id
set_uart_address
ker_register_module
mq_init
ker_uart_reserve_bus
ker_uart_release_bus
ker_uart_send_data
mq_enqueue
ker_timer_restart
sos_blk_mem_change_own
mq_gc_mark_payload
ker_gc_mark
malloc_gc
uart_rx_msg_gc
mq_gc_mark_one_hdr
mq_gc_mark_hdr
ker_timer_init
ker_timer_stop
msg_send_senddone
mq_dequeue
