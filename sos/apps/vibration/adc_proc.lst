   1               		.file	"adc_proc.c"
   2               		.arch atmega128
   3               	__SREG__ = 0x3f
   4               	__SP_H__ = 0x3e
   5               	__SP_L__ = 0x3d
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  12               		.text
  13               	.Ltext0:
 256               		.section	.progmem.data,"a",@progbits
 259               	mod_header:
 260 0000 0000      		.word	0
 261 0002 43        		.byte	67
 262 0003 00        		.skip 1,0
 263 0004 0A        		.byte	10
 264 0005 00        		.byte	0
 265 0006 0000 0000 		.skip 8,0
 265      0000 0000 
 266 000e 0000      		.word	pm(adc_proc_msg_handler)
 267 0010 0000      		.word	pm(error_8)
 268 0012 6343 5333 		.ascii	"cCS3"
 269 0016 FF        		.byte	-1
 270 0017 FF        		.byte	-1
 271 0018 0000      		.word	pm(error_8)
 272 001a 6343 5333 		.ascii	"cCS3"
 273 001e FF        		.byte	-1
 274 001f FF        		.byte	-1
 275 0020 0000      		.word	pm(error_8)
 276 0022 6343 5333 		.ascii	"cCS3"
 277 0026 FF        		.byte	-1
 278 0027 FF        		.byte	-1
 279 0028 0000      		.word	pm(error_8)
 280 002a 6343 5333 		.ascii	"cCS3"
 281 002e FF        		.byte	-1
 282 002f FF        		.byte	-1
 283 0030 0000      		.word	pm(error_8)
 284 0032 6343 5333 		.ascii	"cCS3"
 285 0036 FF        		.byte	-1
 286 0037 FF        		.byte	-1
 287 0038 0000      		.word	pm(error_8)
 288 003a 6343 5333 		.ascii	"cCS3"
 289 003e FF        		.byte	-1
 290 003f FF        		.byte	-1
 291 0040 0000      		.word	pm(error_8)
 292 0042 6343 5333 		.ascii	"cCS3"
 293 0046 FF        		.byte	-1
 294 0047 FF        		.byte	-1
 295 0048 0000      		.word	pm(error_8)
 296 004a 6343 5333 		.ascii	"cCS3"
 297 004e FF        		.byte	-1
 298 004f FF        		.byte	-1
 299 0050 0000      		.word	pm(error_8)
 300 0052 6343 5333 		.ascii	"cCS3"
 301 0056 FF        		.byte	-1
 302 0057 FF        		.byte	-1
 303 0058 0000      		.word	pm(error_8)
 304 005a 6343 5333 		.ascii	"cCS3"
 305 005e FF        		.byte	-1
 306 005f FF        		.byte	-1
 307               		.text
 312               	adc_proc_msg_handler:
   1:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** /* -*- Mode: C; tab-width:2 -*- */
   2:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** /* ex: set ts=2 shiftwidth=2 softtabstop=2 cindent: */
   3:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 
   4:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** /*
   5:/Users/Administrator/sos-2x/processor/avr/adc_proc.c ****  * XXX need to implement a function to clean up ADC binding when module is removed
   6:/Users/Administrator/sos-2x/processor/avr/adc_proc.c ****  */
   7:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** #include <adc_proc_hw.h>
   8:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** #include <adc_proc.h>
   9:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** #ifdef SOS_USE_PREEMPTION
  10:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** #include <priority.h>
  11:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** #endif
  12:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 
  13:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** /**
  14:/Users/Administrator/sos-2x/processor/avr/adc_proc.c ****  * the avr ADC is a 12 bit sucessive approximation ADC
  15:/Users/Administrator/sos-2x/processor/avr/adc_proc.c ****  * it has a 8 channel analog input MUX that can be congifured to allow 
  16:/Users/Administrator/sos-2x/processor/avr/adc_proc.c ****  * single ended sampling of any of the 8 channels or different combinations of
  17:/Users/Administrator/sos-2x/processor/avr/adc_proc.c ****  * differental inputs with or without gain.  in general the differential channels
  18:/Users/Administrator/sos-2x/processor/avr/adc_proc.c ****  * measure between a set of channels with a shared negative differential input.
  19:/Users/Administrator/sos-2x/processor/avr/adc_proc.c ****  *
  20:/Users/Administrator/sos-2x/processor/avr/adc_proc.c ****  * measurments can be made between:
  21:/Users/Administrator/sos-2x/processor/avr/adc_proc.c ****  * Single ended:
  22:/Users/Administrator/sos-2x/processor/avr/adc_proc.c ****  * [7-0] - GND
  23:/Users/Administrator/sos-2x/processor/avr/adc_proc.c ****  * Vbg   - GND
  24:/Users/Administrator/sos-2x/processor/avr/adc_proc.c ****  * GND   - GND
  25:/Users/Administrator/sos-2x/processor/avr/adc_proc.c ****  *
  26:/Users/Administrator/sos-2x/processor/avr/adc_proc.c ****  * Differential:
  27:/Users/Administrator/sos-2x/processor/avr/adc_proc.c ****  * [1,0] - 0 gain: 10x,200x
  28:/Users/Administrator/sos-2x/processor/avr/adc_proc.c ****  * [3,2] - 2 gain: 10x, 200x
  29:/Users/Administrator/sos-2x/processor/avr/adc_proc.c ****  * [7-0] - 1 gain: 1x
  30:/Users/Administrator/sos-2x/processor/avr/adc_proc.c ****  * [5-0] - 2 gain: 1x
  31:/Users/Administrator/sos-2x/processor/avr/adc_proc.c ****  *
  32:/Users/Administrator/sos-2x/processor/avr/adc_proc.c ****  * channels can be selected by using the MUX values defined in adc_proc_hw.h
  33:/Users/Administrator/sos-2x/processor/avr/adc_proc.c ****  */
  34:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 
  35:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** // for normal operation the resolution is 12 +- 2
  36:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** #define ADC_PROC_BITS 12
  37:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** #define ADC_PROC_BIT_ERROR 2
  38:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** // the resolution for 200x gain is 12 +- 3
  39:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** #define ADC_PROC_BIT_ERROR_200x 3
  40:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 
  41:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** // null value for adc driver ports
  42:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** #define NULL_PORT 0xff
  43:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 
  44:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** /**
  45:/Users/Administrator/sos-2x/processor/avr/adc_proc.c ****  * this driver will use the internal reference since without a regulated power
  46:/Users/Administrator/sos-2x/processor/avr/adc_proc.c ****  * supply AVCC is meaningless.
  47:/Users/Administrator/sos-2x/processor/avr/adc_proc.c ****  */
  48:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** //#define ADC_PROC_VREF DEFAULT_VREF
  49:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** #define ADC_PROC_VREF ADC_PROC_REF_AREF
  50:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** // this should be defined in the plaform adc_proc_hal.h
  51:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** // the divisor must result in a clock rate between 50k-200k
  52:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** // with a 7.2MHz clock this yeild ~110k
  53:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** #define ADC_PROC_PRESCALER ADC_PROC_CLK_64
  54:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 
  55:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** // highest 2 bits reserved for calling process state
  56:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** // to mux up to 4 sensors on a single ADC channel.
  57:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** // sampling type
  58:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** #define ADC_PROC_DMA_FLAG     0x80
  59:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** #define ADC_PROC_PERODIC_FLAG 0x04
  60:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** #define ADC_PROC_SINGLE_FLAG  0x02
  61:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** #define ADC_PROC_ERROR_FLAG   0x01
  62:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 
  63:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 
  64:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** /**
  65:/Users/Administrator/sos-2x/processor/avr/adc_proc.c ****  * possible states for adc_proc
  66:/Users/Administrator/sos-2x/processor/avr/adc_proc.c ****  */
  67:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** enum {
  68:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	ADC_PROC_INIT=0,  // system uninitalized
  69:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	ADC_PROC_INIT_BUSY,  // system busy with initalization
  70:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	ADC_PROC_IDLE,    // system initalized and idle
  71:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	ADC_PROC_BUSY,
  72:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	ADC_PROC_DATA_RDY,
  73:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	ADC_PROC_ERROR,   // error state
  74:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** };
  75:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 
  76:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 
  77:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** //-----------------------------------------------------------------------------
  78:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** // LOCAL VARIABLES
  79:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** typedef struct adc_proc_state {
  80:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** #ifdef SOS_USE_PREEMPTION
  81:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	func_cb_ptr *cb;
  82:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** #else
  83:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	func_cb_ptr cb[ADC_PROC_EXTENDED_PORTMAPSIZE];
  84:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** #endif
  85:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	uint8_t state;
  86:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 
  87:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	uint8_t portmap[ADC_PROC_EXTENDED_PORTMAPSIZE];
  88:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	uint8_t calling_pid[ADC_PROC_EXTENDED_PORTMAPSIZE];
  89:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	uint8_t pending_flag[ADC_PROC_EXTENDED_PORTMAPSIZE];
  90:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	uint8_t calling_flags;
  91:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	
  92:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	uint8_t reqPort;  // current port
  93:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	uint16_t portMask; // mask of mapped ports
  94:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	uint16_t reqMask;  // the mask for pending requested port
  95:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	uint16_t refVal;  // system reference value
  96:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 
  97:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	uint8_t sampleCnt;
  98:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 
  99:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	uint8_t flags;
 100:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** } adc_proc_state_t;
 101:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** static adc_proc_state_t s;
 102:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 
 103:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** static int8_t adc_proc_msg_handler(void *state, Message *msg);
 104:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 
 105:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** #ifndef SOS_USE_PREEMPTION
 106:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** static sos_module_t adc_proc_module;
 107:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** #endif
 108:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** static mod_header_t mod_header SOS_MODULE_HEADER =
 109:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** {
 110:/Users/Administrator/sos-2x/processor/avr/adc_proc.c ****   .mod_id = ADC_PROC_PID,
 111:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** #ifdef SOS_USE_PREEMPTION
 112:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	.state_size = sizeof(func_cb_ptr) * ADC_PROC_PORTMAPSIZE,
 113:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** #else
 114:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	.state_size = 0,
 115:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** #endif
 116:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	.num_prov_func = 0,
 117:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	.num_sub_func = ADC_PROC_EXTENDED_PORTMAPSIZE,
 118:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	.module_handler= adc_proc_msg_handler,
 119:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	.funct = {
 120:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 		// sensor 0
 121:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 		{error_8, "cCS3", RUNTIME_PID, RUNTIME_FID},
 122:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 		// sensor 1
 123:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 		{error_8, "cCS3", RUNTIME_PID, RUNTIME_FID},
 124:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 		// sensor 2
 125:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 		{error_8, "cCS3", RUNTIME_PID, RUNTIME_FID},
 126:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 		// sensor 3
 127:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 		{error_8, "cCS3", RUNTIME_PID, RUNTIME_FID},
 128:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 		// sensor 4
 129:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 		{error_8, "cCS3", RUNTIME_PID, RUNTIME_FID},
 130:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 		// sensor 5
 131:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 		{error_8, "cCS3", RUNTIME_PID, RUNTIME_FID},
 132:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 		// sensor 6
 133:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 		{error_8, "cCS3", RUNTIME_PID, RUNTIME_FID},
 134:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 		// sensor 7
 135:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 		{error_8, "cCS3", RUNTIME_PID, RUNTIME_FID},
 136:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 		// sensor 8
 137:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 		{error_8, "cCS3", RUNTIME_PID, RUNTIME_FID},
 138:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 		// sensor 9
 139:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 		{error_8, "cCS3", RUNTIME_PID, RUNTIME_FID},
 140:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	},
 141:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** };
 142:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 
 143:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 
 144:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** static int8_t adc_proc_msg_handler(void *state, Message *msg) {
 314               	.LM1:
 315               	/* prologue: frame size=0 */
 316               	/* prologue end (size=0) */
 145:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	return -EINVAL;
 146:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** }
 318               	.LM2:
 319 0000 8AEE      		ldi r24,lo8(-22)
 320 0002 9FEF      		ldi r25,hi8(-22)
 321               	/* epilogue: frame size=0 */
 322 0004 0895      		ret
 323               	/* epilogue end (size=1) */
 324               	/* function adc_proc_msg_handler size 3 (2) */
 326               	.Lscope0:
 329               	.global	adc_proc_init
 331               	adc_proc_init:
 147:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 
 148:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 
 149:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** int8_t adc_proc_init() {
 333               	.LM3:
 334               	/* prologue: frame size=0 */
 335 0006 CF93      		push r28
 336               	/* prologue end (size=1) */
 150:/Users/Administrator/sos-2x/processor/avr/adc_proc.c ****   HAS_CRITICAL_SECTION;
 151:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	int i;
 152:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	
 153:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	ENTER_CRITICAL_SECTION();
 338               	.LM4:
 339               	/* #APP */
 340 0008 CFB7      		in r28, __SREG__
 341 000a F894      		cli
 342               		
 154:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	s.state = ADC_PROC_INIT_BUSY;
 344               	.LM5:
 345               	/* #NOAPP */
 346 000c 81E0      		ldi r24,lo8(1)
 347 000e 8093 0000 		sts s+20,r24
 155:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	
 156:/Users/Administrator/sos-2x/processor/avr/adc_proc.c ****   adc_proc_hardware_init();
 349               	.LM6:
 350 0012 0E94 0000 		call adc_proc_hardware_init
 351 0016 8FEF      		ldi r24,lo8(-1)
 352 0018 E0E0      		ldi r30,lo8(s)
 353 001a F0E0      		ldi r31,hi8(s)
 354               	.L6:
 157:/Users/Administrator/sos-2x/processor/avr/adc_proc.c ****   
 158:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	// set the defaults to single ended
 159:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	for (i = 0; i < ADC_PROC_EXTENDED_PORTMAPSIZE; i++){
 160:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 		s.portmap[i] = ADC_PROC_HW_NULL_PORT;
 356               	.LM7:
 357 001c 858B      		std Z+21,r24
 161:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 		s.calling_pid[i] = NULL_PID;
 359               	.LM8:
 360 001e 878F      		std Z+31,r24
 361 0020 3196      		adiw r30,1
 363               	.LM9:
 364 0022 90E0      		ldi r25,hi8(s+9)
 365 0024 E030      		cpi r30,lo8(s+9)
 366 0026 F907      		cpc r31,r25
 367 0028 C9F3      		breq .L6
 368 002a C4F3      		brlt .L6
 162:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	}
 163:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** #ifdef SOS_USE_PREEMPTION
 164:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	ker_register_module(sos_get_header_address(mod_header));
 165:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	s.cb = ker_get_module_state(KER_SENSOR_PID);
 166:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** #else
 167:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	sched_register_kernel_module(&adc_proc_module, sos_get_header_address(mod_header), &s.cb);
 370               	.LM10:
 371 002c 80E0      		ldi r24,lo8(mod_header)
 372 002e 90E0      		ldi r25,hi8(mod_header)
 373 0030 AA27      		clr r26
 374 0032 97FD      		sbrc r25,7
 375 0034 A095      		com r26
 376 0036 BA2F      		mov r27,r26
 377 0038 B695      		lsr r27
 378 003a A795      		ror r26
 379 003c 9795      		ror r25
 380 003e 8795      		ror r24
 381 0040 40E0      		ldi r20,lo8(s)
 382 0042 50E0      		ldi r21,hi8(s)
 383 0044 BC01      		movw r22,r24
 384 0046 80E0      		ldi r24,lo8(adc_proc_module)
 385 0048 90E0      		ldi r25,hi8(adc_proc_module)
 386 004a 0E94 0000 		call sched_register_kernel_module
 168:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** #endif
 169:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	
 170:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	s.portMask = 0;
 388               	.LM11:
 389 004e 1092 0000 		sts (s+53)+1,__zero_reg__
 390 0052 1092 0000 		sts s+53,__zero_reg__
 171:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	s.reqMask = 0;
 392               	.LM12:
 393 0056 1092 0000 		sts (s+55)+1,__zero_reg__
 394 005a 1092 0000 		sts s+55,__zero_reg__
 172:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	// wtf???
 173:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	s.refVal = 0x17d; // Reference value assuming 3.3 Volt power source
 396               	.LM13:
 397 005e 8DE7      		ldi r24,lo8(381)
 398 0060 91E0      		ldi r25,hi8(381)
 399 0062 9093 0000 		sts (s+57)+1,r25
 400 0066 8093 0000 		sts s+57,r24
 174:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	s.state = ADC_PROC_IDLE;
 402               	.LM14:
 403 006a 82E0      		ldi r24,lo8(2)
 404 006c 8093 0000 		sts s+20,r24
 175:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	LEAVE_CRITICAL_SECTION();
 406               	.LM15:
 407               	/* #APP */
 408 0070 CFBF      		out __SREG__, r28
 409               		
 176:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	
 177:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	return SOS_OK;
 178:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** }
 411               	.LM16:
 412               	/* #NOAPP */
 413 0072 80E0      		ldi r24,lo8(0)
 414 0074 90E0      		ldi r25,hi8(0)
 415               	/* epilogue: frame size=0 */
 416 0076 CF91      		pop r28
 417 0078 0895      		ret
 418               	/* epilogue end (size=2) */
 419               	/* function adc_proc_init size 65 (62) */
 424               	.Lscope1:
 431               	.global	ker_adc_proc_bindPort
 433               	ker_adc_proc_bindPort:
 179:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 
 180:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 
 181:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** int8_t ker_adc_proc_bindPort(uint8_t port, uint8_t adcPort, sos_pid_t calling_id, uint8_t cb_fid){
 435               	.LM17:
 436               	/* prologue: frame size=0 */
 437 007a 0F93      		push r16
 438 007c 1F93      		push r17
 439 007e CF93      		push r28
 440 0080 DF93      		push r29
 441               	/* prologue end (size=4) */
 442 0082 982F      		mov r25,r24
 443 0084 062F      		mov r16,r22
 444 0086 142F      		mov r17,r20
 445 0088 422F      		mov r20,r18
 182:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	HAS_CRITICAL_SECTION;
 183:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 
 184:/Users/Administrator/sos-2x/processor/avr/adc_proc.c ****   if ((port > ADC_PROC_EXTENDED_PORTMAPSIZE) || (adcPort > ADC_PROC_HW_CH_MAX)) {
 447               	.LM18:
 448 008a 8B30      		cpi r24,lo8(11)
 449 008c D0F4      		brsh .L16
 451               	.LM19:
 452 008e 6132      		cpi r22,lo8(33)
 453 0090 C0F4      		brsh .L16
 185:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 		return -EINVAL;
 186:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	}
 187:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	if ((s.state != ADC_PROC_IDLE) || ((s.calling_pid[port] != NULL_PID) && (s.calling_pid[port] != ca
 455               	.LM20:
 456 0092 8091 0000 		lds r24,s+20
 457 0096 8230      		cpi r24,lo8(2)
 458 0098 51F4      		brne .L13
 459 009a C92F      		mov r28,r25
 460 009c DD27      		clr r29
 461 009e FE01      		movw r30,r28
 462 00a0 E050      		subi r30,lo8(-(s))
 463 00a2 F040      		sbci r31,hi8(-(s))
 464 00a4 878D      		ldd r24,Z+31
 465 00a6 8F3F      		cpi r24,lo8(-1)
 466 00a8 29F0      		breq .L12
 467 00aa 8117      		cp r24,r17
 468 00ac 19F0      		breq .L12
 469               	.L13:
 188:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 		return -EBUSY;
 471               	.LM21:
 472 00ae 80EF      		ldi r24,lo8(-16)
 473 00b0 9FEF      		ldi r25,hi8(-16)
 474 00b2 2AC0      		rjmp .L9
 475               	.L12:
 189:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	}
 190:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 
 191:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	// try to register all necessary function calls
 192:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	if(ker_fntable_subscribe(ADC_PROC_PID, calling_id, cb_fid, port) < 0) {
 477               	.LM22:
 478 00b4 292F      		mov r18,r25
 479 00b6 612F      		mov r22,r17
 480 00b8 83E4      		ldi r24,lo8(67)
 481 00ba 0E94 0000 		call ker_fntable_subscribe
 482 00be 87FF      		sbrs r24,7
 483 00c0 03C0      		rjmp .L14
 484               	.L16:
 193:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 		return -EINVAL;
 486               	.LM23:
 487 00c2 8AEE      		ldi r24,lo8(-22)
 488 00c4 9FEF      		ldi r25,hi8(-22)
 489 00c6 20C0      		rjmp .L9
 490               	.L14:
 194:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	}
 195:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 
 196:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	ENTER_CRITICAL_SECTION();
 492               	.LM24:
 493               	/* #APP */
 494 00c8 4FB7      		in r20, __SREG__
 495 00ca F894      		cli
 496               		
 197:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	s.portmap[port] = adcPort;
 498               	.LM25:
 499               	/* #NOAPP */
 500 00cc FE01      		movw r30,r28
 501 00ce E050      		subi r30,lo8(-(s))
 502 00d0 F040      		sbci r31,hi8(-(s))
 503 00d2 058B      		std Z+21,r16
 198:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	s.calling_pid[port] = calling_id;
 505               	.LM26:
 506 00d4 178F      		std Z+31,r17
 199:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 
 200:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	if (s.portMask == 0) {
 508               	.LM27:
 509 00d6 2091 0000 		lds r18,s+53
 510 00da 3091 0000 		lds r19,(s+53)+1
 511 00de 2115      		cp r18,__zero_reg__
 512 00e0 3105      		cpc r19,__zero_reg__
 513 00e2 11F4      		brne .L15
 201:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 		// if first user, clear any pending interrupts and enable ADC
 202:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 		// to allow for startup delay (may need additional stabalization time)
 203:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 		ADCSRA = (_BV(ADEN) | ADC_PROC_PRESCALER);
 515               	.LM28:
 516 00e4 86E8      		ldi r24,lo8(-122)
 517 00e6 86B9      		out 38-0x20,r24
 518               	.L15:
 204:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	}
 205:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	s.portMask |= (1<<port);
 520               	.LM29:
 521 00e8 81E0      		ldi r24,lo8(1)
 522 00ea 90E0      		ldi r25,hi8(1)
 523 00ec 02C0      		rjmp 2f
 524 00ee 880F      	1:	lsl r24
 525 00f0 991F      		rol r25
 526 00f2 CA95      	2:	dec r28
 527 00f4 E2F7      		brpl 1b
 528 00f6 282B      		or r18,r24
 529 00f8 392B      		or r19,r25
 530 00fa 3093 0000 		sts (s+53)+1,r19
 531 00fe 2093 0000 		sts s+53,r18
 206:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	LEAVE_CRITICAL_SECTION();
 533               	.LM30:
 534               	/* #APP */
 535 0102 4FBF      		out __SREG__, r20
 536               		
 207:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 
 208:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	return SOS_OK;
 538               	.LM31:
 539               	/* #NOAPP */
 540 0104 80E0      		ldi r24,lo8(0)
 541 0106 90E0      		ldi r25,hi8(0)
 542               	.L9:
 543               	/* epilogue: frame size=0 */
 544 0108 DF91      		pop r29
 545 010a CF91      		pop r28
 546 010c 1F91      		pop r17
 547 010e 0F91      		pop r16
 548 0110 0895      		ret
 549               	/* epilogue end (size=5) */
 550               	/* function ker_adc_proc_bindPort size 84 (75) */
 555               	.Lscope2:
 560               	.global	ker_adc_proc_unbindPort
 562               	ker_adc_proc_unbindPort:
 209:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** }
 210:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 
 211:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 
 212:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** int8_t ker_adc_proc_unbindPort(uint8_t port, sos_pid_t pid) {
 564               	.LM32:
 565               	/* prologue: frame size=0 */
 566               	/* prologue end (size=0) */
 213:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	HAS_CRITICAL_SECTION;
 214:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	
 215:/Users/Administrator/sos-2x/processor/avr/adc_proc.c ****   if ((port > ADC_PROC_EXTENDED_PORTMAPSIZE) || (s.calling_pid[port] != pid)) {
 568               	.LM33:
 569 0112 8B30      		cpi r24,lo8(11)
 570 0114 40F4      		brsh .L19
 572               	.LM34:
 573 0116 482F      		mov r20,r24
 574 0118 5527      		clr r21
 575 011a FA01      		movw r30,r20
 576 011c E050      		subi r30,lo8(-(s))
 577 011e F040      		sbci r31,hi8(-(s))
 578 0120 878D      		ldd r24,Z+31
 579 0122 8617      		cp r24,r22
 580 0124 19F0      		breq .L18
 581               	.L19:
 216:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 		return -EINVAL;
 583               	.LM35:
 584 0126 8AEE      		ldi r24,lo8(-22)
 585 0128 9FEF      		ldi r25,hi8(-22)
 586 012a 0895      		ret
 587               	.L18:
 217:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	}
 218:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 
 219:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	ENTER_CRITICAL_SECTION();
 589               	.LM36:
 590               	/* #APP */
 591 012c 6FB7      		in r22, __SREG__
 592 012e F894      		cli
 593               		
 220:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	s.portmap[port] = ADC_PROC_HW_NULL_PORT;
 595               	.LM37:
 596               	/* #NOAPP */
 597 0130 8FEF      		ldi r24,lo8(-1)
 598 0132 858B      		std Z+21,r24
 221:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	s.calling_pid[port] = NULL_PID;
 600               	.LM38:
 601 0134 878F      		std Z+31,r24
 222:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	s.portMask &= ~(1<<port);
 603               	.LM39:
 604 0136 21E0      		ldi r18,lo8(1)
 605 0138 30E0      		ldi r19,hi8(1)
 606 013a 02C0      		rjmp 2f
 607 013c 220F      	1:	lsl r18
 608 013e 331F      		rol r19
 609 0140 4A95      	2:	dec r20
 610 0142 E2F7      		brpl 1b
 611 0144 2095      		com r18
 612 0146 3095      		com r19
 613 0148 8091 0000 		lds r24,s+53
 614 014c 9091 0000 		lds r25,(s+53)+1
 615 0150 8223      		and r24,r18
 616 0152 9323      		and r25,r19
 617 0154 9093 0000 		sts (s+53)+1,r25
 618 0158 8093 0000 		sts s+53,r24
 223:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	if (s.portMask == 0) {
 620               	.LM40:
 621 015c 892B      		or r24,r25
 622 015e 09F4      		brne .L20
 224:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 		// if no users, clear any pending interrupts and disable everything
 225:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 		ADCSRA &= ~_BV(ADEN);
 624               	.LM41:
 625 0160 3798      		cbi 38-0x20,7
 626               	.L20:
 226:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	}
 227:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	LEAVE_CRITICAL_SECTION();
 628               	.LM42:
 629               	/* #APP */
 630 0162 6FBF      		out __SREG__, r22
 631               		
 228:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 
 229:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	return SOS_OK;
 633               	.LM43:
 634               	/* #NOAPP */
 635 0164 80E0      		ldi r24,lo8(0)
 636 0166 90E0      		ldi r25,hi8(0)
 230:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** }
 638               	.LM44:
 639 0168 0895      		ret
 640               	/* epilogue: frame size=0 */
 641 016a 0895      		ret
 642               	/* epilogue end (size=1) */
 643               	/* function ker_adc_proc_unbindPort size 53 (52) */
 648               	.Lscope3:
 653               	.global	ker_adc_proc_getData
 655               	ker_adc_proc_getData:
 231:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 
 232:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 
 233:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** int8_t ker_adc_proc_getData(uint8_t port, uint8_t flags) {
 657               	.LM45:
 658               	/* prologue: frame size=0 */
 659               	/* prologue end (size=0) */
 660 016c 482F      		mov r20,r24
 234:/Users/Administrator/sos-2x/processor/avr/adc_proc.c ****   HAS_CRITICAL_SECTION;
 235:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 
 236:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	if ((port > ADC_PROC_EXTENDED_PORTMAPSIZE) || (!(s.portMask & (1<<port)))) {
 662               	.LM46:
 663 016e 8B30      		cpi r24,lo8(11)
 664 0170 90F4      		brsh .L23
 666               	.LM47:
 667 0172 E82F      		mov r30,r24
 668 0174 FF27      		clr r31
 669 0176 21E0      		ldi r18,lo8(1)
 670 0178 30E0      		ldi r19,hi8(1)
 671 017a 0E2E      		mov r0,r30
 672 017c 02C0      		rjmp 2f
 673 017e 220F      	1:	lsl r18
 674 0180 331F      		rol r19
 675 0182 0A94      	2:	dec r0
 676 0184 E2F7      		brpl 1b
 677 0186 8091 0000 		lds r24,s+53
 678 018a 9091 0000 		lds r25,(s+53)+1
 679 018e 8223      		and r24,r18
 680 0190 9323      		and r25,r19
 681 0192 892B      		or r24,r25
 682 0194 19F4      		brne .L22
 683               	.L23:
 237:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 		return -EINVAL;
 685               	.LM48:
 686 0196 8AEE      		ldi r24,lo8(-22)
 687 0198 9FEF      		ldi r25,hi8(-22)
 688 019a 0895      		ret
 689               	.L22:
 238:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	}
 239:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 
 240:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	ENTER_CRITICAL_SECTION();
 691               	.LM49:
 692               	/* #APP */
 693 019c 2FB7      		in r18, __SREG__
 694 019e F894      		cli
 695               		
 241:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	switch (s.state) {
 697               	.LM50:
 698               	/* #NOAPP */
 699 01a0 8091 0000 		lds r24,s+20
 700 01a4 9927      		clr r25
 701 01a6 8230      		cpi r24,2
 702 01a8 9105      		cpc r25,__zero_reg__
 703 01aa E9F0      		breq .L28
 704 01ac 8330      		cpi r24,3
 705 01ae 9105      		cpc r25,__zero_reg__
 706 01b0 14F0      		brlt .L27
 707 01b2 0397      		sbiw r24,3
 708 01b4 41F5      		brne .L24
 709               	.L27:
 242:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 		case ADC_PROC_INIT:
 243:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 		case ADC_PROC_INIT_BUSY:
 244:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 		case ADC_PROC_BUSY:
 245:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 			s.reqMask |= (1 << port);
 711               	.LM51:
 712 01b6 21E0      		ldi r18,lo8(1)
 713 01b8 30E0      		ldi r19,hi8(1)
 714 01ba 0E2E      		mov r0,r30
 715 01bc 02C0      		rjmp 2f
 716 01be 220F      	1:	lsl r18
 717 01c0 331F      		rol r19
 718 01c2 0A94      	2:	dec r0
 719 01c4 E2F7      		brpl 1b
 720 01c6 8091 0000 		lds r24,s+55
 721 01ca 9091 0000 		lds r25,(s+55)+1
 722 01ce 822B      		or r24,r18
 723 01d0 932B      		or r25,r19
 724 01d2 9093 0000 		sts (s+55)+1,r25
 725 01d6 8093 0000 		sts s+55,r24
 246:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 			s.pending_flag[port] = flags;
 727               	.LM52:
 728 01da E050      		subi r30,lo8(-(s))
 729 01dc F040      		sbci r31,hi8(-(s))
 730 01de 61A7      		std Z+41,r22
 247:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 			return SOS_OK;
 732               	.LM53:
 733 01e0 80E0      		ldi r24,lo8(0)
 734 01e2 90E0      		ldi r25,hi8(0)
 735 01e4 0895      		ret
 736               	.L28:
 248:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 			break;
 249:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 			
 250:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 		case ADC_PROC_IDLE:
 251:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 			s.state = ADC_PROC_BUSY;
 738               	.LM54:
 739 01e6 83E0      		ldi r24,lo8(3)
 740 01e8 8093 0000 		sts s+20,r24
 252:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 			s.reqPort = port;
 742               	.LM55:
 743 01ec 4093 0000 		sts s+52,r20
 253:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 			s.sampleCnt = 1;
 745               	.LM56:
 746 01f0 81E0      		ldi r24,lo8(1)
 747 01f2 8093 0000 		sts s+59,r24
 254:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 			s.calling_flags = flags;
 749               	.LM57:
 750 01f6 6093 0000 		sts s+51,r22
 255:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 			ADMUX = (ADC_PROC_VREF | s.portmap[port]);
 752               	.LM58:
 753 01fa E050      		subi r30,lo8(-(s))
 754 01fc F040      		sbci r31,hi8(-(s))
 755 01fe 8589      		ldd r24,Z+21
 756 0200 87B9      		out 39-0x20,r24
 256:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 			// only allow sane conversions
 257:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 			// for crapy resolution way fast, use getPerodicData with a single sample
 258:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 			//
 259:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 			// simon: this is likely to be general bug than Avrora specific...
 260:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 			// there should be no reason to set ADIF unless you want to 
 261:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 			// kick start ADC interrupt...
 262:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 			//
 263:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 			//ADCSRA |= _BV(ADIF)|_BV(ADIE);
 264:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 			ADCSRA |= _BV(ADIE);
 758               	.LM59:
 759 0202 339A      		sbi 38-0x20,3
 265:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 			ADCSRA |= _BV(ADSC);  // start conversion
 761               	.LM60:
 762 0204 369A      		sbi 38-0x20,6
 763               	.L24:
 266:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 			break;
 267:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 
 268:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 		case ADC_PROC_ERROR:
 269:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 		default:
 270:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 			break;
 271:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	}
 272:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	LEAVE_CRITICAL_SECTION();
 765               	.LM61:
 766               	/* #APP */
 767 0206 2FBF      		out __SREG__, r18
 768               		
 273:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 
 274:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	return SOS_OK;
 770               	.LM62:
 771               	/* #NOAPP */
 772 0208 80E0      		ldi r24,lo8(0)
 773 020a 90E0      		ldi r25,hi8(0)
 275:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** }
 775               	.LM63:
 776 020c 0895      		ret
 777               	/* epilogue: frame size=0 */
 778 020e 0895      		ret
 779               	/* epilogue end (size=1) */
 780               	/* function ker_adc_proc_getData size 90 (89) */
 785               	.Lscope4:
 791               	.global	ker_adc_proc_getPerodicData
 793               	ker_adc_proc_getPerodicData:
 276:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 
 277:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 
 278:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** int8_t ker_adc_proc_getPerodicData(uint8_t port, uint8_t prescaler, uint16_t count) {
 795               	.LM64:
 796               	/* prologue: frame size=0 */
 797               	/* prologue end (size=0) */
 279:/Users/Administrator/sos-2x/processor/avr/adc_proc.c ****   HAS_CRITICAL_SECTION;
 280:/Users/Administrator/sos-2x/processor/avr/adc_proc.c ****   
 281:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	if ((port > ADC_PROC_EXTENDED_PORTMAPSIZE) || (!(s.portMask & (1<<port))) || (prescaler > ADC_PROC
 799               	.LM65:
 800 0210 8B30      		cpi r24,lo8(11)
 801 0212 B8F4      		brsh .L34
 803               	.LM66:
 804 0214 E82F      		mov r30,r24
 805 0216 FF27      		clr r31
 806 0218 21E0      		ldi r18,lo8(1)
 807 021a 30E0      		ldi r19,hi8(1)
 808 021c 0E2E      		mov r0,r30
 809 021e 02C0      		rjmp 2f
 810 0220 220F      	1:	lsl r18
 811 0222 331F      		rol r19
 812 0224 0A94      	2:	dec r0
 813 0226 E2F7      		brpl 1b
 814 0228 8091 0000 		lds r24,s+53
 815 022c 9091 0000 		lds r25,(s+53)+1
 816 0230 8223      		and r24,r18
 817 0232 9323      		and r25,r19
 818 0234 892B      		or r24,r25
 819 0236 29F0      		breq .L34
 820 0238 6830      		cpi r22,lo8(8)
 821 023a 18F4      		brsh .L34
 822 023c 4115      		cp r20,__zero_reg__
 823 023e 5105      		cpc r21,__zero_reg__
 824 0240 19F4      		brne .L33
 825               	.L34:
 282:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 		return -EINVAL;
 827               	.LM67:
 828 0242 8AEE      		ldi r24,lo8(-22)
 829 0244 9FEF      		ldi r25,hi8(-22)
 830 0246 0895      		ret
 831               	.L33:
 283:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	}
 284:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 
 285:/Users/Administrator/sos-2x/processor/avr/adc_proc.c ****   ENTER_CRITICAL_SECTION();
 833               	.LM68:
 834               	/* #APP */
 835 0248 2FB7      		in r18, __SREG__
 836 024a F894      		cli
 837               		
 286:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	switch (s.state) {
 839               	.LM69:
 840               	/* #NOAPP */
 841 024c 8091 0000 		lds r24,s+20
 842 0250 9927      		clr r25
 843 0252 8230      		cpi r24,2
 844 0254 9105      		cpc r25,__zero_reg__
 845 0256 41F0      		breq .L39
 846 0258 8330      		cpi r24,3
 847 025a 9105      		cpc r25,__zero_reg__
 848 025c 14F0      		brlt .L38
 849 025e 0397      		sbiw r24,3
 850 0260 B9F4      		brne .L35
 851               	.L38:
 287:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 		case ADC_PROC_INIT:
 288:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 		case ADC_PROC_INIT_BUSY:
 289:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 		case ADC_PROC_BUSY:
 290:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 			return -EBUSY;
 853               	.LM70:
 854 0262 80EF      		ldi r24,lo8(-16)
 855 0264 9FEF      		ldi r25,hi8(-16)
 856 0266 0895      		ret
 857               	.L39:
 291:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 			break;
 292:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 			
 293:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 		case ADC_PROC_IDLE:
 294:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 			s.state = ADC_PROC_BUSY;
 859               	.LM71:
 860 0268 83E0      		ldi r24,lo8(3)
 861 026a 8093 0000 		sts s+20,r24
 295:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 			s.sampleCnt = count;
 863               	.LM72:
 864 026e 4093 0000 		sts s+59,r20
 296:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 			ADMUX = (ADC_PROC_VREF | s.portmap[port]);
 866               	.LM73:
 867 0272 E050      		subi r30,lo8(-(s))
 868 0274 F040      		sbci r31,hi8(-(s))
 869 0276 8589      		ldd r24,Z+21
 870 0278 87B9      		out 39-0x20,r24
 297:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 			if (prescaler != ADC_PROC_CLK_NULL) {
 872               	.LM74:
 873 027a 6623      		tst r22
 874 027c 31F0      		breq .L40
 298:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 				ADCSRA &= ~(ADC_PROC_CLK_MSK); // clear current prescaler
 876               	.LM75:
 877 027e 86B1      		in r24,38-0x20
 878 0280 887F      		andi r24,lo8(-8)
 879 0282 86B9      		out 38-0x20,r24
 299:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 				ADCSRA |= prescaler;
 881               	.LM76:
 882 0284 86B1      		in r24,38-0x20
 883 0286 862B      		or r24,r22
 884 0288 86B9      		out 38-0x20,r24
 885               	.L40:
 300:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 			}
 301:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 			ADCSRA |= _BV(ADFR); // put into free running mode
 887               	.LM77:
 888 028a 359A      		sbi 38-0x20,5
 302:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 			ADCSRA |= _BV(ADIE); // enable iterrupts
 890               	.LM78:
 891 028c 339A      		sbi 38-0x20,3
 303:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 			ADCSRA |= _BV(ADSC); // start conversion
 893               	.LM79:
 894 028e 369A      		sbi 38-0x20,6
 895               	.L35:
 304:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 			break;
 305:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 
 306:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 		case ADC_PROC_ERROR:
 307:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 		default:
 308:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 			break;
 309:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	}
 310:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	LEAVE_CRITICAL_SECTION();
 897               	.LM80:
 898               	/* #APP */
 899 0290 2FBF      		out __SREG__, r18
 900               		
 311:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	
 312:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	return SOS_OK;
 902               	.LM81:
 903               	/* #NOAPP */
 904 0292 80E0      		ldi r24,lo8(0)
 905 0294 90E0      		ldi r25,hi8(0)
 313:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** }
 907               	.LM82:
 908 0296 0895      		ret
 909               	/* epilogue: frame size=0 */
 910 0298 0895      		ret
 911               	/* epilogue end (size=1) */
 912               	/* function ker_adc_proc_getPerodicData size 77 (76) */
 917               	.Lscope5:
 921               	.global	ker_adc_proc_stopPerodicData
 923               	ker_adc_proc_stopPerodicData:
 314:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 
 315:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 
 316:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** int8_t ker_adc_proc_stopPerodicData(uint8_t port) {
 925               	.LM83:
 926               	/* prologue: frame size=0 */
 927               	/* prologue end (size=0) */
 317:/Users/Administrator/sos-2x/processor/avr/adc_proc.c ****   HAS_CRITICAL_SECTION;
 318:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 
 319:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	if (port > ADC_PROC_EXTENDED_PORTMAPSIZE) {
 929               	.LM84:
 930 029a 8B30      		cpi r24,lo8(11)
 931 029c 18F0      		brlo .L45
 320:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 		return -EINVAL;
 933               	.LM85:
 934 029e 8AEE      		ldi r24,lo8(-22)
 935 02a0 9FEF      		ldi r25,hi8(-22)
 936 02a2 0895      		ret
 937               	.L45:
 321:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	}
 322:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	
 323:/Users/Administrator/sos-2x/processor/avr/adc_proc.c ****   ENTER_CRITICAL_SECTION();
 939               	.LM86:
 940               	/* #APP */
 941 02a4 9FB7      		in r25, __SREG__
 942 02a6 F894      		cli
 943               		
 324:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	s.state = ADC_PROC_IDLE;
 945               	.LM87:
 946               	/* #NOAPP */
 947 02a8 82E0      		ldi r24,lo8(2)
 948 02aa 8093 0000 		sts s+20,r24
 325:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	ADCSRA &= ~_BV(ADFR);
 950               	.LM88:
 951 02ae 3598      		cbi 38-0x20,5
 326:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	ADCSRA &= ~_BV(ADIE);
 953               	.LM89:
 954 02b0 3398      		cbi 38-0x20,3
 327:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	LEAVE_CRITICAL_SECTION();
 956               	.LM90:
 957               	/* #APP */
 958 02b2 9FBF      		out __SREG__, r25
 959               		
 328:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	
 329:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	return SOS_OK;
 961               	.LM91:
 962               	/* #NOAPP */
 963 02b4 80E0      		ldi r24,lo8(0)
 964 02b6 90E0      		ldi r25,hi8(0)
 330:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** }
 966               	.LM92:
 967 02b8 0895      		ret
 968               	/* epilogue: frame size=0 */
 969 02ba 0895      		ret
 970               	/* epilogue end (size=1) */
 971               	/* function ker_adc_proc_stopPerodicData size 24 (23) */
 976               	.Lscope6:
 979               	.global	__vector_21
 981               	__vector_21:
 331:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** #include <led.h>
 332:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 
 333:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** adc_proc_interrupt() {
 983               	.LM93:
 984               	/* prologue: frame size=0 */
 985 02bc 1F92      		push __zero_reg__
 986 02be 0F92      		push __tmp_reg__
 987 02c0 0FB6      		in __tmp_reg__,__SREG__
 988 02c2 0F92      		push __tmp_reg__
 989 02c4 1124      		clr __zero_reg__
 990 02c6 2F93      		push r18
 991 02c8 3F93      		push r19
 992 02ca 4F93      		push r20
 993 02cc 5F93      		push r21
 994 02ce 6F93      		push r22
 995 02d0 7F93      		push r23
 996 02d2 8F93      		push r24
 997 02d4 9F93      		push r25
 998 02d6 AF93      		push r26
 999 02d8 BF93      		push r27
 1000 02da EF93      		push r30
 1001 02dc FF93      		push r31
 1002               	/* prologue end (size=17) */
 334:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** #ifdef SOS_USE_PREEMPTION
 335:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	HAS_PREEMPTION_SECTION;
 336:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	DISABLE_PREEMPTION();
 337:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** #endif
 338:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	uint16_t adcValue;
 339:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 
 340:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	if (s.state != ADC_PROC_BUSY) {
 1004               	.LM94:
 1005 02de 8091 0000 		lds r24,s+20
 1006 02e2 8330      		cpi r24,lo8(3)
 1007 02e4 F9F0      		breq .L47
 341:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 		s.state = ADC_PROC_IDLE;
 1009               	.LM95:
 1010 02e6 82E0      		ldi r24,lo8(2)
 1011 02e8 8093 0000 		sts s+20,r24
 342:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 		return;
 1013               	.LM96:
 1014 02ec 5AC0      		rjmp .L46
 1015               	.L58:
 1016               	.LBB2:
 343:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	}
 344:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	s.state = ADC_PROC_DATA_RDY;
 345:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 
 346:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	adcValue = 0x3ff & ADC;
 347:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	s.sampleCnt--;
 348:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	
 349:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	if (s.portmap[s.reqPort] == ADC_PROC_BANDGAP) {
 350:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 		s.refVal = adcValue;
 351:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	}
 352:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	SOS_CALL(s.cb[s.reqPort], adc10_cb_t, s.reqPort, adcValue, s.calling_flags);
 353:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 
 354:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	if (!(s.sampleCnt > 0)) {
 355:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 		s.state = ADC_PROC_IDLE;
 356:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 		ADCSRA &= ~_BV(ADIE);
 357:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	} else {
 358:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 		return;
 359:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	}
 360:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 
 361:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 	if( s.reqMask != 0 ) {
 362:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 		// we have pending request
 363:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 		uint8_t i;
 364:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 		uint16_t m = 1;
 365:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 		for( i = 0; i < ADC_PROC_EXTENDED_PORTMAPSIZE; i++, m<<=1) {
 366:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 			if( m & s.reqMask ) {
 367:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 				s.reqMask &= ~m;
 1018               	.LM97:
 1019 02ee 2095      		com r18
 1020 02f0 3095      		com r19
 1021 02f2 4223      		and r20,r18
 1022 02f4 5323      		and r21,r19
 1023 02f6 5093 0000 		sts (s+55)+1,r21
 1024 02fa 4093 0000 		sts s+55,r20
 368:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 				s.state = ADC_PROC_BUSY;
 1026               	.LM98:
 1027 02fe 83E0      		ldi r24,lo8(3)
 1028 0300 8093 0000 		sts s+20,r24
 369:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 				s.reqPort = i;
 1030               	.LM99:
 1031 0304 E093 0000 		sts s+52,r30
 370:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 				s.sampleCnt = 1;
 1033               	.LM100:
 1034 0308 81E0      		ldi r24,lo8(1)
 1035 030a 8093 0000 		sts s+59,r24
 371:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 				s.calling_flags = s.pending_flag[i];
 1037               	.LM101:
 1038 030e FF27      		clr r31
 1039 0310 E050      		subi r30,lo8(-(s))
 1040 0312 F040      		sbci r31,hi8(-(s))
 1041 0314 81A5      		ldd r24,Z+41
 1042 0316 8093 0000 		sts s+51,r24
 372:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 				ADMUX = (ADC_PROC_VREF | s.portmap[i]);
 1044               	.LM102:
 1045 031a 8589      		ldd r24,Z+21
 1046 031c 87B9      		out 39-0x20,r24
 373:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 				ADCSRA |= _BV(ADIE);        
 1048               	.LM103:
 1049 031e 339A      		sbi 38-0x20,3
 374:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 				ADCSRA |= _BV(ADSC);  // start conversion
 1051               	.LM104:
 1052 0320 369A      		sbi 38-0x20,6
 375:/Users/Administrator/sos-2x/processor/avr/adc_proc.c **** 				return;
 1054               	.LM105:
 1055 0322 3FC0      		rjmp .L46
 1056               	.L47:
 1057               	.LBE2:
 1059               	.LM106:
 1060 0324 84E0      		ldi r24,lo8(4)
 1061 0326 8093 0000 		sts s+20,r24
 1063               	.LM107:
 1064 032a 44B1      		in r20,36-0x20
 1065 032c 55B1      		in r21,(36)+1-0x20
 1066 032e 5370      		andi r21,hi8(1023)
 1068               	.LM108:
 1069 0330 8091 0000 		lds r24,s+59
 1070 0334 8150      		subi r24,lo8(-(-1))
 1071 0336 8093 0000 		sts s+59,r24
 1073               	.LM109:
 1074 033a 6091 0000 		lds r22,s+52
 1075 033e A62F      		mov r26,r22
 1076 0340 BB27      		clr r27
 1077 0342 FD01      		movw r30,r26
 1078 0344 E050      		subi r30,lo8(-(s))
 1079 0346 F040      		sbci r31,hi8(-(s))
 1080 0348 8589      		ldd r24,Z+21
 1081 034a 8E31      		cpi r24,lo8(30)
 1082 034c 21F4      		brne .L48
 1084               	.LM110:
 1085 034e 5093 0000 		sts (s+57)+1,r21
 1086 0352 4093 0000 		sts s+57,r20
 1087               	.L48:
 1089               	.LM111:
 1090 0356 AA0F      		add r26,r26
 1091 0358 BB1F      		adc r27,r27
 1092 035a A050      		subi r26,lo8(-(s))
 1093 035c B040      		sbci r27,hi8(-(s))
 1094 035e 2091 0000 		lds r18,s+51
 1095 0362 8D91      		ld r24,X+
 1096 0364 9C91      		ld r25,X
 1097 0366 0E94 4600 		call 140
 1099               	.LM112:
 1100 036a E091 0000 		lds r30,s+59
 1101 036e EE23      		tst r30
 1102 0370 C1F4      		brne .L46
 1104               	.LM113:
 1105 0372 82E0      		ldi r24,lo8(2)
 1106 0374 8093 0000 		sts s+20,r24
 1108               	.LM114:
 1109 0378 3398      		cbi 38-0x20,3
 1111               	.LM115:
 1112 037a 4091 0000 		lds r20,s+55
 1113 037e 5091 0000 		lds r21,(s+55)+1
 1114 0382 4115      		cp r20,__zero_reg__
 1115 0384 5105      		cpc r21,__zero_reg__
 1116 0386 69F0      		breq .L46
 1117               	.LBB3:
 1119               	.LM116:
 1120 0388 21E0      		ldi r18,lo8(1)
 1121 038a 30E0      		ldi r19,hi8(1)
 1122               	.L56:
 1124               	.LM117:
 1125 038c C901      		movw r24,r18
 1126 038e 8423      		and r24,r20
 1127 0390 9523      		and r25,r21
 1128 0392 892B      		or r24,r25
 1129 0394 09F0      		breq .+2
 1130 0396 ABCF      		rjmp .L58
 1132               	.LM118:
 1133 0398 EF5F      		subi r30,lo8(-(1))
 1134 039a 220F      		lsl r18
 1135 039c 331F      		rol r19
 1136 039e EA30      		cpi r30,lo8(10)
 1137 03a0 A8F3      		brlo .L56
 1138               	.L46:
 1139               	.LBE3:
 1140               	/* epilogue: frame size=0 */
 1141 03a2 FF91      		pop r31
 1142 03a4 EF91      		pop r30
 1143 03a6 BF91      		pop r27
 1144 03a8 AF91      		pop r26
 1145 03aa 9F91      		pop r25
 1146 03ac 8F91      		pop r24
 1147 03ae 7F91      		pop r23
 1148 03b0 6F91      		pop r22
 1149 03b2 5F91      		pop r21
 1150 03b4 4F91      		pop r20
 1151 03b6 3F91      		pop r19
 1152 03b8 2F91      		pop r18
 1153 03ba 0F90      		pop __tmp_reg__
 1154 03bc 0FBE      		out __SREG__,__tmp_reg__
 1155 03be 0F90      		pop __tmp_reg__
 1156 03c0 1F90      		pop __zero_reg__
 1157 03c2 1895      		reti
 1158               	/* epilogue end (size=17) */
 1159               	/* function __vector_21 size 133 (99) */
 1172               	.Lscope7:
 1174               		.lcomm s,61
 1175               		.lcomm adc_proc_module,8
 1179               		.text
 1181               	Letext:
 1182               	/* File "/Users/Administrator/sos-2x/processor/avr/adc_proc.c": code  529 = 0x0211 ( 478), prologue
DEFINED SYMBOLS
                            *ABS*:00000000 adc_proc.c
                            *ABS*:0000003f __SREG__
                            *ABS*:0000003e __SP_H__
                            *ABS*:0000003d __SP_L__
                            *ABS*:00000000 __tmp_reg__
                            *ABS*:00000001 __zero_reg__
/var/tmp//cc01PmJ7.s:259    .progmem.data:00000000 mod_header
/var/tmp//cc01PmJ7.s:312    .text:00000000 adc_proc_msg_handler
/var/tmp//cc01PmJ7.s:331    .text:00000006 adc_proc_init
                             .bss:00000000 s
/var/tmp//cc01PmJ7.s:1174   .bss:0000003d adc_proc_module
/var/tmp//cc01PmJ7.s:433    .text:0000007a ker_adc_proc_bindPort
/var/tmp//cc01PmJ7.s:562    .text:00000112 ker_adc_proc_unbindPort
/var/tmp//cc01PmJ7.s:655    .text:0000016c ker_adc_proc_getData
/var/tmp//cc01PmJ7.s:793    .text:00000210 ker_adc_proc_getPerodicData
/var/tmp//cc01PmJ7.s:923    .text:0000029a ker_adc_proc_stopPerodicData
/var/tmp//cc01PmJ7.s:981    .text:000002bc __vector_21
/var/tmp//cc01PmJ7.s:1181   .text:000003c4 Letext

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
error_8
adc_proc_hardware_init
sched_register_kernel_module
ker_fntable_subscribe
