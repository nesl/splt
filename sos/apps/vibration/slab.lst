   1               		.file	"slab.c"
   2               		.arch atmega128
   3               	__SREG__ = 0x3f
   4               	__SP_H__ = 0x3e
   5               	__SP_L__ = 0x3d
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  12               		.text
  13               	.Ltext0:
 219               	.global	ker_slab_init
 221               	ker_slab_init:
   1:/Users/Administrator/sos-2x/kernel/slab.c **** 
   2:/Users/Administrator/sos-2x/kernel/slab.c **** 
   3:/Users/Administrator/sos-2x/kernel/slab.c **** #include <sos.h>
   4:/Users/Administrator/sos-2x/kernel/slab.c **** #include <malloc.h>
   5:/Users/Administrator/sos-2x/kernel/slab.c **** #include <slab.h>
   6:/Users/Administrator/sos-2x/kernel/slab.c **** 
   7:/Users/Administrator/sos-2x/kernel/slab.c **** #ifndef SOS_DEBUG_SLAB
   8:/Users/Administrator/sos-2x/kernel/slab.c **** #undef DEBUG
   9:/Users/Administrator/sos-2x/kernel/slab.c **** #define DEBUG(...)
  10:/Users/Administrator/sos-2x/kernel/slab.c **** #undef DEBUG_SHORT
  11:/Users/Administrator/sos-2x/kernel/slab.c **** #define DEBUG_SHORT(...)
  12:/Users/Administrator/sos-2x/kernel/slab.c **** #endif
  13:/Users/Administrator/sos-2x/kernel/slab.c **** 
  14:/Users/Administrator/sos-2x/kernel/slab.c **** #ifdef SOS_DEBUG_GC
  15:/Users/Administrator/sos-2x/kernel/slab.c **** #define DEBUG_GC(arg...)  printf(arg)
  16:/Users/Administrator/sos-2x/kernel/slab.c **** #else
  17:/Users/Administrator/sos-2x/kernel/slab.c **** #define DEBUG_GC(...)
  18:/Users/Administrator/sos-2x/kernel/slab.c **** #endif
  19:/Users/Administrator/sos-2x/kernel/slab.c **** 
  20:/Users/Administrator/sos-2x/kernel/slab.c **** 
  21:/Users/Administrator/sos-2x/kernel/slab.c **** int8_t ker_slab_init( sos_pid_t pid, slab_t *slab, uint8_t item_size, uint8_t items_per_pool, uint8
  22:/Users/Administrator/sos-2x/kernel/slab.c **** {
 223               	.LM1:
 224               	/* prologue: frame size=0 */
 225 0000 0F93      		push r16
 226 0002 CF93      		push r28
 227 0004 DF93      		push r29
 228               	/* prologue end (size=3) */
 229 0006 982F      		mov r25,r24
 230 0008 EB01      		movw r28,r22
  23:/Users/Administrator/sos-2x/kernel/slab.c **** 	uint8_t i;
  24:/Users/Administrator/sos-2x/kernel/slab.c **** 	if( items_per_pool > 8 ) {
 232               	.LM2:
 233 000a 2930      		cpi r18,lo8(9)
 234 000c 18F0      		brlo .L2
  25:/Users/Administrator/sos-2x/kernel/slab.c **** 		return -EINVAL;
 236               	.LM3:
 237 000e 8AEE      		ldi r24,lo8(-22)
 238 0010 9FEF      		ldi r25,hi8(-22)
 239 0012 36C0      		rjmp .L1
 240               	.L2:
  26:/Users/Administrator/sos-2x/kernel/slab.c **** 	}
  27:/Users/Administrator/sos-2x/kernel/slab.c **** 	
  28:/Users/Administrator/sos-2x/kernel/slab.c **** 	//
  29:/Users/Administrator/sos-2x/kernel/slab.c **** 	// build empty vector
  30:/Users/Administrator/sos-2x/kernel/slab.c **** 	//
  31:/Users/Administrator/sos-2x/kernel/slab.c **** 	slab->head = NULL;
 242               	.LM4:
 243 0014 1882      		st Y,__zero_reg__
 244 0016 1982      		std Y+1,__zero_reg__
  32:/Users/Administrator/sos-2x/kernel/slab.c **** 	slab->num_items_per_pool = items_per_pool;
 246               	.LM5:
 247 0018 2A83      		std Y+2,r18
  33:/Users/Administrator/sos-2x/kernel/slab.c **** 	slab->empty_vector = 0;
 249               	.LM6:
 250 001a 1B82      		std Y+3,__zero_reg__
  34:/Users/Administrator/sos-2x/kernel/slab.c **** 	slab->item_size = item_size;
 252               	.LM7:
 253 001c 4C83      		std Y+4,r20
  35:/Users/Administrator/sos-2x/kernel/slab.c **** 	slab->flag = flag;
 255               	.LM8:
 256 001e 0D83      		std Y+5,r16
  36:/Users/Administrator/sos-2x/kernel/slab.c **** 	for( i = 0; i < items_per_pool; i++ ) {
 258               	.LM9:
 259 0020 8B81      		ldd r24,Y+3
 260 0022 8217      		cp r24,r18
 261 0024 38F4      		brsh .L13
 262 0026 382F      		mov r19,r24
 263 0028 822F      		mov r24,r18
 264               	.L6:
  37:/Users/Administrator/sos-2x/kernel/slab.c **** 		slab->empty_vector <<= 1;
 266               	.LM10:
 267 002a 330F      		lsl r19
  38:/Users/Administrator/sos-2x/kernel/slab.c **** 		slab->empty_vector |= 0x01;
 269               	.LM11:
 270 002c 3160      		ori r19,lo8(1)
 272               	.LM12:
 273 002e 8150      		subi r24,lo8(-(-1))
 274 0030 E1F7      		brne .L6
 275 0032 3B83      		std Y+3,r19
 276               	.L13:
  39:/Users/Administrator/sos-2x/kernel/slab.c **** 	}
  40:/Users/Administrator/sos-2x/kernel/slab.c **** 	
  41:/Users/Administrator/sos-2x/kernel/slab.c **** 	if( slab->flag & SLAB_LONGTERM ) {
 278               	.LM13:
 279 0034 8D81      		ldd r24,Y+5
 280 0036 249F      		mul r18,r20
 281 0038 9001      		movw r18,r0
 282 003a 1124      		clr r1
 283 003c 87FF      		sbrs r24,7
 284 003e 07C0      		rjmp .L7
 285               	.LBB2:
 286               	.LBB3:
 288               	.Ltext1:
   1:/Users/Administrator/sos-2x/kernel/include/malloc.h **** /* -*- Mode: C; tab-width:4 -*- */
   2:/Users/Administrator/sos-2x/kernel/include/malloc.h **** /* ex: set ts=4: */
   3:/Users/Administrator/sos-2x/kernel/include/malloc.h **** /*
   4:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * Copyright (c) 2003 The Regents of the University of California.
   5:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * All rights reserved.
   6:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  *
   7:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * Redistribution and use in source and binary forms, with or without
   8:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * modification, are permitted provided that the following conditions
   9:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * are met:
  10:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * 1. Redistributions of source code must retain the above copyright
  11:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  *    notice, this list of conditions and the following disclaimer.
  12:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * 2. Redistributions in binary form must reproduce the above
  13:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  *    copyright notice, this list of conditions and the following
  14:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  *    disclaimer in the documentation and/or other materials provided
  15:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  *    with the distribution.
  16:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * 3. All advertising materials mentioning features or use of this
  17:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  *    software must display the following acknowledgement:
  18:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  *       This product includes software developed by Networked &
  19:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  *       Embedded Systems Lab at UCLA
  20:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * 4. Neither the name of the University nor that of the Laboratory
  21:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  *    may be used to endorse or promote products derived from this
  22:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  *    software without specific prior written permission.
  23:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  *
  24:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS''
  25:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
  26:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
  27:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS
  28:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  29:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  30:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
  31:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  32:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  33:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
  34:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
  35:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * SUCH DAMAGE.
  36:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  *
  37:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @brief    Allocte and free dynamic memory 
  38:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @author   Roy Shea (roy@cs.ucla.edu) 
  39:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  */
  40:/Users/Administrator/sos-2x/kernel/include/malloc.h **** #ifndef _MALLOC_H_
  41:/Users/Administrator/sos-2x/kernel/include/malloc.h **** #define _MALLOC_H_
  42:/Users/Administrator/sos-2x/kernel/include/malloc.h **** 
  43:/Users/Administrator/sos-2x/kernel/include/malloc.h **** #include <sos_types.h>
  44:/Users/Administrator/sos-2x/kernel/include/malloc.h **** #include <pid.h>
  45:/Users/Administrator/sos-2x/kernel/include/malloc.h **** #include <malloc_conf.h>
  46:/Users/Administrator/sos-2x/kernel/include/malloc.h **** #include <sos_module_types.h>
  47:/Users/Administrator/sos-2x/kernel/include/malloc.h **** #ifdef FAULT_TOLERANT_SOS
  48:/Users/Administrator/sos-2x/kernel/include/malloc.h **** #include <malloc_domains.h>
  49:/Users/Administrator/sos-2x/kernel/include/malloc.h **** #endif
  50:/Users/Administrator/sos-2x/kernel/include/malloc.h **** 
  51:/Users/Administrator/sos-2x/kernel/include/malloc.h **** /**
  52:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @brief Init function for memory manager
  53:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  */
  54:/Users/Administrator/sos-2x/kernel/include/malloc.h **** extern void mem_init(void);
  55:/Users/Administrator/sos-2x/kernel/include/malloc.h **** 
  56:/Users/Administrator/sos-2x/kernel/include/malloc.h **** /**
  57:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @brief Starting memory module interface
  58:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  */
  59:/Users/Administrator/sos-2x/kernel/include/malloc.h **** extern void mem_start(void);
  60:/Users/Administrator/sos-2x/kernel/include/malloc.h **** 
  61:/Users/Administrator/sos-2x/kernel/include/malloc.h **** /**
  62:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @brief Allocate a chunk of blocks from the heap
  63:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  */
  64:/Users/Administrator/sos-2x/kernel/include/malloc.h **** extern void *sos_blk_mem_alloc(uint16_t size, sos_pid_t id, bool bCallFromModule);
  65:/Users/Administrator/sos-2x/kernel/include/malloc.h **** 
  66:/Users/Administrator/sos-2x/kernel/include/malloc.h **** /**
  67:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @brief Free a block back into the heap
  68:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  */
  69:/Users/Administrator/sos-2x/kernel/include/malloc.h **** extern void sos_blk_mem_free(void* ptr, bool bCallFromModule);
  70:/Users/Administrator/sos-2x/kernel/include/malloc.h **** 
  71:/Users/Administrator/sos-2x/kernel/include/malloc.h **** /**
  72:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @brief Re-allocate a block of memory from the heap
  73:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  */
  74:/Users/Administrator/sos-2x/kernel/include/malloc.h **** extern void *sos_blk_mem_realloc(void* pntr, uint16_t newSize, bool bCallFromModule);
  75:/Users/Administrator/sos-2x/kernel/include/malloc.h **** 
  76:/Users/Administrator/sos-2x/kernel/include/malloc.h **** /**
  77:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @brief Change memory ownership of a segment of memory
  78:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  */
  79:/Users/Administrator/sos-2x/kernel/include/malloc.h **** extern int8_t sos_blk_mem_change_own(void* ptr, sos_pid_t id, bool bCallFromModule);
  80:/Users/Administrator/sos-2x/kernel/include/malloc.h **** 
  81:/Users/Administrator/sos-2x/kernel/include/malloc.h **** /**
  82:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @brief Allocate a block of memory for long term usage
  83:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  */
  84:/Users/Administrator/sos-2x/kernel/include/malloc.h **** extern void *sos_blk_mem_longterm_alloc(uint16_t size, sos_pid_t id, bool bCallFromModule);
  85:/Users/Administrator/sos-2x/kernel/include/malloc.h **** 
  86:/Users/Administrator/sos-2x/kernel/include/malloc.h **** 
  87:/Users/Administrator/sos-2x/kernel/include/malloc.h **** /**
  88:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @brief Allocate dynamic memory
  89:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @param size Number of bytes to allocate
  90:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @param id Node responsible for the memory
  91:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @return Returns a pointer to the allocated memory.
  92:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * Will return a NULL pointer if the call to sys_malloc fails.
  93:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  */
  94:/Users/Administrator/sos-2x/kernel/include/malloc.h **** static inline void *ker_malloc(uint16_t size, sos_pid_t id)
  95:/Users/Administrator/sos-2x/kernel/include/malloc.h **** {
  96:/Users/Administrator/sos-2x/kernel/include/malloc.h ****   return sos_blk_mem_alloc(size, id, false);
  97:/Users/Administrator/sos-2x/kernel/include/malloc.h **** }
  98:/Users/Administrator/sos-2x/kernel/include/malloc.h **** 
  99:/Users/Administrator/sos-2x/kernel/include/malloc.h **** /**
 100:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @brief Reallocate dynamic memory
 101:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @param pntr Pointer to the currently held block of memory
 102:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @param newSize Number of bytes to be allocated
 103:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @return Returns the pointer to the reallocated memory.
 104:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * Returns a NULL if unable to reallocate but the original pointer is still valid.
 105:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  */
 106:/Users/Administrator/sos-2x/kernel/include/malloc.h **** static inline void* ker_realloc(void* pntr, uint16_t newSize)
 107:/Users/Administrator/sos-2x/kernel/include/malloc.h **** {
 108:/Users/Administrator/sos-2x/kernel/include/malloc.h ****   return sos_blk_mem_realloc(pntr, newSize, false);
 109:/Users/Administrator/sos-2x/kernel/include/malloc.h **** }
 110:/Users/Administrator/sos-2x/kernel/include/malloc.h **** 
 111:/Users/Administrator/sos-2x/kernel/include/malloc.h **** /**
 112:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @brief Free memory pointed to by ptr
 113:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @param ptr Pointer to the memory that should be released
 114:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @return void
 115:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  */
 116:/Users/Administrator/sos-2x/kernel/include/malloc.h **** static inline void ker_free(void* ptr)
 117:/Users/Administrator/sos-2x/kernel/include/malloc.h **** {
 118:/Users/Administrator/sos-2x/kernel/include/malloc.h ****   sos_blk_mem_free(ptr, false);
 119:/Users/Administrator/sos-2x/kernel/include/malloc.h ****   return;
 120:/Users/Administrator/sos-2x/kernel/include/malloc.h **** }
 121:/Users/Administrator/sos-2x/kernel/include/malloc.h **** 
 122:/Users/Administrator/sos-2x/kernel/include/malloc.h **** /**
 123:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @brief Change the ownership of memory
 124:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @param ptr Pointer to the memory whose ownership is being transferred
 125:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @param id New owner of the memeory
 126:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @return SOS_OK or error code upon fail
 127:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * Add check to prevent a change of ownership to the 'null' user.
 128:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  */
 129:/Users/Administrator/sos-2x/kernel/include/malloc.h **** static inline int8_t ker_change_own(void* ptr, sos_pid_t id)
 130:/Users/Administrator/sos-2x/kernel/include/malloc.h **** {
 131:/Users/Administrator/sos-2x/kernel/include/malloc.h ****   return sos_blk_mem_change_own(ptr, id, false);
 132:/Users/Administrator/sos-2x/kernel/include/malloc.h **** }
 133:/Users/Administrator/sos-2x/kernel/include/malloc.h **** 
 134:/Users/Administrator/sos-2x/kernel/include/malloc.h **** 
 135:/Users/Administrator/sos-2x/kernel/include/malloc.h **** extern sos_pid_t mem_check_memory();
 136:/Users/Administrator/sos-2x/kernel/include/malloc.h **** 
 137:/Users/Administrator/sos-2x/kernel/include/malloc.h **** /**
 138:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @brief Free up all memory held by id 
 139:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @param id Process that is having its memory returned
 140:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  */
 141:/Users/Administrator/sos-2x/kernel/include/malloc.h **** extern int8_t mem_remove_all(sos_pid_t id);
 142:/Users/Administrator/sos-2x/kernel/include/malloc.h **** 
 143:/Users/Administrator/sos-2x/kernel/include/malloc.h **** /**
 144:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @brief malloc for long term usage
 145:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @warning this is used to allocate the memory for long time usage
 146:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  */
 147:/Users/Administrator/sos-2x/kernel/include/malloc.h **** static inline void* malloc_longterm(uint16_t size, sos_pid_t id)
 148:/Users/Administrator/sos-2x/kernel/include/malloc.h **** {
 149:/Users/Administrator/sos-2x/kernel/include/malloc.h ****   return sos_blk_mem_longterm_alloc(size, id, true);
 290               	.LM14:
 291 0040 41E0      		ldi r20,lo8(1)
 292 0042 692F      		mov r22,r25
 293 0044 C901      		movw r24,r18
 294 0046 0496      		adiw r24,4
 295 0048 0E94 0000 		call sos_blk_mem_longterm_alloc
 296 004c 06C0      		rjmp .L15
 297               	.L7:
 298               	.LBE3:
 299               	.LBE2:
 300               	.LBB4:
 301               	.LBB5:
 303               	.LM15:
 304 004e 40E0      		ldi r20,lo8(0)
 305 0050 692F      		mov r22,r25
 306 0052 C901      		movw r24,r18
 307 0054 0496      		adiw r24,4
 308 0056 0E94 0000 		call sos_blk_mem_alloc
 309               	.L15:
 310               	.LBE5:
 311               	.LBE4:
 313               	.LM16:
 314 005a 8883      		st Y,r24
 315 005c 9983      		std Y+1,r25
 317               	.Ltext2:
  42:/Users/Administrator/sos-2x/kernel/slab.c **** 		slab->head = malloc_longterm( sizeof( slab_item_t ) + items_per_pool * item_size, pid );
  43:/Users/Administrator/sos-2x/kernel/slab.c **** 	} else {
  44:/Users/Administrator/sos-2x/kernel/slab.c **** 		slab->head = ker_malloc( sizeof( slab_item_t ) + items_per_pool * item_size, pid );
  45:/Users/Administrator/sos-2x/kernel/slab.c **** 	}
  46:/Users/Administrator/sos-2x/kernel/slab.c **** 	
  47:/Users/Administrator/sos-2x/kernel/slab.c **** 	if( slab->head == NULL ) {
 319               	.LM17:
 320 005e E881      		ld r30,Y
 321 0060 F981      		ldd r31,Y+1
 322 0062 3097      		sbiw r30,0
 323 0064 19F4      		brne .L11
  48:/Users/Administrator/sos-2x/kernel/slab.c **** 		return -ENOMEM;
 325               	.LM18:
 326 0066 84EF      		ldi r24,lo8(-12)
 327 0068 9FEF      		ldi r25,hi8(-12)
 328 006a 0AC0      		rjmp .L1
 329               	.L11:
  49:/Users/Administrator/sos-2x/kernel/slab.c **** 	}
  50:/Users/Administrator/sos-2x/kernel/slab.c **** 	slab->head->next = NULL;
 331               	.LM19:
 332 006c 1082      		st Z,__zero_reg__
 333 006e 1182      		std Z+1,__zero_reg__
  51:/Users/Administrator/sos-2x/kernel/slab.c **** 	slab->head->alloc = 0;
 335               	.LM20:
 336 0070 E881      		ld r30,Y
 337 0072 F981      		ldd r31,Y+1
 338 0074 1282      		std Z+2,__zero_reg__
  52:/Users/Administrator/sos-2x/kernel/slab.c **** 	slab->head->gc_mark = 0;
 340               	.LM21:
 341 0076 E881      		ld r30,Y
 342 0078 F981      		ldd r31,Y+1
 343 007a 1382      		std Z+3,__zero_reg__
  53:/Users/Administrator/sos-2x/kernel/slab.c **** 	return SOS_OK;
 345               	.LM22:
 346 007c 80E0      		ldi r24,lo8(0)
 347 007e 90E0      		ldi r25,hi8(0)
 348               	.L1:
 349               	/* epilogue: frame size=0 */
 350 0080 DF91      		pop r29
 351 0082 CF91      		pop r28
 352 0084 0F91      		pop r16
 353 0086 0895      		ret
 354               	/* epilogue end (size=4) */
 355               	/* function ker_slab_init size 69 (62) */
 360               	.Lscope0:
 365               	.global	ker_slab_alloc
 367               	ker_slab_alloc:
  54:/Users/Administrator/sos-2x/kernel/slab.c **** }
  55:/Users/Administrator/sos-2x/kernel/slab.c **** 
  56:/Users/Administrator/sos-2x/kernel/slab.c **** void* ker_slab_alloc( slab_t *slab, sos_pid_t pid )
  57:/Users/Administrator/sos-2x/kernel/slab.c **** {
 369               	.LM23:
 370               	/* prologue: frame size=0 */
 371 0088 0F93      		push r16
 372 008a 1F93      		push r17
 373 008c CF93      		push r28
 374 008e DF93      		push r29
 375               	/* prologue end (size=4) */
 376 0090 DC01      		movw r26,r24
  58:/Users/Administrator/sos-2x/kernel/slab.c **** 	slab_item_t *itr = slab->head;
 378               	.LM24:
 379 0092 ED91      		ld r30,X+
 380 0094 FC91      		ld r31,X
 381 0096 1197      		sbiw r26,1
  59:/Users/Administrator/sos-2x/kernel/slab.c **** 	slab_item_t *prev = slab->head;
 383               	.LM25:
 384 0098 8F01      		movw r16,r30
  60:/Users/Administrator/sos-2x/kernel/slab.c **** 	
  61:/Users/Administrator/sos-2x/kernel/slab.c **** 	
  62:/Users/Administrator/sos-2x/kernel/slab.c **** 	while( itr != NULL ) {
  63:/Users/Administrator/sos-2x/kernel/slab.c **** 		DEBUG(" itr->alloc = %x\n", itr->alloc);
  64:/Users/Administrator/sos-2x/kernel/slab.c **** 		if( itr->alloc != slab->empty_vector ) {
  65:/Users/Administrator/sos-2x/kernel/slab.c **** 			break;
  66:/Users/Administrator/sos-2x/kernel/slab.c **** 		}
  67:/Users/Administrator/sos-2x/kernel/slab.c **** 		prev = itr;
  68:/Users/Administrator/sos-2x/kernel/slab.c **** 		itr = itr->next;
 386               	.LM26:
 387 009a 3097      		sbiw r30,0
 388 009c 59F0      		breq .L18
 389 009e EC01      		movw r28,r24
 390 00a0 9B81      		ldd r25,Y+3
 391               	.L20:
 393               	.LM27:
 394 00a2 8281      		ldd r24,Z+2
 395 00a4 8917      		cp r24,r25
 396 00a6 31F4      		brne .L18
 398               	.LM28:
 399 00a8 8F01      		movw r16,r30
 401               	.LM29:
 402 00aa 0190      		ld __tmp_reg__,Z+
 403 00ac F081      		ld r31,Z
 404 00ae E02D      		mov r30,__tmp_reg__
 405 00b0 3097      		sbiw r30,0
 406 00b2 B9F7      		brne .L20
 407               	.L18:
  69:/Users/Administrator/sos-2x/kernel/slab.c **** 	}
  70:/Users/Administrator/sos-2x/kernel/slab.c **** 	
  71:/Users/Administrator/sos-2x/kernel/slab.c **** 	if( itr == NULL ) {
 409               	.LM30:
 410 00b4 3097      		sbiw r30,0
 411 00b6 99F5      		brne .L21
  72:/Users/Administrator/sos-2x/kernel/slab.c **** 		//
  73:/Users/Administrator/sos-2x/kernel/slab.c **** 		// The pool is exhausted, create a new one
  74:/Users/Administrator/sos-2x/kernel/slab.c **** 		//
  75:/Users/Administrator/sos-2x/kernel/slab.c **** 		DEBUG("pool exhausted\n");
  76:/Users/Administrator/sos-2x/kernel/slab.c **** 		if( slab->flag & SLAB_LONGTERM ) {
 413               	.LM31:
 414 00b8 FD01      		movw r30,r26
 415 00ba 8581      		ldd r24,Z+5
 416 00bc 2281      		ldd r18,Z+2
 417 00be 9481      		ldd r25,Z+4
 418 00c0 87FF      		sbrs r24,7
 419 00c2 0BC0      		rjmp .L22
 420               	.LBB6:
 422               	.Ltext3:
 424               	.LM32:
 425 00c4 299F      		mul r18,r25
 426 00c6 C001      		movw r24,r0
 427 00c8 1124      		clr r1
 428               	.LBB7:
 430               	.LM33:
 431 00ca 41E0      		ldi r20,lo8(1)
 432 00cc 0496      		adiw r24,4
 433 00ce 0E94 0000 		call sos_blk_mem_longterm_alloc
 434               	.LBE7:
 435               	.LBE6:
 437               	.LM34:
 438 00d2 E801      		movw r28,r16
 439 00d4 8883      		st Y,r24
 440 00d6 9983      		std Y+1,r25
 441 00d8 0AC0      		rjmp .L24
 442               	.L22:
 443               	.LBB8:
 445               	.LM35:
 446 00da 299F      		mul r18,r25
 447 00dc C001      		movw r24,r0
 448 00de 1124      		clr r1
 449               	.LBB9:
 451               	.LM36:
 452 00e0 40E0      		ldi r20,lo8(0)
 453 00e2 0496      		adiw r24,4
 454 00e4 0E94 0000 		call sos_blk_mem_alloc
 455               	.LBE9:
 456               	.LBE8:
 458               	.LM37:
 459 00e8 F801      		movw r30,r16
 460 00ea 8083      		st Z,r24
 461 00ec 9183      		std Z+1,r25
 462               	.L24:
 464               	.Ltext4:
  77:/Users/Administrator/sos-2x/kernel/slab.c **** 			prev->next = malloc_longterm( sizeof( slab_item_t ) + slab->num_items_per_pool * slab->item_size
  78:/Users/Administrator/sos-2x/kernel/slab.c **** 		} else {
  79:/Users/Administrator/sos-2x/kernel/slab.c **** 			prev->next = ker_malloc( sizeof( slab_item_t ) + slab->num_items_per_pool * slab->item_size, pid
  80:/Users/Administrator/sos-2x/kernel/slab.c **** 		}
  81:/Users/Administrator/sos-2x/kernel/slab.c **** 		if( prev->next == NULL ) {
 466               	.LM38:
 467 00ee E801      		movw r28,r16
 468 00f0 8881      		ld r24,Y
 469 00f2 9981      		ldd r25,Y+1
 470 00f4 0097      		sbiw r24,0
 471 00f6 19F1      		breq .L16
  82:/Users/Administrator/sos-2x/kernel/slab.c **** 			DEBUG("alloc NULL\n");
  83:/Users/Administrator/sos-2x/kernel/slab.c **** 			return NULL;
  84:/Users/Administrator/sos-2x/kernel/slab.c **** 		}
  85:/Users/Administrator/sos-2x/kernel/slab.c **** 		itr = prev->next;
 473               	.LM39:
 474 00f8 FC01      		movw r30,r24
  86:/Users/Administrator/sos-2x/kernel/slab.c **** 		itr->next = NULL;
 476               	.LM40:
 477 00fa 1082      		st Z,__zero_reg__
 478 00fc 1182      		std Z+1,__zero_reg__
  87:/Users/Administrator/sos-2x/kernel/slab.c **** 		itr->alloc = 0x01;
 480               	.LM41:
 481 00fe 81E0      		ldi r24,lo8(1)
 482 0100 8283      		std Z+2,r24
  88:/Users/Administrator/sos-2x/kernel/slab.c **** 		itr->gc_mark = 0;
 484               	.LM42:
 485 0102 1382      		std Z+3,__zero_reg__
  89:/Users/Administrator/sos-2x/kernel/slab.c **** 		return itr->mem;
 487               	.LM43:
 488 0104 CF01      		movw r24,r30
 489 0106 09C0      		rjmp .L37
 490               	.L36:
 491               	.LBB10:
  90:/Users/Administrator/sos-2x/kernel/slab.c **** 	} else {
  91:/Users/Administrator/sos-2x/kernel/slab.c **** 		uint8_t i;
  92:/Users/Administrator/sos-2x/kernel/slab.c **** 		uint8_t mask = 0x01;
  93:/Users/Administrator/sos-2x/kernel/slab.c **** 		
  94:/Users/Administrator/sos-2x/kernel/slab.c **** 		DEBUG("find free slot in pool\n");
  95:/Users/Administrator/sos-2x/kernel/slab.c **** 		for( i = 0; i < slab->num_items_per_pool; i++, mask<<=1 ) {
  96:/Users/Administrator/sos-2x/kernel/slab.c **** 			if( (itr->alloc & mask)  == 0 ) {
  97:/Users/Administrator/sos-2x/kernel/slab.c **** 				itr->alloc |= mask;
 493               	.LM44:
 494 0108 232B      		or r18,r19
 495 010a 2283      		std Z+2,r18
  98:/Users/Administrator/sos-2x/kernel/slab.c **** 				return itr->mem + (i * slab->item_size);
 497               	.LM45:
 498 010c ED01      		movw r28,r26
 499 010e 8C81      		ldd r24,Y+4
 500 0110 989F      		mul r25,r24
 501 0112 C001      		movw r24,r0
 502 0114 1124      		clr r1
 503 0116 8E0F      		add r24,r30
 504 0118 9F1F      		adc r25,r31
 505               	.L37:
 506 011a 0496      		adiw r24,4
 507 011c 10C0      		rjmp .L16
 508               	.L21:
 510               	.LM46:
 511 011e 31E0      		ldi r19,lo8(1)
 513               	.LM47:
 514 0120 90E0      		ldi r25,lo8(0)
 515 0122 ED01      		movw r28,r26
 516 0124 4A81      		ldd r20,Y+2
 517 0126 9417      		cp r25,r20
 518 0128 40F4      		brsh .L35
 519 012a 2281      		ldd r18,Z+2
 520               	.L32:
 522               	.LM48:
 523 012c 822F      		mov r24,r18
 524 012e 8323      		and r24,r19
 525 0130 59F3      		breq .L36
 527               	.LM49:
 528 0132 9F5F      		subi r25,lo8(-(1))
 529 0134 330F      		lsl r19
 530 0136 9417      		cp r25,r20
 531 0138 C8F3      		brlo .L32
 532               	.L35:
 533               	.LBE10:
  99:/Users/Administrator/sos-2x/kernel/slab.c **** 			}
 100:/Users/Administrator/sos-2x/kernel/slab.c **** 		}
 101:/Users/Administrator/sos-2x/kernel/slab.c **** 	}
 102:/Users/Administrator/sos-2x/kernel/slab.c **** 	return NULL;
 535               	.LM50:
 536 013a 80E0      		ldi r24,lo8(0)
 537 013c 90E0      		ldi r25,hi8(0)
 538               	.L16:
 539               	/* epilogue: frame size=0 */
 540 013e DF91      		pop r29
 541 0140 CF91      		pop r28
 542 0142 1F91      		pop r17
 543 0144 0F91      		pop r16
 544 0146 0895      		ret
 545               	/* epilogue end (size=5) */
 546               	/* function ker_slab_alloc size 97 (88) */
 556               	.Lscope1:
 561               	.global	ker_slab_free
 563               	ker_slab_free:
 103:/Users/Administrator/sos-2x/kernel/slab.c **** }
 104:/Users/Administrator/sos-2x/kernel/slab.c **** 
 105:/Users/Administrator/sos-2x/kernel/slab.c **** void ker_slab_free( slab_t *slab, void* mem ) 
 106:/Users/Administrator/sos-2x/kernel/slab.c **** {
 565               	.LM51:
 566               	/* prologue: frame size=0 */
 567 0148 0F93      		push r16
 568 014a 1F93      		push r17
 569 014c CF93      		push r28
 570 014e DF93      		push r29
 571               	/* prologue end (size=4) */
 572 0150 EC01      		movw r28,r24
 107:/Users/Administrator/sos-2x/kernel/slab.c **** 	slab_item_t *itr = slab->head;
 574               	.LM52:
 575 0152 E881      		ld r30,Y
 576 0154 F981      		ldd r31,Y+1
 108:/Users/Administrator/sos-2x/kernel/slab.c **** 	slab_item_t *prev = NULL;
 578               	.LM53:
 579 0156 00E0      		ldi r16,lo8(0)
 580 0158 10E0      		ldi r17,hi8(0)
 581               	.L47:
 109:/Users/Administrator/sos-2x/kernel/slab.c **** 	
 110:/Users/Administrator/sos-2x/kernel/slab.c **** 	while( itr != NULL ) {
 111:/Users/Administrator/sos-2x/kernel/slab.c **** 		if( ((uint8_t*)mem) >= itr->mem && ((uint8_t*)mem) < (itr->mem + slab->num_items_per_pool * slab-
 112:/Users/Administrator/sos-2x/kernel/slab.c **** 			uint8_t mask = 1 << ( ( ((uint8_t*)mem) - (itr->mem) ) / slab->item_size );
 113:/Users/Administrator/sos-2x/kernel/slab.c **** 			
 114:/Users/Administrator/sos-2x/kernel/slab.c **** 			itr->alloc &= ~mask;
 115:/Users/Administrator/sos-2x/kernel/slab.c **** 			
 116:/Users/Administrator/sos-2x/kernel/slab.c **** 			if( itr->alloc == 0 && itr != slab->head ) {
 117:/Users/Administrator/sos-2x/kernel/slab.c **** 				prev->next = itr->next;
 118:/Users/Administrator/sos-2x/kernel/slab.c **** 				ker_free( itr );
 119:/Users/Administrator/sos-2x/kernel/slab.c **** 			}
 120:/Users/Administrator/sos-2x/kernel/slab.c **** 			return;
 121:/Users/Administrator/sos-2x/kernel/slab.c **** 		}
 122:/Users/Administrator/sos-2x/kernel/slab.c **** 		prev = itr;
 123:/Users/Administrator/sos-2x/kernel/slab.c **** 		itr = itr->next;
 583               	.LM54:
 584 015a 3097      		sbiw r30,0
 585 015c C1F1      		breq .L46
 587               	.LM55:
 588 015e CF01      		movw r24,r30
 589 0160 0496      		adiw r24,4
 590 0162 6817      		cp r22,r24
 591 0164 7907      		cpc r23,r25
 592 0166 70F1      		brlo .L41
 593 0168 8A81      		ldd r24,Y+2
 594 016a 2C81      		ldd r18,Y+4
 595 016c 829F      		mul r24,r18
 596 016e C001      		movw r24,r0
 597 0170 1124      		clr r1
 598 0172 8E0F      		add r24,r30
 599 0174 9F1F      		adc r25,r31
 600 0176 0496      		adiw r24,4
 601 0178 6817      		cp r22,r24
 602 017a 7907      		cpc r23,r25
 603 017c 18F5      		brsh .L41
 604               	.LBB11:
 606               	.LM56:
 607 017e 6E1B      		sub r22,r30
 608 0180 7F0B      		sbc r23,r31
 609 0182 3327      		clr r19
 610 0184 CB01      		movw r24,r22
 611 0186 0497      		sbiw r24,4
 612 0188 B901      		movw r22,r18
 613 018a 0E94 0000 		call __divmodhi4
 614 018e 81E0      		ldi r24,lo8(1)
 615 0190 90E0      		ldi r25,hi8(1)
 616 0192 02C0      		rjmp 2f
 617 0194 880F      	1:	lsl r24
 618 0196 991F      		rol r25
 619 0198 6A95      	2:	dec r22
 620 019a E2F7      		brpl 1b
 622               	.LM57:
 623 019c 8095      		com r24
 624 019e 6281      		ldd r22,Z+2
 625 01a0 6823      		and r22,r24
 626 01a2 6283      		std Z+2,r22
 628               	.LM58:
 629 01a4 6623      		tst r22
 630 01a6 A9F4      		brne .L38
 631 01a8 8881      		ld r24,Y
 632 01aa 9981      		ldd r25,Y+1
 633 01ac E817      		cp r30,r24
 634 01ae F907      		cpc r31,r25
 635 01b0 81F0      		breq .L38
 637               	.LM59:
 638 01b2 8081      		ld r24,Z
 639 01b4 9181      		ldd r25,Z+1
 640 01b6 D801      		movw r26,r16
 641 01b8 8D93      		st X+,r24
 642 01ba 9C93      		st X,r25
 643               	.LBB12:
 644               	.LBB13:
 646               	.Ltext5:
 648               	.LM60:
 649 01bc CF01      		movw r24,r30
 650 01be 0E94 0000 		call sos_blk_mem_free
 651               	.LBE13:
 652               	.LBE12:
 654               	.Ltext6:
 656               	.LM61:
 657 01c2 07C0      		rjmp .L38
 658               	.L41:
 659               	.LBE11:
 661               	.LM62:
 662 01c4 8F01      		movw r16,r30
 664               	.LM63:
 665 01c6 0190      		ld __tmp_reg__,Z+
 666 01c8 F081      		ld r31,Z
 667 01ca E02D      		mov r30,__tmp_reg__
 668 01cc C6CF      		rjmp .L47
 669               	.L46:
 124:/Users/Administrator/sos-2x/kernel/slab.c **** 	}
 125:/Users/Administrator/sos-2x/kernel/slab.c **** 	ker_panic();
 671               	.LM64:
 672 01ce 0E94 0000 		call ker_panic
 673               	.L38:
 674               	/* epilogue: frame size=0 */
 675 01d2 DF91      		pop r29
 676 01d4 CF91      		pop r28
 677 01d6 1F91      		pop r17
 678 01d8 0F91      		pop r16
 679 01da 0895      		ret
 680               	/* epilogue end (size=5) */
 681               	/* function ker_slab_free size 75 (66) */
 690               	.Lscope2:
 695               	.global	slab_gc_mark
 697               	slab_gc_mark:
 126:/Users/Administrator/sos-2x/kernel/slab.c **** }
 127:/Users/Administrator/sos-2x/kernel/slab.c **** 
 128:/Users/Administrator/sos-2x/kernel/slab.c **** void slab_gc_mark( slab_t *slab, void *mem )
 129:/Users/Administrator/sos-2x/kernel/slab.c **** {
 699               	.LM65:
 700               	/* prologue: frame size=0 */
 701 01dc 0F93      		push r16
 702 01de 1F93      		push r17
 703 01e0 CF93      		push r28
 704 01e2 DF93      		push r29
 705               	/* prologue end (size=4) */
 706 01e4 DC01      		movw r26,r24
 130:/Users/Administrator/sos-2x/kernel/slab.c **** 	slab_item_t *itr = slab->head;
 708               	.LM66:
 709 01e6 ED91      		ld r30,X+
 710 01e8 FC91      		ld r31,X
 711 01ea 1197      		sbiw r26,1
 131:/Users/Administrator/sos-2x/kernel/slab.c **** 	
 132:/Users/Administrator/sos-2x/kernel/slab.c **** 	DEBUG_GC("slab: gc_mark\n");
 133:/Users/Administrator/sos-2x/kernel/slab.c **** 	while( itr != NULL ) {
 134:/Users/Administrator/sos-2x/kernel/slab.c **** 		if( ((uint8_t*)mem) >= itr->mem && ((uint8_t*)mem) < (itr->mem + slab->num_items_per_pool * slab-
 135:/Users/Administrator/sos-2x/kernel/slab.c **** 			if( (((uint8_t*)mem) - (itr->mem)) % slab->item_size == 0 ) {
 136:/Users/Administrator/sos-2x/kernel/slab.c **** 				uint8_t mask = 1 << ( ( ((uint8_t*)mem) - (itr->mem) ) / slab->item_size );
 137:/Users/Administrator/sos-2x/kernel/slab.c **** 				if( itr->alloc & mask ) {
 138:/Users/Administrator/sos-2x/kernel/slab.c **** 					DEBUG_GC("slab mark: %d\n", (int) mem );
 139:/Users/Administrator/sos-2x/kernel/slab.c **** 					itr->gc_mark |= mask;
 140:/Users/Administrator/sos-2x/kernel/slab.c **** 				} else {
 141:/Users/Administrator/sos-2x/kernel/slab.c **** 					DEBUG_GC("slab: used already freed memory %d\n", (int) mem );
 142:/Users/Administrator/sos-2x/kernel/slab.c **** 					// use already freed memory?
 143:/Users/Administrator/sos-2x/kernel/slab.c **** 					//itr->alloc |= mask;
 144:/Users/Administrator/sos-2x/kernel/slab.c **** 					//itr->gc_mark |= mask;
 145:/Users/Administrator/sos-2x/kernel/slab.c **** 				}
 146:/Users/Administrator/sos-2x/kernel/slab.c **** 			} else {
 147:/Users/Administrator/sos-2x/kernel/slab.c **** 				DEBUG_GC("slab: memory misalignment %d\n", (int) mem );
 148:/Users/Administrator/sos-2x/kernel/slab.c **** 				// TODO: misalignment?  
 149:/Users/Administrator/sos-2x/kernel/slab.c **** 			}
 150:/Users/Administrator/sos-2x/kernel/slab.c **** 			return;
 151:/Users/Administrator/sos-2x/kernel/slab.c **** 		}
 152:/Users/Administrator/sos-2x/kernel/slab.c **** 		itr = itr->next;
 713               	.LM67:
 714 01ec 3097      		sbiw r30,0
 715 01ee A9F1      		breq .L48
 716 01f0 01E0      		ldi r16,lo8(1)
 717 01f2 10E0      		ldi r17,hi8(1)
 718               	.L56:
 720               	.LM68:
 721 01f4 CF01      		movw r24,r30
 722 01f6 0496      		adiw r24,4
 723 01f8 6817      		cp r22,r24
 724 01fa 7907      		cpc r23,r25
 725 01fc 48F1      		brlo .L51
 726 01fe ED01      		movw r28,r26
 727 0200 8A81      		ldd r24,Y+2
 728 0202 4C81      		ldd r20,Y+4
 729 0204 849F      		mul r24,r20
 730 0206 C001      		movw r24,r0
 731 0208 1124      		clr r1
 732 020a 8E0F      		add r24,r30
 733 020c 9F1F      		adc r25,r31
 734 020e 0496      		adiw r24,4
 735 0210 6817      		cp r22,r24
 736 0212 7907      		cpc r23,r25
 737 0214 E8F4      		brsh .L51
 739               	.LM69:
 740 0216 9B01      		movw r18,r22
 741 0218 2E1B      		sub r18,r30
 742 021a 3F0B      		sbc r19,r31
 743 021c 2450      		subi r18,lo8(-(-4))
 744 021e 3040      		sbci r19,hi8(-(-4))
 745 0220 C42F      		mov r28,r20
 746 0222 DD27      		clr r29
 747 0224 C901      		movw r24,r18
 748 0226 BE01      		movw r22,r28
 749 0228 0E94 0000 		call __divmodhi4
 750 022c 892B      		or r24,r25
 751 022e A9F4      		brne .L48
 752               	.LBB14:
 754               	.LM70:
 755 0230 C901      		movw r24,r18
 756 0232 BE01      		movw r22,r28
 757 0234 0E94 0000 		call __divmodhi4
 758 0238 02C0      		rjmp 2f
 759 023a 000F      	1:	lsl r16
 760 023c 111F      		rol r17
 761 023e 6A95      	2:	dec r22
 762 0240 E2F7      		brpl 1b
 764               	.LM71:
 765 0242 8281      		ldd r24,Z+2
 766 0244 8023      		and r24,r16
 767 0246 49F0      		breq .L48
 769               	.LM72:
 770 0248 8381      		ldd r24,Z+3
 771 024a 802B      		or r24,r16
 772 024c 8383      		std Z+3,r24
 773 024e 05C0      		rjmp .L48
 774               	.L51:
 775               	.LBE14:
 777               	.LM73:
 778 0250 0190      		ld __tmp_reg__,Z+
 779 0252 F081      		ld r31,Z
 780 0254 E02D      		mov r30,__tmp_reg__
 781 0256 3097      		sbiw r30,0
 782 0258 69F6      		brne .L56
 783               	.L48:
 784               	/* epilogue: frame size=0 */
 785 025a DF91      		pop r29
 786 025c CF91      		pop r28
 787 025e 1F91      		pop r17
 788 0260 0F91      		pop r16
 789 0262 0895      		ret
 790               	/* epilogue end (size=5) */
 791               	/* function slab_gc_mark size 70 (61) */
 799               	.Lscope3:
 804               	.global	slab_gc
 806               	slab_gc:
 153:/Users/Administrator/sos-2x/kernel/slab.c **** 	}
 154:/Users/Administrator/sos-2x/kernel/slab.c **** 	DEBUG_GC("cannot find memory %d\n", (int) mem);
 155:/Users/Administrator/sos-2x/kernel/slab.c **** 	//exit(1);
 156:/Users/Administrator/sos-2x/kernel/slab.c **** }
 157:/Users/Administrator/sos-2x/kernel/slab.c **** #include <led.h>
 158:/Users/Administrator/sos-2x/kernel/slab.c **** void slab_gc( slab_t *slab, sos_pid_t pid )
 159:/Users/Administrator/sos-2x/kernel/slab.c **** {
 808               	.LM74:
 809               	/* prologue: frame size=0 */
 810 0264 DF92      		push r13
 811 0266 EF92      		push r14
 812 0268 FF92      		push r15
 813 026a 0F93      		push r16
 814 026c 1F93      		push r17
 815 026e CF93      		push r28
 816 0270 DF93      		push r29
 817               	/* prologue end (size=7) */
 818 0272 7C01      		movw r14,r24
 819 0274 D62E      		mov r13,r22
 160:/Users/Administrator/sos-2x/kernel/slab.c **** 	slab_item_t *itr = slab->head;
 821               	.LM75:
 822 0276 FC01      		movw r30,r24
 823 0278 C081      		ld r28,Z
 824 027a D181      		ldd r29,Z+1
 161:/Users/Administrator/sos-2x/kernel/slab.c **** 	slab_item_t *prev = NULL;
 826               	.LM76:
 827 027c 00E0      		ldi r16,lo8(0)
 828 027e 10E0      		ldi r17,hi8(0)
 162:/Users/Administrator/sos-2x/kernel/slab.c **** 	//
 163:/Users/Administrator/sos-2x/kernel/slab.c **** 	// Detect memory leak while marking the memory to malloc
 164:/Users/Administrator/sos-2x/kernel/slab.c **** 	//
 165:/Users/Administrator/sos-2x/kernel/slab.c **** 	while( itr != NULL ) {
 166:/Users/Administrator/sos-2x/kernel/slab.c **** 		if( itr->alloc != itr->gc_mark ) {
 167:/Users/Administrator/sos-2x/kernel/slab.c **** 			// leak!
 168:/Users/Administrator/sos-2x/kernel/slab.c **** 			DEBUG_GC("leak in slab %d %d\n", itr->alloc, itr->gc_mark);
 169:/Users/Administrator/sos-2x/kernel/slab.c **** 			led_red_toggle();
 170:/Users/Administrator/sos-2x/kernel/slab.c **** 			itr->alloc = itr->gc_mark;
 171:/Users/Administrator/sos-2x/kernel/slab.c **** 			
 172:/Users/Administrator/sos-2x/kernel/slab.c **** 			if( itr->alloc == 0 && itr != slab->head ) {
 173:/Users/Administrator/sos-2x/kernel/slab.c **** 				prev->next = itr->next;
 174:/Users/Administrator/sos-2x/kernel/slab.c **** 				ker_free( itr );
 175:/Users/Administrator/sos-2x/kernel/slab.c **** 				itr = prev;
 176:/Users/Administrator/sos-2x/kernel/slab.c **** 			} else {
 177:/Users/Administrator/sos-2x/kernel/slab.c **** 				// mark it used to malloc
 178:/Users/Administrator/sos-2x/kernel/slab.c **** 				itr->gc_mark = 0;
 179:/Users/Administrator/sos-2x/kernel/slab.c **** 				ker_gc_mark( pid, itr );
 180:/Users/Administrator/sos-2x/kernel/slab.c **** 			}
 181:/Users/Administrator/sos-2x/kernel/slab.c **** 		} else {
 182:/Users/Administrator/sos-2x/kernel/slab.c **** 			itr->gc_mark = 0;
 183:/Users/Administrator/sos-2x/kernel/slab.c **** 			ker_gc_mark( pid, itr );
 184:/Users/Administrator/sos-2x/kernel/slab.c **** 		}
 185:/Users/Administrator/sos-2x/kernel/slab.c **** 		prev = itr;
 186:/Users/Administrator/sos-2x/kernel/slab.c **** 		itr = itr->next;
 830               	.LM77:
 831 0280 2097      		sbiw r28,0
 832 0282 39F1      		breq .L68
 833               	.L66:
 835               	.LM78:
 836 0284 9A81      		ldd r25,Y+2
 837 0286 8B81      		ldd r24,Y+3
 838 0288 9817      		cp r25,r24
 839 028a C1F0      		breq .L61
 841               	.LM79:
 842 028c 8BB3      		in r24,59-0x20
 843 028e 94E0      		ldi r25,lo8(4)
 844 0290 8927      		eor r24,r25
 845 0292 8BBB      		out 59-0x20,r24
 847               	.LM80:
 848 0294 6B81      		ldd r22,Y+3
 849 0296 6A83      		std Y+2,r22
 851               	.LM81:
 852 0298 6623      		tst r22
 853 029a 81F4      		brne .L61
 854 029c F701      		movw r30,r14
 855 029e 8081      		ld r24,Z
 856 02a0 9181      		ldd r25,Z+1
 857 02a2 C817      		cp r28,r24
 858 02a4 D907      		cpc r29,r25
 859 02a6 51F0      		breq .L61
 861               	.LM82:
 862 02a8 8881      		ld r24,Y
 863 02aa 9981      		ldd r25,Y+1
 864 02ac F801      		movw r30,r16
 865 02ae 8083      		st Z,r24
 866 02b0 9183      		std Z+1,r25
 867               	.LBB15:
 868               	.LBB16:
 870               	.Ltext7:
 872               	.LM83:
 873 02b2 CE01      		movw r24,r28
 874 02b4 0E94 0000 		call sos_blk_mem_free
 875               	.LBE16:
 876               	.LBE15:
 878               	.Ltext8:
 880               	.LM84:
 881 02b8 E801      		movw r28,r16
 882 02ba 05C0      		rjmp .L65
 883               	.L61:
 885               	.LM85:
 886 02bc 1B82      		std Y+3,__zero_reg__
 888               	.LM86:
 889 02be BE01      		movw r22,r28
 890 02c0 8D2D      		mov r24,r13
 891 02c2 0E94 0000 		call ker_gc_mark
 892               	.L65:
 894               	.LM87:
 895 02c6 8E01      		movw r16,r28
 897               	.LM88:
 898 02c8 0990      		ld __tmp_reg__,Y+
 899 02ca D881      		ld r29,Y
 900 02cc C02D      		mov r28,__tmp_reg__
 901 02ce 2097      		sbiw r28,0
 902 02d0 C9F6      		brne .L66
 903               	.L68:
 904               	/* epilogue: frame size=0 */
 905 02d2 DF91      		pop r29
 906 02d4 CF91      		pop r28
 907 02d6 1F91      		pop r17
 908 02d8 0F91      		pop r16
 909 02da FF90      		pop r15
 910 02dc EF90      		pop r14
 911 02de DF90      		pop r13
 912 02e0 0895      		ret
 913               	/* epilogue end (size=8) */
 914               	/* function slab_gc size 63 (48) */
 920               	.Lscope4:
 922               		.text
 924               	Letext:
 925               	/* File "/Users/Administrator/sos-2x/kernel/slab.c": code  374 = 0x0176 ( 325), prologues  22, epil
DEFINED SYMBOLS
                            *ABS*:00000000 slab.c
                            *ABS*:0000003f __SREG__
                            *ABS*:0000003e __SP_H__
                            *ABS*:0000003d __SP_L__
                            *ABS*:00000000 __tmp_reg__
                            *ABS*:00000001 __zero_reg__
/var/tmp//cc8F7b4m.s:221    .text:00000000 ker_slab_init
/var/tmp//cc8F7b4m.s:367    .text:00000088 ker_slab_alloc
/var/tmp//cc8F7b4m.s:563    .text:00000148 ker_slab_free
/var/tmp//cc8F7b4m.s:697    .text:000001dc slab_gc_mark
/var/tmp//cc8F7b4m.s:806    .text:00000264 slab_gc
/var/tmp//cc8F7b4m.s:924    .text:000002e2 Letext

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
sos_blk_mem_longterm_alloc
sos_blk_mem_alloc
__divmodhi4
sos_blk_mem_free
ker_panic
ker_gc_mark
