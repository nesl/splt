   1               		.file	"malloc.c"
   2               		.arch atmega128
   3               	__SREG__ = 0x3f
   4               	__SP_H__ = 0x3e
   5               	__SP_L__ = 0x3d
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  12               		.text
  13               	.Ltext0:
 305               	.global	sos_blk_mem_change_own
 307               	sos_blk_mem_change_own:
   1:/Users/Administrator/sos-2x/kernel/malloc.c **** /******************************************************************************
   2:/Users/Administrator/sos-2x/kernel/malloc.c **** 
   3:/Users/Administrator/sos-2x/kernel/malloc.c ****   NAME:         DoubleLinkPool
   4:/Users/Administrator/sos-2x/kernel/malloc.c ****   
   5:/Users/Administrator/sos-2x/kernel/malloc.c ****   DESCRIPTION:  An implementation in C of a heap memory controller using a
   6:/Users/Administrator/sos-2x/kernel/malloc.c ****                 doubly-linked list to manage the free list. The basis for the 
   7:/Users/Administrator/sos-2x/kernel/malloc.c ****                 design is the DoublyLinkedPool C++ class of Bruno Preiss
   8:/Users/Administrator/sos-2x/kernel/malloc.c ****                 (http://www.bpreiss.com). This version provides for acquiring 
   9:/Users/Administrator/sos-2x/kernel/malloc.c ****                 an area in O(n) time, and releasing an area in O(1) time.
  10:/Users/Administrator/sos-2x/kernel/malloc.c ****                 
  11:/Users/Administrator/sos-2x/kernel/malloc.c ****   LICENSE:      This program is free software. you can redistribute it and/or
  12:/Users/Administrator/sos-2x/kernel/malloc.c ****                 modify it under the terms of the GNU General Public License
  13:/Users/Administrator/sos-2x/kernel/malloc.c ****                 as published by the Free Software Foundation; either version 2
  14:/Users/Administrator/sos-2x/kernel/malloc.c ****                 of the License, or any later version. This program is 
  15:/Users/Administrator/sos-2x/kernel/malloc.c ****                 distributed in the hope that it will be useful, but WITHOUT 
  16:/Users/Administrator/sos-2x/kernel/malloc.c ****                 ANY WARRANTY; without even the implied warranty of 
  17:/Users/Administrator/sos-2x/kernel/malloc.c ****                 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  18:/Users/Administrator/sos-2x/kernel/malloc.c ****                 GNU General Public License for more details.
  19:/Users/Administrator/sos-2x/kernel/malloc.c **** 
  20:/Users/Administrator/sos-2x/kernel/malloc.c ****   REVISION:     12-6-2005 - version for AVR
  21:/Users/Administrator/sos-2x/kernel/malloc.c ****                   
  22:/Users/Administrator/sos-2x/kernel/malloc.c ****   AUTHOR:       Ron Kreymborg
  23:/Users/Administrator/sos-2x/kernel/malloc.c ****                 Jennaron Research                
  24:/Users/Administrator/sos-2x/kernel/malloc.c ****                 
  25:/Users/Administrator/sos-2x/kernel/malloc.c **** ******************************************************************************/
  26:/Users/Administrator/sos-2x/kernel/malloc.c **** //-----------------------------------------------------------------------------
  27:/Users/Administrator/sos-2x/kernel/malloc.c **** // INCLUDE
  28:/Users/Administrator/sos-2x/kernel/malloc.c **** //-----------------------------------------------------------------------------
  29:/Users/Administrator/sos-2x/kernel/malloc.c **** #include <malloc.h>
  30:/Users/Administrator/sos-2x/kernel/malloc.c **** #include <sos_types.h>
  31:/Users/Administrator/sos-2x/kernel/malloc.c **** #include <sos_module_types.h>
  32:/Users/Administrator/sos-2x/kernel/malloc.c **** #include <sos_sched.h>
  33:/Users/Administrator/sos-2x/kernel/malloc.c **** #include <malloc_conf.h>
  34:/Users/Administrator/sos-2x/kernel/malloc.c **** #include <string.h>
  35:/Users/Administrator/sos-2x/kernel/malloc.c **** #include <sos_timer.h>
  36:/Users/Administrator/sos-2x/kernel/malloc.c **** #include <stdlib.h>
  37:/Users/Administrator/sos-2x/kernel/malloc.c **** #include <sos_logging.h>
  38:/Users/Administrator/sos-2x/kernel/malloc.c **** #include <message_queue.h>
  39:/Users/Administrator/sos-2x/kernel/malloc.c **** #include <hardware.h>
  40:/Users/Administrator/sos-2x/kernel/malloc.c **** 
  41:/Users/Administrator/sos-2x/kernel/malloc.c **** #if defined (SOS_UART_CHANNEL)
  42:/Users/Administrator/sos-2x/kernel/malloc.c **** #include <sos_uart.h>
  43:/Users/Administrator/sos-2x/kernel/malloc.c **** #include <sos_uart_mgr.h>
  44:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif
  45:/Users/Administrator/sos-2x/kernel/malloc.c **** 
  46:/Users/Administrator/sos-2x/kernel/malloc.c **** #if defined (SOS_I2C_CHANNEL)                                
  47:/Users/Administrator/sos-2x/kernel/malloc.c **** #include <sos_i2c.h>                                         
  48:/Users/Administrator/sos-2x/kernel/malloc.c **** #include <sos_i2c_mgr.h>                                     
  49:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif    
  50:/Users/Administrator/sos-2x/kernel/malloc.c **** 
  51:/Users/Administrator/sos-2x/kernel/malloc.c **** // SFI Mode Includes
  52:/Users/Administrator/sos-2x/kernel/malloc.c **** #ifdef SOS_SFI
  53:/Users/Administrator/sos-2x/kernel/malloc.c **** #include <memmap.h>          // Memmory Map AOI
  54:/Users/Administrator/sos-2x/kernel/malloc.c **** #include <sfi_jumptable.h>   // sfi_get_domain_id
  55:/Users/Administrator/sos-2x/kernel/malloc.c **** #include <sfi_exception.h>   // sfi_exception
  56:/Users/Administrator/sos-2x/kernel/malloc.c **** #include <cross_domain_cf.h> // curr_dom_id
  57:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif
  58:/Users/Administrator/sos-2x/kernel/malloc.c **** 
  59:/Users/Administrator/sos-2x/kernel/malloc.c **** //-----------------------------------------------------------------------------
  60:/Users/Administrator/sos-2x/kernel/malloc.c **** // DEBUG
  61:/Users/Administrator/sos-2x/kernel/malloc.c **** //-----------------------------------------------------------------------------
  62:/Users/Administrator/sos-2x/kernel/malloc.c **** //#define SOS_PROFILE_FRAGMENTATION
  63:/Users/Administrator/sos-2x/kernel/malloc.c **** #define LED_DEBUG
  64:/Users/Administrator/sos-2x/kernel/malloc.c **** #include <led_dbg.h>
  65:/Users/Administrator/sos-2x/kernel/malloc.c **** //#define SOS_DEBUG_MALLOC
  66:/Users/Administrator/sos-2x/kernel/malloc.c **** #ifndef SOS_DEBUG_MALLOC
  67:/Users/Administrator/sos-2x/kernel/malloc.c **** #undef DEBUG
  68:/Users/Administrator/sos-2x/kernel/malloc.c **** #define DEBUG(...)
  69:/Users/Administrator/sos-2x/kernel/malloc.c **** #undef DEBUG_PID
  70:/Users/Administrator/sos-2x/kernel/malloc.c **** #define DEBUG_PID(...)
  71:/Users/Administrator/sos-2x/kernel/malloc.c **** #define printMem(...)
  72:/Users/Administrator/sos-2x/kernel/malloc.c **** #else
  73:/Users/Administrator/sos-2x/kernel/malloc.c **** static void printMem(char*);
  74:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif
  75:/Users/Administrator/sos-2x/kernel/malloc.c **** 
  76:/Users/Administrator/sos-2x/kernel/malloc.c **** #ifdef SOS_DEBUG_GC
  77:/Users/Administrator/sos-2x/kernel/malloc.c **** #define DEBUG_GC(arg...)  printf(arg)
  78:/Users/Administrator/sos-2x/kernel/malloc.c **** #else
  79:/Users/Administrator/sos-2x/kernel/malloc.c **** #define DEBUG_GC(...)
  80:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif
  81:/Users/Administrator/sos-2x/kernel/malloc.c **** 
  82:/Users/Administrator/sos-2x/kernel/malloc.c **** //-----------------------------------------------------------------------------
  83:/Users/Administrator/sos-2x/kernel/malloc.c **** // CONSTANTS
  84:/Users/Administrator/sos-2x/kernel/malloc.c **** //-----------------------------------------------------------------------------
  85:/Users/Administrator/sos-2x/kernel/malloc.c **** #define MEM_GC_PERIOD       (10 * 1024L)
  86:/Users/Administrator/sos-2x/kernel/malloc.c **** #define MEM_MOD_GC_STACK_SIZE    16
  87:/Users/Administrator/sos-2x/kernel/malloc.c **** #define RESERVED            0x8000          // must set the msb of BlockSizeType
  88:/Users/Administrator/sos-2x/kernel/malloc.c **** #define GC_MARK             0x4000
  89:/Users/Administrator/sos-2x/kernel/malloc.c **** #define MEM_MASK            (RESERVED | GC_MARK)
  90:/Users/Administrator/sos-2x/kernel/malloc.c **** #ifndef SOS_SFI
  91:/Users/Administrator/sos-2x/kernel/malloc.c **** #define BLOCKOVERHEAD (sizeof(BlockHeaderType) + 1) // The extra byte is for the guard byte
  92:/Users/Administrator/sos-2x/kernel/malloc.c **** #else
  93:/Users/Administrator/sos-2x/kernel/malloc.c **** #define BLOCKOVERHEAD (sizeof(BlockHeaderType)) 
  94:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif
  95:/Users/Administrator/sos-2x/kernel/malloc.c **** 
  96:/Users/Administrator/sos-2x/kernel/malloc.c **** //-----------------------------------------------------------------------------
  97:/Users/Administrator/sos-2x/kernel/malloc.c **** // MACROS
  98:/Users/Administrator/sos-2x/kernel/malloc.c **** //-----------------------------------------------------------------------------
  99:/Users/Administrator/sos-2x/kernel/malloc.c **** #define TO_BLOCK_PTR(p)     (Block*)((BlockHeaderType*)p - 1)
 100:/Users/Administrator/sos-2x/kernel/malloc.c **** #define BLOCKS_TO_BYTES(n)  (((n & ~MEM_MASK) << SHIFT_VALUE) - sizeof(BlockHeaderType))
 101:/Users/Administrator/sos-2x/kernel/malloc.c **** #ifndef SOS_SFI
 102:/Users/Administrator/sos-2x/kernel/malloc.c **** #define BLOCK_GUARD_BYTE(p) (*((uint8_t*)((uint8_t*)((Block*)p + (p->blockhdr.blocks & ~MEM_MASK)))
 103:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif
 104:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 105:/Users/Administrator/sos-2x/kernel/malloc.c **** //-----------------------------------------------------------------------------
 106:/Users/Administrator/sos-2x/kernel/malloc.c **** // DATA STRUCTURES
 107:/Users/Administrator/sos-2x/kernel/malloc.c **** //-----------------------------------------------------------------------------
 108:/Users/Administrator/sos-2x/kernel/malloc.c **** // A memory block is made up of a header and either a user data part or a pair
 109:/Users/Administrator/sos-2x/kernel/malloc.c **** // of pointers to the previous and next free area. A memory area is made up
 110:/Users/Administrator/sos-2x/kernel/malloc.c **** // of one or more of these blocks. Only the first block will have the header.
 111:/Users/Administrator/sos-2x/kernel/malloc.c **** // The header contains the number of blocks contained within the area.
 112:/Users/Administrator/sos-2x/kernel/malloc.c **** //
 113:/Users/Administrator/sos-2x/kernel/malloc.c **** typedef struct _BlockHeaderType
 114:/Users/Administrator/sos-2x/kernel/malloc.c **** {
 115:/Users/Administrator/sos-2x/kernel/malloc.c ****   uint16_t blocks;
 116:/Users/Administrator/sos-2x/kernel/malloc.c ****   uint8_t  owner;
 117:/Users/Administrator/sos-2x/kernel/malloc.c **** } BlockHeaderType;
 118:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 119:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 120:/Users/Administrator/sos-2x/kernel/malloc.c **** typedef struct _Block
 121:/Users/Administrator/sos-2x/kernel/malloc.c **** {
 122:/Users/Administrator/sos-2x/kernel/malloc.c ****   BlockHeaderType blockhdr;
 123:/Users/Administrator/sos-2x/kernel/malloc.c ****   union
 124:/Users/Administrator/sos-2x/kernel/malloc.c ****   {
 125:/Users/Administrator/sos-2x/kernel/malloc.c ****     uint8_t userPart[BLOCK_SIZE - sizeof(BlockHeaderType)];
 126:/Users/Administrator/sos-2x/kernel/malloc.c ****     struct 
 127:/Users/Administrator/sos-2x/kernel/malloc.c ****     {
 128:/Users/Administrator/sos-2x/kernel/malloc.c ****       struct _Block *prev;
 129:/Users/Administrator/sos-2x/kernel/malloc.c ****       struct _Block *next;
 130:/Users/Administrator/sos-2x/kernel/malloc.c ****     };
 131:/Users/Administrator/sos-2x/kernel/malloc.c ****   };
 132:/Users/Administrator/sos-2x/kernel/malloc.c **** } Block;
 133:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 134:/Users/Administrator/sos-2x/kernel/malloc.c **** //-----------------------------------------------------------------------------
 135:/Users/Administrator/sos-2x/kernel/malloc.c **** // LOCAL FUNCTIONS
 136:/Users/Administrator/sos-2x/kernel/malloc.c **** //-----------------------------------------------------------------------------
 137:/Users/Administrator/sos-2x/kernel/malloc.c **** static void InsertAfter(Block*);
 138:/Users/Administrator/sos-2x/kernel/malloc.c **** static void Unlink(Block*);
 139:/Users/Administrator/sos-2x/kernel/malloc.c **** static Block* MergeBlocks(Block* block);
 140:/Users/Administrator/sos-2x/kernel/malloc.c **** static Block* MergeBlocksQuick(Block *block, uint16_t req_blocks);
 141:/Users/Administrator/sos-2x/kernel/malloc.c **** static void SplitBlock(Block* block, uint16_t reqBlocks);
 142:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 143:/Users/Administrator/sos-2x/kernel/malloc.c **** //-----------------------------------------------------------------------------
 144:/Users/Administrator/sos-2x/kernel/malloc.c **** // LOCAL VARIABLES
 145:/Users/Administrator/sos-2x/kernel/malloc.c **** //-----------------------------------------------------------------------------
 146:/Users/Administrator/sos-2x/kernel/malloc.c **** #ifdef SOS_PROFILE_FRAGMENTATION
 147:/Users/Administrator/sos-2x/kernel/malloc.c **** typedef struct malloc_frag_t {
 148:/Users/Administrator/sos-2x/kernel/malloc.c **** 	uint16_t malloc_efrag;      // external fragmentation
 149:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 150:/Users/Administrator/sos-2x/kernel/malloc.c **** 	uint16_t malloc_ifrag;      // internal fragmentation
 151:/Users/Administrator/sos-2x/kernel/malloc.c **** 	uint16_t num_blocks;        // num_blocks allocated so far
 152:/Users/Administrator/sos-2x/kernel/malloc.c **** 	uint16_t alloc;             // memory size for current allocation
 153:/Users/Administrator/sos-2x/kernel/malloc.c **** 	uint16_t num_outstanding;   // number of outstanding memory
 154:/Users/Administrator/sos-2x/kernel/malloc.c **** 	uint16_t gc_bytes;          // number of bytes GC sweep
 155:/Users/Administrator/sos-2x/kernel/malloc.c **** 	uint8_t alloc_pid;          // the ID that allocates the memory
 156:/Users/Administrator/sos-2x/kernel/malloc.c **** 	uint16_t ptr_alloc;         // memory allocated
 157:/Users/Administrator/sos-2x/kernel/malloc.c **** 	uint16_t ptr_free;          // memory freed
 158:/Users/Administrator/sos-2x/kernel/malloc.c **** 	uint16_t ker_gc_bytes;      // kernel memory GCed
 159:/Users/Administrator/sos-2x/kernel/malloc.c **** 	uint8_t leak_pid;           // the module that leaks memory
 160:/Users/Administrator/sos-2x/kernel/malloc.c **** } PACK_STRUCT 
 161:/Users/Administrator/sos-2x/kernel/malloc.c **** malloc_frag_t;
 162:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 163:/Users/Administrator/sos-2x/kernel/malloc.c **** static malloc_frag_t mf;
 164:/Users/Administrator/sos-2x/kernel/malloc.c **** static uint16_t ker_gc_bytes_temp;
 165:/Users/Administrator/sos-2x/kernel/malloc.c **** static inline void malloc_record_efrag(uint16_t b);
 166:/Users/Administrator/sos-2x/kernel/malloc.c **** static inline void malloc_record_ifrag(Block *b, uint16_t size, sos_pid_t id);
 167:/Users/Administrator/sos-2x/kernel/malloc.c **** static inline void malloc_record_blocks(int16_t blks);
 168:/Users/Administrator/sos-2x/kernel/malloc.c **** static inline void malloc_record_outstanding(int8_t alloc);
 169:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif
 170:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 171:/Users/Administrator/sos-2x/kernel/malloc.c **** #define NUM_HEAP_BLOCKS  ((MALLOC_HEAP_SIZE + (BLOCK_SIZE - 1))/BLOCK_SIZE)
 172:/Users/Administrator/sos-2x/kernel/malloc.c **** static Block*           mPool;
 173:/Users/Administrator/sos-2x/kernel/malloc.c **** static Block*           mSentinel;
 174:/Users/Administrator/sos-2x/kernel/malloc.c **** static Block            malloc_heap[NUM_HEAP_BLOCKS] SOS_HEAP_SECTION;
 175:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 176:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 177:/Users/Administrator/sos-2x/kernel/malloc.c **** #ifdef SOS_USE_GC
 178:/Users/Administrator/sos-2x/kernel/malloc.c **** static int8_t mem_handler(void *state, Message *msg);
 179:/Users/Administrator/sos-2x/kernel/malloc.c **** #ifndef SOS_USE_PREEMPTION
 180:/Users/Administrator/sos-2x/kernel/malloc.c **** static sos_module_t malloc_module;
 181:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif // SOS_USE_PREEMPTION
 182:/Users/Administrator/sos-2x/kernel/malloc.c **** static mod_header_t mod_header SOS_MODULE_HEADER ={
 183:/Users/Administrator/sos-2x/kernel/malloc.c ****   mod_id : KER_MEM_PID,
 184:/Users/Administrator/sos-2x/kernel/malloc.c ****   state_size : 0,
 185:/Users/Administrator/sos-2x/kernel/malloc.c ****   num_timers : 1,
 186:/Users/Administrator/sos-2x/kernel/malloc.c ****   num_sub_func : 0,
 187:/Users/Administrator/sos-2x/kernel/malloc.c ****   num_prov_func : 0,
 188:/Users/Administrator/sos-2x/kernel/malloc.c ****   module_handler: mem_handler,
 189:/Users/Administrator/sos-2x/kernel/malloc.c **** };
 190:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif // SOS_USE_GC
 191:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 192:/Users/Administrator/sos-2x/kernel/malloc.c **** #ifdef AVRORA_PLATFORM
 193:/Users/Administrator/sos-2x/kernel/malloc.c **** //static uint8_t avrora_buf[100];
 194:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 195:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif
 196:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 197:/Users/Administrator/sos-2x/kernel/malloc.c **** //-----------------------------------------------------------------------------
 198:/Users/Administrator/sos-2x/kernel/malloc.c **** // Return a pointer to an area of memory that is at least the right size.
 199:/Users/Administrator/sos-2x/kernel/malloc.c **** // SFI Mode: Allocate domain ID based upon requestor pid.
 200:/Users/Administrator/sos-2x/kernel/malloc.c **** //-----------------------------------------------------------------------------
 201:/Users/Administrator/sos-2x/kernel/malloc.c **** void* sos_blk_mem_longterm_alloc(uint16_t size, sos_pid_t id, bool bCallFromModule)
 202:/Users/Administrator/sos-2x/kernel/malloc.c **** {
 203:/Users/Administrator/sos-2x/kernel/malloc.c **** 	HAS_CRITICAL_SECTION;
 204:/Users/Administrator/sos-2x/kernel/malloc.c **** 	uint16_t reqBlocks;
 205:/Users/Administrator/sos-2x/kernel/malloc.c **** 	Block* block;
 206:/Users/Administrator/sos-2x/kernel/malloc.c **** 	Block* max_block = NULL;
 207:/Users/Administrator/sos-2x/kernel/malloc.c **** 	Block* newBlock;
 208:/Users/Administrator/sos-2x/kernel/malloc.c **** #ifdef SOS_SFI
 209:/Users/Administrator/sos-2x/kernel/malloc.c **** 	int8_t domid;
 210:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif
 211:/Users/Administrator/sos-2x/kernel/malloc.c **** #ifdef SOS_PROFILE_FRAGMENTATION
 212:/Users/Administrator/sos-2x/kernel/malloc.c **** 	uint16_t efrag = 0;
 213:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif
 214:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 215:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 216:/Users/Administrator/sos-2x/kernel/malloc.c **** 	if (size == 0) { return NULL; }
 217:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 218:/Users/Administrator/sos-2x/kernel/malloc.c **** 	printMem("malloc_longterm begin: ");
 219:/Users/Administrator/sos-2x/kernel/malloc.c **** 	reqBlocks = (size + BLOCKOVERHEAD + sizeof(Block) - 1) >> SHIFT_VALUE;
 220:/Users/Administrator/sos-2x/kernel/malloc.c **** 	ENTER_CRITICAL_SECTION();
 221:/Users/Administrator/sos-2x/kernel/malloc.c **** 	// First defragment the memory
 222:/Users/Administrator/sos-2x/kernel/malloc.c **** 	for (block = mSentinel->next; block != mSentinel; block = block->next) {
 223:/Users/Administrator/sos-2x/kernel/malloc.c **** 		block = MergeBlocks(block);
 224:/Users/Administrator/sos-2x/kernel/malloc.c **** 	}
 225:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 226:/Users/Administrator/sos-2x/kernel/malloc.c **** 	// Find the block that has largest address and larger than request
 227:/Users/Administrator/sos-2x/kernel/malloc.c **** 	for (block = mSentinel->next; block != mSentinel; block = block->next) {
 228:/Users/Administrator/sos-2x/kernel/malloc.c **** 		if( (block > max_block) &&  (block->blockhdr.blocks >= reqBlocks) ) {
 229:/Users/Administrator/sos-2x/kernel/malloc.c **** 			max_block = block;
 230:/Users/Administrator/sos-2x/kernel/malloc.c **** 		}
 231:/Users/Administrator/sos-2x/kernel/malloc.c **** 	}
 232:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 233:/Users/Administrator/sos-2x/kernel/malloc.c **** #ifdef SOS_PROFILE_FRAGMENTATION
 234:/Users/Administrator/sos-2x/kernel/malloc.c **** 	// Record external fragmentation
 235:/Users/Administrator/sos-2x/kernel/malloc.c **** 	for (block = max_block->next; block != mSentinel; block = block->next) {
 236:/Users/Administrator/sos-2x/kernel/malloc.c **** 		efrag += block->blockhdr.blocks;
 237:/Users/Administrator/sos-2x/kernel/malloc.c **** 	}	
 238:/Users/Administrator/sos-2x/kernel/malloc.c **** 	malloc_record_efrag( efrag );
 239:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif
 240:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 241:/Users/Administrator/sos-2x/kernel/malloc.c **** 	if( max_block == NULL ) {
 242:/Users/Administrator/sos-2x/kernel/malloc.c **** 		printMem("Malloc Failed!!!: ");
 243:/Users/Administrator/sos-2x/kernel/malloc.c **** 		LEAVE_CRITICAL_SECTION();
 244:/Users/Administrator/sos-2x/kernel/malloc.c **** 		return NULL;
 245:/Users/Administrator/sos-2x/kernel/malloc.c **** 	}
 246:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 247:/Users/Administrator/sos-2x/kernel/malloc.c **** 	// Now take the tail of this block
 248:/Users/Administrator/sos-2x/kernel/malloc.c **** 	newBlock = max_block + (max_block->blockhdr.blocks - reqBlocks);
 249:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 250:/Users/Administrator/sos-2x/kernel/malloc.c **** 	if( newBlock == max_block ) {
 251:/Users/Administrator/sos-2x/kernel/malloc.c **** 		Unlink(newBlock);
 252:/Users/Administrator/sos-2x/kernel/malloc.c **** 	} else {
 253:/Users/Administrator/sos-2x/kernel/malloc.c **** 		// otherwise we just steal the tail by reducing the size
 254:/Users/Administrator/sos-2x/kernel/malloc.c **** 		max_block->blockhdr.blocks -= reqBlocks;
 255:/Users/Administrator/sos-2x/kernel/malloc.c **** 		newBlock->blockhdr.blocks = reqBlocks;
 256:/Users/Administrator/sos-2x/kernel/malloc.c **** 	}
 257:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 258:/Users/Administrator/sos-2x/kernel/malloc.c **** #ifdef SOS_PROFILE_FRAGMENTATION
 259:/Users/Administrator/sos-2x/kernel/malloc.c **** 	// Record internal fragmentation
 260:/Users/Administrator/sos-2x/kernel/malloc.c **** 	malloc_record_ifrag(newBlock, size, id);
 261:/Users/Administrator/sos-2x/kernel/malloc.c **** 	malloc_record_blocks(newBlock->blockhdr.blocks);
 262:/Users/Administrator/sos-2x/kernel/malloc.c **** 	malloc_record_outstanding(1);
 263:/Users/Administrator/sos-2x/kernel/malloc.c **** 	mf.ptr_alloc = (uint16_t)newBlock->userPart;
 264:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif
 265:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 266:/Users/Administrator/sos-2x/kernel/malloc.c **** 	// Mark newBlock as reserved
 267:/Users/Administrator/sos-2x/kernel/malloc.c **** 	//
 268:/Users/Administrator/sos-2x/kernel/malloc.c **** 	newBlock->blockhdr.blocks |= RESERVED;
 269:/Users/Administrator/sos-2x/kernel/malloc.c **** 	newBlock->blockhdr.owner = id;
 270:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 271:/Users/Administrator/sos-2x/kernel/malloc.c **** #ifdef SOS_SFI
 272:/Users/Administrator/sos-2x/kernel/malloc.c **** 	domid = sfi_get_domain_id(id);
 273:/Users/Administrator/sos-2x/kernel/malloc.c **** 	memmap_set_perms((void*) newBlock, sizeof(Block), DOM_SEG_START(domid));
 274:/Users/Administrator/sos-2x/kernel/malloc.c **** 	memmap_set_perms((void*) ((Block*)(newBlock + 1)), sizeof(Block) * (reqBlocks - 1), DOM_SEG_LATER(
 275:/Users/Administrator/sos-2x/kernel/malloc.c **** #else
 276:/Users/Administrator/sos-2x/kernel/malloc.c **** 	BLOCK_GUARD_BYTE(newBlock) = id;
 277:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif
 278:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 279:/Users/Administrator/sos-2x/kernel/malloc.c **** 	printMem("malloc_longterm end: ");
 280:/Users/Administrator/sos-2x/kernel/malloc.c **** 	LEAVE_CRITICAL_SECTION();
 281:/Users/Administrator/sos-2x/kernel/malloc.c **** 	ker_log( SOS_LOG_MALLOC, id, reqBlocks );
 282:/Users/Administrator/sos-2x/kernel/malloc.c **** 	return newBlock->userPart;
 283:/Users/Administrator/sos-2x/kernel/malloc.c **** }
 284:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 285:/Users/Administrator/sos-2x/kernel/malloc.c **** //-----------------------------------------------------------------------------
 286:/Users/Administrator/sos-2x/kernel/malloc.c **** // Malloc Function
 287:/Users/Administrator/sos-2x/kernel/malloc.c **** // SFI Mode: Allocate domain ID based upon requestor pid
 288:/Users/Administrator/sos-2x/kernel/malloc.c **** //-----------------------------------------------------------------------------
 289:/Users/Administrator/sos-2x/kernel/malloc.c **** void* sos_blk_mem_alloc(uint16_t size, sos_pid_t id, bool bCallFromModule)
 290:/Users/Administrator/sos-2x/kernel/malloc.c **** {
 291:/Users/Administrator/sos-2x/kernel/malloc.c **** 	HAS_CRITICAL_SECTION;
 292:/Users/Administrator/sos-2x/kernel/malloc.c **** 	uint16_t reqBlocks;
 293:/Users/Administrator/sos-2x/kernel/malloc.c **** 	Block* block;
 294:/Users/Administrator/sos-2x/kernel/malloc.c **** #ifdef SOS_SFI
 295:/Users/Administrator/sos-2x/kernel/malloc.c **** 	int8_t domid;
 296:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif
 297:/Users/Administrator/sos-2x/kernel/malloc.c **** #ifdef SOS_PROFILE_FRAGMENTATION
 298:/Users/Administrator/sos-2x/kernel/malloc.c **** 	uint16_t efrag = 0;
 299:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif
 300:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 301:/Users/Administrator/sos-2x/kernel/malloc.c **** 	// Check for errors.
 302:/Users/Administrator/sos-2x/kernel/malloc.c **** 	if (size == 0) return NULL;
 303:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 304:/Users/Administrator/sos-2x/kernel/malloc.c **** 	// Compute the number of blocks to satisfy the request.
 305:/Users/Administrator/sos-2x/kernel/malloc.c **** 	reqBlocks = (size + BLOCKOVERHEAD + sizeof(Block) - 1) >> SHIFT_VALUE;
 306:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 307:/Users/Administrator/sos-2x/kernel/malloc.c **** 	//DEBUG("sizeof(BlockHeaderType) = %d, sizeof(block) = %d\n", sizeof(BlockHeaderType), sizeof(Bloc
 308:/Users/Administrator/sos-2x/kernel/malloc.c **** 	//DEBUG("req size = %d, reqBlocks = %d\n", size, reqBlocks);
 309:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 310:/Users/Administrator/sos-2x/kernel/malloc.c **** 	ENTER_CRITICAL_SECTION();
 311:/Users/Administrator/sos-2x/kernel/malloc.c **** 	//verify_memory();
 312:/Users/Administrator/sos-2x/kernel/malloc.c **** 	// Traverse the free list looking for the first block that will fit the
 313:/Users/Administrator/sos-2x/kernel/malloc.c **** 	// request. This is a "first-fit" strategy.
 314:/Users/Administrator/sos-2x/kernel/malloc.c **** 	//
 315:/Users/Administrator/sos-2x/kernel/malloc.c **** 	printMem("malloc_start: ");
 316:/Users/Administrator/sos-2x/kernel/malloc.c **** 	for (block = mSentinel->next; block != mSentinel; block = block->next)
 317:/Users/Administrator/sos-2x/kernel/malloc.c **** 	{
 318:/Users/Administrator/sos-2x/kernel/malloc.c **** 		block = MergeBlocksQuick(block, reqBlocks);
 319:/Users/Administrator/sos-2x/kernel/malloc.c **** 		// Is this free area (which could have just expanded somewhat)
 320:/Users/Administrator/sos-2x/kernel/malloc.c **** 		// large enough to satisfy the request.
 321:/Users/Administrator/sos-2x/kernel/malloc.c **** 		//
 322:/Users/Administrator/sos-2x/kernel/malloc.c **** 		if (block->blockhdr.blocks >= reqBlocks)
 323:/Users/Administrator/sos-2x/kernel/malloc.c ****         {
 324:/Users/Administrator/sos-2x/kernel/malloc.c **** 			break;
 325:/Users/Administrator/sos-2x/kernel/malloc.c ****         }
 326:/Users/Administrator/sos-2x/kernel/malloc.c **** #ifdef SOS_PROFILE_FRAGMENTATION
 327:/Users/Administrator/sos-2x/kernel/malloc.c **** 		//
 328:/Users/Administrator/sos-2x/kernel/malloc.c **** 		// otherwise it is an external fragmentation
 329:/Users/Administrator/sos-2x/kernel/malloc.c **** 		efrag += block->blockhdr.blocks;
 330:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif
 331:/Users/Administrator/sos-2x/kernel/malloc.c ****     }
 332:/Users/Administrator/sos-2x/kernel/malloc.c **** #ifdef SOS_PROFILE_FRAGMENTATION
 333:/Users/Administrator/sos-2x/kernel/malloc.c **** 	malloc_record_efrag( efrag );
 334:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif
 335:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 336:/Users/Administrator/sos-2x/kernel/malloc.c ****   // If we are pointing at the sentinel then all blocks are allocated.
 337:/Users/Administrator/sos-2x/kernel/malloc.c ****   //
 338:/Users/Administrator/sos-2x/kernel/malloc.c ****   if (block == mSentinel)
 339:/Users/Administrator/sos-2x/kernel/malloc.c ****     {
 340:/Users/Administrator/sos-2x/kernel/malloc.c ****       printMem("Malloc Failed!!!: ");
 341:/Users/Administrator/sos-2x/kernel/malloc.c ****       LEAVE_CRITICAL_SECTION();
 342:/Users/Administrator/sos-2x/kernel/malloc.c ****       return NULL;
 343:/Users/Administrator/sos-2x/kernel/malloc.c ****     }
 344:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 345:/Users/Administrator/sos-2x/kernel/malloc.c ****   // If this free area is larger than required, it is split in two. The
 346:/Users/Administrator/sos-2x/kernel/malloc.c ****   // size of the first area is set to that required and the second area
 347:/Users/Administrator/sos-2x/kernel/malloc.c ****   // to the blocks remaining. The second area is then inserted into 
 348:/Users/Administrator/sos-2x/kernel/malloc.c ****   // the free list.
 349:/Users/Administrator/sos-2x/kernel/malloc.c ****   //
 350:/Users/Administrator/sos-2x/kernel/malloc.c ****   if (block->blockhdr.blocks > reqBlocks)
 351:/Users/Administrator/sos-2x/kernel/malloc.c ****     {
 352:/Users/Administrator/sos-2x/kernel/malloc.c ****       SplitBlock(block, reqBlocks);
 353:/Users/Administrator/sos-2x/kernel/malloc.c ****     }
 354:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 355:/Users/Administrator/sos-2x/kernel/malloc.c ****   // Unlink the now correctly sized area from the free list and mark it 
 356:/Users/Administrator/sos-2x/kernel/malloc.c ****   // as reserved.
 357:/Users/Administrator/sos-2x/kernel/malloc.c ****   //
 358:/Users/Administrator/sos-2x/kernel/malloc.c ****   Unlink(block);
 359:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 360:/Users/Administrator/sos-2x/kernel/malloc.c **** #ifdef SOS_PROFILE_FRAGMENTATION
 361:/Users/Administrator/sos-2x/kernel/malloc.c **** 	// Record internal fragmentation
 362:/Users/Administrator/sos-2x/kernel/malloc.c **** 	malloc_record_ifrag(block, size, id);
 363:/Users/Administrator/sos-2x/kernel/malloc.c **** 	malloc_record_blocks(block->blockhdr.blocks);
 364:/Users/Administrator/sos-2x/kernel/malloc.c **** 	malloc_record_outstanding(1);
 365:/Users/Administrator/sos-2x/kernel/malloc.c **** 	mf.ptr_alloc = (uint16_t)block->userPart;
 366:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif
 367:/Users/Administrator/sos-2x/kernel/malloc.c ****   
 368:/Users/Administrator/sos-2x/kernel/malloc.c ****   block->blockhdr.blocks |= RESERVED;
 369:/Users/Administrator/sos-2x/kernel/malloc.c ****   block->blockhdr.owner = id;
 370:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 371:/Users/Administrator/sos-2x/kernel/malloc.c **** #ifdef SOS_SFI
 372:/Users/Administrator/sos-2x/kernel/malloc.c ****   domid = sfi_get_domain_id(id);
 373:/Users/Administrator/sos-2x/kernel/malloc.c ****   memmap_set_perms((void*) block, sizeof(Block), DOM_SEG_START(domid));
 374:/Users/Administrator/sos-2x/kernel/malloc.c ****   memmap_set_perms((void*) ((Block*)(block + 1)), sizeof(Block) * (reqBlocks - 1), DOM_SEG_LATER(do
 375:/Users/Administrator/sos-2x/kernel/malloc.c **** #else                           
 376:/Users/Administrator/sos-2x/kernel/malloc.c ****   BLOCK_GUARD_BYTE(block) = id; 
 377:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif
 378:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 379:/Users/Administrator/sos-2x/kernel/malloc.c ****   printMem("malloc_end: ");
 380:/Users/Administrator/sos-2x/kernel/malloc.c ****   LEAVE_CRITICAL_SECTION();
 381:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 382:/Users/Administrator/sos-2x/kernel/malloc.c ****   ker_log( SOS_LOG_MALLOC, id, reqBlocks );
 383:/Users/Administrator/sos-2x/kernel/malloc.c ****   return block->userPart;
 384:/Users/Administrator/sos-2x/kernel/malloc.c **** }
 385:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 386:/Users/Administrator/sos-2x/kernel/malloc.c **** //-----------------------------------------------------------------------------
 387:/Users/Administrator/sos-2x/kernel/malloc.c **** // Return this memory block to the free list.
 388:/Users/Administrator/sos-2x/kernel/malloc.c **** // SFI Mode: 1. If call comes from un-trusted domain, then free only if current domain is owner
 389:/Users/Administrator/sos-2x/kernel/malloc.c **** //           2. Block being freed should be start of segment
 390:/Users/Administrator/sos-2x/kernel/malloc.c **** //-----------------------------------------------------------------------------
 391:/Users/Administrator/sos-2x/kernel/malloc.c **** void sos_blk_mem_free(void* pntr, bool bCallFromModule)
 392:/Users/Administrator/sos-2x/kernel/malloc.c **** {
 393:/Users/Administrator/sos-2x/kernel/malloc.c **** 	uint16_t freed_blocks;
 394:/Users/Administrator/sos-2x/kernel/malloc.c **** 	sos_pid_t owner;
 395:/Users/Administrator/sos-2x/kernel/malloc.c **** #ifdef SOS_SFI
 396:/Users/Administrator/sos-2x/kernel/malloc.c ****   uint16_t block_num;
 397:/Users/Administrator/sos-2x/kernel/malloc.c ****   uint8_t perms;
 398:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif
 399:/Users/Administrator/sos-2x/kernel/malloc.c ****   HAS_CRITICAL_SECTION;
 400:/Users/Administrator/sos-2x/kernel/malloc.c ****   // Check for errors.
 401:/Users/Administrator/sos-2x/kernel/malloc.c ****   //
 402:/Users/Administrator/sos-2x/kernel/malloc.c ****   Block* baseArea;   // convert to a block address
 403:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 404:/Users/Administrator/sos-2x/kernel/malloc.c ****   if( pntr == NULL ) {
 405:/Users/Administrator/sos-2x/kernel/malloc.c ****     return;
 406:/Users/Administrator/sos-2x/kernel/malloc.c ****   }
 407:/Users/Administrator/sos-2x/kernel/malloc.c ****   baseArea = TO_BLOCK_PTR(pntr);   // convert to a block address
 408:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 409:/Users/Administrator/sos-2x/kernel/malloc.c ****   if ( (baseArea < malloc_heap) || (baseArea >= (malloc_heap + NUM_HEAP_BLOCKS)) ) {
 410:/Users/Administrator/sos-2x/kernel/malloc.c ****     DEBUG("sos_blk_mem_free: try to free invalid memory\n");
 411:/Users/Administrator/sos-2x/kernel/malloc.c ****     DEBUG("possible owner %d %d\n", baseArea->blockhdr.owner, BLOCK_GUARD_BYTE(baseArea));
 412:/Users/Administrator/sos-2x/kernel/malloc.c ****     return;
 413:/Users/Administrator/sos-2x/kernel/malloc.c ****   }
 414:/Users/Administrator/sos-2x/kernel/malloc.c ****   
 415:/Users/Administrator/sos-2x/kernel/malloc.c **** #ifdef SOS_SFI
 416:/Users/Administrator/sos-2x/kernel/malloc.c ****   ENTER_CRITICAL_SECTION();
 417:/Users/Administrator/sos-2x/kernel/malloc.c ****   // Get the permission of the first block
 418:/Users/Administrator/sos-2x/kernel/malloc.c ****   block_num = MEMMAP_GET_BLK_NUM(baseArea);
 419:/Users/Administrator/sos-2x/kernel/malloc.c ****   MEMMAP_GET_PERMS(block_num, perms);
 420:/Users/Administrator/sos-2x/kernel/malloc.c ****   // Check - Not a start of segment
 421:/Users/Administrator/sos-2x/kernel/malloc.c ****   if ((perms & MEMMAP_SEG_MASK) == MEMMAP_SEG_LATER) {
 422:/Users/Administrator/sos-2x/kernel/malloc.c ****     LEAVE_CRITICAL_SECTION();
 423:/Users/Administrator/sos-2x/kernel/malloc.c ****     sfi_exception(MALLOC_EXCEPTION);
 424:/Users/Administrator/sos-2x/kernel/malloc.c ****     return; 
 425:/Users/Administrator/sos-2x/kernel/malloc.c ****   }
 426:/Users/Administrator/sos-2x/kernel/malloc.c ****   // Check - Untrusted domain trying to free memory that it does not own or that is free.
 427:/Users/Administrator/sos-2x/kernel/malloc.c **** #ifdef SFI_DOMS_8
 428:/Users/Administrator/sos-2x/kernel/malloc.c ****   if ((bCallFromModule) && ((perms & MEMMAP_DOM_MASK) != curr_dom_id))
 429:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif
 430:/Users/Administrator/sos-2x/kernel/malloc.c **** #ifdef SFI_DOMS_2
 431:/Users/Administrator/sos-2x/kernel/malloc.c ****   if ((bCallFromModule) && ((perms & MEMMAP_DOM_MASK) == KER_DOM_ID))
 432:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif
 433:/Users/Administrator/sos-2x/kernel/malloc.c ****     {
 434:/Users/Administrator/sos-2x/kernel/malloc.c ****       LEAVE_CRITICAL_SECTION();
 435:/Users/Administrator/sos-2x/kernel/malloc.c ****       sfi_exception(MALLOC_EXCEPTION);
 436:/Users/Administrator/sos-2x/kernel/malloc.c ****       return; 
 437:/Users/Administrator/sos-2x/kernel/malloc.c ****     }
 438:/Users/Administrator/sos-2x/kernel/malloc.c **** #else
 439:/Users/Administrator/sos-2x/kernel/malloc.c ****   // Check for memory corruption
 440:/Users/Administrator/sos-2x/kernel/malloc.c ****   if (baseArea->blockhdr.owner != BLOCK_GUARD_BYTE(baseArea)){
 441:/Users/Administrator/sos-2x/kernel/malloc.c ****     DEBUG("sos_blk_mem_free: detect memory corruption\n");
 442:/Users/Administrator/sos-2x/kernel/malloc.c ****     DEBUG("possible owner %d %d\n", baseArea->blockhdr.owner, BLOCK_GUARD_BYTE(baseArea));
 443:/Users/Administrator/sos-2x/kernel/malloc.c ****     return;
 444:/Users/Administrator/sos-2x/kernel/malloc.c ****   }
 445:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif
 446:/Users/Administrator/sos-2x/kernel/malloc.c ****   
 447:/Users/Administrator/sos-2x/kernel/malloc.c ****   // Very simple - we insert the area to be freed at the start
 448:/Users/Administrator/sos-2x/kernel/malloc.c ****   // of the free list. This runs in constant time. Since the free
 449:/Users/Administrator/sos-2x/kernel/malloc.c ****   // list is not kept sorted, there is less of a tendency for small
 450:/Users/Administrator/sos-2x/kernel/malloc.c ****   // areas to accumulate at the head of the free list.
 451:/Users/Administrator/sos-2x/kernel/malloc.c ****   //
 452:/Users/Administrator/sos-2x/kernel/malloc.c ****   ENTER_CRITICAL_SECTION();
 453:/Users/Administrator/sos-2x/kernel/malloc.c ****   owner = baseArea->blockhdr.owner;
 454:/Users/Administrator/sos-2x/kernel/malloc.c ****   baseArea->blockhdr.blocks &= ~MEM_MASK;
 455:/Users/Administrator/sos-2x/kernel/malloc.c ****   baseArea->blockhdr.owner = NULL_PID;
 456:/Users/Administrator/sos-2x/kernel/malloc.c ****   freed_blocks = baseArea->blockhdr.blocks;
 457:/Users/Administrator/sos-2x/kernel/malloc.c ****   
 458:/Users/Administrator/sos-2x/kernel/malloc.c **** #ifdef SOS_SFI
 459:/Users/Administrator/sos-2x/kernel/malloc.c ****   MEMMAP_SET_PERMS(block_num, BLOCK_FREE);
 460:/Users/Administrator/sos-2x/kernel/malloc.c ****   memmap_change_perms((void*)((Block*)(baseArea + 1)), 
 461:/Users/Administrator/sos-2x/kernel/malloc.c **** 		      MEMMAP_SEG_MASK|MEMMAP_DOM_MASK, 
 462:/Users/Administrator/sos-2x/kernel/malloc.c **** 		      DOM_SEG_LATER(perms), 
 463:/Users/Administrator/sos-2x/kernel/malloc.c **** 		      BLOCK_FREE);
 464:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif
 465:/Users/Administrator/sos-2x/kernel/malloc.c ****   InsertAfter(baseArea);
 466:/Users/Administrator/sos-2x/kernel/malloc.c ****   printMem("free_end: ");
 467:/Users/Administrator/sos-2x/kernel/malloc.c **** #ifdef SOS_PROFILE_FRAGMENTATION
 468:/Users/Administrator/sos-2x/kernel/malloc.c **** 	mf.ptr_free = (uint16_t)pntr;
 469:/Users/Administrator/sos-2x/kernel/malloc.c **** 	malloc_record_blocks(-1*(int16_t)freed_blocks);
 470:/Users/Administrator/sos-2x/kernel/malloc.c **** 	malloc_record_outstanding(0);
 471:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif
 472:/Users/Administrator/sos-2x/kernel/malloc.c ****   LEAVE_CRITICAL_SECTION();
 473:/Users/Administrator/sos-2x/kernel/malloc.c ****   ker_log( SOS_LOG_FREE, owner, freed_blocks );
 474:/Users/Administrator/sos-2x/kernel/malloc.c ****   return;
 475:/Users/Administrator/sos-2x/kernel/malloc.c **** }
 476:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 477:/Users/Administrator/sos-2x/kernel/malloc.c **** //-----------------------------------------------------------------------------
 478:/Users/Administrator/sos-2x/kernel/malloc.c **** // Change ownership of memory
 479:/Users/Administrator/sos-2x/kernel/malloc.c **** // SFI Mode: 1. If call from un-trusted domain. change permissions only if current domain is block 
 480:/Users/Administrator/sos-2x/kernel/malloc.c **** //           2. If call from trusted domain, everything is fair !!
 481:/Users/Administrator/sos-2x/kernel/malloc.c **** //-----------------------------------------------------------------------------
 482:/Users/Administrator/sos-2x/kernel/malloc.c **** int8_t sos_blk_mem_change_own(void* ptr, sos_pid_t id, bool bCallFromModule) 
 483:/Users/Administrator/sos-2x/kernel/malloc.c **** {
 309               	.LM1:
 310               	/* prologue: frame size=0 */
 311 0000 CF93      		push r28
 312 0002 DF93      		push r29
 313               	/* prologue end (size=2) */
 484:/Users/Administrator/sos-2x/kernel/malloc.c **** #ifdef SOS_SFI
 485:/Users/Administrator/sos-2x/kernel/malloc.c ****   HAS_CRITICAL_SECTION;
 486:/Users/Administrator/sos-2x/kernel/malloc.c ****   uint8_t perms;
 487:/Users/Administrator/sos-2x/kernel/malloc.c ****   uint16_t block_num;
 488:/Users/Administrator/sos-2x/kernel/malloc.c ****   int8_t domid;
 489:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif
 490:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 491:/Users/Administrator/sos-2x/kernel/malloc.c ****   Block* blockptr = TO_BLOCK_PTR(ptr); // Convert to a block address         
 315               	.LM2:
 316 0004 DC01      		movw r26,r24
 317 0006 1397      		sbiw r26,3
 492:/Users/Administrator/sos-2x/kernel/malloc.c ****   sos_pid_t old_owner;
 493:/Users/Administrator/sos-2x/kernel/malloc.c ****   // Check for errors                                          
 494:/Users/Administrator/sos-2x/kernel/malloc.c ****   if (NULL_PID == id || NULL == ptr) return SOS_OK;           
 319               	.LM3:
 320 0008 6F3F      		cpi r22,lo8(-1)
 321 000a 01F1      		breq .L8
 323               	.LM4:
 324 000c 892B      		or r24,r25
 325 000e F1F0      		breq .L8
 495:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 496:/Users/Administrator/sos-2x/kernel/malloc.c **** #ifdef SOS_SFI
 497:/Users/Administrator/sos-2x/kernel/malloc.c ****   ENTER_CRITICAL_SECTION();
 498:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 499:/Users/Administrator/sos-2x/kernel/malloc.c ****   //Get the permission for the first block
 500:/Users/Administrator/sos-2x/kernel/malloc.c ****   block_num = MEMMAP_GET_BLK_NUM(blockptr);
 501:/Users/Administrator/sos-2x/kernel/malloc.c ****   MEMMAP_GET_PERMS(block_num, perms);
 502:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 503:/Users/Administrator/sos-2x/kernel/malloc.c ****   // Check - Not a start of segment
 504:/Users/Administrator/sos-2x/kernel/malloc.c ****   if ((perms & MEMMAP_SEG_MASK) == MEMMAP_SEG_LATER) {
 505:/Users/Administrator/sos-2x/kernel/malloc.c ****     LEAVE_CRITICAL_SECTION();
 506:/Users/Administrator/sos-2x/kernel/malloc.c ****     sfi_exception(MALLOC_EXCEPTION);
 507:/Users/Administrator/sos-2x/kernel/malloc.c ****   }
 508:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 509:/Users/Administrator/sos-2x/kernel/malloc.c **** #ifdef SFI_DOMS_8 
 510:/Users/Administrator/sos-2x/kernel/malloc.c ****   if ((bCallFromModule && ((perms & MEMMAP_DOM_MASK) == curr_dom_id))|| (!bCallFromModule))
 511:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif
 512:/Users/Administrator/sos-2x/kernel/malloc.c **** #ifdef SFI_DOMS_2
 513:/Users/Administrator/sos-2x/kernel/malloc.c ****   if ((bCallFromModule && ((perms & MEMMAP_DOM_MASK) != KER_DOM_ID)) || (!bCallFromModule))
 514:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif
 515:/Users/Administrator/sos-2x/kernel/malloc.c ****     {
 516:/Users/Administrator/sos-2x/kernel/malloc.c ****       // Call has come from trusted domain OR
 517:/Users/Administrator/sos-2x/kernel/malloc.c ****       // Call has come from block owner
 518:/Users/Administrator/sos-2x/kernel/malloc.c ****       
 519:/Users/Administrator/sos-2x/kernel/malloc.c ****       // Get domain id of new owner
 520:/Users/Administrator/sos-2x/kernel/malloc.c ****       domid = sfi_get_domain_id(id);
 521:/Users/Administrator/sos-2x/kernel/malloc.c ****       if (domid < 0){
 522:/Users/Administrator/sos-2x/kernel/malloc.c **** 	LEAVE_CRITICAL_SECTION();
 523:/Users/Administrator/sos-2x/kernel/malloc.c **** 	sfi_exception(SFI_DOMAINID_EXCEPTION);
 524:/Users/Administrator/sos-2x/kernel/malloc.c ****       }
 525:/Users/Administrator/sos-2x/kernel/malloc.c ****       
 526:/Users/Administrator/sos-2x/kernel/malloc.c ****       // Change Permissions Only if it is required
 527:/Users/Administrator/sos-2x/kernel/malloc.c ****       if (domid != (perms & MEMMAP_DOM_MASK)){
 528:/Users/Administrator/sos-2x/kernel/malloc.c **** 	MEMMAP_SET_PERMS(block_num, DOM_SEG_START(domid));
 529:/Users/Administrator/sos-2x/kernel/malloc.c **** 	memmap_change_perms((void*)((Block*)(blockptr + 1)),
 530:/Users/Administrator/sos-2x/kernel/malloc.c **** 			    MEMMAP_SEG_MASK | MEMMAP_DOM_MASK,
 531:/Users/Administrator/sos-2x/kernel/malloc.c **** 			    DOM_SEG_LATER(perms),
 532:/Users/Administrator/sos-2x/kernel/malloc.c **** 			    DOM_SEG_LATER(domid));
 533:/Users/Administrator/sos-2x/kernel/malloc.c ****       }
 534:/Users/Administrator/sos-2x/kernel/malloc.c ****       LEAVE_CRITICAL_SECTION();
 535:/Users/Administrator/sos-2x/kernel/malloc.c ****     }
 536:/Users/Administrator/sos-2x/kernel/malloc.c ****   else{
 537:/Users/Administrator/sos-2x/kernel/malloc.c ****     // Non-owner trying to change ownership of the block
 538:/Users/Administrator/sos-2x/kernel/malloc.c ****     DEBUG("Current domain is not owner of this block.\n");
 539:/Users/Administrator/sos-2x/kernel/malloc.c ****     LEAVE_CRITICAL_SECTION();
 540:/Users/Administrator/sos-2x/kernel/malloc.c ****     sfi_exception(MALLOC_EXCEPTION);
 541:/Users/Administrator/sos-2x/kernel/malloc.c ****     return -EINVAL;
 542:/Users/Administrator/sos-2x/kernel/malloc.c ****   }
 543:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 544:/Users/Administrator/sos-2x/kernel/malloc.c **** #else
 545:/Users/Administrator/sos-2x/kernel/malloc.c ****   // Check for memory corruption                               
 546:/Users/Administrator/sos-2x/kernel/malloc.c ****   if ((blockptr < malloc_heap) || (blockptr >= (malloc_heap + NUM_HEAP_BLOCKS)) ) {
 327               	.LM5:
 328 0010 80E0      		ldi r24,hi8(malloc_heap)
 329 0012 A030      		cpi r26,lo8(malloc_heap)
 330 0014 B807      		cpc r27,r24
 331 0016 A0F0      		brlo .L7
 332 0018 C0E0      		ldi r28,hi8(malloc_heap+2048)
 333 001a A030      		cpi r26,lo8(malloc_heap+2048)
 334 001c BC07      		cpc r27,r28
 335 001e 80F4      		brsh .L7
 547:/Users/Administrator/sos-2x/kernel/malloc.c **** 		
 548:/Users/Administrator/sos-2x/kernel/malloc.c **** 	  return -EINVAL;
 549:/Users/Administrator/sos-2x/kernel/malloc.c ****   }
 550:/Users/Administrator/sos-2x/kernel/malloc.c ****   if (blockptr->blockhdr.owner != BLOCK_GUARD_BYTE(blockptr))  {
 337               	.LM6:
 338 0020 ED91      		ld r30,X+
 339 0022 FC91      		ld r31,X
 340 0024 1197      		sbiw r26,1
 341 0026 83E0      		ldi r24,3
 342 0028 EE0F      	1:	lsl r30
 343 002a FF1F      		rol r31
 344 002c 8A95      		dec r24
 345 002e E1F7      		brne 1b
 346 0030 EA0F      		add r30,r26
 347 0032 FB1F      		adc r31,r27
 348 0034 3197      		sbiw r30,1
 349 0036 ED01      		movw r28,r26
 350 0038 9A81      		ldd r25,Y+2
 351 003a 8081      		ld r24,Z
 352 003c 9817      		cp r25,r24
 353 003e 19F0      		breq .L6
 354               	.L7:
 551:/Users/Administrator/sos-2x/kernel/malloc.c ****     DEBUG("sos_blk_mem_change_own: detect memory corruption %x\n", (int)blockptr);
 552:/Users/Administrator/sos-2x/kernel/malloc.c ****     DEBUG("possible owner %d %d\n", blockptr->blockhdr.owner, BLOCK_GUARD_BYTE(blockptr));
 553:/Users/Administrator/sos-2x/kernel/malloc.c ****     return -EINVAL;
 356               	.LM7:
 357 0040 8AEE      		ldi r24,lo8(-22)
 358 0042 9FEF      		ldi r25,hi8(-22)
 359 0044 05C0      		rjmp .L1
 360               	.L6:
 554:/Users/Administrator/sos-2x/kernel/malloc.c ****   }
 555:/Users/Administrator/sos-2x/kernel/malloc.c ****   BLOCK_GUARD_BYTE(blockptr) = id; 
 362               	.LM8:
 363 0046 6083      		st Z,r22
 556:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif
 557:/Users/Administrator/sos-2x/kernel/malloc.c ****   old_owner =  blockptr->blockhdr.owner;
 558:/Users/Administrator/sos-2x/kernel/malloc.c ****   // Set the new block ID                                      
 559:/Users/Administrator/sos-2x/kernel/malloc.c ****   blockptr->blockhdr.owner = id;        
 365               	.LM9:
 366 0048 FD01      		movw r30,r26
 367 004a 6283      		std Z+2,r22
 368               	.L8:
 560:/Users/Administrator/sos-2x/kernel/malloc.c ****   //ker_log( SOS_LOG_CHANGE_OWN, id, old_owner);  
 561:/Users/Administrator/sos-2x/kernel/malloc.c ****   return SOS_OK;
 370               	.LM10:
 371 004c 80E0      		ldi r24,lo8(0)
 372 004e 90E0      		ldi r25,hi8(0)
 373               	.L1:
 374               	/* epilogue: frame size=0 */
 375 0050 DF91      		pop r29
 376 0052 CF91      		pop r28
 377 0054 0895      		ret
 378               	/* epilogue end (size=3) */
 379               	/* function sos_blk_mem_change_own size 43 (38) */
 384               	.Lscope0:
 389               	Unlink:
 562:/Users/Administrator/sos-2x/kernel/malloc.c **** }
 563:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 564:/Users/Administrator/sos-2x/kernel/malloc.c **** void mem_start() 
 565:/Users/Administrator/sos-2x/kernel/malloc.c **** {
 566:/Users/Administrator/sos-2x/kernel/malloc.c **** #ifdef SOS_USE_GC
 567:/Users/Administrator/sos-2x/kernel/malloc.c **** #ifdef SOS_USE_PREEMPTION
 568:/Users/Administrator/sos-2x/kernel/malloc.c **** 	ker_register_module(sos_get_header_address(mod_header));
 569:/Users/Administrator/sos-2x/kernel/malloc.c **** #else
 570:/Users/Administrator/sos-2x/kernel/malloc.c ****   sched_register_kernel_module(&malloc_module, sos_get_header_address(mod_header), NULL);
 571:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif // SOS_USE_PREEMPTION
 572:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif // SOS_USE_GC
 573:/Users/Administrator/sos-2x/kernel/malloc.c **** }
 574:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 575:/Users/Administrator/sos-2x/kernel/malloc.c **** int8_t mem_remove_all(sos_pid_t id)
 576:/Users/Administrator/sos-2x/kernel/malloc.c **** {
 577:/Users/Administrator/sos-2x/kernel/malloc.c ****   HAS_CRITICAL_SECTION;
 578:/Users/Administrator/sos-2x/kernel/malloc.c ****   Block* block = (Block*)malloc_heap;
 579:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 580:/Users/Administrator/sos-2x/kernel/malloc.c ****   ENTER_CRITICAL_SECTION();
 581:/Users/Administrator/sos-2x/kernel/malloc.c ****   for (block = (Block*)malloc_heap; 
 582:/Users/Administrator/sos-2x/kernel/malloc.c ****        block != mSentinel; 
 583:/Users/Administrator/sos-2x/kernel/malloc.c ****        block += block->blockhdr.blocks & ~MEM_MASK) 
 584:/Users/Administrator/sos-2x/kernel/malloc.c ****     {
 585:/Users/Administrator/sos-2x/kernel/malloc.c ****       if ( (block->blockhdr.owner == id) && (block->blockhdr.blocks & RESERVED) ){
 586:/Users/Administrator/sos-2x/kernel/malloc.c **** 		ker_free(block->userPart);
 587:/Users/Administrator/sos-2x/kernel/malloc.c ****       }		
 588:/Users/Administrator/sos-2x/kernel/malloc.c ****     }
 589:/Users/Administrator/sos-2x/kernel/malloc.c ****   //printMem("remove_all_end: ");
 590:/Users/Administrator/sos-2x/kernel/malloc.c ****   LEAVE_CRITICAL_SECTION();
 591:/Users/Administrator/sos-2x/kernel/malloc.c ****   return SOS_OK;
 592:/Users/Administrator/sos-2x/kernel/malloc.c **** }
 593:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 594:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 595:/Users/Administrator/sos-2x/kernel/malloc.c **** //-----------------------------------------------------------------------------
 596:/Users/Administrator/sos-2x/kernel/malloc.c **** // Re-allocate the buffer to a new area the requested size. If possible the
 597:/Users/Administrator/sos-2x/kernel/malloc.c **** // existing area is simply expanded. Otherwise a new area is allocated and
 598:/Users/Administrator/sos-2x/kernel/malloc.c **** // the current contents copied.
 599:/Users/Administrator/sos-2x/kernel/malloc.c **** // SFI Mode: 1. If call from untrusted domain, only owner is allowed to realloc
 600:/Users/Administrator/sos-2x/kernel/malloc.c **** //-----------------------------------------------------------------------------
 601:/Users/Administrator/sos-2x/kernel/malloc.c **** void* sos_blk_mem_realloc(void* pntr, uint16_t newSize, bool bCallFromModule)
 602:/Users/Administrator/sos-2x/kernel/malloc.c **** {
 603:/Users/Administrator/sos-2x/kernel/malloc.c ****   HAS_CRITICAL_SECTION;
 604:/Users/Administrator/sos-2x/kernel/malloc.c ****   sos_pid_t id;
 605:/Users/Administrator/sos-2x/kernel/malloc.c **** #ifdef SOS_PROFILE_FRAGMENTATION
 606:/Users/Administrator/sos-2x/kernel/malloc.c ****   uint16_t old_blocks = 0;
 607:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif
 608:/Users/Administrator/sos-2x/kernel/malloc.c **** #ifdef SOS_SFI
 609:/Users/Administrator/sos-2x/kernel/malloc.c ****   uint16_t block_num;
 610:/Users/Administrator/sos-2x/kernel/malloc.c ****   uint8_t perms;  
 611:/Users/Administrator/sos-2x/kernel/malloc.c ****   uint16_t oldSize;
 612:/Users/Administrator/sos-2x/kernel/malloc.c ****   int8_t domid;
 613:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif
 614:/Users/Administrator/sos-2x/kernel/malloc.c ****   // Check for errors.
 615:/Users/Administrator/sos-2x/kernel/malloc.c ****   //
 616:/Users/Administrator/sos-2x/kernel/malloc.c ****   if ( (pntr == NULL ) || (newSize == 0) ) {
 617:/Users/Administrator/sos-2x/kernel/malloc.c **** 	  return pntr;
 618:/Users/Administrator/sos-2x/kernel/malloc.c ****   }
 619:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 620:/Users/Administrator/sos-2x/kernel/malloc.c ****   printMem("realloc start: ");
 621:/Users/Administrator/sos-2x/kernel/malloc.c **** #ifdef SOS_SFI
 622:/Users/Administrator/sos-2x/kernel/malloc.c ****   ENTER_CRITICAL_SECTION();
 623:/Users/Administrator/sos-2x/kernel/malloc.c ****   // Get the permission of the first block
 624:/Users/Administrator/sos-2x/kernel/malloc.c ****   block_num = MEMMAP_GET_BLK_NUM(pntr);
 625:/Users/Administrator/sos-2x/kernel/malloc.c ****   MEMMAP_GET_PERMS(block_num, perms);
 626:/Users/Administrator/sos-2x/kernel/malloc.c **** #ifdef SFI_DOMS_8
 627:/Users/Administrator/sos-2x/kernel/malloc.c ****   if ((bCallFromModule) && ((perms & MEMMAP_DOM_MASK) != curr_dom_id))
 628:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif
 629:/Users/Administrator/sos-2x/kernel/malloc.c **** #ifdef SFI_DOMS_2
 630:/Users/Administrator/sos-2x/kernel/malloc.c ****   if ((bCallFromModule) && ((perms & MEMMAP_DOM_MASK) == KER_DOM_ID))
 631:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif
 632:/Users/Administrator/sos-2x/kernel/malloc.c ****     {
 633:/Users/Administrator/sos-2x/kernel/malloc.c ****       LEAVE_CRITICAL_SECTION();
 634:/Users/Administrator/sos-2x/kernel/malloc.c ****       sfi_exception(MALLOC_EXCEPTION);
 635:/Users/Administrator/sos-2x/kernel/malloc.c ****       // Error - Untrusted domain trying to realloc memory that it does not own or that is free.
 636:/Users/Administrator/sos-2x/kernel/malloc.c ****     }
 637:/Users/Administrator/sos-2x/kernel/malloc.c ****   domid = perms & MEMMAP_DOM_MASK;
 638:/Users/Administrator/sos-2x/kernel/malloc.c ****   LEAVE_CRITICAL_SECTION();
 639:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif
 640:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 641:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 642:/Users/Administrator/sos-2x/kernel/malloc.c ****   Block* block = TO_BLOCK_PTR(pntr);   // convert user to block address
 643:/Users/Administrator/sos-2x/kernel/malloc.c ****   uint16_t reqBlocks = (newSize + BLOCKOVERHEAD + sizeof(Block) - 1) >> SHIFT_VALUE;
 644:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 645:/Users/Administrator/sos-2x/kernel/malloc.c ****   ENTER_CRITICAL_SECTION();
 646:/Users/Administrator/sos-2x/kernel/malloc.c ****   id = block->blockhdr.owner;
 647:/Users/Administrator/sos-2x/kernel/malloc.c ****   block->blockhdr.blocks &= ~RESERVED;         // expose the size
 648:/Users/Administrator/sos-2x/kernel/malloc.c **** #ifdef SOS_PROFILE_FRAGMENTATION
 649:/Users/Administrator/sos-2x/kernel/malloc.c ****   old_blocks = block->blockhdr.blocks;
 650:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif
 651:/Users/Administrator/sos-2x/kernel/malloc.c **** #ifdef SOS_SFI
 652:/Users/Administrator/sos-2x/kernel/malloc.c ****   oldSize = BLOCKS_TO_BYTES(block->blockhdr.blocks);
 653:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif
 654:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 655:/Users/Administrator/sos-2x/kernel/malloc.c ****   // The fastest option is to merge this block with any free blocks
 656:/Users/Administrator/sos-2x/kernel/malloc.c ****   // that are contiguous with this block.
 657:/Users/Administrator/sos-2x/kernel/malloc.c ****   //
 658:/Users/Administrator/sos-2x/kernel/malloc.c ****   block = MergeBlocks(block);
 659:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 660:/Users/Administrator/sos-2x/kernel/malloc.c ****   if (block->blockhdr.blocks > reqBlocks)
 661:/Users/Administrator/sos-2x/kernel/malloc.c ****     {
 662:/Users/Administrator/sos-2x/kernel/malloc.c ****       // The merge produced a larger block than required, so split it
 663:/Users/Administrator/sos-2x/kernel/malloc.c ****       // into two blocks. This also takes care of the case where the
 664:/Users/Administrator/sos-2x/kernel/malloc.c ****       // new size is less than the old.
 665:/Users/Administrator/sos-2x/kernel/malloc.c ****       //
 666:/Users/Administrator/sos-2x/kernel/malloc.c **** #ifdef SOS_PROFILE_FRAGMENTATION
 667:/Users/Administrator/sos-2x/kernel/malloc.c **** 	malloc_record_blocks( (int16_t) reqBlocks - (int16_t) old_blocks );	
 668:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif
 669:/Users/Administrator/sos-2x/kernel/malloc.c ****       SplitBlock(block, reqBlocks);
 670:/Users/Administrator/sos-2x/kernel/malloc.c **** 	  
 671:/Users/Administrator/sos-2x/kernel/malloc.c **** #ifdef SOS_SFI
 672:/Users/Administrator/sos-2x/kernel/malloc.c ****       if (reqBlocks < oldSize){
 673:/Users/Administrator/sos-2x/kernel/malloc.c **** 	memmap_set_perms((Block*)(block + reqBlocks), 
 674:/Users/Administrator/sos-2x/kernel/malloc.c **** 			 (oldSize - reqBlocks)*(sizeof(Block)), 
 675:/Users/Administrator/sos-2x/kernel/malloc.c **** 			 MEMMAP_SEG_START|BLOCK_FREE);
 676:/Users/Administrator/sos-2x/kernel/malloc.c ****       }
 677:/Users/Administrator/sos-2x/kernel/malloc.c ****       else{
 678:/Users/Administrator/sos-2x/kernel/malloc.c **** 	memmap_set_perms((Block*)(block + oldSize),
 679:/Users/Administrator/sos-2x/kernel/malloc.c **** 			   (reqBlocks - oldSize)*(sizeof(Block)), 
 680:/Users/Administrator/sos-2x/kernel/malloc.c **** 			   DOM_SEG_LATER(domid));
 681:/Users/Administrator/sos-2x/kernel/malloc.c ****       }
 682:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif
 683:/Users/Administrator/sos-2x/kernel/malloc.c ****       
 684:/Users/Administrator/sos-2x/kernel/malloc.c ****     }
 685:/Users/Administrator/sos-2x/kernel/malloc.c ****   else if (block->blockhdr.blocks < reqBlocks)
 686:/Users/Administrator/sos-2x/kernel/malloc.c ****     {
 687:/Users/Administrator/sos-2x/kernel/malloc.c ****       // Could not expand this block. Must attempt to allocate
 688:/Users/Administrator/sos-2x/kernel/malloc.c ****       // a new one the correct size and copy the current contents.
 689:/Users/Administrator/sos-2x/kernel/malloc.c ****       //
 690:/Users/Administrator/sos-2x/kernel/malloc.c **** #ifndef SOS_SFI
 691:/Users/Administrator/sos-2x/kernel/malloc.c ****       uint16_t oldSize = BLOCKS_TO_BYTES(block->blockhdr.blocks);
 692:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif
 693:/Users/Administrator/sos-2x/kernel/malloc.c **** 	  block->blockhdr.blocks |= RESERVED;         // convert it back
 694:/Users/Administrator/sos-2x/kernel/malloc.c ****       block = (Block*)ker_malloc(newSize, id);
 695:/Users/Administrator/sos-2x/kernel/malloc.c ****       if (NULL != block)
 696:/Users/Administrator/sos-2x/kernel/malloc.c ****         {
 697:/Users/Administrator/sos-2x/kernel/malloc.c **** 	  // A new block large enough has been allocated. Copy the
 698:/Users/Administrator/sos-2x/kernel/malloc.c **** 	  // existing data and then discard the old block.
 699:/Users/Administrator/sos-2x/kernel/malloc.c **** 	  //
 700:/Users/Administrator/sos-2x/kernel/malloc.c **** 	  block = TO_BLOCK_PTR(block);
 701:/Users/Administrator/sos-2x/kernel/malloc.c **** 	  memcpy(block->userPart, (Block*)(TO_BLOCK_PTR(pntr))->userPart, oldSize);
 702:/Users/Administrator/sos-2x/kernel/malloc.c **** 	  sos_blk_mem_free(pntr, bCallFromModule);
 703:/Users/Administrator/sos-2x/kernel/malloc.c ****         }
 704:/Users/Administrator/sos-2x/kernel/malloc.c ****       else
 705:/Users/Administrator/sos-2x/kernel/malloc.c ****         {
 706:/Users/Administrator/sos-2x/kernel/malloc.c **** 	  // Cannot re-allocate this block. Note the old pointer
 707:/Users/Administrator/sos-2x/kernel/malloc.c **** 	  // is still valid.
 708:/Users/Administrator/sos-2x/kernel/malloc.c **** 	  //
 709:/Users/Administrator/sos-2x/kernel/malloc.c **** 	  LEAVE_CRITICAL_SECTION();
 710:/Users/Administrator/sos-2x/kernel/malloc.c **** 	  return NULL;        // no valid options
 711:/Users/Administrator/sos-2x/kernel/malloc.c ****         }
 712:/Users/Administrator/sos-2x/kernel/malloc.c ****     }
 713:/Users/Administrator/sos-2x/kernel/malloc.c **** #ifdef SOS_SFI
 714:/Users/Administrator/sos-2x/kernel/malloc.c ****   else if (block->blockhdr.blocks == reqBlocks)
 715:/Users/Administrator/sos-2x/kernel/malloc.c ****     {
 716:/Users/Administrator/sos-2x/kernel/malloc.c ****       memmap_set_perms((Block*)(block + oldSize), 
 717:/Users/Administrator/sos-2x/kernel/malloc.c **** 		       (reqBlocks - oldSize)*(sizeof(Block)), 
 718:/Users/Administrator/sos-2x/kernel/malloc.c **** 		       DOM_SEG_LATER(domid));
 719:/Users/Administrator/sos-2x/kernel/malloc.c ****     }
 720:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif
 721:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 722:/Users/Administrator/sos-2x/kernel/malloc.c ****   block->blockhdr.blocks |= RESERVED;
 723:/Users/Administrator/sos-2x/kernel/malloc.c ****   block->blockhdr.owner = id;
 724:/Users/Administrator/sos-2x/kernel/malloc.c **** #ifndef SOS_SFI                                
 725:/Users/Administrator/sos-2x/kernel/malloc.c ****   BLOCK_GUARD_BYTE(block) = id; 
 726:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif
 727:/Users/Administrator/sos-2x/kernel/malloc.c ****   LEAVE_CRITICAL_SECTION();
 728:/Users/Administrator/sos-2x/kernel/malloc.c ****   printMem("realloc end: ");
 729:/Users/Administrator/sos-2x/kernel/malloc.c ****   return block->userPart;
 730:/Users/Administrator/sos-2x/kernel/malloc.c **** }
 731:/Users/Administrator/sos-2x/kernel/malloc.c **** //-----------------------------------------------------------------------------
 732:/Users/Administrator/sos-2x/kernel/malloc.c **** // Compute the number of blocks that will fit in the memory area defined.
 733:/Users/Administrator/sos-2x/kernel/malloc.c **** // Allocate the pool of blocks. Note this includes the sentinel area that is 
 734:/Users/Administrator/sos-2x/kernel/malloc.c **** // attached to the end and is always only one block. The first entry in the 
 735:/Users/Administrator/sos-2x/kernel/malloc.c **** // free list pool is set to include all available blocks. The sentinel is 
 736:/Users/Administrator/sos-2x/kernel/malloc.c **** // initialised to point back to the start of the pool.
 737:/Users/Administrator/sos-2x/kernel/malloc.c **** //
 738:/Users/Administrator/sos-2x/kernel/malloc.c **** void mem_init(void)
 739:/Users/Administrator/sos-2x/kernel/malloc.c **** {
 740:/Users/Administrator/sos-2x/kernel/malloc.c ****   Block* head;
 741:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 742:/Users/Administrator/sos-2x/kernel/malloc.c ****   DEBUG("malloc init\n");
 743:/Users/Administrator/sos-2x/kernel/malloc.c ****   mPool = malloc_heap;
 744:/Users/Administrator/sos-2x/kernel/malloc.c ****   mSentinel = &(malloc_heap[NUM_HEAP_BLOCKS-1]);
 745:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 746:/Users/Administrator/sos-2x/kernel/malloc.c ****   mSentinel->blockhdr.blocks = 1;
 747:/Users/Administrator/sos-2x/kernel/malloc.c ****   mSentinel->blockhdr.blocks |= RESERVED;           // now cannot be used
 748:/Users/Administrator/sos-2x/kernel/malloc.c ****   mSentinel->prev = mSentinel;
 749:/Users/Administrator/sos-2x/kernel/malloc.c ****   mSentinel->next = mSentinel;
 750:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 751:/Users/Administrator/sos-2x/kernel/malloc.c ****   // Entire pool is initially a single unallocated area.
 752:/Users/Administrator/sos-2x/kernel/malloc.c ****   //
 753:/Users/Administrator/sos-2x/kernel/malloc.c ****   head = &mPool[0];
 754:/Users/Administrator/sos-2x/kernel/malloc.c ****   head->blockhdr.blocks = NUM_HEAP_BLOCKS-1;         // initially all of free memeory
 755:/Users/Administrator/sos-2x/kernel/malloc.c ****   InsertAfter(head);                      // link the sentinel
 756:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 757:/Users/Administrator/sos-2x/kernel/malloc.c **** #ifdef SOS_SFI
 758:/Users/Administrator/sos-2x/kernel/malloc.c ****   memmap_init(); // Initialize all the memory to be owned by the kernel
 759:/Users/Administrator/sos-2x/kernel/malloc.c ****   memmap_set_perms((void*) mPool, NUM_HEAP_BLOCKS * sizeof(Block), MEMMAP_SEG_START|BLOCK_FREE); //
 760:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif
 761:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 762:/Users/Administrator/sos-2x/kernel/malloc.c **** #ifdef SOS_PROFILE_FRAGMENTATION
 763:/Users/Administrator/sos-2x/kernel/malloc.c **** 	mf.num_blocks = 0;
 764:/Users/Administrator/sos-2x/kernel/malloc.c **** 	mf.num_outstanding = 0;
 765:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif
 766:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 767:/Users/Administrator/sos-2x/kernel/malloc.c **** }
 768:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 769:/Users/Administrator/sos-2x/kernel/malloc.c **** //-----------------------------------------------------------------------------
 770:/Users/Administrator/sos-2x/kernel/malloc.c **** // As each area is examined for a fit, we also examine the following area. 
 771:/Users/Administrator/sos-2x/kernel/malloc.c **** // If it is free then it must also be on the Free list. Being a doubly-linked 
 772:/Users/Administrator/sos-2x/kernel/malloc.c **** // list, we can combine these two areas in constant time. If an area is 
 773:/Users/Administrator/sos-2x/kernel/malloc.c **** // combined, the procedure then looks again at the following area, thus 
 774:/Users/Administrator/sos-2x/kernel/malloc.c **** // repeatedly combining areas until a reserved area is found. In terminal 
 775:/Users/Administrator/sos-2x/kernel/malloc.c **** // cases this will be the sentinel block.
 776:/Users/Administrator/sos-2x/kernel/malloc.c **** //
 777:/Users/Administrator/sos-2x/kernel/malloc.c **** static Block* MergeBlocks(Block* block)
 778:/Users/Administrator/sos-2x/kernel/malloc.c **** {
 779:/Users/Administrator/sos-2x/kernel/malloc.c ****   while (TRUE)
 780:/Users/Administrator/sos-2x/kernel/malloc.c ****     {
 781:/Users/Administrator/sos-2x/kernel/malloc.c ****       Block* successor = block + block->blockhdr.blocks;   // point to next area
 782:/Users/Administrator/sos-2x/kernel/malloc.c ****       /*
 783:/Users/Administrator/sos-2x/kernel/malloc.c **** 	DEBUG("block = %x, blocks = %d, successor = %x, alloc = %d\n",
 784:/Users/Administrator/sos-2x/kernel/malloc.c **** 	(unsigned int)block,
 785:/Users/Administrator/sos-2x/kernel/malloc.c **** 	block->blockhdr.blocks,
 786:/Users/Administrator/sos-2x/kernel/malloc.c **** 	(unsigned int) successor,
 787:/Users/Administrator/sos-2x/kernel/malloc.c **** 	successor->blockhdr.blocks);
 788:/Users/Administrator/sos-2x/kernel/malloc.c ****       */
 789:/Users/Administrator/sos-2x/kernel/malloc.c ****       if (successor->blockhdr.blocks & RESERVED)           // done if reserved
 790:/Users/Administrator/sos-2x/kernel/malloc.c ****         {
 791:/Users/Administrator/sos-2x/kernel/malloc.c **** 	  return block;
 792:/Users/Administrator/sos-2x/kernel/malloc.c ****         }
 793:/Users/Administrator/sos-2x/kernel/malloc.c ****       Unlink(successor);
 794:/Users/Administrator/sos-2x/kernel/malloc.c ****       block->blockhdr.blocks += successor->blockhdr.blocks;         // add in its blocks
 795:/Users/Administrator/sos-2x/kernel/malloc.c ****     }
 796:/Users/Administrator/sos-2x/kernel/malloc.c **** }
 797:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 798:/Users/Administrator/sos-2x/kernel/malloc.c **** static Block* MergeBlocksQuick(Block *block, uint16_t req_blocks)
 799:/Users/Administrator/sos-2x/kernel/malloc.c **** {
 800:/Users/Administrator/sos-2x/kernel/malloc.c ****   while (TRUE)
 801:/Users/Administrator/sos-2x/kernel/malloc.c ****     {
 802:/Users/Administrator/sos-2x/kernel/malloc.c ****       Block* successor = block + block->blockhdr.blocks;   // point to next area
 803:/Users/Administrator/sos-2x/kernel/malloc.c ****       if (successor->blockhdr.blocks & RESERVED)           // done if reserved
 804:/Users/Administrator/sos-2x/kernel/malloc.c **** 	{
 805:/Users/Administrator/sos-2x/kernel/malloc.c **** 	  return block;
 806:/Users/Administrator/sos-2x/kernel/malloc.c **** 	}
 807:/Users/Administrator/sos-2x/kernel/malloc.c ****       Unlink(successor);
 808:/Users/Administrator/sos-2x/kernel/malloc.c ****       block->blockhdr.blocks += successor->blockhdr.blocks;         // add in its blocks
 809:/Users/Administrator/sos-2x/kernel/malloc.c ****       if( block->blockhdr.blocks >= req_blocks ) {
 810:/Users/Administrator/sos-2x/kernel/malloc.c **** 	return block;
 811:/Users/Administrator/sos-2x/kernel/malloc.c ****       }
 812:/Users/Administrator/sos-2x/kernel/malloc.c ****     }
 813:/Users/Administrator/sos-2x/kernel/malloc.c **** }
 814:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 815:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 816:/Users/Administrator/sos-2x/kernel/malloc.c **** //-----------------------------------------------------------------------------
 817:/Users/Administrator/sos-2x/kernel/malloc.c **** //
 818:/Users/Administrator/sos-2x/kernel/malloc.c **** static void SplitBlock(Block* block, uint16_t reqBlocks)  
 819:/Users/Administrator/sos-2x/kernel/malloc.c **** {
 820:/Users/Administrator/sos-2x/kernel/malloc.c ****   Block* newBlock = block + reqBlocks;            // create a remainder area
 821:/Users/Administrator/sos-2x/kernel/malloc.c ****   newBlock->blockhdr.blocks = block->blockhdr.blocks - reqBlocks;   // set its size and mark as fre
 822:/Users/Administrator/sos-2x/kernel/malloc.c ****   block->blockhdr.blocks = reqBlocks;                      // set us to requested size
 823:/Users/Administrator/sos-2x/kernel/malloc.c ****   newBlock->blockhdr.blocks &= ~MEM_MASK;
 824:/Users/Administrator/sos-2x/kernel/malloc.c ****   InsertAfter(newBlock);                          // stitch remainder into free list
 825:/Users/Administrator/sos-2x/kernel/malloc.c **** }
 826:/Users/Administrator/sos-2x/kernel/malloc.c ****     
 827:/Users/Administrator/sos-2x/kernel/malloc.c **** //-----------------------------------------------------------------------------
 828:/Users/Administrator/sos-2x/kernel/malloc.c **** //
 829:/Users/Administrator/sos-2x/kernel/malloc.c **** static void InsertAfter(Block* block)
 830:/Users/Administrator/sos-2x/kernel/malloc.c **** {
 831:/Users/Administrator/sos-2x/kernel/malloc.c **** 	/*
 832:/Users/Administrator/sos-2x/kernel/malloc.c ****   Block* p = mSentinel->next;
 833:/Users/Administrator/sos-2x/kernel/malloc.c ****   mSentinel->next = block;
 834:/Users/Administrator/sos-2x/kernel/malloc.c ****   block->prev = mSentinel;
 835:/Users/Administrator/sos-2x/kernel/malloc.c ****   block->next = p;
 836:/Users/Administrator/sos-2x/kernel/malloc.c ****   p->prev = block;
 837:/Users/Administrator/sos-2x/kernel/malloc.c ****   */
 838:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 839:/Users/Administrator/sos-2x/kernel/malloc.c ****   Block *p = mSentinel->next;
 840:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 841:/Users/Administrator/sos-2x/kernel/malloc.c ****   while( p < block && p != mSentinel) {
 842:/Users/Administrator/sos-2x/kernel/malloc.c **** 	  p = p->next;
 843:/Users/Administrator/sos-2x/kernel/malloc.c ****   }
 844:/Users/Administrator/sos-2x/kernel/malloc.c ****   p->prev->next = block;
 845:/Users/Administrator/sos-2x/kernel/malloc.c ****   block->prev = p->prev;
 846:/Users/Administrator/sos-2x/kernel/malloc.c ****   p->prev = block;
 847:/Users/Administrator/sos-2x/kernel/malloc.c ****   block->next = p;
 848:/Users/Administrator/sos-2x/kernel/malloc.c **** }
 849:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 850:/Users/Administrator/sos-2x/kernel/malloc.c **** //-----------------------------------------------------------------------------
 851:/Users/Administrator/sos-2x/kernel/malloc.c **** //
 852:/Users/Administrator/sos-2x/kernel/malloc.c **** static void Unlink(Block* block)
 853:/Users/Administrator/sos-2x/kernel/malloc.c **** {
 391               	.LM11:
 392               	/* prologue: frame size=0 */
 393 0056 CF93      		push r28
 394 0058 DF93      		push r29
 395               	/* prologue end (size=2) */
 396 005a FC01      		movw r30,r24
 854:/Users/Administrator/sos-2x/kernel/malloc.c ****   block->prev->next = block->next;
 398               	.LM12:
 399 005c A381      		ldd r26,Z+3
 400 005e B481      		ldd r27,Z+4
 401 0060 8581      		ldd r24,Z+5
 402 0062 9681      		ldd r25,Z+6
 403 0064 ED01      		movw r28,r26
 404 0066 8D83      		std Y+5,r24
 405 0068 9E83      		std Y+6,r25
 855:/Users/Administrator/sos-2x/kernel/malloc.c ****   block->next->prev = block->prev;
 407               	.LM13:
 408 006a 0580      		ldd __tmp_reg__,Z+5
 409 006c F681      		ldd r31,Z+6
 410 006e E02D      		mov r30,__tmp_reg__
 411 0070 A383      		std Z+3,r26
 412 0072 B483      		std Z+4,r27
 413               	/* epilogue: frame size=0 */
 414 0074 DF91      		pop r29
 415 0076 CF91      		pop r28
 416 0078 0895      		ret
 417               	/* epilogue end (size=3) */
 418               	/* function Unlink size 18 (13) */
 420               	.Lscope1:
 425               	MergeBlocks:
 427               	.LM14:
 428               	/* prologue: frame size=0 */
 429 007a 0F93      		push r16
 430 007c 1F93      		push r17
 431 007e CF93      		push r28
 432 0080 DF93      		push r29
 433               	/* prologue end (size=4) */
 434 0082 8C01      		movw r16,r24
 435               	.L11:
 436               	.LBB2:
 438               	.LM15:
 439 0084 F801      		movw r30,r16
 440 0086 C081      		ld r28,Z
 441 0088 D181      		ldd r29,Z+1
 442 008a 93E0      		ldi r25,3
 443 008c CC0F      	1:	lsl r28
 444 008e DD1F      		rol r29
 445 0090 9A95      		dec r25
 446 0092 E1F7      		brne 1b
 447 0094 C00F      		add r28,r16
 448 0096 D11F      		adc r29,r17
 450               	.LM16:
 451 0098 8881      		ld r24,Y
 452 009a 9981      		ldd r25,Y+1
 453 009c 9923      		tst r25
 454 009e 6CF0      		brlt .L14
 456               	.LM17:
 457 00a0 CE01      		movw r24,r28
 458 00a2 0E94 0000 		call Unlink
 460               	.LM18:
 461 00a6 F801      		movw r30,r16
 462 00a8 8081      		ld r24,Z
 463 00aa 9181      		ldd r25,Z+1
 464 00ac 2881      		ld r18,Y
 465 00ae 3981      		ldd r19,Y+1
 466 00b0 820F      		add r24,r18
 467 00b2 931F      		adc r25,r19
 468 00b4 8083      		st Z,r24
 469 00b6 9183      		std Z+1,r25
 470               	.LBE2:
 471 00b8 E5CF      		rjmp .L11
 472               	.L14:
 474               	.LM19:
 475 00ba C801      		movw r24,r16
 476               	/* epilogue: frame size=0 */
 477 00bc DF91      		pop r29
 478 00be CF91      		pop r28
 479 00c0 1F91      		pop r17
 480 00c2 0F91      		pop r16
 481 00c4 0895      		ret
 482               	/* epilogue end (size=5) */
 483               	/* function MergeBlocks size 39 (30) */
 488               	.Lscope2:
 494               	.global	sos_blk_mem_longterm_alloc
 496               	sos_blk_mem_longterm_alloc:
 498               	.LM20:
 499               	/* prologue: frame size=0 */
 500 00c6 CF92      		push r12
 501 00c8 DF92      		push r13
 502 00ca EF92      		push r14
 503 00cc FF92      		push r15
 504 00ce 0F93      		push r16
 505 00d0 1F93      		push r17
 506 00d2 CF93      		push r28
 507 00d4 DF93      		push r29
 508               	/* prologue end (size=8) */
 509 00d6 C62E      		mov r12,r22
 511               	.LM21:
 512 00d8 00E0      		ldi r16,lo8(0)
 513 00da 10E0      		ldi r17,hi8(0)
 515               	.LM22:
 516 00dc 0097      		sbiw r24,0
 517 00de 11F4      		brne .L16
 519               	.LM23:
 520 00e0 C801      		movw r24,r16
 521 00e2 6DC0      		rjmp .L15
 522               	.L16:
 524               	.LM24:
 525 00e4 5BE0      		ldi r21,lo8(11)
 526 00e6 E52E      		mov r14,r21
 527 00e8 F12C      		mov r15,__zero_reg__
 528 00ea E80E      		add r14,r24
 529 00ec F91E      		adc r15,r25
 530 00ee 43E0      		ldi r20,3
 531 00f0 F694      	1:	lsr r15
 532 00f2 E794      		ror r14
 533 00f4 4A95      		dec r20
 534 00f6 E1F7      		brne 1b
 536               	.LM25:
 537               	/* #APP */
 538 00f8 DFB6      		in r13, __SREG__
 539 00fa F894      		cli
 540               		
 542               	.LM26:
 543               	/* #NOAPP */
 544 00fc E091 0000 		lds r30,mSentinel
 545 0100 F091 0000 		lds r31,(mSentinel)+1
 546 0104 A581      		ldd r26,Z+5
 547 0106 B681      		ldd r27,Z+6
 548 0108 AE17      		cp r26,r30
 549 010a BF07      		cpc r27,r31
 550 010c 69F0      		breq .L30
 551               	.L20:
 553               	.LM27:
 554 010e CD01      		movw r24,r26
 555 0110 0E94 0000 		call MergeBlocks
 557               	.LM28:
 558 0114 EC01      		movw r28,r24
 559 0116 AD81      		ldd r26,Y+5
 560 0118 BE81      		ldd r27,Y+6
 561 011a 8091 0000 		lds r24,mSentinel
 562 011e 9091 0000 		lds r25,(mSentinel)+1
 563 0122 A817      		cp r26,r24
 564 0124 B907      		cpc r27,r25
 565 0126 99F7      		brne .L20
 566               	.L30:
 568               	.LM29:
 569 0128 E091 0000 		lds r30,mSentinel
 570 012c F091 0000 		lds r31,(mSentinel)+1
 571 0130 A581      		ldd r26,Z+5
 572 0132 B681      		ldd r27,Z+6
 573 0134 AE17      		cp r26,r30
 574 0136 BF07      		cpc r27,r31
 575 0138 99F0      		breq .L33
 576               	.L25:
 578               	.LM30:
 579 013a 0A17      		cp r16,r26
 580 013c 1B07      		cpc r17,r27
 581 013e 38F4      		brsh .L23
 582 0140 8D91      		ld r24,X+
 583 0142 9C91      		ld r25,X
 584 0144 1197      		sbiw r26,1
 585 0146 8E15      		cp r24,r14
 586 0148 9F05      		cpc r25,r15
 587 014a 08F0      		brlo .L23
 589               	.LM31:
 590 014c 8D01      		movw r16,r26
 591               	.L23:
 593               	.LM32:
 594 014e ED01      		movw r28,r26
 595 0150 AD81      		ldd r26,Y+5
 596 0152 BE81      		ldd r27,Y+6
 597 0154 AE17      		cp r26,r30
 598 0156 BF07      		cpc r27,r31
 599 0158 81F7      		brne .L25
 601               	.LM33:
 602 015a 0115      		cp r16,__zero_reg__
 603 015c 1105      		cpc r17,__zero_reg__
 604 015e 21F4      		brne .L26
 605               	.L33:
 607               	.LM34:
 608               	/* #APP */
 609 0160 DFBE      		out __SREG__, r13
 610               		
 612               	.LM35:
 613               	/* #NOAPP */
 614 0162 80E0      		ldi r24,lo8(0)
 615 0164 90E0      		ldi r25,hi8(0)
 616 0166 2BC0      		rjmp .L15
 617               	.L26:
 619               	.LM36:
 620 0168 F801      		movw r30,r16
 621 016a 8081      		ld r24,Z
 622 016c 9181      		ldd r25,Z+1
 623 016e 8E19      		sub r24,r14
 624 0170 9F09      		sbc r25,r15
 625 0172 EC01      		movw r28,r24
 626 0174 33E0      		ldi r19,3
 627 0176 CC0F      	1:	lsl r28
 628 0178 DD1F      		rol r29
 629 017a 3A95      		dec r19
 630 017c E1F7      		brne 1b
 631 017e C00F      		add r28,r16
 632 0180 D11F      		adc r29,r17
 634               	.LM37:
 635 0182 C017      		cp r28,r16
 636 0184 D107      		cpc r29,r17
 637 0186 21F4      		brne .L27
 639               	.LM38:
 640 0188 CE01      		movw r24,r28
 641 018a 0E94 0000 		call Unlink
 642 018e 05C0      		rjmp .L28
 643               	.L27:
 645               	.LM39:
 646 0190 F801      		movw r30,r16
 647 0192 8083      		st Z,r24
 648 0194 9183      		std Z+1,r25
 650               	.LM40:
 651 0196 E882      		st Y,r14
 652 0198 F982      		std Y+1,r15
 653               	.L28:
 655               	.LM41:
 656 019a E881      		ld r30,Y
 657 019c F981      		ldd r31,Y+1
 658 019e F068      		ori r31,hi8(-32768)
 659 01a0 E883      		st Y,r30
 660 01a2 F983      		std Y+1,r31
 662               	.LM42:
 663 01a4 CA82      		std Y+2,r12
 665               	.LM43:
 666 01a6 23E0      		ldi r18,3
 667 01a8 EE0F      	1:	lsl r30
 668 01aa FF1F      		rol r31
 669 01ac 2A95      		dec r18
 670 01ae E1F7      		brne 1b
 671 01b0 EC0F      		add r30,r28
 672 01b2 FD1F      		adc r31,r29
 673 01b4 3197      		sbiw r30,1
 674 01b6 C082      		st Z,r12
 676               	.LM44:
 677               	/* #APP */
 678 01b8 DFBE      		out __SREG__, r13
 679               		
 681               	.LM45:
 682               	/* #NOAPP */
 683 01ba CE01      		movw r24,r28
 684 01bc 0396      		adiw r24,3
 685               	.L15:
 686               	/* epilogue: frame size=0 */
 687 01be DF91      		pop r29
 688 01c0 CF91      		pop r28
 689 01c2 1F91      		pop r17
 690 01c4 0F91      		pop r16
 691 01c6 FF90      		pop r15
 692 01c8 EF90      		pop r14
 693 01ca DF90      		pop r13
 694 01cc CF90      		pop r12
 695 01ce 0895      		ret
 696               	/* epilogue end (size=9) */
 697               	/* function sos_blk_mem_longterm_alloc size 143 (126) */
 706               	.Lscope3:
 711               	InsertAfter:
 713               	.LM46:
 714               	/* prologue: frame size=0 */
 715 01d0 CF93      		push r28
 716 01d2 DF93      		push r29
 717               	/* prologue end (size=2) */
 718 01d4 EC01      		movw r28,r24
 720               	.LM47:
 721 01d6 8091 0000 		lds r24,mSentinel
 722 01da 9091 0000 		lds r25,(mSentinel)+1
 723 01de FC01      		movw r30,r24
 724 01e0 04C0      		rjmp .L40
 725               	.L39:
 727               	.LM48:
 728 01e2 A817      		cp r26,r24
 729 01e4 B907      		cpc r27,r25
 730 01e6 31F0      		breq .L36
 731 01e8 FD01      		movw r30,r26
 732               	.L40:
 733 01ea A581      		ldd r26,Z+5
 734 01ec B681      		ldd r27,Z+6
 735 01ee AC17      		cp r26,r28
 736 01f0 BD07      		cpc r27,r29
 737 01f2 B8F3      		brlo .L39
 738               	.L36:
 740               	.LM49:
 741 01f4 FD01      		movw r30,r26
 742 01f6 8381      		ldd r24,Z+3
 743 01f8 9481      		ldd r25,Z+4
 744 01fa FC01      		movw r30,r24
 745 01fc C583      		std Z+5,r28
 746 01fe D683      		std Z+6,r29
 748               	.LM50:
 749 0200 8B83      		std Y+3,r24
 750 0202 9C83      		std Y+4,r25
 752               	.LM51:
 753 0204 FD01      		movw r30,r26
 754 0206 C383      		std Z+3,r28
 755 0208 D483      		std Z+4,r29
 757               	.LM52:
 758 020a AD83      		std Y+5,r26
 759 020c BE83      		std Y+6,r27
 760               	/* epilogue: frame size=0 */
 761 020e DF91      		pop r29
 762 0210 CF91      		pop r28
 763 0212 0895      		ret
 764               	/* epilogue end (size=3) */
 765               	/* function InsertAfter size 34 (29) */
 770               	.Lscope4:
 776               	SplitBlock:
 778               	.LM53:
 779               	/* prologue: frame size=0 */
 780               	/* prologue end (size=0) */
 781 0214 DC01      		movw r26,r24
 782 0216 9B01      		movw r18,r22
 784               	.LM54:
 785 0218 FB01      		movw r30,r22
 786 021a 63E0      		ldi r22,3
 787 021c EE0F      	1:	lsl r30
 788 021e FF1F      		rol r31
 789 0220 6A95      		dec r22
 790 0222 E1F7      		brne 1b
 791 0224 E80F      		add r30,r24
 792 0226 F91F      		adc r31,r25
 794               	.LM55:
 795 0228 8D91      		ld r24,X+
 796 022a 9C91      		ld r25,X
 797 022c 1197      		sbiw r26,1
 798 022e 821B      		sub r24,r18
 799 0230 930B      		sbc r25,r19
 800 0232 8083      		st Z,r24
 801 0234 9183      		std Z+1,r25
 803               	.LM56:
 804 0236 2D93      		st X+,r18
 805 0238 3C93      		st X,r19
 807               	.LM57:
 808 023a 8081      		ld r24,Z
 809 023c 9181      		ldd r25,Z+1
 810 023e 9F73      		andi r25,hi8(16383)
 811 0240 8083      		st Z,r24
 812 0242 9183      		std Z+1,r25
 814               	.LM58:
 815 0244 CF01      		movw r24,r30
 816 0246 0E94 0000 		call InsertAfter
 817               	/* epilogue: frame size=0 */
 818 024a 0895      		ret
 819               	/* epilogue end (size=1) */
 820               	/* function SplitBlock size 29 (28) */
 825               	.Lscope5:
 831               	.global	sos_blk_mem_alloc
 833               	sos_blk_mem_alloc:
 835               	.LM59:
 836               	/* prologue: frame size=0 */
 837 024c CF92      		push r12
 838 024e DF92      		push r13
 839 0250 EF92      		push r14
 840 0252 FF92      		push r15
 841 0254 0F93      		push r16
 842 0256 1F93      		push r17
 843 0258 CF93      		push r28
 844 025a DF93      		push r29
 845               	/* prologue end (size=8) */
 846 025c C62E      		mov r12,r22
 848               	.LM60:
 849 025e 0097      		sbiw r24,0
 850 0260 09F4      		brne .+2
 851 0262 6FC0      		rjmp .L42
 853               	.LM61:
 854 0264 ABE0      		ldi r26,lo8(11)
 855 0266 EA2E      		mov r14,r26
 856 0268 F12C      		mov r15,__zero_reg__
 857 026a E80E      		add r14,r24
 858 026c F91E      		adc r15,r25
 859 026e F3E0      		ldi r31,3
 860 0270 F694      	1:	lsr r15
 861 0272 E794      		ror r14
 862 0274 FA95      		dec r31
 863 0276 E1F7      		brne 1b
 865               	.LM62:
 866               	/* #APP */
 867 0278 DFB6      		in r13, __SREG__
 868 027a F894      		cli
 869               		
 871               	.LM63:
 872               	/* #NOAPP */
 873 027c E091 0000 		lds r30,mSentinel
 874 0280 F091 0000 		lds r31,(mSentinel)+1
 875 0284 0581      		ldd r16,Z+5
 876 0286 1681      		ldd r17,Z+6
 877 0288 0E17      		cp r16,r30
 878 028a 1F07      		cpc r17,r31
 879 028c 69F1      		breq .L45
 880               	.L60:
 881               	.LBB3:
 882               	.LBB4:
 883               	.LBB5:
 885               	.LM64:
 886 028e D801      		movw r26,r16
 887 0290 CD91      		ld r28,X+
 888 0292 DC91      		ld r29,X
 889 0294 E3E0      		ldi r30,3
 890 0296 CC0F      	1:	lsl r28
 891 0298 DD1F      		rol r29
 892 029a EA95      		dec r30
 893 029c E1F7      		brne 1b
 894 029e C00F      		add r28,r16
 895 02a0 D11F      		adc r29,r17
 897               	.LM65:
 898 02a2 8881      		ld r24,Y
 899 02a4 9981      		ldd r25,Y+1
 900 02a6 9923      		tst r25
 901 02a8 7CF0      		brlt .L50
 903               	.LM66:
 904 02aa CE01      		movw r24,r28
 905 02ac 0E94 0000 		call Unlink
 907               	.LM67:
 908 02b0 F801      		movw r30,r16
 909 02b2 8081      		ld r24,Z
 910 02b4 9181      		ldd r25,Z+1
 911 02b6 2881      		ld r18,Y
 912 02b8 3981      		ldd r19,Y+1
 913 02ba 820F      		add r24,r18
 914 02bc 931F      		adc r25,r19
 915 02be 8083      		st Z,r24
 916 02c0 9183      		std Z+1,r25
 918               	.LM68:
 919 02c2 8E15      		cp r24,r14
 920 02c4 9F05      		cpc r25,r15
 921 02c6 18F3      		brlo .L60
 922               	.L50:
 923               	.LBE5:
 924               	.LBE4:
 925               	.LBE3:
 927               	.LM69:
 928 02c8 D801      		movw r26,r16
 929 02ca 8D91      		ld r24,X+
 930 02cc 9C91      		ld r25,X
 931 02ce 8E15      		cp r24,r14
 932 02d0 9F05      		cpc r25,r15
 933 02d2 50F4      		brsh .L45
 935               	.LM70:
 936 02d4 E801      		movw r28,r16
 937 02d6 0D81      		ldd r16,Y+5
 938 02d8 1E81      		ldd r17,Y+6
 939 02da 8091 0000 		lds r24,mSentinel
 940 02de 9091 0000 		lds r25,(mSentinel)+1
 941 02e2 0817      		cp r16,r24
 942 02e4 1907      		cpc r17,r25
 943 02e6 99F6      		brne .L60
 944               	.L45:
 946               	.LM71:
 947 02e8 8091 0000 		lds r24,mSentinel
 948 02ec 9091 0000 		lds r25,(mSentinel)+1
 949 02f0 0817      		cp r16,r24
 950 02f2 1907      		cpc r17,r25
 951 02f4 21F4      		brne .L54
 953               	.LM72:
 954               	/* #APP */
 955 02f6 DFBE      		out __SREG__, r13
 956               		
 958               	.LM73:
 959               	/* #NOAPP */
 960 02f8 80E0      		ldi r24,lo8(0)
 961 02fa 90E0      		ldi r25,hi8(0)
 962 02fc 22C0      		rjmp .L42
 963               	.L54:
 965               	.LM74:
 966 02fe F801      		movw r30,r16
 967 0300 8081      		ld r24,Z
 968 0302 9181      		ldd r25,Z+1
 969 0304 E816      		cp r14,r24
 970 0306 F906      		cpc r15,r25
 971 0308 20F4      		brsh .L55
 973               	.LM75:
 974 030a B701      		movw r22,r14
 975 030c C801      		movw r24,r16
 976 030e 0E94 0000 		call SplitBlock
 977               	.L55:
 979               	.LM76:
 980 0312 C801      		movw r24,r16
 981 0314 0E94 0000 		call Unlink
 983               	.LM77:
 984 0318 D801      		movw r26,r16
 985 031a ED91      		ld r30,X+
 986 031c FC91      		ld r31,X
 987 031e 1197      		sbiw r26,1
 988 0320 F068      		ori r31,hi8(-32768)
 989 0322 ED93      		st X+,r30
 990 0324 FC93      		st X,r31
 992               	.LM78:
 993 0326 E801      		movw r28,r16
 994 0328 CA82      		std Y+2,r12
 996               	.LM79:
 997 032a 73E0      		ldi r23,3
 998 032c EE0F      	1:	lsl r30
 999 032e FF1F      		rol r31
 1000 0330 7A95      		dec r23
 1001 0332 E1F7      		brne 1b
 1002 0334 E00F      		add r30,r16
 1003 0336 F11F      		adc r31,r17
 1004 0338 3197      		sbiw r30,1
 1005 033a C082      		st Z,r12
 1007               	.LM80:
 1008               	/* #APP */
 1009 033c DFBE      		out __SREG__, r13
 1010               		
 1012               	.LM81:
 1013               	/* #NOAPP */
 1014 033e C801      		movw r24,r16
 1015 0340 0396      		adiw r24,3
 1016               	.L42:
 1017               	/* epilogue: frame size=0 */
 1018 0342 DF91      		pop r29
 1019 0344 CF91      		pop r28
 1020 0346 1F91      		pop r17
 1021 0348 0F91      		pop r16
 1022 034a FF90      		pop r15
 1023 034c EF90      		pop r14
 1024 034e DF90      		pop r13
 1025 0350 CF90      		pop r12
 1026 0352 0895      		ret
 1027               	/* epilogue end (size=9) */
 1028               	/* function sos_blk_mem_alloc size 143 (126) */
 1038               	.Lscope6:
 1043               	.global	sos_blk_mem_free
 1045               	sos_blk_mem_free:
 1047               	.LM82:
 1048               	/* prologue: frame size=0 */
 1049 0354 1F93      		push r17
 1050 0356 CF93      		push r28
 1051 0358 DF93      		push r29
 1052               	/* prologue end (size=3) */
 1054               	.LM83:
 1055 035a 0097      		sbiw r24,0
 1056 035c 41F1      		breq .L61
 1058               	.LM84:
 1059 035e DC01      		movw r26,r24
 1060 0360 1397      		sbiw r26,3
 1062               	.LM85:
 1063 0362 80E0      		ldi r24,hi8(malloc_heap)
 1064 0364 A030      		cpi r26,lo8(malloc_heap)
 1065 0366 B807      		cpc r27,r24
 1066 0368 10F1      		brlo .L61
 1067 036a C0E0      		ldi r28,hi8(malloc_heap+2048)
 1068 036c A030      		cpi r26,lo8(malloc_heap+2048)
 1069 036e BC07      		cpc r27,r28
 1070 0370 F0F4      		brsh .L61
 1072               	.LM86:
 1073 0372 2D91      		ld r18,X+
 1074 0374 3C91      		ld r19,X
 1075 0376 1197      		sbiw r26,1
 1076 0378 3F73      		andi r19,hi8(16383)
 1077 037a F901      		movw r30,r18
 1078 037c C3E0      		ldi r28,3
 1079 037e EE0F      	1:	lsl r30
 1080 0380 FF1F      		rol r31
 1081 0382 CA95      		dec r28
 1082 0384 E1F7      		brne 1b
 1083 0386 EA0F      		add r30,r26
 1084 0388 FB1F      		adc r31,r27
 1085 038a 3197      		sbiw r30,1
 1086 038c ED01      		movw r28,r26
 1087 038e 9A81      		ldd r25,Y+2
 1088 0390 8081      		ld r24,Z
 1089 0392 9817      		cp r25,r24
 1090 0394 61F4      		brne .L61
 1092               	.LM87:
 1093               	/* #APP */
 1094 0396 1FB7      		in r17, __SREG__
 1095 0398 F894      		cli
 1096               		
 1098               	.LM88:
 1099               	/* #NOAPP */
 1100 039a 2D93      		st X+,r18
 1101 039c 3C93      		st X,r19
 1102 039e 1197      		sbiw r26,1
 1104               	.LM89:
 1105 03a0 8FEF      		ldi r24,lo8(-1)
 1106 03a2 FD01      		movw r30,r26
 1107 03a4 8283      		std Z+2,r24
 1109               	.LM90:
 1110 03a6 CD01      		movw r24,r26
 1111 03a8 0E94 0000 		call InsertAfter
 1113               	.LM91:
 1114               	/* #APP */
 1115 03ac 1FBF      		out __SREG__, r17
 1116               		
 1117               	/* #NOAPP */
 1118               	.L61:
 1119               	/* epilogue: frame size=0 */
 1120 03ae DF91      		pop r29
 1121 03b0 CF91      		pop r28
 1122 03b2 1F91      		pop r17
 1123 03b4 0895      		ret
 1124               	/* epilogue end (size=4) */
 1125               	/* function sos_blk_mem_free size 57 (50) */
 1131               	.Lscope7:
 1134               	.global	mem_start
 1136               	mem_start:
 1138               	.LM92:
 1139               	/* prologue: frame size=0 */
 1140               	/* prologue end (size=0) */
 1141               	/* epilogue: frame size=0 */
 1142 03b6 0895      		ret
 1143               	/* epilogue end (size=1) */
 1144               	/* function mem_start size 1 (0) */
 1146               	.Lscope8:
 1150               	.global	mem_remove_all
 1152               	mem_remove_all:
 1154               	.LM93:
 1155               	/* prologue: frame size=0 */
 1156 03b8 0F93      		push r16
 1157 03ba 1F93      		push r17
 1158 03bc CF93      		push r28
 1159 03be DF93      		push r29
 1160               	/* prologue end (size=4) */
 1161 03c0 082F      		mov r16,r24
 1163               	.LM94:
 1164 03c2 C0E0      		ldi r28,lo8(malloc_heap)
 1165 03c4 D0E0      		ldi r29,hi8(malloc_heap)
 1167               	.LM95:
 1168               	/* #APP */
 1169 03c6 1FB7      		in r17, __SREG__
 1170 03c8 F894      		cli
 1171               		
 1172               	/* #NOAPP */
 1173               	.L76:
 1175               	.LM96:
 1176 03ca 8091 0000 		lds r24,mSentinel
 1177 03ce 9091 0000 		lds r25,(mSentinel)+1
 1178 03d2 C817      		cp r28,r24
 1179 03d4 D907      		cpc r29,r25
 1180 03d6 B1F0      		breq .L75
 1182               	.LM97:
 1183 03d8 8A81      		ldd r24,Y+2
 1184 03da 8017      		cp r24,r16
 1185 03dc 49F4      		brne .L70
 1186 03de 8881      		ld r24,Y
 1187 03e0 9981      		ldd r25,Y+1
 1188 03e2 97FF      		sbrs r25,7
 1189 03e4 05C0      		rjmp .L70
 1190               	.LBB6:
 1191               	.LBB7:
 1193               	.Ltext1:
   1:/Users/Administrator/sos-2x/kernel/include/malloc.h **** /* -*- Mode: C; tab-width:4 -*- */
   2:/Users/Administrator/sos-2x/kernel/include/malloc.h **** /* ex: set ts=4: */
   3:/Users/Administrator/sos-2x/kernel/include/malloc.h **** /*
   4:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * Copyright (c) 2003 The Regents of the University of California.
   5:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * All rights reserved.
   6:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  *
   7:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * Redistribution and use in source and binary forms, with or without
   8:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * modification, are permitted provided that the following conditions
   9:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * are met:
  10:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * 1. Redistributions of source code must retain the above copyright
  11:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  *    notice, this list of conditions and the following disclaimer.
  12:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * 2. Redistributions in binary form must reproduce the above
  13:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  *    copyright notice, this list of conditions and the following
  14:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  *    disclaimer in the documentation and/or other materials provided
  15:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  *    with the distribution.
  16:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * 3. All advertising materials mentioning features or use of this
  17:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  *    software must display the following acknowledgement:
  18:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  *       This product includes software developed by Networked &
  19:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  *       Embedded Systems Lab at UCLA
  20:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * 4. Neither the name of the University nor that of the Laboratory
  21:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  *    may be used to endorse or promote products derived from this
  22:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  *    software without specific prior written permission.
  23:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  *
  24:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS''
  25:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
  26:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
  27:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS
  28:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  29:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  30:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
  31:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  32:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  33:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
  34:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
  35:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * SUCH DAMAGE.
  36:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  *
  37:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @brief    Allocte and free dynamic memory 
  38:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @author   Roy Shea (roy@cs.ucla.edu) 
  39:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  */
  40:/Users/Administrator/sos-2x/kernel/include/malloc.h **** #ifndef _MALLOC_H_
  41:/Users/Administrator/sos-2x/kernel/include/malloc.h **** #define _MALLOC_H_
  42:/Users/Administrator/sos-2x/kernel/include/malloc.h **** 
  43:/Users/Administrator/sos-2x/kernel/include/malloc.h **** #include <sos_types.h>
  44:/Users/Administrator/sos-2x/kernel/include/malloc.h **** #include <pid.h>
  45:/Users/Administrator/sos-2x/kernel/include/malloc.h **** #include <malloc_conf.h>
  46:/Users/Administrator/sos-2x/kernel/include/malloc.h **** #include <sos_module_types.h>
  47:/Users/Administrator/sos-2x/kernel/include/malloc.h **** #ifdef FAULT_TOLERANT_SOS
  48:/Users/Administrator/sos-2x/kernel/include/malloc.h **** #include <malloc_domains.h>
  49:/Users/Administrator/sos-2x/kernel/include/malloc.h **** #endif
  50:/Users/Administrator/sos-2x/kernel/include/malloc.h **** 
  51:/Users/Administrator/sos-2x/kernel/include/malloc.h **** /**
  52:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @brief Init function for memory manager
  53:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  */
  54:/Users/Administrator/sos-2x/kernel/include/malloc.h **** extern void mem_init(void);
  55:/Users/Administrator/sos-2x/kernel/include/malloc.h **** 
  56:/Users/Administrator/sos-2x/kernel/include/malloc.h **** /**
  57:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @brief Starting memory module interface
  58:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  */
  59:/Users/Administrator/sos-2x/kernel/include/malloc.h **** extern void mem_start(void);
  60:/Users/Administrator/sos-2x/kernel/include/malloc.h **** 
  61:/Users/Administrator/sos-2x/kernel/include/malloc.h **** /**
  62:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @brief Allocate a chunk of blocks from the heap
  63:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  */
  64:/Users/Administrator/sos-2x/kernel/include/malloc.h **** extern void *sos_blk_mem_alloc(uint16_t size, sos_pid_t id, bool bCallFromModule);
  65:/Users/Administrator/sos-2x/kernel/include/malloc.h **** 
  66:/Users/Administrator/sos-2x/kernel/include/malloc.h **** /**
  67:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @brief Free a block back into the heap
  68:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  */
  69:/Users/Administrator/sos-2x/kernel/include/malloc.h **** extern void sos_blk_mem_free(void* ptr, bool bCallFromModule);
  70:/Users/Administrator/sos-2x/kernel/include/malloc.h **** 
  71:/Users/Administrator/sos-2x/kernel/include/malloc.h **** /**
  72:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @brief Re-allocate a block of memory from the heap
  73:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  */
  74:/Users/Administrator/sos-2x/kernel/include/malloc.h **** extern void *sos_blk_mem_realloc(void* pntr, uint16_t newSize, bool bCallFromModule);
  75:/Users/Administrator/sos-2x/kernel/include/malloc.h **** 
  76:/Users/Administrator/sos-2x/kernel/include/malloc.h **** /**
  77:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @brief Change memory ownership of a segment of memory
  78:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  */
  79:/Users/Administrator/sos-2x/kernel/include/malloc.h **** extern int8_t sos_blk_mem_change_own(void* ptr, sos_pid_t id, bool bCallFromModule);
  80:/Users/Administrator/sos-2x/kernel/include/malloc.h **** 
  81:/Users/Administrator/sos-2x/kernel/include/malloc.h **** /**
  82:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @brief Allocate a block of memory for long term usage
  83:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  */
  84:/Users/Administrator/sos-2x/kernel/include/malloc.h **** extern void *sos_blk_mem_longterm_alloc(uint16_t size, sos_pid_t id, bool bCallFromModule);
  85:/Users/Administrator/sos-2x/kernel/include/malloc.h **** 
  86:/Users/Administrator/sos-2x/kernel/include/malloc.h **** 
  87:/Users/Administrator/sos-2x/kernel/include/malloc.h **** /**
  88:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @brief Allocate dynamic memory
  89:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @param size Number of bytes to allocate
  90:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @param id Node responsible for the memory
  91:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @return Returns a pointer to the allocated memory.
  92:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * Will return a NULL pointer if the call to sys_malloc fails.
  93:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  */
  94:/Users/Administrator/sos-2x/kernel/include/malloc.h **** static inline void *ker_malloc(uint16_t size, sos_pid_t id)
  95:/Users/Administrator/sos-2x/kernel/include/malloc.h **** {
  96:/Users/Administrator/sos-2x/kernel/include/malloc.h ****   return sos_blk_mem_alloc(size, id, false);
  97:/Users/Administrator/sos-2x/kernel/include/malloc.h **** }
  98:/Users/Administrator/sos-2x/kernel/include/malloc.h **** 
  99:/Users/Administrator/sos-2x/kernel/include/malloc.h **** /**
 100:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @brief Reallocate dynamic memory
 101:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @param pntr Pointer to the currently held block of memory
 102:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @param newSize Number of bytes to be allocated
 103:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @return Returns the pointer to the reallocated memory.
 104:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * Returns a NULL if unable to reallocate but the original pointer is still valid.
 105:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  */
 106:/Users/Administrator/sos-2x/kernel/include/malloc.h **** static inline void* ker_realloc(void* pntr, uint16_t newSize)
 107:/Users/Administrator/sos-2x/kernel/include/malloc.h **** {
 108:/Users/Administrator/sos-2x/kernel/include/malloc.h ****   return sos_blk_mem_realloc(pntr, newSize, false);
 109:/Users/Administrator/sos-2x/kernel/include/malloc.h **** }
 110:/Users/Administrator/sos-2x/kernel/include/malloc.h **** 
 111:/Users/Administrator/sos-2x/kernel/include/malloc.h **** /**
 112:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @brief Free memory pointed to by ptr
 113:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @param ptr Pointer to the memory that should be released
 114:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  * @return void
 115:/Users/Administrator/sos-2x/kernel/include/malloc.h ****  */
 116:/Users/Administrator/sos-2x/kernel/include/malloc.h **** static inline void ker_free(void* ptr)
 117:/Users/Administrator/sos-2x/kernel/include/malloc.h **** {
 118:/Users/Administrator/sos-2x/kernel/include/malloc.h ****   sos_blk_mem_free(ptr, false);
 1195               	.LM98:
 1196 03e6 60E0      		ldi r22,lo8(0)
 1197 03e8 CE01      		movw r24,r28
 1198 03ea 0396      		adiw r24,3
 1199 03ec 0E94 0000 		call sos_blk_mem_free
 1200               	.L70:
 1201               	.LBE7:
 1202               	.LBE6:
 1204               	.Ltext2:
 1206               	.LM99:
 1207 03f0 8881      		ld r24,Y
 1208 03f2 9981      		ldd r25,Y+1
 1209 03f4 23E0      		ldi r18,3
 1210 03f6 880F      	1:	lsl r24
 1211 03f8 991F      		rol r25
 1212 03fa 2A95      		dec r18
 1213 03fc E1F7      		brne 1b
 1214 03fe C80F      		add r28,r24
 1215 0400 D91F      		adc r29,r25
 1216 0402 E3CF      		rjmp .L76
 1217               	.L75:
 1219               	.LM100:
 1220               	/* #APP */
 1221 0404 1FBF      		out __SREG__, r17
 1222               		
 1224               	.LM101:
 1225               	/* #NOAPP */
 1226 0406 80E0      		ldi r24,lo8(0)
 1227 0408 90E0      		ldi r25,hi8(0)
 1228               	/* epilogue: frame size=0 */
 1229 040a DF91      		pop r29
 1230 040c CF91      		pop r28
 1231 040e 1F91      		pop r17
 1232 0410 0F91      		pop r16
 1233 0412 0895      		ret
 1234               	/* epilogue end (size=5) */
 1235               	/* function mem_remove_all size 53 (44) */
 1241               	.Lscope9:
 1247               	.global	sos_blk_mem_realloc
 1249               	sos_blk_mem_realloc:
 1251               	.LM102:
 1252               	/* prologue: frame size=0 */
 1253 0414 9F92      		push r9
 1254 0416 AF92      		push r10
 1255 0418 BF92      		push r11
 1256 041a CF92      		push r12
 1257 041c DF92      		push r13
 1258 041e EF92      		push r14
 1259 0420 FF92      		push r15
 1260 0422 0F93      		push r16
 1261 0424 1F93      		push r17
 1262 0426 CF93      		push r28
 1263 0428 DF93      		push r29
 1264               	/* prologue end (size=11) */
 1265 042a 6C01      		movw r12,r24
 1266 042c 8B01      		movw r16,r22
 1267 042e 942E      		mov r9,r20
 1269               	.LM103:
 1270 0430 0097      		sbiw r24,0
 1271 0432 11F0      		breq .L79
 1273               	.LM104:
 1274 0434 672B      		or r22,r23
 1275 0436 11F4      		brne .L78
 1276               	.L79:
 1278               	.LM105:
 1279 0438 B601      		movw r22,r12
 1280 043a 5DC0      		rjmp .L77
 1281               	.L78:
 1283               	.LM106:
 1284 043c EC01      		movw r28,r24
 1285 043e 2397      		sbiw r28,3
 1287               	.LM107:
 1288 0440 055F      		subi r16,lo8(-(11))
 1289 0442 1F4F      		sbci r17,hi8(-(11))
 1290 0444 7801      		movw r14,r16
 1291 0446 53E0      		ldi r21,3
 1292 0448 F694      	1:	lsr r15
 1293 044a E794      		ror r14
 1294 044c 5A95      		dec r21
 1295 044e E1F7      		brne 1b
 1296 0450 0B50      		subi r16,lo8(-(-11))
 1297 0452 1040      		sbci r17,hi8(-(-11))
 1299               	.LM108:
 1300               	/* #APP */
 1301 0454 BFB6      		in r11, __SREG__
 1302 0456 F894      		cli
 1303               		
 1305               	.LM109:
 1306               	/* #NOAPP */
 1307 0458 AA80      		ldd r10,Y+2
 1309               	.LM110:
 1310 045a 8881      		ld r24,Y
 1311 045c 9981      		ldd r25,Y+1
 1312 045e 9F77      		andi r25,hi8(32767)
 1313 0460 8883      		st Y,r24
 1314 0462 9983      		std Y+1,r25
 1316               	.LM111:
 1317 0464 CE01      		movw r24,r28
 1318 0466 0E94 0000 		call MergeBlocks
 1319 046a EC01      		movw r28,r24
 1321               	.LM112:
 1322 046c 8881      		ld r24,Y
 1323 046e 9981      		ldd r25,Y+1
 1324 0470 E816      		cp r14,r24
 1325 0472 F906      		cpc r15,r25
 1326 0474 28F4      		brsh .L80
 1328               	.LM113:
 1329 0476 B701      		movw r22,r14
 1330 0478 CE01      		movw r24,r28
 1331 047a 0E94 0000 		call SplitBlock
 1332 047e 28C0      		rjmp .L81
 1333               	.L80:
 1335               	.LM114:
 1336 0480 8E15      		cp r24,r14
 1337 0482 9F05      		cpc r25,r15
 1338 0484 28F5      		brsh .L81
 1339               	.LBB8:
 1341               	.LM115:
 1342 0486 7C01      		movw r14,r24
 1343 0488 43E0      		ldi r20,3
 1344 048a EE0C      	1:	lsl r14
 1345 048c FF1C      		rol r15
 1346 048e 4A95      		dec r20
 1347 0490 E1F7      		brne 1b
 1348 0492 2DEF      		ldi r18,lo8(-3)
 1349 0494 3FEF      		ldi r19,hi8(-3)
 1350 0496 E20E      		add r14,r18
 1351 0498 F31E      		adc r15,r19
 1353               	.LM116:
 1354 049a 9068      		ori r25,hi8(-32768)
 1355 049c 8883      		st Y,r24
 1356 049e 9983      		std Y+1,r25
 1357               	.LBB9:
 1358               	.LBB10:
 1360               	.Ltext3:
 1362               	.LM117:
 1363 04a0 40E0      		ldi r20,lo8(0)
 1364 04a2 6A2D      		mov r22,r10
 1365 04a4 C801      		movw r24,r16
 1366 04a6 0E94 0000 		call sos_blk_mem_alloc
 1367 04aa EC01      		movw r28,r24
 1368               	.LBE10:
 1369               	.LBE9:
 1371               	.Ltext4:
 1373               	.LM118:
 1374 04ac 892B      		or r24,r25
 1375 04ae 61F0      		breq .L84
 1377               	.LM119:
 1378 04b0 2397      		sbiw r28,3
 1380               	.LM120:
 1381 04b2 A701      		movw r20,r14
 1382 04b4 B601      		movw r22,r12
 1383 04b6 CE01      		movw r24,r28
 1384 04b8 0396      		adiw r24,3
 1385 04ba 0E94 0000 		call memcpy
 1387               	.LM121:
 1388 04be 692D      		mov r22,r9
 1389 04c0 C601      		movw r24,r12
 1390 04c2 0E94 0000 		call sos_blk_mem_free
 1391 04c6 04C0      		rjmp .L81
 1392               	.L84:
 1394               	.LM122:
 1395               	/* #APP */
 1396 04c8 BFBE      		out __SREG__, r11
 1397               		
 1399               	.LM123:
 1400               	/* #NOAPP */
 1401 04ca 60E0      		ldi r22,lo8(0)
 1402 04cc 70E0      		ldi r23,hi8(0)
 1403 04ce 13C0      		rjmp .L77
 1404               	.L81:
 1405               	.LBE8:
 1407               	.LM124:
 1408 04d0 E881      		ld r30,Y
 1409 04d2 F981      		ldd r31,Y+1
 1410 04d4 F068      		ori r31,hi8(-32768)
 1411 04d6 E883      		st Y,r30
 1412 04d8 F983      		std Y+1,r31
 1414               	.LM125:
 1415 04da AA82      		std Y+2,r10
 1417               	.LM126:
 1418 04dc 33E0      		ldi r19,3
 1419 04de EE0F      	1:	lsl r30
 1420 04e0 FF1F      		rol r31
 1421 04e2 3A95      		dec r19
 1422 04e4 E1F7      		brne 1b
 1423 04e6 EC0F      		add r30,r28
 1424 04e8 FD1F      		adc r31,r29
 1425 04ea 3197      		sbiw r30,1
 1426 04ec A082      		st Z,r10
 1428               	.LM127:
 1429               	/* #APP */
 1430 04ee BFBE      		out __SREG__, r11
 1431               		
 1433               	.LM128:
 1434               	/* #NOAPP */
 1435 04f0 BE01      		movw r22,r28
 1436 04f2 6D5F      		subi r22,lo8(-(3))
 1437 04f4 7F4F      		sbci r23,hi8(-(3))
 1438               	.L77:
 1440               	.LM129:
 1441 04f6 CB01      		movw r24,r22
 1442               	/* epilogue: frame size=0 */
 1443 04f8 DF91      		pop r29
 1444 04fa CF91      		pop r28
 1445 04fc 1F91      		pop r17
 1446 04fe 0F91      		pop r16
 1447 0500 FF90      		pop r15
 1448 0502 EF90      		pop r14
 1449 0504 DF90      		pop r13
 1450 0506 CF90      		pop r12
 1451 0508 BF90      		pop r11
 1452 050a AF90      		pop r10
 1453 050c 9F90      		pop r9
 1454 050e 0895      		ret
 1455               	/* epilogue end (size=12) */
 1456               	/* function sos_blk_mem_realloc size 137 (114) */
 1467               	.Lscope10:
 1470               	.global	mem_init
 1472               	mem_init:
 1474               	.LM130:
 1475               	/* prologue: frame size=0 */
 1476               	/* prologue end (size=0) */
 1478               	.LM131:
 1479 0510 40E0      		ldi r20,lo8(malloc_heap)
 1480 0512 50E0      		ldi r21,hi8(malloc_heap)
 1481 0514 5093 0000 		sts (mPool)+1,r21
 1482 0518 4093 0000 		sts mPool,r20
 1484               	.LM132:
 1485 051c 9A01      		movw r18,r20
 1486 051e 2850      		subi r18,lo8(-(2040))
 1487 0520 384F      		sbci r19,hi8(-(2040))
 1488 0522 3093 0000 		sts (mSentinel)+1,r19
 1489 0526 2093 0000 		sts mSentinel,r18
 1491               	.LM133:
 1492 052a 81E0      		ldi r24,lo8(-32767)
 1493 052c 90E8      		ldi r25,hi8(-32767)
 1494 052e 9093 0000 		sts (malloc_heap+2040)+1,r25
 1495 0532 8093 0000 		sts malloc_heap+2040,r24
 1497               	.LM134:
 1498 0536 3093 0000 		sts (malloc_heap+2043)+1,r19
 1499 053a 2093 0000 		sts malloc_heap+2043,r18
 1501               	.LM135:
 1502 053e 3093 0000 		sts (malloc_heap+2045)+1,r19
 1503 0542 2093 0000 		sts malloc_heap+2045,r18
 1505               	.LM136:
 1506 0546 8FEF      		ldi r24,lo8(255)
 1507 0548 90E0      		ldi r25,hi8(255)
 1508 054a 9093 0000 		sts (malloc_heap)+1,r25
 1509 054e 8093 0000 		sts malloc_heap,r24
 1511               	.LM137:
 1512 0552 CA01      		movw r24,r20
 1513 0554 0E94 0000 		call InsertAfter
 1514               	/* epilogue: frame size=0 */
 1515 0558 0895      		ret
 1516               	/* epilogue end (size=1) */
 1517               	/* function mem_init size 37 (36) */
 1519               	.Lscope11:
 1524               	.global	ker_gc_mark
 1526               	ker_gc_mark:
 856:/Users/Administrator/sos-2x/kernel/malloc.c **** }
 857:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 858:/Users/Administrator/sos-2x/kernel/malloc.c **** #if 0
 859:/Users/Administrator/sos-2x/kernel/malloc.c **** static inline void mem_defrag()
 860:/Users/Administrator/sos-2x/kernel/malloc.c **** {
 861:/Users/Administrator/sos-2x/kernel/malloc.c ****   HAS_CRITICAL_SECTION;
 862:/Users/Administrator/sos-2x/kernel/malloc.c ****   Block* block;
 863:/Users/Administrator/sos-2x/kernel/malloc.c ****   ENTER_CRITICAL_SECTION();
 864:/Users/Administrator/sos-2x/kernel/malloc.c ****   printMem("before defrag\n");
 865:/Users/Administrator/sos-2x/kernel/malloc.c ****   for (block = mSentinel->next; block != mSentinel; block = block->next)
 866:/Users/Administrator/sos-2x/kernel/malloc.c ****     {
 867:/Users/Administrator/sos-2x/kernel/malloc.c ****       block = MergeBlocks(block);
 868:/Users/Administrator/sos-2x/kernel/malloc.c ****     }
 869:/Users/Administrator/sos-2x/kernel/malloc.c ****   printMem("after defrag\n");
 870:/Users/Administrator/sos-2x/kernel/malloc.c ****   LEAVE_CRITICAL_SECTION();
 871:/Users/Administrator/sos-2x/kernel/malloc.c **** }
 872:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif
 873:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 874:/Users/Administrator/sos-2x/kernel/malloc.c **** #ifdef SOS_USE_GC
 875:/Users/Administrator/sos-2x/kernel/malloc.c **** static int8_t mem_handler(void *state, Message *msg)
 876:/Users/Administrator/sos-2x/kernel/malloc.c **** {
 877:/Users/Administrator/sos-2x/kernel/malloc.c ****   switch(msg->type){
 878:/Users/Administrator/sos-2x/kernel/malloc.c ****   case MSG_TIMER_TIMEOUT:
 879:/Users/Administrator/sos-2x/kernel/malloc.c ****     {
 880:/Users/Administrator/sos-2x/kernel/malloc.c ****       //mem_defrag();
 881:/Users/Administrator/sos-2x/kernel/malloc.c **** 	  //led_yellow_toggle();
 882:/Users/Administrator/sos-2x/kernel/malloc.c **** 	  malloc_gc_kernel();
 883:/Users/Administrator/sos-2x/kernel/malloc.c **** 	  //led_yellow_toggle();
 884:/Users/Administrator/sos-2x/kernel/malloc.c ****       break;
 885:/Users/Administrator/sos-2x/kernel/malloc.c ****     }
 886:/Users/Administrator/sos-2x/kernel/malloc.c ****   case MSG_INIT:
 887:/Users/Administrator/sos-2x/kernel/malloc.c ****     {
 888:/Users/Administrator/sos-2x/kernel/malloc.c ****       ker_timer_init(KER_MEM_PID, 0, TIMER_REPEAT);
 889:/Users/Administrator/sos-2x/kernel/malloc.c ****       ker_timer_start(KER_MEM_PID, 0, MEM_GC_PERIOD);
 890:/Users/Administrator/sos-2x/kernel/malloc.c ****       break;
 891:/Users/Administrator/sos-2x/kernel/malloc.c ****     }
 892:/Users/Administrator/sos-2x/kernel/malloc.c ****   case MSG_DEBUG:
 893:/Users/Administrator/sos-2x/kernel/malloc.c ****     {
 894:/Users/Administrator/sos-2x/kernel/malloc.c ****       break;
 895:/Users/Administrator/sos-2x/kernel/malloc.c ****     }
 896:/Users/Administrator/sos-2x/kernel/malloc.c ****   default:
 897:/Users/Administrator/sos-2x/kernel/malloc.c ****     return -EINVAL;
 898:/Users/Administrator/sos-2x/kernel/malloc.c ****   }
 899:/Users/Administrator/sos-2x/kernel/malloc.c ****   return SOS_OK;
 900:/Users/Administrator/sos-2x/kernel/malloc.c **** }
 901:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif /* #ifdef SOS_USE_GC */
 902:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 903:/Users/Administrator/sos-2x/kernel/malloc.c **** #if 0
 904:/Users/Administrator/sos-2x/kernel/malloc.c **** static void verify_memory( void )
 905:/Users/Administrator/sos-2x/kernel/malloc.c **** {
 906:/Users/Administrator/sos-2x/kernel/malloc.c ****   Block* block;
 907:/Users/Administrator/sos-2x/kernel/malloc.c ****   block = (Block*)malloc_heap;
 908:/Users/Administrator/sos-2x/kernel/malloc.c ****   Block* next_block;
 909:/Users/Administrator/sos-2x/kernel/malloc.c ****   while(block != mSentinel) {
 910:/Users/Administrator/sos-2x/kernel/malloc.c ****     next_block = block + (block->blockhdr.blocks & ~MEM_MASK);
 911:/Users/Administrator/sos-2x/kernel/malloc.c ****     if( block->blockhdr.blocks & RESERVED ) {
 912:/Users/Administrator/sos-2x/kernel/malloc.c ****       if( block->blockhdr.owner != BLOCK_GUARD_BYTE(block) ) {
 913:/Users/Administrator/sos-2x/kernel/malloc.c **** 	ker_led(LED_RED_TOGGLE);
 914:/Users/Administrator/sos-2x/kernel/malloc.c **** 	return;
 915:/Users/Administrator/sos-2x/kernel/malloc.c ****       }
 916:/Users/Administrator/sos-2x/kernel/malloc.c ****     }
 917:/Users/Administrator/sos-2x/kernel/malloc.c ****     if( next_block != mSentinel) {
 918:/Users/Administrator/sos-2x/kernel/malloc.c ****       if( (next_block->blockhdr.blocks & ~MEM_MASK) > ((MALLOC_HEAP_SIZE + (BLOCK_SIZE - 1))/BLOCK_
 919:/Users/Administrator/sos-2x/kernel/malloc.c **** 	ker_led(LED_GREEN_TOGGLE);
 920:/Users/Administrator/sos-2x/kernel/malloc.c **** 	ker_led(LED_RED_TOGGLE);
 921:/Users/Administrator/sos-2x/kernel/malloc.c **** 	return;
 922:/Users/Administrator/sos-2x/kernel/malloc.c ****       }	
 923:/Users/Administrator/sos-2x/kernel/malloc.c ****     }
 924:/Users/Administrator/sos-2x/kernel/malloc.c ****     block = next_block;
 925:/Users/Administrator/sos-2x/kernel/malloc.c ****   }
 926:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 927:/Users/Administrator/sos-2x/kernel/malloc.c **** }
 928:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif
 929:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 930:/Users/Administrator/sos-2x/kernel/malloc.c **** int8_t ker_gc_mark( sos_pid_t pid, void *pntr )
 931:/Users/Administrator/sos-2x/kernel/malloc.c **** {
 1528               	.LM138:
 1529               	/* prologue: frame size=0 */
 1530               	/* prologue end (size=0) */
 1531 055a 482F      		mov r20,r24
 932:/Users/Administrator/sos-2x/kernel/malloc.c **** 	Block* baseArea;   // convert to a block address
 933:/Users/Administrator/sos-2x/kernel/malloc.c **** 	Block* itr;
 934:/Users/Administrator/sos-2x/kernel/malloc.c **** 	
 935:/Users/Administrator/sos-2x/kernel/malloc.c **** 	baseArea = TO_BLOCK_PTR(pntr);   // convert to a block address
 1533               	.LM139:
 1534 055c 6350      		subi r22,lo8(-(-3))
 1535 055e 7040      		sbci r23,hi8(-(-3))
 936:/Users/Administrator/sos-2x/kernel/malloc.c **** 	
 937:/Users/Administrator/sos-2x/kernel/malloc.c **** 	if ( (baseArea < malloc_heap) || (baseArea >= (malloc_heap + NUM_HEAP_BLOCKS)) ) {
 1537               	.LM140:
 1538 0560 80E0      		ldi r24,hi8(malloc_heap)
 1539 0562 6030      		cpi r22,lo8(malloc_heap)
 1540 0564 7807      		cpc r23,r24
 1541 0566 10F1      		brlo .L93
 1543               	.LM141:
 1544 0568 80E0      		ldi r24,hi8(malloc_heap+2048)
 1545 056a 6030      		cpi r22,lo8(malloc_heap+2048)
 1546 056c 7807      		cpc r23,r24
 1547 056e 38F0      		brlo .L88
 1548 0570 1DC0      		rjmp .L93
 1549               	.L96:
 938:/Users/Administrator/sos-2x/kernel/malloc.c **** 		// Not a valid block
 939:/Users/Administrator/sos-2x/kernel/malloc.c **** 		return -EINVAL;
 940:/Users/Administrator/sos-2x/kernel/malloc.c **** 	}
 941:/Users/Administrator/sos-2x/kernel/malloc.c **** 	
 942:/Users/Administrator/sos-2x/kernel/malloc.c **** 	//
 943:/Users/Administrator/sos-2x/kernel/malloc.c **** 	// Traverse the memory list to make sure that this is a valid memory block
 944:/Users/Administrator/sos-2x/kernel/malloc.c **** 	//
 945:/Users/Administrator/sos-2x/kernel/malloc.c **** 	itr = (Block*)malloc_heap;
 946:/Users/Administrator/sos-2x/kernel/malloc.c **** 	while(itr != mSentinel && itr >= malloc_heap && itr < &(malloc_heap[NUM_HEAP_BLOCKS])) {
 947:/Users/Administrator/sos-2x/kernel/malloc.c **** 		if( itr == baseArea ) {
 948:/Users/Administrator/sos-2x/kernel/malloc.c **** 			if( (itr->blockhdr.owner == pid) && 
 949:/Users/Administrator/sos-2x/kernel/malloc.c **** 					((itr->blockhdr.blocks & RESERVED) != 0)) {
 950:/Users/Administrator/sos-2x/kernel/malloc.c **** 				DEBUG_GC("Mark memory: %d\n", (int) itr->userPart);
 951:/Users/Administrator/sos-2x/kernel/malloc.c **** #ifdef SOS_PROFILE_FRAGMENTATION
 952:/Users/Administrator/sos-2x/kernel/malloc.c **** 				ker_gc_bytes_temp += BLOCKS_TO_BYTES(itr->blockhdr.blocks);
 953:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif
 954:/Users/Administrator/sos-2x/kernel/malloc.c **** 				itr->blockhdr.blocks |= GC_MARK;
 1551               	.LM142:
 1552 0572 9064      		ori r25,hi8(16384)
 1553 0574 8083      		st Z,r24
 1554 0576 9183      		std Z+1,r25
 955:/Users/Administrator/sos-2x/kernel/malloc.c **** 				return SOS_OK;
 1556               	.LM143:
 1557 0578 80E0      		ldi r24,lo8(0)
 1558 057a 90E0      		ldi r25,hi8(0)
 1559 057c 0895      		ret
 1560               	.L88:
 1562               	.LM144:
 1563 057e E0E0      		ldi r30,lo8(malloc_heap)
 1564 0580 F0E0      		ldi r31,hi8(malloc_heap)
 956:/Users/Administrator/sos-2x/kernel/malloc.c **** 			}
 957:/Users/Administrator/sos-2x/kernel/malloc.c **** 			return -EINVAL;
 958:/Users/Administrator/sos-2x/kernel/malloc.c **** 		}
 959:/Users/Administrator/sos-2x/kernel/malloc.c **** 		itr += itr->blockhdr.blocks & ~MEM_MASK;
 1566               	.LM145:
 1567 0582 2091 0000 		lds r18,mSentinel
 1568 0586 3091 0000 		lds r19,(mSentinel)+1
 1569 058a E217      		cp r30,r18
 1570 058c F307      		cpc r31,r19
 1571 058e 09F1      		breq .L91
 1572               	.L97:
 1573 0590 80E0      		ldi r24,hi8(malloc_heap+2048)
 1574 0592 E030      		cpi r30,lo8(malloc_heap+2048)
 1575 0594 F807      		cpc r31,r24
 1576 0596 E8F4      		brsh .L91
 1578               	.LM146:
 1579 0598 E617      		cp r30,r22
 1580 059a F707      		cpc r31,r23
 1581 059c 51F4      		brne .L92
 1583               	.LM147:
 1584 059e 8281      		ldd r24,Z+2
 1585 05a0 8417      		cp r24,r20
 1586 05a2 21F4      		brne .L93
 1587 05a4 8081      		ld r24,Z
 1588 05a6 9181      		ldd r25,Z+1
 1589 05a8 9923      		tst r25
 1590 05aa 1CF3      		brlt .L96
 1591               	.L93:
 1593               	.LM148:
 1594 05ac 8AEE      		ldi r24,lo8(-22)
 1595 05ae 9FEF      		ldi r25,hi8(-22)
 1596 05b0 0895      		ret
 1597               	.L92:
 1599               	.LM149:
 1600 05b2 8081      		ld r24,Z
 1601 05b4 9181      		ldd r25,Z+1
 1602 05b6 A3E0      		ldi r26,3
 1603 05b8 880F      	1:	lsl r24
 1604 05ba 991F      		rol r25
 1605 05bc AA95      		dec r26
 1606 05be E1F7      		brne 1b
 1607 05c0 E80F      		add r30,r24
 1608 05c2 F91F      		adc r31,r25
 1609 05c4 E217      		cp r30,r18
 1610 05c6 F307      		cpc r31,r19
 1611 05c8 21F0      		breq .L91
 1612 05ca 80E0      		ldi r24,hi8(malloc_heap)
 1613 05cc E030      		cpi r30,lo8(malloc_heap)
 1614 05ce F807      		cpc r31,r24
 1615 05d0 F8F6      		brsh .L97
 1616               	.L91:
 960:/Users/Administrator/sos-2x/kernel/malloc.c **** 	}
 961:/Users/Administrator/sos-2x/kernel/malloc.c **** 	return -EINVAL;
 1618               	.LM150:
 1619 05d2 8AEE      		ldi r24,lo8(-22)
 1620 05d4 9FEF      		ldi r25,hi8(-22)
 962:/Users/Administrator/sos-2x/kernel/malloc.c **** }
 1622               	.LM151:
 1623 05d6 0895      		ret
 1624               	/* epilogue: frame size=0 */
 1625 05d8 0895      		ret
 1626               	/* epilogue end (size=1) */
 1627               	/* function ker_gc_mark size 65 (64) */
 1633               	.Lscope12:
 1637               	.global	malloc_gc
 1639               	malloc_gc:
 963:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 964:/Users/Administrator/sos-2x/kernel/malloc.c **** //
 965:/Users/Administrator/sos-2x/kernel/malloc.c **** // GC a module
 966:/Users/Administrator/sos-2x/kernel/malloc.c **** //
 967:/Users/Administrator/sos-2x/kernel/malloc.c **** void malloc_gc(sos_pid_t pid)
 968:/Users/Administrator/sos-2x/kernel/malloc.c **** {
 1641               	.LM152:
 1642               	/* prologue: frame size=0 */
 1643 05da 1F93      		push r17
 1644 05dc CF93      		push r28
 1645 05de DF93      		push r29
 1646               	/* prologue end (size=3) */
 1647 05e0 182F      		mov r17,r24
 969:/Users/Administrator/sos-2x/kernel/malloc.c **** #ifdef SOS_DEBUG_GC
 970:/Users/Administrator/sos-2x/kernel/malloc.c **** 	int i;
 971:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif
 972:/Users/Administrator/sos-2x/kernel/malloc.c **** 	Block* block = (Block*)malloc_heap;
 1649               	.LM153:
 1650 05e2 C0E0      		ldi r28,lo8(malloc_heap)
 1651 05e4 D0E0      		ldi r29,hi8(malloc_heap)
 973:/Users/Administrator/sos-2x/kernel/malloc.c **** 	//
 974:/Users/Administrator/sos-2x/kernel/malloc.c **** 	// Traverse the memory
 975:/Users/Administrator/sos-2x/kernel/malloc.c **** 	// Look for matching pid
 976:/Users/Administrator/sos-2x/kernel/malloc.c **** 	// If the memory is reserved and is not marked, free it
 977:/Users/Administrator/sos-2x/kernel/malloc.c **** 	//
 978:/Users/Administrator/sos-2x/kernel/malloc.c **** 	for (block = (Block*)malloc_heap; 
 1653               	.LM154:
 1654 05e6 8091 0000 		lds r24,mSentinel
 1655 05ea 9091 0000 		lds r25,(mSentinel)+1
 1656 05ee C817      		cp r28,r24
 1657 05f0 D907      		cpc r29,r25
 1658 05f2 C1F1      		breq .L100
 1660               	.LM155:
 1661 05f4 80E0      		ldi r24,hi8(malloc_heap+2048)
 1662 05f6 C030      		cpi r28,lo8(malloc_heap+2048)
 1663 05f8 D807      		cpc r29,r24
 1664 05fa A0F5      		brsh .L100
 1665               	.L106:
 979:/Users/Administrator/sos-2x/kernel/malloc.c ****        block != mSentinel && block >= malloc_heap && block < &(malloc_heap[NUM_HEAP_BLOCKS]); 
 980:/Users/Administrator/sos-2x/kernel/malloc.c ****        block += block->blockhdr.blocks & ~MEM_MASK) 
 981:/Users/Administrator/sos-2x/kernel/malloc.c ****     {
 982:/Users/Administrator/sos-2x/kernel/malloc.c **** 		if ( (block->blockhdr.owner == pid) &&
 1667               	.LM156:
 1668 05fc 8A81      		ldd r24,Y+2
 1669 05fe 8117      		cp r24,r17
 1670 0600 C9F4      		brne .L101
 1671 0602 2881      		ld r18,Y
 1672 0604 3981      		ldd r19,Y+1
 1673 0606 37FF      		sbrs r19,7
 1674 0608 15C0      		rjmp .L101
 983:/Users/Administrator/sos-2x/kernel/malloc.c **** 		((block->blockhdr.blocks & RESERVED) != 0) ) { 
 984:/Users/Administrator/sos-2x/kernel/malloc.c **** 			if( ((block->blockhdr.blocks & GC_MARK) == 0) ){
 1676               	.LM157:
 1677 060a C901      		movw r24,r18
 1678 060c 84E0      		ldi r24,0x04
 1679 060e 989F      		mul r25,r24
 1680 0610 812D      		mov r24,r1
 1681 0612 9927      		clr r25
 1682 0614 1124      		clr __zero_reg__
 1683 0616 80FD      		sbrc r24,0
 1684 0618 0AC0      		rjmp .L103
 985:/Users/Administrator/sos-2x/kernel/malloc.c **** 				DEBUG_GC("Found memory leak: %d\n", (int) block->userPart);
 986:/Users/Administrator/sos-2x/kernel/malloc.c **** #ifdef SOS_PROFILE_FRAGMENTATION
 987:/Users/Administrator/sos-2x/kernel/malloc.c **** 				mf.leak_pid = pid;
 988:/Users/Administrator/sos-2x/kernel/malloc.c **** #else
 989:/Users/Administrator/sos-2x/kernel/malloc.c **** 				led_red_toggle();
 1686               	.LM158:
 1687 061a 8BB3      		in r24,59-0x20
 1688 061c 94E0      		ldi r25,lo8(4)
 1689 061e 8927      		eor r24,r25
 1690 0620 8BBB      		out 59-0x20,r24
 1691               	.LBB11:
 1692               	.LBB12:
 1694               	.Ltext5:
 1696               	.LM159:
 1697 0622 60E0      		ldi r22,lo8(0)
 1698 0624 CE01      		movw r24,r28
 1699 0626 0396      		adiw r24,3
 1700 0628 0E94 0000 		call sos_blk_mem_free
 1701               	.LBE12:
 1702               	.LBE11:
 1703 062c 03C0      		rjmp .L101
 1704               	.L103:
 1706               	.Ltext6:
 990:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif
 991:/Users/Administrator/sos-2x/kernel/malloc.c **** 
 992:/Users/Administrator/sos-2x/kernel/malloc.c **** 				ker_free(block->userPart);
 993:/Users/Administrator/sos-2x/kernel/malloc.c **** 			} else {
 994:/Users/Administrator/sos-2x/kernel/malloc.c **** 				block->blockhdr.blocks &= ~GC_MARK;
 1708               	.LM160:
 1709 062e 3F7B      		andi r19,hi8(-16385)
 1710 0630 2883      		st Y,r18
 1711 0632 3983      		std Y+1,r19
 1712               	.L101:
 1714               	.LM161:
 1715 0634 8881      		ld r24,Y
 1716 0636 9981      		ldd r25,Y+1
 1717 0638 B3E0      		ldi r27,3
 1718 063a 880F      	1:	lsl r24
 1719 063c 991F      		rol r25
 1720 063e BA95      		dec r27
 1721 0640 E1F7      		brne 1b
 1722 0642 C80F      		add r28,r24
 1723 0644 D91F      		adc r29,r25
 1724 0646 8091 0000 		lds r24,mSentinel
 1725 064a 9091 0000 		lds r25,(mSentinel)+1
 1726 064e C817      		cp r28,r24
 1727 0650 D907      		cpc r29,r25
 1728 0652 41F0      		breq .L100
 1729 0654 80E0      		ldi r24,hi8(malloc_heap)
 1730 0656 C030      		cpi r28,lo8(malloc_heap)
 1731 0658 D807      		cpc r29,r24
 1732 065a 20F0      		brlo .L100
 1733 065c 80E0      		ldi r24,hi8(malloc_heap+2048)
 1734 065e C030      		cpi r28,lo8(malloc_heap+2048)
 1735 0660 D807      		cpc r29,r24
 1736 0662 60F2      		brlo .L106
 1737               	.L100:
 1738               	/* epilogue: frame size=0 */
 1739 0664 DF91      		pop r29
 1740 0666 CF91      		pop r28
 1741 0668 1F91      		pop r17
 1742 066a 0895      		ret
 1743               	/* epilogue end (size=4) */
 1744               	/* function malloc_gc size 74 (67) */
 1749               	.Lscope13:
 1752               	.global	malloc_gc_kernel
 1754               	malloc_gc_kernel:
 995:/Users/Administrator/sos-2x/kernel/malloc.c **** 			}		
 996:/Users/Administrator/sos-2x/kernel/malloc.c **** 		}
 997:/Users/Administrator/sos-2x/kernel/malloc.c **** 	}
 998:/Users/Administrator/sos-2x/kernel/malloc.c **** 	
 999:/Users/Administrator/sos-2x/kernel/malloc.c **** #ifdef SOS_DEBUG_GC
1000:/Users/Administrator/sos-2x/kernel/malloc.c **** 	for (block = (Block*)malloc_heap, i= 0; 
1001:/Users/Administrator/sos-2x/kernel/malloc.c ****        block != mSentinel; 
1002:/Users/Administrator/sos-2x/kernel/malloc.c ****        block += block->blockhdr.blocks & ~MEM_MASK) 
1003:/Users/Administrator/sos-2x/kernel/malloc.c ****     {
1004:/Users/Administrator/sos-2x/kernel/malloc.c **** 		DEBUG_GC("block %d : addr: %x size: %d alloc: %d owner: %d check %d\n", i++, 
1005:/Users/Administrator/sos-2x/kernel/malloc.c **** 	  (unsigned int) block, 
1006:/Users/Administrator/sos-2x/kernel/malloc.c **** 	  (unsigned int) (block->blockhdr.blocks & ~MEM_MASK), 
1007:/Users/Administrator/sos-2x/kernel/malloc.c **** 	  (unsigned int) (block->blockhdr.blocks & RESERVED)? 1 : 0, 
1008:/Users/Administrator/sos-2x/kernel/malloc.c **** 	  (unsigned int) block->blockhdr.owner,
1009:/Users/Administrator/sos-2x/kernel/malloc.c **** 	  (unsigned int) BLOCK_GUARD_BYTE(block));
1010:/Users/Administrator/sos-2x/kernel/malloc.c ****     }
1011:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif
1012:/Users/Administrator/sos-2x/kernel/malloc.c **** 
1013:/Users/Administrator/sos-2x/kernel/malloc.c **** }
1014:/Users/Administrator/sos-2x/kernel/malloc.c **** 
1015:/Users/Administrator/sos-2x/kernel/malloc.c **** //
1016:/Users/Administrator/sos-2x/kernel/malloc.c **** // GC entire kernel
1017:/Users/Administrator/sos-2x/kernel/malloc.c **** //
1018:/Users/Administrator/sos-2x/kernel/malloc.c **** void malloc_gc_kernel( void )
1019:/Users/Administrator/sos-2x/kernel/malloc.c **** {
 1756               	.LM162:
 1757               	/* prologue: frame size=0 */
 1758               	/* prologue end (size=0) */
 1759               	/* epilogue: frame size=0 */
 1760 066c 0895      		ret
 1761               	/* epilogue end (size=1) */
 1762               	/* function malloc_gc_kernel size 1 (0) */
 1764               	.Lscope14:
 1768               	.global	malloc_gc_module
 1770               	malloc_gc_module:
1020:/Users/Administrator/sos-2x/kernel/malloc.c **** #ifdef SOS_USE_GC
1021:/Users/Administrator/sos-2x/kernel/malloc.c **** 	HAS_CRITICAL_SECTION;
1022:/Users/Administrator/sos-2x/kernel/malloc.c **** 	ENTER_CRITICAL_SECTION();
1023:/Users/Administrator/sos-2x/kernel/malloc.c **** #ifdef SOS_PROFILE_FRAGMENTATION
1024:/Users/Administrator/sos-2x/kernel/malloc.c **** 	ker_gc_bytes_temp = 0;
1025:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif
1026:/Users/Administrator/sos-2x/kernel/malloc.c **** 	shm_gc();
1027:/Users/Administrator/sos-2x/kernel/malloc.c **** 	LEAVE_CRITICAL_SECTION();
1028:/Users/Administrator/sos-2x/kernel/malloc.c **** 
1029:/Users/Administrator/sos-2x/kernel/malloc.c **** 	ENTER_CRITICAL_SECTION();
1030:/Users/Administrator/sos-2x/kernel/malloc.c **** 	timer_gc();
1031:/Users/Administrator/sos-2x/kernel/malloc.c **** 	LEAVE_CRITICAL_SECTION();
1032:/Users/Administrator/sos-2x/kernel/malloc.c **** 
1033:/Users/Administrator/sos-2x/kernel/malloc.c **** 	ENTER_CRITICAL_SECTION();
1034:/Users/Administrator/sos-2x/kernel/malloc.c **** 	sched_gc();
1035:/Users/Administrator/sos-2x/kernel/malloc.c **** 	LEAVE_CRITICAL_SECTION();
1036:/Users/Administrator/sos-2x/kernel/malloc.c **** #ifdef SOS_RADIO_CHANNEL
1037:/Users/Administrator/sos-2x/kernel/malloc.c **** 	ENTER_CRITICAL_SECTION();
1038:/Users/Administrator/sos-2x/kernel/malloc.c **** 	radio_gc();
1039:/Users/Administrator/sos-2x/kernel/malloc.c **** 	LEAVE_CRITICAL_SECTION();
1040:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif
1041:/Users/Administrator/sos-2x/kernel/malloc.c **** 
1042:/Users/Administrator/sos-2x/kernel/malloc.c **** #ifdef SOS_UART_CHANNEL
1043:/Users/Administrator/sos-2x/kernel/malloc.c **** 	ENTER_CRITICAL_SECTION();
1044:/Users/Administrator/sos-2x/kernel/malloc.c **** 	uart_gc();
1045:/Users/Administrator/sos-2x/kernel/malloc.c **** 	LEAVE_CRITICAL_SECTION();
1046:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif
1047:/Users/Administrator/sos-2x/kernel/malloc.c **** 
1048:/Users/Administrator/sos-2x/kernel/malloc.c **** 	ENTER_CRITICAL_SECTION();
1049:/Users/Administrator/sos-2x/kernel/malloc.c **** 	mq_gc();
1050:/Users/Administrator/sos-2x/kernel/malloc.c **** #ifdef SOS_PROFILE_FRAGMENTATION
1051:/Users/Administrator/sos-2x/kernel/malloc.c **** 	mf.ker_gc_bytes = ker_gc_bytes_temp;
1052:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif
1053:/Users/Administrator/sos-2x/kernel/malloc.c **** 	LEAVE_CRITICAL_SECTION();
1054:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif
1055:/Users/Administrator/sos-2x/kernel/malloc.c **** }
1056:/Users/Administrator/sos-2x/kernel/malloc.c **** 
1057:/Users/Administrator/sos-2x/kernel/malloc.c **** uint8_t malloc_gc_module( sos_pid_t pid )
1058:/Users/Administrator/sos-2x/kernel/malloc.c **** {
 1772               	.LM163:
 1773               	/* prologue: frame size=0 */
 1774               	/* prologue end (size=0) */
1059:/Users/Administrator/sos-2x/kernel/malloc.c **** #ifdef SOS_USE_GC
1060:/Users/Administrator/sos-2x/kernel/malloc.c **** 	sos_module_t *mcb;
1061:/Users/Administrator/sos-2x/kernel/malloc.c **** 	Block* block;
1062:/Users/Administrator/sos-2x/kernel/malloc.c **** 	uint8_t mod_memmap_cnt = 0;
1063:/Users/Administrator/sos-2x/kernel/malloc.c **** 	Block** mod_memmap;
1064:/Users/Administrator/sos-2x/kernel/malloc.c **** 	uint8_t mod_stack_sp = 0;
1065:/Users/Administrator/sos-2x/kernel/malloc.c **** 	Block** mod_gc_stack;
1066:/Users/Administrator/sos-2x/kernel/malloc.c **** 	
1067:/Users/Administrator/sos-2x/kernel/malloc.c **** 	Block*  mod_memmap_buf[MEM_MOD_GC_STACK_SIZE];
1068:/Users/Administrator/sos-2x/kernel/malloc.c **** 	Block*  mod_gc_stack_buf[MEM_MOD_GC_STACK_SIZE];
1069:/Users/Administrator/sos-2x/kernel/malloc.c **** 	uint8_t num_leaks = 0;
1070:/Users/Administrator/sos-2x/kernel/malloc.c **** #ifdef SOS_PROFILE_FRAGMENTATION
1071:/Users/Administrator/sos-2x/kernel/malloc.c **** 	uint16_t num_bytes_gc = 0;
1072:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif
1073:/Users/Administrator/sos-2x/kernel/malloc.c **** 	HAS_CRITICAL_SECTION;
1074:/Users/Administrator/sos-2x/kernel/malloc.c **** 	//
1075:/Users/Administrator/sos-2x/kernel/malloc.c **** 	// Get module control block
1076:/Users/Administrator/sos-2x/kernel/malloc.c **** 	//
1077:/Users/Administrator/sos-2x/kernel/malloc.c **** 	mcb = ker_get_module( pid );
1078:/Users/Administrator/sos-2x/kernel/malloc.c **** 	
1079:/Users/Administrator/sos-2x/kernel/malloc.c **** 	if( mcb == NULL || mcb->handler_state == NULL) {
1080:/Users/Administrator/sos-2x/kernel/malloc.c **** 		return 0;
1081:/Users/Administrator/sos-2x/kernel/malloc.c **** 	}
1082:/Users/Administrator/sos-2x/kernel/malloc.c **** 	
1083:/Users/Administrator/sos-2x/kernel/malloc.c **** 	if( (mcb->flag & SOS_KER_STATIC_MODULE) != 0 ) {
1084:/Users/Administrator/sos-2x/kernel/malloc.c **** 		// Don't check for static module (kernel module)
1085:/Users/Administrator/sos-2x/kernel/malloc.c **** 		return 0;
1086:/Users/Administrator/sos-2x/kernel/malloc.c **** 		//Block* baseArea; 
1087:/Users/Administrator/sos-2x/kernel/malloc.c **** 		//baseArea = TO_BLOCK_PTR(mcb->handler_state);
1088:/Users/Administrator/sos-2x/kernel/malloc.c **** 		//baseArea->blockhdr.blocks |= GC_MARK;
1089:/Users/Administrator/sos-2x/kernel/malloc.c **** 	}
1090:/Users/Administrator/sos-2x/kernel/malloc.c **** 	
1091:/Users/Administrator/sos-2x/kernel/malloc.c **** 	ENTER_CRITICAL_SECTION();
1092:/Users/Administrator/sos-2x/kernel/malloc.c **** 	//
1093:/Users/Administrator/sos-2x/kernel/malloc.c **** 	// get number of blocks we need to check against
1094:/Users/Administrator/sos-2x/kernel/malloc.c **** 	//
1095:/Users/Administrator/sos-2x/kernel/malloc.c **** 	DEBUG_GC("in malloc_gc_module\n");
1096:/Users/Administrator/sos-2x/kernel/malloc.c **** 	DEBUG_GC("get number of blocks\n");
1097:/Users/Administrator/sos-2x/kernel/malloc.c **** 	for (block = (Block*)malloc_heap; 
1098:/Users/Administrator/sos-2x/kernel/malloc.c ****        block != mSentinel && block >= malloc_heap && block < &(malloc_heap[NUM_HEAP_BLOCKS]); 
1099:/Users/Administrator/sos-2x/kernel/malloc.c ****        block += block->blockhdr.blocks & ~MEM_MASK) 
1100:/Users/Administrator/sos-2x/kernel/malloc.c ****     {
1101:/Users/Administrator/sos-2x/kernel/malloc.c **** 		if ( (block->blockhdr.owner == pid) &&
1102:/Users/Administrator/sos-2x/kernel/malloc.c **** 		((block->blockhdr.blocks & RESERVED) != 0) ) { 
1103:/Users/Administrator/sos-2x/kernel/malloc.c **** 			mod_memmap_cnt++;
1104:/Users/Administrator/sos-2x/kernel/malloc.c **** 		}
1105:/Users/Administrator/sos-2x/kernel/malloc.c **** 	}
1106:/Users/Administrator/sos-2x/kernel/malloc.c **** 	
1107:/Users/Administrator/sos-2x/kernel/malloc.c **** 	DEBUG_GC("allocate memory: mod_memmap_cnt = %d\n", mod_memmap_cnt);
1108:/Users/Administrator/sos-2x/kernel/malloc.c **** 	//
1109:/Users/Administrator/sos-2x/kernel/malloc.c **** 	// Allocate memory
1110:/Users/Administrator/sos-2x/kernel/malloc.c **** 	//
1111:/Users/Administrator/sos-2x/kernel/malloc.c **** 	if( mod_memmap_cnt < MEM_MOD_GC_STACK_SIZE ) {
1112:/Users/Administrator/sos-2x/kernel/malloc.c **** 		mod_memmap = mod_memmap_buf;
1113:/Users/Administrator/sos-2x/kernel/malloc.c **** 		mod_gc_stack = mod_gc_stack_buf;
1114:/Users/Administrator/sos-2x/kernel/malloc.c **** 	} else {
1115:/Users/Administrator/sos-2x/kernel/malloc.c **** 		mod_memmap = ker_malloc( sizeof(Block*) * mod_memmap_cnt, KER_MEM_PID );
1116:/Users/Administrator/sos-2x/kernel/malloc.c **** 		if( mod_memmap == NULL ) {
1117:/Users/Administrator/sos-2x/kernel/malloc.c **** 			LEAVE_CRITICAL_SECTION();
1118:/Users/Administrator/sos-2x/kernel/malloc.c **** 			DEBUG_GC("no memory\n");
1119:/Users/Administrator/sos-2x/kernel/malloc.c **** 			return 0;
1120:/Users/Administrator/sos-2x/kernel/malloc.c **** 		}
1121:/Users/Administrator/sos-2x/kernel/malloc.c **** 		
1122:/Users/Administrator/sos-2x/kernel/malloc.c **** 		mod_gc_stack = ker_malloc( sizeof(Block*) * mod_memmap_cnt, KER_MEM_PID );
1123:/Users/Administrator/sos-2x/kernel/malloc.c **** 		if( mod_gc_stack == NULL ) {
1124:/Users/Administrator/sos-2x/kernel/malloc.c **** 			ker_free( mod_memmap );
1125:/Users/Administrator/sos-2x/kernel/malloc.c **** 			LEAVE_CRITICAL_SECTION();
1126:/Users/Administrator/sos-2x/kernel/malloc.c **** 			DEBUG_GC("no memory\n");
1127:/Users/Administrator/sos-2x/kernel/malloc.c **** 			return 0;
1128:/Users/Administrator/sos-2x/kernel/malloc.c **** 		}
1129:/Users/Administrator/sos-2x/kernel/malloc.c **** 	}
1130:/Users/Administrator/sos-2x/kernel/malloc.c **** 	
1131:/Users/Administrator/sos-2x/kernel/malloc.c **** 	//
1132:/Users/Administrator/sos-2x/kernel/malloc.c **** 	// Get all blocks in place
1133:/Users/Administrator/sos-2x/kernel/malloc.c **** 	//
1134:/Users/Administrator/sos-2x/kernel/malloc.c **** 	DEBUG_GC("get all blocks in place\n");
1135:/Users/Administrator/sos-2x/kernel/malloc.c **** 	for (block = (Block*)malloc_heap, mod_memmap_cnt = 0; 
1136:/Users/Administrator/sos-2x/kernel/malloc.c ****        block != mSentinel && block >= malloc_heap && block < &(malloc_heap[NUM_HEAP_BLOCKS]); 
1137:/Users/Administrator/sos-2x/kernel/malloc.c ****        block += block->blockhdr.blocks & ~MEM_MASK) 
1138:/Users/Administrator/sos-2x/kernel/malloc.c ****     {
1139:/Users/Administrator/sos-2x/kernel/malloc.c **** 		if ( (block->blockhdr.owner == pid) &&
1140:/Users/Administrator/sos-2x/kernel/malloc.c **** 		((block->blockhdr.blocks & RESERVED) != 0) ) {
1141:/Users/Administrator/sos-2x/kernel/malloc.c **** 			block->blockhdr.blocks &= ~GC_MARK;
1142:/Users/Administrator/sos-2x/kernel/malloc.c **** 			mod_memmap[mod_memmap_cnt] = block;
1143:/Users/Administrator/sos-2x/kernel/malloc.c **** 			mod_memmap_cnt++;
1144:/Users/Administrator/sos-2x/kernel/malloc.c **** #ifdef SOS_PROFILE_FRAGMENTATION
1145:/Users/Administrator/sos-2x/kernel/malloc.c **** 			num_bytes_gc += BLOCKS_TO_BYTES(block->blockhdr.blocks);
1146:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif
1147:/Users/Administrator/sos-2x/kernel/malloc.c **** 		}
1148:/Users/Administrator/sos-2x/kernel/malloc.c **** 	}
1149:/Users/Administrator/sos-2x/kernel/malloc.c **** 	LEAVE_CRITICAL_SECTION();
1150:/Users/Administrator/sos-2x/kernel/malloc.c **** #ifdef SOS_PROFILE_FRAGMENTATION
1151:/Users/Administrator/sos-2x/kernel/malloc.c **** 	mf.gc_bytes = num_bytes_gc;
1152:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif
1153:/Users/Administrator/sos-2x/kernel/malloc.c **** 	
1154:/Users/Administrator/sos-2x/kernel/malloc.c **** 	//
1155:/Users/Administrator/sos-2x/kernel/malloc.c **** 	// Use module state as the root
1156:/Users/Administrator/sos-2x/kernel/malloc.c **** 	//
1157:/Users/Administrator/sos-2x/kernel/malloc.c **** 	mod_gc_stack[0] = TO_BLOCK_PTR(mcb->handler_state);
1158:/Users/Administrator/sos-2x/kernel/malloc.c **** 	//
1159:/Users/Administrator/sos-2x/kernel/malloc.c **** 	// Mark this item checked
1160:/Users/Administrator/sos-2x/kernel/malloc.c **** 	//
1161:/Users/Administrator/sos-2x/kernel/malloc.c **** 	(mod_gc_stack[0])->blockhdr.blocks |= GC_MARK;
1162:/Users/Administrator/sos-2x/kernel/malloc.c **** 	mod_stack_sp = 1;
1163:/Users/Administrator/sos-2x/kernel/malloc.c **** 	
1164:/Users/Administrator/sos-2x/kernel/malloc.c **** 	//
1165:/Users/Administrator/sos-2x/kernel/malloc.c **** 	// Run until all items in the stack is checked
1166:/Users/Administrator/sos-2x/kernel/malloc.c **** 	//
1167:/Users/Administrator/sos-2x/kernel/malloc.c **** 	DEBUG_GC("Mark memory\n");
1168:/Users/Administrator/sos-2x/kernel/malloc.c **** 	while( mod_stack_sp != 0 ) {
1169:/Users/Administrator/sos-2x/kernel/malloc.c **** 		uint16_t mem_size; // memory size to check 
1170:/Users/Administrator/sos-2x/kernel/malloc.c **** 		uint16_t i;
1171:/Users/Administrator/sos-2x/kernel/malloc.c **** 		uint8_t *userPart;
1172:/Users/Administrator/sos-2x/kernel/malloc.c **** 		
1173:/Users/Administrator/sos-2x/kernel/malloc.c **** 		mod_stack_sp--;
1174:/Users/Administrator/sos-2x/kernel/malloc.c **** 		block = mod_gc_stack[ mod_stack_sp ];
1175:/Users/Administrator/sos-2x/kernel/malloc.c **** 		
1176:/Users/Administrator/sos-2x/kernel/malloc.c **** 		mem_size = BLOCKS_TO_BYTES( block->blockhdr.blocks );
1177:/Users/Administrator/sos-2x/kernel/malloc.c **** 		userPart = block->userPart;
1178:/Users/Administrator/sos-2x/kernel/malloc.c **** 		
1179:/Users/Administrator/sos-2x/kernel/malloc.c **** 		for( i = 0; i < mem_size; i++ ) {
1180:/Users/Administrator/sos-2x/kernel/malloc.c **** 			void *pntr;
1181:/Users/Administrator/sos-2x/kernel/malloc.c **** 			uint8_t j;
1182:/Users/Administrator/sos-2x/kernel/malloc.c **** 			//
1183:/Users/Administrator/sos-2x/kernel/malloc.c **** 			// treated as double pointers
1184:/Users/Administrator/sos-2x/kernel/malloc.c **** 			//
1185:/Users/Administrator/sos-2x/kernel/malloc.c **** 			pntr = *((uint8_t**)(userPart + i));
1186:/Users/Administrator/sos-2x/kernel/malloc.c **** 			
1187:/Users/Administrator/sos-2x/kernel/malloc.c **** 			//
1188:/Users/Administrator/sos-2x/kernel/malloc.c **** 			// Check against the memmap
1189:/Users/Administrator/sos-2x/kernel/malloc.c **** 			//
1190:/Users/Administrator/sos-2x/kernel/malloc.c **** 			for( j = 0; j < mod_memmap_cnt; j++ ) {
1191:/Users/Administrator/sos-2x/kernel/malloc.c **** 				if( pntr == (mod_memmap[j])->userPart ) {
1192:/Users/Administrator/sos-2x/kernel/malloc.c **** 					if( (((mod_memmap[j])->blockhdr.blocks) & GC_MARK) == 0 ) {
1193:/Users/Administrator/sos-2x/kernel/malloc.c **** 						// found a match, added to sp
1194:/Users/Administrator/sos-2x/kernel/malloc.c **** 						DEBUG_GC("Found a match addr: %d index: %d, value: %d\n", (int)userPart, (int) i, (int)pntr);
1195:/Users/Administrator/sos-2x/kernel/malloc.c **** 						(mod_memmap[j])->blockhdr.blocks |= GC_MARK;
1196:/Users/Administrator/sos-2x/kernel/malloc.c **** 						mod_gc_stack[ mod_stack_sp ] = mod_memmap[j];
1197:/Users/Administrator/sos-2x/kernel/malloc.c **** 						mod_stack_sp++;
1198:/Users/Administrator/sos-2x/kernel/malloc.c **** 					}
1199:/Users/Administrator/sos-2x/kernel/malloc.c **** 				}
1200:/Users/Administrator/sos-2x/kernel/malloc.c **** 			}
1201:/Users/Administrator/sos-2x/kernel/malloc.c **** 		}
1202:/Users/Administrator/sos-2x/kernel/malloc.c **** 	}
1203:/Users/Administrator/sos-2x/kernel/malloc.c **** 	
1204:/Users/Administrator/sos-2x/kernel/malloc.c **** 	DEBUG_GC("do module GC\n");
1205:/Users/Administrator/sos-2x/kernel/malloc.c **** 	//
1206:/Users/Administrator/sos-2x/kernel/malloc.c **** 	// Now do GC
1207:/Users/Administrator/sos-2x/kernel/malloc.c **** 	//
1208:/Users/Administrator/sos-2x/kernel/malloc.c **** 	{
1209:/Users/Administrator/sos-2x/kernel/malloc.c **** 		uint8_t k;
1210:/Users/Administrator/sos-2x/kernel/malloc.c **** 		
1211:/Users/Administrator/sos-2x/kernel/malloc.c **** 		for( k = 0; k < mod_memmap_cnt; k++ ) {
1212:/Users/Administrator/sos-2x/kernel/malloc.c **** 			if( ((mod_memmap[k])->blockhdr.blocks & GC_MARK) == 0 ) {
1213:/Users/Administrator/sos-2x/kernel/malloc.c **** 				// found leak...
1214:/Users/Administrator/sos-2x/kernel/malloc.c **** 				DEBUG_GC("Found memory leak: %d\n", (int) (mod_memmap[k])->userPart);
1215:/Users/Administrator/sos-2x/kernel/malloc.c **** 				num_leaks++;
1216:/Users/Administrator/sos-2x/kernel/malloc.c **** 				ker_free( (mod_memmap[k])->userPart );
1217:/Users/Administrator/sos-2x/kernel/malloc.c **** 			} else {
1218:/Users/Administrator/sos-2x/kernel/malloc.c **** 				(mod_memmap[k])->blockhdr.blocks &= ~GC_MARK;
1219:/Users/Administrator/sos-2x/kernel/malloc.c **** 			}
1220:/Users/Administrator/sos-2x/kernel/malloc.c **** 		} 
1221:/Users/Administrator/sos-2x/kernel/malloc.c **** 	}
1222:/Users/Administrator/sos-2x/kernel/malloc.c **** 	
1223:/Users/Administrator/sos-2x/kernel/malloc.c **** 	DEBUG_GC("memory cleanup\n");
1224:/Users/Administrator/sos-2x/kernel/malloc.c **** 	//
1225:/Users/Administrator/sos-2x/kernel/malloc.c **** 	// Clean up
1226:/Users/Administrator/sos-2x/kernel/malloc.c **** 	//
1227:/Users/Administrator/sos-2x/kernel/malloc.c **** 	if( mod_memmap_cnt >= MEM_MOD_GC_STACK_SIZE ) {
1228:/Users/Administrator/sos-2x/kernel/malloc.c **** 		ker_free( mod_memmap );
1229:/Users/Administrator/sos-2x/kernel/malloc.c **** 		ker_free( mod_gc_stack );
1230:/Users/Administrator/sos-2x/kernel/malloc.c **** 	}
1231:/Users/Administrator/sos-2x/kernel/malloc.c **** 	return num_leaks;
1232:/Users/Administrator/sos-2x/kernel/malloc.c **** #else
1233:/Users/Administrator/sos-2x/kernel/malloc.c **** 	return 0;
1234:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif	
1235:/Users/Administrator/sos-2x/kernel/malloc.c **** }
 1776               	.LM164:
 1777 066e 80E0      		ldi r24,lo8(0)
 1778 0670 90E0      		ldi r25,hi8(0)
 1779               	/* epilogue: frame size=0 */
 1780 0672 0895      		ret
 1781               	/* epilogue end (size=1) */
 1782               	/* function malloc_gc_module size 3 (2) */
 1784               	.Lscope15:
 1788               	.global	ker_sys_malloc
 1790               	ker_sys_malloc:
1236:/Users/Administrator/sos-2x/kernel/malloc.c **** 
1237:/Users/Administrator/sos-2x/kernel/malloc.c **** #ifdef SOS_DEBUG_MALLOC
1238:/Users/Administrator/sos-2x/kernel/malloc.c **** #ifndef SOS_SFI
1239:/Users/Administrator/sos-2x/kernel/malloc.c **** static void printMem(char* s)
1240:/Users/Administrator/sos-2x/kernel/malloc.c **** {
1241:/Users/Administrator/sos-2x/kernel/malloc.c ****   Block* block;
1242:/Users/Administrator/sos-2x/kernel/malloc.c ****   int i = 0;
1243:/Users/Administrator/sos-2x/kernel/malloc.c **** 
1244:/Users/Administrator/sos-2x/kernel/malloc.c ****   DEBUG("%s\n", s);
1245:/Users/Administrator/sos-2x/kernel/malloc.c ****   for (block = mSentinel->next; block != mSentinel && block < &(malloc_heap[NUM_HEAP_BLOCKS]) && bl
1246:/Users/Administrator/sos-2x/kernel/malloc.c ****   block = block->next)
1247:/Users/Administrator/sos-2x/kernel/malloc.c ****     {
1248:/Users/Administrator/sos-2x/kernel/malloc.c ****       /*
1249:/Users/Administrator/sos-2x/kernel/malloc.c **** 	if(block->blockhdr.owner != BLOCK_GUARD_BYTE(block)) {
1250:/Users/Administrator/sos-2x/kernel/malloc.c **** 	DEBUG("detect memory corruption in PrintMem\n");
1251:/Users/Administrator/sos-2x/kernel/malloc.c **** 	DEBUG("possible owner %d %d\n", block->blockhdr.owner, BLOCK_GUARD_BYTE(block));
1252:/Users/Administrator/sos-2x/kernel/malloc.c **** 	} else {
1253:/Users/Administrator/sos-2x/kernel/malloc.c ****       */
1254:/Users/Administrator/sos-2x/kernel/malloc.c ****       DEBUG("block %d : block: %x, prev : %x, next : %x, blocks : %d\n", i,
1255:/Users/Administrator/sos-2x/kernel/malloc.c **** 	    (unsigned int) block, 
1256:/Users/Administrator/sos-2x/kernel/malloc.c **** 	    (unsigned int) block->prev, 
1257:/Users/Administrator/sos-2x/kernel/malloc.c **** 	    (unsigned int) block->next, 
1258:/Users/Administrator/sos-2x/kernel/malloc.c **** 	    (unsigned int) block->blockhdr.blocks);	
1259:/Users/Administrator/sos-2x/kernel/malloc.c ****       //}
1260:/Users/Administrator/sos-2x/kernel/malloc.c ****       i++;
1261:/Users/Administrator/sos-2x/kernel/malloc.c ****     }
1262:/Users/Administrator/sos-2x/kernel/malloc.c ****   DEBUG("Memory Map:\n");
1263:/Users/Administrator/sos-2x/kernel/malloc.c ****   block = (Block*)malloc_heap;
1264:/Users/Administrator/sos-2x/kernel/malloc.c ****   i = 0;
1265:/Users/Administrator/sos-2x/kernel/malloc.c ****   while(block != mSentinel && block >= malloc_heap && block < &(malloc_heap[NUM_HEAP_BLOCKS])) {
1266:/Users/Administrator/sos-2x/kernel/malloc.c ****     DEBUG("block %d : addr: %x size: %d alloc: %d owner: %d check %d\n", i++, 
1267:/Users/Administrator/sos-2x/kernel/malloc.c **** 	  (unsigned int) block, 
1268:/Users/Administrator/sos-2x/kernel/malloc.c **** 	  (unsigned int) (block->blockhdr.blocks & ~MEM_MASK), 
1269:/Users/Administrator/sos-2x/kernel/malloc.c **** 	  (unsigned int) (block->blockhdr.blocks & RESERVED)? 1 : 0, 
1270:/Users/Administrator/sos-2x/kernel/malloc.c **** 	  (unsigned int) block->blockhdr.owner,
1271:/Users/Administrator/sos-2x/kernel/malloc.c **** 	  (unsigned int) BLOCK_GUARD_BYTE(block));
1272:/Users/Administrator/sos-2x/kernel/malloc.c **** 	if( (block->blockhdr.blocks & ~MEM_MASK) == 0 ) {
1273:/Users/Administrator/sos-2x/kernel/malloc.c **** 		DEBUG("blocks is zero\n");
1274:/Users/Administrator/sos-2x/kernel/malloc.c **** 		exit(1);
1275:/Users/Administrator/sos-2x/kernel/malloc.c **** 	}
1276:/Users/Administrator/sos-2x/kernel/malloc.c ****     block += block->blockhdr.blocks & ~MEM_MASK;
1277:/Users/Administrator/sos-2x/kernel/malloc.c ****   }
1278:/Users/Administrator/sos-2x/kernel/malloc.c **** 
1279:/Users/Administrator/sos-2x/kernel/malloc.c **** }
1280:/Users/Administrator/sos-2x/kernel/malloc.c **** #else
1281:/Users/Administrator/sos-2x/kernel/malloc.c **** static void printMem(char* s)
1282:/Users/Administrator/sos-2x/kernel/malloc.c **** {
1283:/Users/Administrator/sos-2x/kernel/malloc.c ****   Block* block;
1284:/Users/Administrator/sos-2x/kernel/malloc.c ****   int i = 0;
1285:/Users/Administrator/sos-2x/kernel/malloc.c **** 
1286:/Users/Administrator/sos-2x/kernel/malloc.c ****   DEBUG("%s\n", s);
1287:/Users/Administrator/sos-2x/kernel/malloc.c ****   for (block = mSentinel->next; block != mSentinel; block = block->next){
1288:/Users/Administrator/sos-2x/kernel/malloc.c ****     DEBUG("Block %d : Addr: %x, Prev : %x, Next : %x, Blocks : %d\n", i++, (uint32_t)block, (uint32
1289:/Users/Administrator/sos-2x/kernel/malloc.c ****   }
1290:/Users/Administrator/sos-2x/kernel/malloc.c ****   DEBUG("Memory Map:\n");
1291:/Users/Administrator/sos-2x/kernel/malloc.c ****   block = (Block*)malloc_heap;
1292:/Users/Administrator/sos-2x/kernel/malloc.c ****   i = 0;
1293:/Users/Administrator/sos-2x/kernel/malloc.c ****   while(block != mSentinel) {
1294:/Users/Administrator/sos-2x/kernel/malloc.c ****     DEBUG("block %d : Addr: %x size: %d alloc: %d owner: %d\n", i++, (uint32_t)block, block->blockh
1295:/Users/Administrator/sos-2x/kernel/malloc.c ****     block += block->blockhdr.blocks & ~MEM_MASK;
1296:/Users/Administrator/sos-2x/kernel/malloc.c ****   }
1297:/Users/Administrator/sos-2x/kernel/malloc.c **** }
1298:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif // SOS_SFI
1299:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif
1300:/Users/Administrator/sos-2x/kernel/malloc.c **** 
1301:/Users/Administrator/sos-2x/kernel/malloc.c **** #ifdef SOS_PROFILE_FRAGMENTATION
1302:/Users/Administrator/sos-2x/kernel/malloc.c **** static void malloc_record_efrag(uint16_t b)
1303:/Users/Administrator/sos-2x/kernel/malloc.c **** {
1304:/Users/Administrator/sos-2x/kernel/malloc.c **** 	mf.malloc_efrag = b << SHIFT_VALUE;
1305:/Users/Administrator/sos-2x/kernel/malloc.c **** }
1306:/Users/Administrator/sos-2x/kernel/malloc.c **** 
1307:/Users/Administrator/sos-2x/kernel/malloc.c **** static void malloc_record_ifrag(Block *b, uint16_t size, sos_pid_t id)
1308:/Users/Administrator/sos-2x/kernel/malloc.c **** {
1309:/Users/Administrator/sos-2x/kernel/malloc.c **** 	mf.malloc_ifrag = ((b->blockhdr.blocks << SHIFT_VALUE) - (size + BLOCKOVERHEAD));    
1310:/Users/Administrator/sos-2x/kernel/malloc.c **** 	mf.alloc = size;
1311:/Users/Administrator/sos-2x/kernel/malloc.c **** 	mf.alloc_pid = id;
1312:/Users/Administrator/sos-2x/kernel/malloc.c **** 
1313:/Users/Administrator/sos-2x/kernel/malloc.c **** }
1314:/Users/Administrator/sos-2x/kernel/malloc.c **** 
1315:/Users/Administrator/sos-2x/kernel/malloc.c **** static void malloc_record_blocks(int16_t blks)
1316:/Users/Administrator/sos-2x/kernel/malloc.c **** {
1317:/Users/Administrator/sos-2x/kernel/malloc.c **** 	mf.num_blocks += blks;
1318:/Users/Administrator/sos-2x/kernel/malloc.c **** }
1319:/Users/Administrator/sos-2x/kernel/malloc.c **** 
1320:/Users/Administrator/sos-2x/kernel/malloc.c **** static void malloc_record_outstanding(int8_t alloc)
1321:/Users/Administrator/sos-2x/kernel/malloc.c **** {
1322:/Users/Administrator/sos-2x/kernel/malloc.c **** 	if( alloc ) {
1323:/Users/Administrator/sos-2x/kernel/malloc.c **** 		mf.num_outstanding++;
1324:/Users/Administrator/sos-2x/kernel/malloc.c **** 	} else {
1325:/Users/Administrator/sos-2x/kernel/malloc.c **** 		mf.num_outstanding--;
1326:/Users/Administrator/sos-2x/kernel/malloc.c **** 	}
1327:/Users/Administrator/sos-2x/kernel/malloc.c **** 	
1328:/Users/Administrator/sos-2x/kernel/malloc.c **** }
1329:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif
1330:/Users/Administrator/sos-2x/kernel/malloc.c **** 
1331:/Users/Administrator/sos-2x/kernel/malloc.c **** void* ker_sys_malloc(uint16_t size)
1332:/Users/Administrator/sos-2x/kernel/malloc.c **** {    
 1792               	.LM165:
 1793               	/* prologue: frame size=0 */
 1794 0674 FF92      		push r15
 1795 0676 0F93      		push r16
 1796 0678 1F93      		push r17
 1797 067a CF93      		push r28
 1798 067c DF93      		push r29
 1799               	/* prologue end (size=5) */
 1800 067e 8C01      		movw r16,r24
1333:/Users/Administrator/sos-2x/kernel/malloc.c ****   sos_pid_t my_id = ker_get_current_pid();    
 1802               	.LM166:
 1803 0680 0E94 0000 		call ker_get_current_pid
 1804 0684 F82E      		mov r15,r24
1334:/Users/Administrator/sos-2x/kernel/malloc.c ****   void *ret = sos_blk_mem_alloc(size, my_id, true);    
 1806               	.LM167:
 1807 0686 41E0      		ldi r20,lo8(1)
 1808 0688 682F      		mov r22,r24
 1809 068a C801      		movw r24,r16
 1810 068c 0E94 0000 		call sos_blk_mem_alloc
 1811 0690 EC01      		movw r28,r24
1335:/Users/Administrator/sos-2x/kernel/malloc.c ****   if( ret != NULL ) {        
 1813               	.LM168:
 1814 0692 892B      		or r24,r25
 1815 0694 41F4      		brne .L113
1336:/Users/Administrator/sos-2x/kernel/malloc.c ****     return ret;    
1337:/Users/Administrator/sos-2x/kernel/malloc.c ****   }    
1338:/Users/Administrator/sos-2x/kernel/malloc.c ****   if( size == 0 ) {
 1817               	.LM169:
 1818 0696 0115      		cp r16,__zero_reg__
 1819 0698 1105      		cpc r17,__zero_reg__
 1820 069a 11F4      		brne .L112
1339:/Users/Administrator/sos-2x/kernel/malloc.c **** 	return NULL;
 1822               	.LM170:
 1823 069c C801      		movw r24,r16
 1824 069e 04C0      		rjmp .L110
 1825               	.L112:
1340:/Users/Administrator/sos-2x/kernel/malloc.c ****   }
1341:/Users/Administrator/sos-2x/kernel/malloc.c **** #ifndef SOS_TEST_SUITE
1342:/Users/Administrator/sos-2x/kernel/malloc.c ****   ker_mod_panic(my_id);    
 1827               	.LM171:
 1828 06a0 8F2D      		mov r24,r15
 1829 06a2 0E94 0000 		call ker_mod_panic
 1830               	.L113:
1343:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif
1344:/Users/Administrator/sos-2x/kernel/malloc.c ****   return NULL;
 1832               	.LM172:
 1833 06a6 CE01      		movw r24,r28
 1834               	.L110:
 1835               	/* epilogue: frame size=0 */
 1836 06a8 DF91      		pop r29
 1837 06aa CF91      		pop r28
 1838 06ac 1F91      		pop r17
 1839 06ae 0F91      		pop r16
 1840 06b0 FF90      		pop r15
 1841 06b2 0895      		ret
 1842               	/* epilogue end (size=6) */
 1843               	/* function ker_sys_malloc size 32 (21) */
 1849               	.Lscope16:
 1854               	.global	ker_sys_realloc
 1856               	ker_sys_realloc:
1345:/Users/Administrator/sos-2x/kernel/malloc.c **** }
1346:/Users/Administrator/sos-2x/kernel/malloc.c **** 
1347:/Users/Administrator/sos-2x/kernel/malloc.c **** void* ker_sys_realloc(void* pntr, uint16_t newSize)
1348:/Users/Administrator/sos-2x/kernel/malloc.c **** {
 1858               	.LM173:
 1859               	/* prologue: frame size=0 */
 1860 06b4 0F93      		push r16
 1861 06b6 1F93      		push r17
 1862 06b8 CF93      		push r28
 1863 06ba DF93      		push r29
 1864               	/* prologue end (size=4) */
 1865 06bc 8B01      		movw r16,r22
1349:/Users/Administrator/sos-2x/kernel/malloc.c ****   void *ret = sos_blk_mem_realloc(pntr, newSize, true);
 1867               	.LM174:
 1868 06be 41E0      		ldi r20,lo8(1)
 1869 06c0 0E94 0000 		call sos_blk_mem_realloc
 1870 06c4 EC01      		movw r28,r24
1350:/Users/Administrator/sos-2x/kernel/malloc.c ****   if( ret != NULL ) {
 1872               	.LM175:
 1873 06c6 892B      		or r24,r25
 1874 06c8 49F4      		brne .L117
1351:/Users/Administrator/sos-2x/kernel/malloc.c ****     return ret;
1352:/Users/Administrator/sos-2x/kernel/malloc.c ****   }
1353:/Users/Administrator/sos-2x/kernel/malloc.c ****   if( newSize == 0 ) {
 1876               	.LM176:
 1877 06ca 0115      		cp r16,__zero_reg__
 1878 06cc 1105      		cpc r17,__zero_reg__
 1879 06ce 11F4      		brne .L116
1354:/Users/Administrator/sos-2x/kernel/malloc.c **** 	return NULL;
 1881               	.LM177:
 1882 06d0 B801      		movw r22,r16
 1883 06d2 05C0      		rjmp .L114
 1884               	.L116:
1355:/Users/Administrator/sos-2x/kernel/malloc.c ****   }
1356:/Users/Administrator/sos-2x/kernel/malloc.c **** #ifndef SOS_TEST_SUITE
1357:/Users/Administrator/sos-2x/kernel/malloc.c ****   ker_mod_panic(ker_get_current_pid());
 1886               	.LM178:
 1887 06d4 0E94 0000 		call ker_get_current_pid
 1888 06d8 0E94 0000 		call ker_mod_panic
 1889               	.L117:
1358:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif
1359:/Users/Administrator/sos-2x/kernel/malloc.c ****   return NULL;
 1891               	.LM179:
 1892 06dc BE01      		movw r22,r28
 1893               	.L114:
1360:/Users/Administrator/sos-2x/kernel/malloc.c **** }
 1895               	.LM180:
 1896 06de CB01      		movw r24,r22
 1897               	/* epilogue: frame size=0 */
 1898 06e0 DF91      		pop r29
 1899 06e2 CF91      		pop r28
 1900 06e4 1F91      		pop r17
 1901 06e6 0F91      		pop r16
 1902 06e8 0895      		ret
 1903               	/* epilogue end (size=5) */
 1904               	/* function ker_sys_realloc size 27 (18) */
 1909               	.Lscope17:
 1913               	.global	ker_sys_free
 1915               	ker_sys_free:
1361:/Users/Administrator/sos-2x/kernel/malloc.c **** 
1362:/Users/Administrator/sos-2x/kernel/malloc.c **** void ker_sys_free(void *pntr) 
1363:/Users/Administrator/sos-2x/kernel/malloc.c **** {
 1917               	.LM181:
 1918               	/* prologue: frame size=0 */
 1919               	/* prologue end (size=0) */
1364:/Users/Administrator/sos-2x/kernel/malloc.c ****   sos_blk_mem_free(pntr, true);
 1921               	.LM182:
 1922 06ea 61E0      		ldi r22,lo8(1)
 1923 06ec 0E94 0000 		call sos_blk_mem_free
 1924               	/* epilogue: frame size=0 */
 1925 06f0 0895      		ret
 1926               	/* epilogue end (size=1) */
 1927               	/* function ker_sys_free size 4 (3) */
 1929               	.Lscope18:
 1933               	.global	ker_sys_change_own
 1935               	ker_sys_change_own:
1365:/Users/Administrator/sos-2x/kernel/malloc.c **** }	
1366:/Users/Administrator/sos-2x/kernel/malloc.c **** 
1367:/Users/Administrator/sos-2x/kernel/malloc.c **** int8_t ker_sys_change_own( void* ptr )
1368:/Users/Administrator/sos-2x/kernel/malloc.c **** {
 1937               	.LM183:
 1938               	/* prologue: frame size=0 */
 1939 06f2 0F93      		push r16
 1940 06f4 1F93      		push r17
 1941 06f6 CF93      		push r28
 1942               	/* prologue end (size=3) */
 1943 06f8 8C01      		movw r16,r24
1369:/Users/Administrator/sos-2x/kernel/malloc.c ****   sos_pid_t my_id = ker_get_current_pid();    
 1945               	.LM184:
 1946 06fa 0E94 0000 		call ker_get_current_pid
 1947 06fe C82F      		mov r28,r24
1370:/Users/Administrator/sos-2x/kernel/malloc.c ****   if( SOS_OK != sos_blk_mem_change_own( ptr, my_id, true ) ) {
 1949               	.LM185:
 1950 0700 41E0      		ldi r20,lo8(1)
 1951 0702 682F      		mov r22,r24
 1952 0704 C801      		movw r24,r16
 1953 0706 0E94 0000 		call sos_blk_mem_change_own
 1954 070a 8823      		tst r24
 1955 070c 19F0      		breq .L120
1371:/Users/Administrator/sos-2x/kernel/malloc.c **** #ifndef SOS_TEST_SUITE
1372:/Users/Administrator/sos-2x/kernel/malloc.c **** 	ker_mod_panic(my_id);
 1957               	.LM186:
 1958 070e 8C2F      		mov r24,r28
 1959 0710 0E94 0000 		call ker_mod_panic
 1960               	.L120:
1373:/Users/Administrator/sos-2x/kernel/malloc.c **** #else
1374:/Users/Administrator/sos-2x/kernel/malloc.c **** 	return -EINVAL;
1375:/Users/Administrator/sos-2x/kernel/malloc.c **** #endif
1376:/Users/Administrator/sos-2x/kernel/malloc.c ****   }
1377:/Users/Administrator/sos-2x/kernel/malloc.c ****   return SOS_OK;
1378:/Users/Administrator/sos-2x/kernel/malloc.c **** }
 1962               	.LM187:
 1963 0714 80E0      		ldi r24,lo8(0)
 1964 0716 90E0      		ldi r25,hi8(0)
 1965               	/* epilogue: frame size=0 */
 1966 0718 CF91      		pop r28
 1967 071a 1F91      		pop r17
 1968 071c 0F91      		pop r16
 1969 071e 0895      		ret
 1970               	/* epilogue end (size=4) */
 1971               	/* function ker_sys_change_own size 23 (16) */
 1976               	.Lscope19:
 1978               		.lcomm mPool,2
 1979               		.lcomm mSentinel,2
 1980               		.lcomm malloc_heap,2048
 1984               		.text
 1986               	Letext:
 1987               	/* File "/Users/Administrator/sos-2x/kernel/malloc.c": code  963 = 0x03c3 ( 825), prologues  59, ep
DEFINED SYMBOLS
                            *ABS*:00000000 malloc.c
                            *ABS*:0000003f __SREG__
                            *ABS*:0000003e __SP_H__
                            *ABS*:0000003d __SP_L__
                            *ABS*:00000000 __tmp_reg__
                            *ABS*:00000001 __zero_reg__
/var/tmp//ccYBIsAm.s:307    .text:00000000 sos_blk_mem_change_own
/var/tmp//ccYBIsAm.s:1979   .bss:00000004 malloc_heap
/var/tmp//ccYBIsAm.s:389    .text:00000056 Unlink
/var/tmp//ccYBIsAm.s:425    .text:0000007a MergeBlocks
/var/tmp//ccYBIsAm.s:496    .text:000000c6 sos_blk_mem_longterm_alloc
/var/tmp//ccYBIsAm.s:1978   .bss:00000002 mSentinel
/var/tmp//ccYBIsAm.s:711    .text:000001d0 InsertAfter
/var/tmp//ccYBIsAm.s:776    .text:00000214 SplitBlock
/var/tmp//ccYBIsAm.s:833    .text:0000024c sos_blk_mem_alloc
/var/tmp//ccYBIsAm.s:1045   .text:00000354 sos_blk_mem_free
/var/tmp//ccYBIsAm.s:1136   .text:000003b6 mem_start
/var/tmp//ccYBIsAm.s:1152   .text:000003b8 mem_remove_all
/var/tmp//ccYBIsAm.s:1249   .text:00000414 sos_blk_mem_realloc
/var/tmp//ccYBIsAm.s:1472   .text:00000510 mem_init
                             .bss:00000000 mPool
/var/tmp//ccYBIsAm.s:1526   .text:0000055a ker_gc_mark
/var/tmp//ccYBIsAm.s:1639   .text:000005da malloc_gc
/var/tmp//ccYBIsAm.s:1754   .text:0000066c malloc_gc_kernel
/var/tmp//ccYBIsAm.s:1770   .text:0000066e malloc_gc_module
/var/tmp//ccYBIsAm.s:1790   .text:00000674 ker_sys_malloc
/var/tmp//ccYBIsAm.s:1856   .text:000006b4 ker_sys_realloc
/var/tmp//ccYBIsAm.s:1915   .text:000006ea ker_sys_free
/var/tmp//ccYBIsAm.s:1935   .text:000006f2 ker_sys_change_own
/var/tmp//ccYBIsAm.s:1986   .text:00000720 Letext

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
memcpy
ker_get_current_pid
ker_mod_panic
