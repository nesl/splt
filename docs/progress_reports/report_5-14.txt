RFID
Last week
- Completed physical interface between M1-A1(button type RFID receiver) and MicaZ Mote
  Since M1-A1 accepts various input voltage from 1.8V to 5.0V, power from the MicaZ mote is sufficient for the RFID receiver meaning that we don't need external DC power supply for the RFID receiver. 
- Tested barebone software for MicaZ Mote which sends "Start Reading Tag ID" command and forwards it to a PC over RS-232
  

This week
- Merge current barebone RFID UART device driver to SOS
- After merging it, write a slogging software which receives TAG ID from remote RFID motes and sends the data to the sensorbase
- Using the software, conduct the first test deployment

SensorBase
Last week
- We tentatively defined a data structure on the sensor base for our deployment
  1. For power measurement, there are five fields "UID, Appliance ID, Current(A), Watt(W), and TimeStamp"
  2. For RFID, there are three fields "UID, Tag ID, and TimeStamp"
- Wrote Python Slogging module that sends data to the "Power Measurement" table and the "RFID" table. 
- Wrote Python Retrieve module that receives data from the tables in the sensorbase

Energy Measurement
Last week
- Worked with the WuPro to interface through USB port and minicom on a linux
  host
- Worked out the protocol commands and parameters required for the external
  logging application
- Updated the linux based utility supplied by vendor to work with the new
  WuPro (new protocol). The utility currently outputs power measurement
readings once a second.

Next Week
- Interface the linux based utility to the python based slogging module to
  create a test data set
- Get basic protocol working with UART driver on MicaZ (without SOS)
- Write a SOS UART receive side driver (without framing) to interface
  generically to both the RFID and the UART

Preemption:
Last week:
- Got the code written for handling the concurency issues for sos_calls.
- Devised methods for doing a larger scope of preemption on sos.

This week:
- Need to debug the concurency handling.
- Start evaluation on preemption of sos_call.
