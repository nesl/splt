#LyX 1.4.3 created this file. For more info see http://www.lyx.org/
\lyxformat 245
\begin_document
\begin_header
\textclass article
\language english
\inputencoding auto
\fontscheme times
\graphics default
\float_placement h
\paperfontsize 10
\spacing single
\papersize letterpaper
\use_geometry true
\use_amsmath 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\leftmargin 0.75in
\topmargin 1in
\rightmargin 0.75in
\bottommargin 1in
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 2
\paperpagestyle default
\tracking_changes false
\output_changes false
\end_header

\begin_body

\begin_layout Section
Power Measurement
\end_layout

\begin_layout Subsection
Power Meter Selection
\end_layout

\begin_layout Standard
Two units for measuring power consumption have been studied - Veris Hawkeye
 8035/8036 and Watts Up? Pro.
 
\end_layout

\begin_layout Standard
The Veris H8035/8036 device shown in Figure 
\begin_inset LatexCommand \ref{fig:Veris-Hawkeye-8035}

\end_inset

 is a CT based power meter with an RS-485 interface featuring a MODBUS Networked
 kW/kWH Transducer.
 The H8035 and H8036, three-phase power transducers monitor energy parameters
 from Aggregate kW (demand) and kWH (consumption) to power factor per phase.
 The H8035/36 Series combines a microprocessor based power meter and split-core
 instrument grade current transformers (CTs) in a single unit.
 The meter has the ability to sense up to 100 Amps of current with 100mW
 precision at a 6 Hz sampling rate.
 
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Standard
\align center
\begin_inset Graphics
	filename veris8036.png
	lyxscale 25
	height 1.5in

\end_inset


\end_layout

\begin_layout Caption
\begin_inset LatexCommand \label{fig:Veris-Hawkeye-8035}

\end_inset

Veris Hawkeye 8035
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Watts Up? Pro device shown in Figure 
\begin_inset LatexCommand \ref{fig:Watts-Up?-Pro}

\end_inset

 is a consumer friendly power meter that has a USB interface and Windows
 based software to read the meter.
 One simply requires to plug any device into Watts up?, and the meter instantane
ously displays the wattage being used.
 The meter can be used in internal logging mode where it records all the
 data into non-volatile memory.
 The sample rate is user selectable or can be automatically set (resolution
 decreases over time as memory fills up).
 In addition, the meter is capable of real time external logging to a host
 interfaced with the meter.
 The communication protocol is well documented, including a list of commands
 required for real-time logging.
 The maximum sampling rate of the Watts Up? Pro is once per second, with
 a 100mW precision.
 
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Standard
\align center
\begin_inset Graphics
	filename wupro.png
	lyxscale 25
	height 1.5in

\end_inset


\end_layout

\begin_layout Caption
\noindent
\begin_inset LatexCommand \label{fig:Watts-Up?-Pro}

\end_inset

Watts Up? Pro
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The device chosen for current implementation of Spotlight is the Watts Up?
 Pro.
 There are a number of reasons for this.
 Firstly, the Veris device needs to strip off the cable cladding to get
 the clamps on the wires whereas the Watts Up? is plug and play.
 Using the Veris device leads to installation hassles especially when one
 would like to characterize energy consumption of consumer end appliances.
 Second, the Veris device does not have any display, whereas the Watts Up?
 has a simple built-in LCD display.
 Usage of the LCD reduced development time of the communication protocol
 and drivers considerably.
 Thirdly, the Veris device has an RS485 interface for which an independent
 hardware interface circuit would have to be built and tested before any
 other development could begin.
 The interface for Watts Up? is USB, with PC software provided by the manufactur
er.
 This feature expedited the development of the project since it was possible
 to parallelize various parts of the implementation.
 Also, no extra hardware interface circuit would be required, further reducing
 development time.
 In addition, the protocol and code for the Watts Up? Pro are both available
 from the manufacturer.
 Last but not the least, the Veris device is over 6 times more expensive
 than the Watts Up? Pro.
\end_layout

\begin_layout Subsection
Hardware Interfacing
\end_layout

\begin_layout Standard
The only initial concern in using the Watts Up? Pro for Spotlight was the
 USB interface.
 The USB interface poses a problem for the project since the mote being
 used, the MicaZ, does not have a USB interface.
 To circumvent this, one idea was to use a mote with a USB host interface,
 the iMote2.
 However, a quick review revealed that the pins exposed for the USB host
 are present on the advanced 40-pin connector but to use it would require
 to build a small custom board.
 To avoid the delay associated with the custom board design, we sought another
 solution.
\end_layout

\begin_layout Standard
When we studied the Watts Up? Pro device internals, we discovered that the
 USB interface was implemented using a common UART to USB part from Future
 Technology Devices International (FTDI) - FT232RL.
 It seemed possible to bypass the USB host problem entirely by intercepting
 the UART signals directly on the circuit board.
 Further, the voltage levels of the UART on the Watts Up? Pro are 3.3V LVTTL
 rendering it straightforward to interface to a MicaZ mote, which uses the
 same levels.
 
\end_layout

\begin_layout Standard
For power isolation, the Watts Up? Pro uses an Analog Devices ADuM1201 Dual
 Channel Digital Isolator just prior to feeding the UART signals into the
 FT232RL chip.
 Intercepting the UART signals meant connecting the mote between the ADuM1201
 and the FT232RL, requiring to disconnect the tracks between the devices.
 In addition, it was found that the ADUM1201 was powered through the USB
 interface.
 Since the USB port is now disabled, the ADuM1201 has to be powered from
 the mote a drain of about 2mA.
 In summary, the hardware interface from the Watts Up? Pro to the MicaZ
 mote was performed by disconnecting four signals (Vdd, Rx, Tx, Gnd) between
 the ADuM1201 and the FT232RL and connecting those signals to the mote.
 A small custom board is used to connect the signals to the appropriate
 pins on the 51-pin mote connector.
\end_layout

\begin_layout Subsection
Software Interfacing
\end_layout

\begin_layout Standard
In order to interface the Watts Up? Pro with SOS running on the MicaZ mote,
 a new UART driver was needed.
 The current UART driver in the SOS kernel implements a framing based protocol
 architecture assuming that SOS messages flow on the UART channel.
 The Watts Up? Pro on the other hand has its own framing and message structure
 as does the RFID reader described in {section blah}.
 
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Standard
\align center
\begin_inset Graphics
	filename swinterface_z.png
	lyxscale 25
	width 2in

\end_inset


\end_layout

\begin_layout Caption
\begin_inset LatexCommand \label{fig:Raw-UART-Driver}

\end_inset

Raw UART Driver Software Stack
\end_layout

\end_inset

Figure 
\begin_inset LatexCommand \ref{fig:Raw-UART-Driver}

\end_inset

 illustrates the software components developed to implement a custom UART
 driver.
 The driver is implemented as an SOS module, and reuses the UART HAL and
 timers provided within SOS.
 The RFID and PM (power measurement) modules implement device specific protocol
 communication such as device initializaton and message parsing.
 The raw UART module provides a messaging interface to the PM and RFID.
 Each frame received on the UART link is forwarded as an SOS message to
 the highler layer module.
 However, since a raw channel does not provide any explicit framing mechanism,
 some method must be devised to find frame delimiters.
 
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Standard
\align center
\begin_inset Graphics
	filename ifd_z.png
	lyxscale 25
	height 0.4in

\end_inset


\end_layout

\begin_layout Caption
\begin_inset LatexCommand \label{fig:Frames-on-the}

\end_inset

Frames on the raw UART channel 
\end_layout

\end_inset

 Figure 
\begin_inset LatexCommand \ref{fig:Frames-on-the}

\end_inset

 shows how frames typically appear on the UART channel.
 It is noted that frames usually arrive with some minimum delay between
 frames called the inter frame delay or IFD.
 By exploiting this fact, the raw UART module can derive the size of frame.
 
\end_layout

\begin_layout Standard
The UART HAL implements an interrupt service routine that is called on reception
 of every byte on the UART channel.
 The raw UART module restarts a timer with the minimum IFD on every receive
 interrupt.
 The key idea is that if a new byte arrived before the IFD passed, the timer
 would get restarted without firing.
 Thus, when the timer does fire, it implies that a new byte has not been
 received for IFD time, indicating the end of the current frame.
 At this point, the raw UART module bundles up the data it has already received
 for that frame into an SOS message and posts it to one of the higher layer
 modules.
 This is the scheme for data reception, the case for data transmission is
 much simpler.
 The higher layer PM (or RFID) module posts a message to the raw UART module
 indicating the payload should be transmitted on the UART, handled by the
 transmit interrupt service routine.
 This IFD is typically device specific and depends on the baud rate as well
 and thus the raw UART module requires to provide an API to the PM and RFID
 module to access the UART channel correctly.
\end_layout

\begin_layout Standard
An important issue that comes up with very short IFD at high baud rates
 is that the timer API in SOS has a 500+ cycle latency, requring 
\begin_inset Formula $62.5\mu s$
\end_inset

 to complete on an 
\begin_inset Formula $8MHz$
\end_inset

 ATMega128 AVR processor.
 The highest baud rate of 
\begin_inset Formula $115.2kbps$
\end_inset

 interrupts the processor once every 
\begin_inset Formula $86\mu s$
\end_inset

 leaving a small margin for the processor to complete other tasks.
 To circumvent this issue, a couple of methods have been proposed.
 The first mechanism uses the SOS counter API, which has a smaller (50 cycle)
 latency, to measure the time difference between byte interrupts.
 When the time difference between two bytes is found to be greater than
 the IFD, it indicates that a new frame has just begun and the latter byte
 is the first byte of a new frame.
 Note that this method posts a message only after the first byte of a new
 frame and thus the message delivery latency could be unbounded.
 In other words, this mechanism works well when the device connected to
 the UART is generating a constant stream of data frames.
 If, however, the data frames arrive at sporadic intervals a frame is not
 delivered until the next frame has just begun.
 The other issue with this form of system is that since the processor spends
 time posting an SOS message as a new frame is arriving, the message post
 latency has to be less than the interrupt rate.
 The second idea is to exploit some knowledge of the frames, such as header
 or trailer bytes or size (for fixed length frames).
 This last idea was implemented in the Spotlight project and has served
 its purpose well.
\end_layout

\begin_layout Section
Related Work
\end_layout

\begin_layout Subsection
Demand Response Enabling Technology Development - UC Berkeley 
\end_layout

\begin_layout Standard
Demand Response refers to the mechanism by which utility providers can reduce
 the demand for electricity during shortages by setting variable rates based
 on the load with a mechanism for customers to respond to those rates.
 This means that if a customer can defer usage of an appliance to a time
 at which the rate is lower, it would result in a lower cost to the customer
 as well as the utility provider.
 New DR-enabled thermostats are proposed that have metering, communications
 and automatic response mechanisms.
 The new thermostats require the homeowner to program the system once to
 express her preferences for cost versus comfort.
 In addition, appliances include price indicators as familiar red-orange-green
 LEDs to indicate the current price scenario.
 The Berkeley system is deemed fairly close to our measurement of electrical
 energy, but is coarser grained.
 Their system is ?active? in its use of a feedback mechanism, whereas our
 system is designed to be a ?passive? profiling tool for an individual or
 a household.
 The Berkeley system requires communication with the utility provider and
 the provider has access to the energy consumption profile at all times.
 This may lead to privacy concerns.
 
\end_layout

\begin_layout Subsection
Samsung Electronic Company's Smart Building 
\end_layout

\begin_layout Standard
Energy measurement and control system based upon occupancy is not just being
 explored in research but is also being adopted in real life.
 The new building at Samsung Electronic Company Digital Media R&D center,
 opened in Sep.
 2005, is equipped with an RFID based systems for air conditioning and light
 level control.
 Each employee and visitor is required to carry an RFID tag.
 The RFID receivers and back-end systems identify the occupancy level in
 a room based on which the building controls its air conditioning and lighting
 systems.
 This system also helps the authorities track visitors? movements and avoid
 information theft.
 
\end_layout

\begin_layout Standard
In this work, we see that they measure and control the energy consumption
 of sharable electronic appliances.
 The ideas that we would like to explore in this project are similar but
 extend to all appliances that a person may come across.
 
\end_layout

\end_body
\end_document
